[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Semagrams",
    "section": "",
    "text": "Semagrams is a tool for interacting with semantic diagrams. Semantic diagrams are graphical representations of data that have “teeth”; i.e. where there is a formal and machine-readable correspondence between the graphical display and the semantic meaning.\nThe primary component of Semagrams is a Scala.js library that provides components for creating interactive web-based UIs that manipulate semantic diagrams. However, there is also a Julia library that provides a backend that allows Semagrams to interact with Catlab, so that Semagrams can be an interface for scientific computing."
  },
  {
    "objectID": "index.html#entities",
    "href": "index.html#entities",
    "title": "Semagrams",
    "section": "Entities",
    "text": "Entities\nThe core idea behind Semagrams is that most diagrams used in mathematics and science can be seen as describing relationships between logical entities.\nFor instance, a graph has two types of entities: vertices and edges. An edge has two relationships with vertices: it has a source vertex and a target vertex.\nEntities can also have attributes, such as labels or numerical data."
  },
  {
    "objectID": "index.html#sprites",
    "href": "index.html#sprites",
    "title": "Semagrams",
    "section": "Sprites",
    "text": "Sprites\nIn order to display collections of entities and relations on the screen, we assign each type of entity to a graphical representation, which we call a sprite. Then the relationships between the entities constrain how their corresponding sprites are displayed on the screen.\nFor instance, we might assign a circular sprite to each vertex in a graph, and a line to each edge. Then there are constraints that say that one end of the line must be connected to the sprite corresponding to the source of the edge, and the other end must be connected to the sprite corresponding to the target.\nFinally, attributes of an entity translate into graphical properties of the sprites. For instance, a numerical attribute could be translated into the color of the sprite, or a textual attribute into a label for the sprite.\nNote that the mapping from logical descriptions of entities and relations to graphical representations is many-to-one; there are many valid ways to lay out a picture. In Semagrams, we will use both manual layout (dragging the sprites to the desired positions) and automatic layout (running an algorithm to determine some sort of “optimal” layout).\nIn Semagrams Legacy, there were hardcoded and special-cased in certain types of entities and certain corresponding sprite types, for boxes, ports, and wires; one of the innovations of new Semagrams is to treat entities and sprites fully generically."
  },
  {
    "objectID": "index.html#actions",
    "href": "index.html#actions",
    "title": "Semagrams",
    "section": "Actions",
    "text": "Actions\nAnother innovation of new Semagrams is a rich language for describing actions. An action is a description of an interaction with Semagrams, which can include\n\nKeypresses\nMouse movement\nSelection of entities\nCommunication with external APIs (such as Julia)\nAdding/deleting entities\nChanging entity relations\n\nThis action language uses monads in Scala in order to describe complex interactions with ease. For instance, the interaction of creating an edges might be coded as\nfor {\n  _ &lt;- displayPrompt(\"Click on the source\")\n  s &lt;- selectEntity[V]\n  _ &lt;- displayPrompt(\"Click on the target\")\n  t &lt;- selectEntity[V]\n  e &lt;- makeEdge(s,t)\n  _ &lt;- displayPromptTimed(\"Edge created!\", 1)\n} yield e\nCrucially, the action language allows asynchronous interaction to be represented without explicit callbacks or state machines. What selectEntity[V] actually does here is register a callback for the next time that the user clicks on an entity of type V, and when that callback is called, it continues with the rest of the interaction.\nWriting this sort of thing out explicitly would be a huge pain; monads allow us to pretend like these asynchronous calls are in fact synchronous, and the code is simply waiting until the user clicks.\nEssentially, actions form a DSL for scripting Semagrams; this DSL is what will make Semagrams very flexible and capable of rapidly being adapted to different use scenarios."
  },
  {
    "objectID": "docs.html",
    "href": "docs.html",
    "title": "Documentation",
    "section": "",
    "text": "This is my attempt at writing “narrative” documentation for Semagrams. There is also the API docs, which is helpful for reference, but if you are just learning, you should start here.\nThis documentation is primarily focused on new developers of Semagrams itself, not users of Semagrams, but hopefully should be interesting to anyone."
  },
  {
    "objectID": "docs.html#fundamental-concepts",
    "href": "docs.html#fundamental-concepts",
    "title": "Documentation",
    "section": "Fundamental Concepts",
    "text": "Fundamental Concepts\nThere is a fundamental difference between interactive programs and programs which are only meant to compute things. In a program meant simply to compute things, the author of the program decides how the state of the program changes over time. In an interactive program, the state changes in response to user input.\nSemagrams integrates cats-effect and Laminar to tame the complexities of interactivity. In brief, Laminar is used to draw the display and to source events, and cats-effect is used to process events.\nIn the next two sections, I explain why and how each of these work.\n\nReactive Programming (Laminar)\nThe conceptually easiest way of dealing with drawing state is the way that video games work. Namely, you have some state. You can mutate that state at will, and then the state is drawn from scratch every frame.\nHowever, in the browser this doesn’t work so well. This is because reconstructing the html of the UI sixty times a second would be far too slow. We could do a render loop if we worked in a &lt;canvas&gt; or used webGL, but there are actually a lot of very non-trivial features that browsers have for stuff like event handling and text-rendering that would require a lot of work to duplicate. The browser is an extremely advanced rendering engine that does work on the principles above, but interfacing with the browser rendering engine takes a different shape than simply redrawing every frame.\nNamely, interfacing with the browser rendering engine takes the form of mutating the DOM, which is the data structure that HTML is parsed into. But the state of your application is not the state of the DOM. So somehow, you have to keep the state of your application in sync with the state of the DOM, in a way that is not “recreate the DOM from scratch 60 times a second”.\nThere are several ways of doing this. The first way, popular in the late 2000s and early 2010s, was to manually write functions that would update the DOM. This had the advantage of being fast, but was extremely hard to architect at a large scale.\nThis gave way in the early 2010s to another approach, pioneered by frameworks like React, which was to render your entire application state into what was called virtual DOM, which was supposed to be a lightweight data structure, figure out the difference between your virtual DOM and the actual DOM, and then apply the smallest mutation to get them back in sync. Although this sounds kind of silly, it actually works quite well.\nHowever, there are still some drawbacks. First of all, unlike when you were manually updating the DOM, you have no guarantee that elements would be reused by the syncing. This is a problem because DOM elements have state, for instance whatever you have typed into a textbox. So if you redraw your app and your diffing algorithm isn’t smart enough to know that it should just mutate your textbox instead of replacing it, you can get bugs. Secondly, even though virtual DOM is pretty fast, it never is as fast as simply applying the mutations directly.\nSo recently, a third approach has started to gain traction: reactive programming. The history of reactive programming is actually quite long; there have been FRP libraries in the Haskell world for quite a while. But for reasons I’m not so familiar with, it took a while to catch on for web development.\nThe idea behind reactive programming is that values should know what depends on them. So for instance, if you have a variable that stores a color, you use that color in various parts of your application, and then you update that color, the variable knows what downstream things to update. You can think of this like a “publish/subscribe” system; your UI elements “subscribe” to changes in your application state, and when you make a change, that change is “published” to all of its subscribers.\nBut the neat thing is that you can have as many levels of publishers/subscribers. I.e., you can have one big variable, which is the state of your whole application, and then have values which are derived from that variable, and have values which are derived from those values, etc. This serves to “filter out” updates, so that only the part of your state that has changed ends up actually notifying a UI element. The upshot of this is that instead of diffing your “virtual DOM”, you diff your application state!\nAdditionally, you have much finer control over when UI elements are created/destroyed, so you don’t have to worry about DOM state being forgotten when you update your state. When you drag something in Semagrams, you want to be sure that the element is just having its position updated and not being fully recreated.\nIn Semagrams, we use a reactive programming library called Laminar that has had a lot of work and thought put into it. It also has excellent documentation, and some great video presentations that I encourage the reader to check out.\n\n\nAsynchronous Programming (cats-effect)\nAlthough Laminar does a very good job of keeping UI in sync with state, there is one thing that it does not help very much with. This is state machines.\nConsider which of the following code you would prefer to write (note this is pseudocode that happens to have scala3 syntax).\nenum State {\n  case Default\n  case Receiving\n  case Sending\n}\n\nimport State._\n\ndef mainLoop() = {\n  var state = Default\n  while true {\n    evt = nextEvent()\n    state = handleEvent(evt, state)\n  }\n}\n\ndef handleEvent(evt: Event, state: State) = state match {\n  case Default =&gt; {\n    if evt.isInitiation {\n      // do something to initiate a connection\n      Receiving\n    } else {\n      state\n    }\n  }\n  case Receiving =&gt; {\n    if evt.isPacket {\n      // process packet\n      Receiving\n    } else if evt.isFinished {\n      Sending\n    } else {\n      state\n    }\n  }\n  case Sending =&gt; {\n    if evt.isRequest {\n      // send something to the requester\n      Default\n    } else {\n      state\n    }\n  }\n}\ndef mainLoop() = {\n  while true {\n    waitForInitialization()\n    var done = false\n    while (!done) {\n      evt = nextEvent()\n      if evt.isPacket {\n        // process packet\n      } else if evt.isFinished {\n        done = true\n      } \n    }\n    done = false\n    while (!done) {\n      evt = nextEvent()\n      if evt.isRequest {\n        // send something to the requester\n        done = true\n      }\n    }\n  }\n}\nIn the first example, the state machine is explicit. That is, each state we can be is represented by concrete date. In contrast, in the second example, the state machine is implicit in the control flow.\nExplicit state machines are a huge pain to maintain. You have to write out every possible state that your program could be in. It makes much more sense to use the control flow tools that we are familiar with as programmers to structure our code.\nThe trouble is that Javascript is single-threaded. So if the nextEvent call blocks the program, nothing else can happen until the new event comes in. In fact, as written, nothing else could ever happen while mainLoop was running, including drawing our program!\nIn classical Javascript, the solution to this was that instead of having nextEvent event return something, you’d pass in a callback to nextEvent describing what to do with the event. Then you’d return from your function and allow other functions to run. When there was an event, your callback would be called, and that would continue on.\nThe problem with this is that you get code that runs off the side of the screen:\nnextEvent(\n  evt =&gt; {\n    // do something\n    nextEvent(\n      evt =&gt; {\n        // do something\n        nextEvent(\n          evt =&gt; {\n            // do something\n            // ...\n          }\n        )\n      }\n    )\n  })\nThis is the well-known “callback hell”. The modern solution to this is asynchronous programming. Conceptually, all asynchronous programming does is turn something that looks like\nasync[IO] {\n  val evt = nextEvent.await\n  // do something\n  val evt = nextEvent.await\n  // do something\n  val evt = nextEvent.await\n  // do something\n  // ...\n}\ninto callback-passing code. And now we can write clean-looking state machines that don’t block the entire thread! scala3 has an awesome library for asynchronous programming called cats-effect. Fun fact: this library is used to write the servers that stream videos for Disney Plus; that’s how efficient it is.\nThis uses something called the “IO monad” under the hood. However, the IO monad in cats-effect is slightly different from the IO monad in Haskell. Normal scala code can have all kinds of side effects, so the point of the IO monad is not to allow side effects, but rather to express asynchrony. A value of type IO[A] is basically something that registers a callback A =&gt; Unit elsewhere. So in the above code, we have\ndef nextEvent: IO[Event]\nThis doesn’t look typical monad code because we use a special code transformer cats-effect-cps. This allows us to use async/await syntax familiar from other languages like Python, Rust, or even Javascript."
  },
  {
    "objectID": "docs.html#balloons",
    "href": "docs.html#balloons",
    "title": "Documentation",
    "section": "Balloons",
    "text": "Balloons\nNow the question becomes: how do we integrate cats-effect with Laminar? The answer is something I call “balloons”, a state-management framework that is interoperable with both Laminar and cats-effect. I named it balloons to fit with the theme of “airstream” and “laminar”, and to evoke the idea that it is encapsulating something.\n\n\n\nA Cat in a Balloon\n\n\nBalloons have two type parameters: Msg and State. It manages some state of type State, and updates the state in response to messages of Msg. A balloon is contacted through a Tether[Msg, State], which is a trait defined like\n// TODO: support reeling in the balloon\ntrait Tether[Msg, State] {\n  val signal: Signal[State]\n  val inbox: Observer[Msg]\n\n  def get: IO[State]\n  def send(msg: Msg): IO[Unit]\n}\nA laminar component can listen to the signal and send messages to the inbox, while accessing via cats-effect can go through the send/get interface.\nMoreover, send blocks until the balloon has finished processing the sent message, so it is guaranteed that running get after send will get a version of the state at least as current as the state after processing the sent message. This is particularly important for automated testing; it means that we can test our state machines by sending them a series of messages and then reading out their state.\nBalloons are only interacted with via their tethers, so a balloon is really just something that can be “launched” to create a tether.\nThere are currently two ways of doing that: explicit state machines and non-explicit state machines. An explicit state machine looks like this:\ntrait PureBalloon[Msg, State] {\n  def current: State\n\n  def next(msg: Msg): PureBalloon[Msg, State]\n\n  def launch: IO[Tether[Msg, State]] = {\n    val balloonState: Var[PureBalloon[Msg, State]] = Var(this)\n    val signal: Signal[State] = balloonState.signal.map(_.current)\n    // implementation omitted\n  }\n}\nBasically, when we launch PureBalloon we store the current balloon in a variable and every time we get a new message, we update the balloon, and the state derived from that balloon.\nFor those who are familiar with polynomial functors, an element of PureBalloon[Msg, State] is essentially a position of the cofree coalgebra on the polynomial \\(p = \\mathtt{State} \\; y^{\\,\\mathtt{Msg}}\\).\nHowever, we also want to support the “imperative” style of state machines as explained in the previous section on cats-effect. We do this in an extremely lightweight manner. We first declare a trait Helm as follows:\ntrait Helm[Msg, State] {\n  def next: IO[(Msg, State =&gt; IO[Unit])]\n}\nThe idea is that a Helm is the controls for a balloon.\nThen an imperative balloon is simply a function Helm[Msg, State] =&gt; IO[Void]. This is something that takes in a Helm and then loops forever, producing side effects.\nA very basic example of this might look like\ndef counter(state: Int)(helm: Helm[Unit, Boolean]): IO[Void] = async[IO] {\n  val ((), update) = helm.next.await\n  val nextState = state + 1\n  update(nextState % 2 == 0).await\n  counter(nextState)(helm).await\n}\nThis counts the number of messages sent, and exposes the state of whether that number is even or odd.\nThe key to this is that when we poll for a message, we also poll for somewhere to send the updated state when we’ve finished processing the message. This allows for clients (i.e., other bits of code that have a Tether to this balloon) to wait until the balloon is finished processing before continuing on. It is the responsibility of an imperative balloon to call every update that it receives precisely once. If Scala had linear types, we could enforce this on the type level, but sadly it does not.\nSo the imperative state machine is less safe than the pure one, and also it seems to generally be slower, at least in some very basic testing. The good news is that the implementation of a balloon is totally obscured from consumers of its tether. This means we can use pure state machines for the simple cases, and break out more complicated imperative state machines only when needed."
  },
  {
    "objectID": "roadmap.html",
    "href": "roadmap.html",
    "title": "Roadmap",
    "section": "",
    "text": "On this page, I lay out the development priorities for Semagrams. As of yet, concrete dates, or even an order of development, have not been set.\nThis is organized in two “dimensions.” One dimension is by full-stack experiences (i.e. top-down planning), and one is by features (i.e. bottom-up planning)."
  },
  {
    "objectID": "roadmap.html#box-port-wire-acset-editing",
    "href": "roadmap.html#box-port-wire-acset-editing",
    "title": "Roadmap",
    "section": "Box-Port-Wire ACSet Editing",
    "text": "Box-Port-Wire ACSet Editing\nEssentially the functionality of Semagrams Legacy."
  },
  {
    "objectID": "roadmap.html#undirected-wiring-diagram-operads",
    "href": "roadmap.html#undirected-wiring-diagram-operads",
    "title": "Roadmap",
    "section": "Undirected Wiring Diagram Operads",
    "text": "Undirected Wiring Diagram Operads\nWe should be able to draw undirected wiring diagrams, and then fill them with either other undirected wiring diagrams or elements of an algebra of undirected wiring diagrams."
  },
  {
    "objectID": "roadmap.html#process-diagrams",
    "href": "roadmap.html#process-diagrams",
    "title": "Roadmap",
    "section": "Process diagrams",
    "text": "Process diagrams\nFrom a palette of processes, we should be able to create directed wiring diagrams, and compose them vertically, horizontally, and operadically."
  },
  {
    "objectID": "roadmap.html#string-diagrams",
    "href": "roadmap.html#string-diagrams",
    "title": "Roadmap",
    "section": "String diagrams",
    "text": "String diagrams\nEssentially the functionality of homotopy.io, but integrated with Catlab."
  },
  {
    "objectID": "roadmap.html#petri-nets",
    "href": "roadmap.html#petri-nets",
    "title": "Roadmap",
    "section": "Petri Nets",
    "text": "Petri Nets\nTo some extend petri nets fall under box-port-wire editing. But there are probably some custom features that would be useful to do with them."
  },
  {
    "objectID": "roadmap.html#editing",
    "href": "roadmap.html#editing",
    "title": "Roadmap",
    "section": "Editing",
    "text": "Editing\n\nAdd/remove entities\nConnect entities\nEdit attributes\nPalettes\nChained deletion (i.e., delete connected wires or leave them dangling)"
  },
  {
    "objectID": "roadmap.html#interaction",
    "href": "roadmap.html#interaction",
    "title": "Roadmap",
    "section": "Interaction",
    "text": "Interaction\n\nHovering\nMultiple selections\nKeypresses\nDialogues\nForms inputs"
  },
  {
    "objectID": "roadmap.html#layout",
    "href": "roadmap.html#layout",
    "title": "Roadmap",
    "section": "Layout",
    "text": "Layout\n\nForce-based layout\nHierarchical (tree-based)\nManual adjustments to automatic layout"
  },
  {
    "objectID": "roadmap.html#nested-semagrams",
    "href": "roadmap.html#nested-semagrams",
    "title": "Roadmap",
    "section": "Nested Semagrams",
    "text": "Nested Semagrams\n\nZooming in/out\nExpanding/collapsing parts of a diagram"
  },
  {
    "objectID": "roadmap.html#tikz-export",
    "href": "roadmap.html#tikz-export",
    "title": "Roadmap",
    "section": "TikZ Export",
    "text": "TikZ Export\nThe representation of sprites should be abstract enough that it can be “exported” to SVG (i.e. displayed in a web browser) or exported to TikZ."
  },
  {
    "objectID": "roadmap.html#apis",
    "href": "roadmap.html#apis",
    "title": "Roadmap",
    "section": "APIs",
    "text": "APIs\n\nWebsocket API for backends (like Julia)\nJavascript API for embedding\nStandalone saving/loading files"
  },
  {
    "objectID": "roadmap.html#api-functionality",
    "href": "roadmap.html#api-functionality",
    "title": "Roadmap",
    "section": "API functionality",
    "text": "API functionality\n\nSaving and loading diagrams\nRewriting\nControlling limits/colimits/oapply"
  }
]