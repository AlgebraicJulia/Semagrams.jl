(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["app"] = factory();
	else
		root["app"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@thi.ng/api/api/deref.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/api/api/deref.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isDeref": () => (/* binding */ isDeref),
/* harmony export */   "deref": () => (/* binding */ deref)
/* harmony export */ });
/**
 * Returns true iff `x` implements {@link IDeref}.
 *
 * @param x
 */
const isDeref = (x) => x != null && typeof x["deref"] === "function";
/**
 * If `x` implements {@link IDeref}, returns its wrapped value, else
 * returns `x` itself.
 *
 * @param x -
 */
const deref = (x) => (isDeref(x) ? x.deref() : x);


/***/ }),

/***/ "./node_modules/@thi.ng/api/api/typedarray.js":
/*!****************************************************!*\
  !*** ./node_modules/@thi.ng/api/api/typedarray.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GLType": () => (/* binding */ GLType),
/* harmony export */   "GL2TYPE": () => (/* binding */ GL2TYPE),
/* harmony export */   "TYPE2GL": () => (/* binding */ TYPE2GL),
/* harmony export */   "SIZEOF": () => (/* binding */ SIZEOF),
/* harmony export */   "FLOAT_ARRAY_CTORS": () => (/* binding */ FLOAT_ARRAY_CTORS),
/* harmony export */   "INT_ARRAY_CTORS": () => (/* binding */ INT_ARRAY_CTORS),
/* harmony export */   "UINT_ARRAY_CTORS": () => (/* binding */ UINT_ARRAY_CTORS),
/* harmony export */   "TYPEDARRAY_CTORS": () => (/* binding */ TYPEDARRAY_CTORS),
/* harmony export */   "asNativeType": () => (/* binding */ asNativeType),
/* harmony export */   "asGLType": () => (/* binding */ asGLType),
/* harmony export */   "sizeOf": () => (/* binding */ sizeOf),
/* harmony export */   "typedArray": () => (/* binding */ typedArray),
/* harmony export */   "typedArrayType": () => (/* binding */ typedArrayType),
/* harmony export */   "uintTypeForSize": () => (/* binding */ uintTypeForSize),
/* harmony export */   "intTypeForSize": () => (/* binding */ intTypeForSize),
/* harmony export */   "uintTypeForBits": () => (/* binding */ uintTypeForBits),
/* harmony export */   "intTypeForBits": () => (/* binding */ intTypeForBits)
/* harmony export */ });
/**
 * WebGL numeric type constants. Use {@link GL2TYPE} to convert, if needed.
 *
 * {@link Type}
 * {@link GL2TYPE}
 * {@link TYPE2GL}
 */
var GLType;
(function (GLType) {
    GLType[GLType["I8"] = 5120] = "I8";
    GLType[GLType["U8"] = 5121] = "U8";
    GLType[GLType["I16"] = 5122] = "I16";
    GLType[GLType["U16"] = 5123] = "U16";
    GLType[GLType["I32"] = 5124] = "I32";
    GLType[GLType["U32"] = 5125] = "U32";
    GLType[GLType["F32"] = 5126] = "F32";
})(GLType || (GLType = {}));
/**
 * Conversion from {@link GLType} to {@link Type} enums.
 */
const GL2TYPE = {
    [GLType.I8]: "i8",
    [GLType.U8]: "u8",
    [GLType.I16]: "i16",
    [GLType.U16]: "u16",
    [GLType.I32]: "i32",
    [GLType.U32]: "u32",
    [GLType.F32]: "f32",
};
/**
 * Potentially lossy conversion from {@link Type} to {@link GLType} enums.
 *
 * Not all enums are mappable:
 *
 * - `F64` maps to `undefined`, since unsupported by WebGL
 * - `U8C` maps to "u8"
 */
const TYPE2GL = {
    i8: GLType.I8,
    u8: GLType.U8,
    u8c: GLType.U8,
    i16: GLType.I16,
    u16: GLType.U16,
    i32: GLType.I32,
    u32: GLType.U32,
    f32: GLType.F32,
    f64: undefined,
};
/**
 * Size information (in bytes) for {@link Type}. Also see {@link sizeOf}.
 */
const SIZEOF = {
    u8: 1,
    u8c: 1,
    i8: 1,
    u16: 2,
    i16: 2,
    u32: 4,
    i32: 4,
    f32: 4,
    f64: 8,
};
const FLOAT_ARRAY_CTORS = {
    f32: Float32Array,
    f64: Float64Array,
};
const INT_ARRAY_CTORS = {
    i8: Int8Array,
    i16: Int16Array,
    i32: Int32Array,
};
const UINT_ARRAY_CTORS = {
    u8: Uint8Array,
    u8c: Uint8ClampedArray,
    u16: Uint16Array,
    u32: Uint32Array,
};
const TYPEDARRAY_CTORS = Object.assign(Object.assign(Object.assign({}, FLOAT_ARRAY_CTORS), INT_ARRAY_CTORS), UINT_ARRAY_CTORS);
/**
 * Returns canonical {@link Type} value of `type` by first
 * attempting to resolve it as {@link GLType} enum.
 *
 * @example
 * ```ts
 * asNativeType(GLType.F32) => "f32"
 * asNativeType("f32") => "f32"
 * ```
 *
 * @param type -
 */
const asNativeType = (type) => {
    const t = GL2TYPE[type];
    return t !== undefined ? t : type;
};
/**
 * Returns suitable {@link GLType} enum of `type`.
 *
 * @example
 * ```ts
 * asGLType("f32") => GLType.F32
 * asGLType(GLType.F32) => GLType.F32
 * ```
 *
 * @param type -
 */
const asGLType = (type) => {
    const t = TYPE2GL[type];
    return t !== undefined ? t : type;
};
/**
 * Returns byte size for given {@link Type} ID or {@link GLType} enum.
 *
 * @param type
 */
const sizeOf = (type) => SIZEOF[asNativeType(type)];
function typedArray(type, ...xs) {
    return new TYPEDARRAY_CTORS[asNativeType(type)](...xs);
}
/**
 * Takes an {@link NumericArray} and returns its corresponding {@link Type} ID.
 * Standard JS arrays will default to {@link "f64"}.
 *
 * @param x
 */
const typedArrayType = (x) => {
    if (Array.isArray(x))
        return "f64";
    for (let id in TYPEDARRAY_CTORS) {
        if (x instanceof TYPEDARRAY_CTORS[id])
            return id;
    }
    return "f64";
};
/**
 * Returns the smallest possible *unsigned* int type enum for given `x`.
 * E.g. if `x <= 256`, the function returns `"u8"`.
 *
 * @param x - value to classify
 */
const uintTypeForSize = (x) => x <= 0x100 ? "u8" : x <= 0x10000 ? "u16" : "u32";
/**
 * Returns the smallest possible *signed* int type enum for given `x`.
 * E.g. if `x >= -128 && x < 128`, the function returns `"i8"`.
 *
 * @param x - value to classify
 */
const intTypeForSize = (x) => x >= -0x80 && x < 0x80 ? "i8" : x >= -0x8000 && x < 0x8000 ? "i16" : "i32";
/**
 * Returns suitable {@link UintType} for given bit size (`[0,32]` range)
 *
 * @param x
 */
const uintTypeForBits = (x) => x > 16 ? "u32" : x > 8 ? "u16" : "u8";
/**
 * Returns suitable {@link IntType} for given bit size (`[0,32]` range)
 *
 * @param x
 */
const intTypeForBits = (x) => x > 16 ? "i32" : x > 8 ? "i16" : "i8";


/***/ }),

/***/ "./node_modules/@thi.ng/api/assert.js":
/*!********************************************!*\
  !*** ./node_modules/@thi.ng/api/assert.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assert": () => (/* binding */ assert)
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/@thi.ng/api/constants.js");

/**
 * Takes a `test` result or predicate function without args and throws
 * error with given `msg` if test failed (i.e. is falsy).
 *
 * @remarks
 * The function is only enabled if `process.env.NODE_ENV != "production"`
 * or if the `UMBRELLA_ASSERTS` env var is set to 1.
 */
const assert = (() => {
    try {
        return ( true ||
            0);
    }
    catch (e) { }
    return false;
})()
    ? (test, msg = "assertion failed") => {
        if ((typeof test === "function" && !test()) || !test) {
            throw new Error(typeof msg === "function" ? msg() : msg);
        }
    }
    : _constants__WEBPACK_IMPORTED_MODULE_0__.NO_OP;


/***/ }),

/***/ "./node_modules/@thi.ng/api/constants.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/api/constants.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_EPS": () => (/* binding */ DEFAULT_EPS),
/* harmony export */   "SEMAPHORE": () => (/* binding */ SEMAPHORE),
/* harmony export */   "NO_OP": () => (/* binding */ NO_OP),
/* harmony export */   "EVENT_ALL": () => (/* binding */ EVENT_ALL),
/* harmony export */   "EVENT_ENABLE": () => (/* binding */ EVENT_ENABLE),
/* harmony export */   "EVENT_DISABLE": () => (/* binding */ EVENT_DISABLE)
/* harmony export */ });
const DEFAULT_EPS = 1e-6;
/**
 * Internal use only. **Do NOT use in user land code!**
 *
 * @internal
 */
const SEMAPHORE = Symbol();
/**
 * No-effect placeholder function.
 */
const NO_OP = () => { };
/**
 * Catch-all event ID
 */
const EVENT_ALL = "*";
const EVENT_ENABLE = "enable";
const EVENT_DISABLE = "disable";


/***/ }),

/***/ "./node_modules/@thi.ng/api/mixin.js":
/*!*******************************************!*\
  !*** ./node_modules/@thi.ng/api/mixin.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mixin": () => (/* binding */ mixin)
/* harmony export */ });
/**
 * Class behavior mixin based on:
 * {@link http://raganwald.com/2015/06/26/decorators-in-es7.html}
 *
 * Additionally only injects/overwrites properties in target, which are
 * NOT marked with `@nomixin` (i.e. haven't set their `configurable`
 * property descriptor flag to `false`)
 *
 * @param behaviour - to mixin
 * @param sharedBehaviour -
 * @returns decorator function
 */
const mixin = (behaviour, sharedBehaviour = {}) => {
    const instanceKeys = Reflect.ownKeys(behaviour);
    const sharedKeys = Reflect.ownKeys(sharedBehaviour);
    const typeTag = Symbol("isa");
    function _mixin(clazz) {
        for (let key of instanceKeys) {
            const existing = Object.getOwnPropertyDescriptor(clazz.prototype, key);
            if (!existing || existing.configurable) {
                Object.defineProperty(clazz.prototype, key, {
                    value: behaviour[key],
                    writable: true,
                });
            }
            else {
                console.log(`not patching: ${clazz.name}.${key.toString()}`);
            }
        }
        Object.defineProperty(clazz.prototype, typeTag, { value: true });
        return clazz;
    }
    for (let key of sharedKeys) {
        Object.defineProperty(_mixin, key, {
            value: sharedBehaviour[key],
            enumerable: sharedBehaviour.propertyIsEnumerable(key),
        });
    }
    Object.defineProperty(_mixin, Symbol.hasInstance, {
        value: (x) => !!x[typeTag],
    });
    return _mixin;
};


/***/ }),

/***/ "./node_modules/@thi.ng/arrays/binary-search.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/arrays/binary-search.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "binarySearch": () => (/* binding */ binarySearch),
/* harmony export */   "binarySearchNumeric": () => (/* binding */ binarySearchNumeric),
/* harmony export */   "binarySearch2": () => (/* binding */ binarySearch2),
/* harmony export */   "binarySearch4": () => (/* binding */ binarySearch4),
/* harmony export */   "binarySearch8": () => (/* binding */ binarySearch8),
/* harmony export */   "binarySearch16": () => (/* binding */ binarySearch16),
/* harmony export */   "binarySearch32": () => (/* binding */ binarySearch32),
/* harmony export */   "bsLT": () => (/* binding */ bsLT),
/* harmony export */   "bsLE": () => (/* binding */ bsLE),
/* harmony export */   "bsGT": () => (/* binding */ bsGT),
/* harmony export */   "bsGE": () => (/* binding */ bsGE),
/* harmony export */   "bsEQ": () => (/* binding */ bsEQ)
/* harmony export */ });
/* harmony import */ var _thi_ng_compare__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/compare */ "./node_modules/@thi.ng/compare/compare.js");
/* harmony import */ var _thi_ng_compare__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/compare */ "./node_modules/@thi.ng/compare/numeric.js");

/**
 * Returns the supposed index of `x` in pre-sorted array-like collection
 * `buf`.
 *
 * @remarks
 * If `x` can't be found, returns `-index-1`, representing the negative
 * of the index, were `x` to be inserted into `buf`. E.g if the return
 * value is -3, `x` would appear/insert at index 2.
 *
 * The optional `key` function is used to obtain the actual sort value
 * of `x` and each array item (default: identity).
 *
 * The optional `cmp` comparator (default:
 * {@link @thi.ng/compare#compare}) is then used to identify the index
 * of `x`. The sort order of `buf` MUST be compatible with that of
 * `cmp`.
 *
 * @example
 * ```ts
 * binarySearch([2, 4, 6], 5);
 * // -3
 * ```
 *
 * @param buf - array
 * @param x - search value
 * @param key - key function
 * @param cmp - comparator
 * @param low - min index
 * @param high - max index
 */
const binarySearch = (buf, x, key = (x) => x, cmp = _thi_ng_compare__WEBPACK_IMPORTED_MODULE_0__.compare, low = 0, high = buf.length - 1) => {
    const kx = key(x);
    while (low <= high) {
        const mid = (low + high) >>> 1;
        const c = cmp(key(buf[mid]), kx);
        if (c < 0) {
            low = mid + 1;
        }
        else if (c > 0) {
            high = mid - 1;
        }
        else {
            return mid;
        }
    }
    return -low - 1;
};
/**
 * Similar to {@link binarySearch}, but optimized for numeric arrays and
 * supporting custom comparators (default:
 * {@link @thi.ng/compare#compareNumAsc}).
 *
 * @param buf - array
 * @param x - search value
 * @param cmp - comparator
 * @param low - min index
 * @param high - max index
 */
const binarySearchNumeric = (buf, x, cmp = _thi_ng_compare__WEBPACK_IMPORTED_MODULE_1__.compareNumAsc, low = 0, high = buf.length - 1) => {
    while (low <= high) {
        const mid = (low + high) >>> 1;
        const c = cmp(buf[mid], x);
        if (c < 0) {
            low = mid + 1;
        }
        else if (c > 0) {
            high = mid - 1;
        }
        else {
            return mid;
        }
    }
    return -low - 1;
};
const binarySearch2 = (buf, x) => {
    let idx = buf[1] <= x ? 1 : 0;
    return buf[idx] === x ? idx : buf[0] < x ? -idx - 2 : -1;
};
/**
 * Non-recursive, optimized binary search for fixed size numeric arrays of 4
 * values. Returns index of `x` or `-index-1` if not found.
 *
 * @param buf
 * @param x
 */
const binarySearch4 = (buf, x) => {
    let idx = buf[2] <= x ? 2 : 0;
    idx |= buf[idx + 1] <= x ? 1 : 0;
    return buf[idx] === x ? idx : buf[0] < x ? -idx - 2 : -1;
};
/**
 * Non-recursive, optimized binary search for fixed size numeric arrays of 8
 * values. Returns index of `x` or `-index-1` if not found.
 *
 * @param buf
 * @param x
 */
const binarySearch8 = (buf, x) => {
    let idx = buf[4] <= x ? 4 : 0;
    idx |= buf[idx + 2] <= x ? 2 : 0;
    idx |= buf[idx + 1] <= x ? 1 : 0;
    return buf[idx] === x ? idx : buf[0] < x ? -idx - 2 : -1;
};
/**
 * Non-recursive, optimized binary search for fixed size numeric arrays of 16
 * values. Returns index of `x` or `-index-1` if not found.
 *
 * @param buf
 * @param x
 */
const binarySearch16 = (buf, x) => {
    let idx = buf[8] <= x ? 8 : 0;
    idx |= buf[idx + 4] <= x ? 4 : 0;
    idx |= buf[idx + 2] <= x ? 2 : 0;
    idx |= buf[idx + 1] <= x ? 1 : 0;
    return buf[idx] === x ? idx : buf[0] < x ? -idx - 2 : -1;
};
/**
 * Non-recursive, optimized binary search for fixed size numeric arrays of 32
 * values. Returns index of `x` or `-index-1` if not found.
 *
 * @param buf
 * @param x
 */
const binarySearch32 = (buf, x) => {
    let idx = buf[16] <= x ? 16 : 0;
    idx |= buf[idx + 4] <= x ? 8 : 0;
    idx |= buf[idx + 4] <= x ? 4 : 0;
    idx |= buf[idx + 2] <= x ? 2 : 0;
    idx |= buf[idx + 1] <= x ? 1 : 0;
    return buf[idx] === x ? idx : buf[0] < x ? -idx - 2 : -1;
};
/**
 * {@link binarySearch} result index classifier for predecessor queries.
 * Returns index of last item less than search value or -1 if no such
 * values exist.
 *
 * @example
 * ```ts
 * bsLT(binarySearch([10, 20, 30, 40], 25))
 * // 1
 * ```
 *
 * @param i - binarySearch result index
 */
const bsLT = (i) => (i < 0 ? -i - 2 : i - 1);
/**
 * Similar to {@link bsLT}, but for less-than-equals queries.
 *
 * @param i - binarySearch result index
 */
const bsLE = (i) => (i < 0 ? -i - 2 : i);
/**
 * {@link binarySearch} result index classifier for successor queries.
 * Returns index of first item greater than search value or -1 if no
 * such values exist.
 *
 * @example
 * ```ts
 * src = [10, 20, 30, 40];
 *
 * bsGT(binarySearch(src, 25), src.length)
 * // 2
 *
 * bsGT(binarySearch(src, 40), src.length)
 * // -1
 * ```
 *
 * @param i - binarySearch result index
 * @param n - array length
 */
const bsGT = (i, n) => ((i = i < 0 ? -i - 1 : i + 1), i < n ? i : -1);
/**
 * Similar to {@link bsGT}, but for greater-than-equals queries.
 *
 * @param i - binarySearch result index
 * @param n - array length
 */
const bsGE = (i, n) => ((i = i < 0 ? -i - 1 : i), i < n ? i : -1);
/**
 * {@link binarySearch} result index classifier for equals queries.
 * Merely syntax sugar, casting any non-found result indices to -1.
 *
 * @param i - binarySearch result index
 */
const bsEQ = (i) => (i < 0 ? -1 : i);


/***/ }),

/***/ "./node_modules/@thi.ng/arrays/ensure-array.js":
/*!*****************************************************!*\
  !*** ./node_modules/@thi.ng/arrays/ensure-array.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ensureArray": () => (/* binding */ ensureArray),
/* harmony export */   "ensureArrayLike": () => (/* binding */ ensureArrayLike)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-array.js");
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-arraylike.js");
/* harmony import */ var _ensure_iterable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ensure-iterable */ "./node_modules/@thi.ng/arrays/ensure-iterable.js");


/**
 * Helper function to avoid unnecessary copying if `x` is already an
 * array.
 *
 * @remarks
 * First checks if `x` is an array and if so returns it. Else attempts
 * to obtain an iterator from `x` and if successful collects it as array
 * and returns it. Throws error if `x` isn't iterable.
 *
 * @param x -
 */
const ensureArray = (x) => (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isArray)(x) ? x : [...(0,_ensure_iterable__WEBPACK_IMPORTED_MODULE_1__.ensureIterable)(x)];
/**
 * Similar to {@link ensureArray}, but for `ArrayLike` types.
 *
 * {@link ensureArray}
 *
 * @param x -
 */
const ensureArrayLike = (x) => (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_2__.isArrayLike)(x) ? x : [...(0,_ensure_iterable__WEBPACK_IMPORTED_MODULE_1__.ensureIterable)(x)];


/***/ }),

/***/ "./node_modules/@thi.ng/arrays/ensure-iterable.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/arrays/ensure-iterable.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ensureIterable": () => (/* binding */ ensureIterable)
/* harmony export */ });
/* harmony import */ var _thi_ng_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/errors */ "./node_modules/@thi.ng/errors/illegal-arguments.js");

/**
 * Attempts to obtain an iterator from `x` and throws error if `x` is
 * not iterable.
 *
 * @param x -
 */
const ensureIterable = (x) => {
    (x == null || !x[Symbol.iterator]) &&
        (0,_thi_ng_errors__WEBPACK_IMPORTED_MODULE_0__.illegalArgs)(`value is not iterable: ${x}`);
    return x;
};


/***/ }),

/***/ "./node_modules/@thi.ng/arrays/find.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/arrays/find.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "find": () => (/* binding */ find),
/* harmony export */   "findIndex": () => (/* binding */ findIndex)
/* harmony export */ });
/* harmony import */ var _thi_ng_equiv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/equiv */ "./node_modules/@thi.ng/equiv/index.js");

/**
 * Similar to `Array.find()`, but uses {@link @thi.ng/equiv#equiv} as
 * default predicate.
 *
 * @param buf - array
 * @param x - search value
 * @param equiv - equivalence predicate
 */
const find = (buf, x, equiv = _thi_ng_equiv__WEBPACK_IMPORTED_MODULE_0__.equiv) => {
    const i = findIndex(buf, x, equiv);
    return i !== -1 ? buf[i] : undefined;
};
/**
 * Similar to `Array.findIndex()`, but uses {@link @thi.ng/equiv#equiv}
 * as default predicate.
 *
 * @param buf - array
 * @param x - search value
 * @param equiv - equivalence predicate
 */
const findIndex = (buf, x, equiv = _thi_ng_equiv__WEBPACK_IMPORTED_MODULE_0__.equiv) => {
    for (let i = buf.length; --i >= 0;) {
        if (equiv(x, buf[i]))
            return i;
    }
    return -1;
};


/***/ }),

/***/ "./node_modules/@thi.ng/arrays/fuzzy-match.js":
/*!****************************************************!*\
  !*** ./node_modules/@thi.ng/arrays/fuzzy-match.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fuzzyMatch": () => (/* binding */ fuzzyMatch)
/* harmony export */ });
/* harmony import */ var _thi_ng_equiv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/equiv */ "./node_modules/@thi.ng/equiv/index.js");

/**
 * Performs a fuzzy search of `query` in `domain` and returns `true` if
 * successful.
 *
 * @remarks
 * The optional `equiv` predicate can be used to customize item equality
 * checking. Uses {@link @thi.ng/equiv#equiv} by default.
 *
 * Adapted and generalized from:
 * {@link https://github.com/bevacqua/fufuzzyzzysearch} (MIT)
 *
 * {@link @thi.ng/transducers#(filterFuzzy:1)}
 *
 * @param domain - array
 * @param query - search value
 * @param equiv - equivalence predicate
 */
const fuzzyMatch = (domain, query, equiv = _thi_ng_equiv__WEBPACK_IMPORTED_MODULE_0__.equiv) => {
    const nd = domain.length;
    const nq = query.length;
    if (nq > nd) {
        return false;
    }
    if (nq === nd) {
        return equiv(query, domain);
    }
    next: for (let i = 0, j = 0; i < nq; i++) {
        const q = query[i];
        while (j < nd) {
            if (equiv(domain[j++], q)) {
                continue next;
            }
        }
        return false;
    }
    return true;
};


/***/ }),

/***/ "./node_modules/@thi.ng/arrays/peek.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/arrays/peek.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "first": () => (/* binding */ first),
/* harmony export */   "peek": () => (/* binding */ peek)
/* harmony export */ });
/**
 * Returns first element of given array or `undefined` if array is empty.
 *
 * @param buf - array
 */
const first = (buf) => buf[0];
/**
 * Returns last element of given array or `undefined` if array is empty.
 *
 * @param buf - array
 */
const peek = (buf) => buf[buf.length - 1];


/***/ }),

/***/ "./node_modules/@thi.ng/arrays/shuffle.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/arrays/shuffle.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shuffleRange": () => (/* binding */ shuffleRange),
/* harmony export */   "shuffle": () => (/* binding */ shuffle)
/* harmony export */ });
/* harmony import */ var _thi_ng_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/api */ "./node_modules/@thi.ng/api/assert.js");
/* harmony import */ var _thi_ng_random__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/random */ "./node_modules/@thi.ng/random/system.js");


/**
 * Shuffles the items in the given index range of array `buf` using
 * Fisher-yates and optional `rnd` PRNG.
 *
 * @remarks
 * If neither `start` / `end` are given, the entire array will be
 * shuffled. Mutates original array.
 *
 * See {@link @thi.ng/random#IRandom}
 *
 * @param buf - array
 * @param n - num items
 * @param rnd - PRNG
 */
const shuffleRange = (buf, start = 0, end = buf.length, rnd = _thi_ng_random__WEBPACK_IMPORTED_MODULE_0__.SYSTEM) => {
    (0,_thi_ng_api__WEBPACK_IMPORTED_MODULE_1__.assert)(start >= 0 && end >= start && end <= buf.length, `illegal range ${start}..${end}`);
    let n = end - start;
    const l = n;
    if (l > 1) {
        while (--n >= 0) {
            const a = (start + rnd.float(l)) | 0;
            const b = (start + rnd.float(l)) | 0;
            const t = buf[a];
            buf[a] = buf[b];
            buf[b] = t;
        }
    }
    return buf;
};
/**
 * Applies {@link shuffleRange} to the given array. If `n` is given,
 * only the first `n` items are shuffled. Mutates original array.
 *
 * {@link shuffleRange}
 *
 * @param buf - array
 * @param n - num items
 * @param rnd - PRNG
 */
const shuffle = (buf, n = buf.length, rnd = _thi_ng_random__WEBPACK_IMPORTED_MODULE_0__.SYSTEM) => shuffleRange(buf, 0, n, rnd);


/***/ }),

/***/ "./node_modules/@thi.ng/arrays/swizzle.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/arrays/swizzle.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "swizzle": () => (/* binding */ swizzle)
/* harmony export */ });
/**
 * Returns optimized function to immutably select, repeat, reshape and /
 * or reorder array / object values in the specified index order.
 *
 * @remarks
 * Fast paths for up to 8 indices are provided, before a loop based
 * approach is used.
 *
 * @example
 * ```ts
 * swizzle([0, 0, 0])([1, 2, 3, 4])    // [ 1, 1, 1 ]
 * swizzle([1, 1, 3, 3])([1, 2, 3, 4]) // [ 2, 2, 4, 4 ]
 * swizzle([2, 0])([1, 2, 3])          // [ 3, 1 ]
 * ```
 *
 * @example
 * Objects can be used as input to the generated function, but the
 * result will always be in array form.

 * ```ts
 * swizzle(["a", "c", "b"])({a: 1, b: 2, c: 3}) // [ 1, 3, 2 ]
 * ```
 *
 * @param order - indices
 */
const swizzle = (order) => {
    const [a, b, c, d, e, f, g, h] = order;
    switch (order.length) {
        case 0:
            return () => [];
        case 1:
            return (x) => [x[a]];
        case 2:
            return (x) => [x[a], x[b]];
        case 3:
            return (x) => [x[a], x[b], x[c]];
        case 4:
            return (x) => [x[a], x[b], x[c], x[d]];
        case 5:
            return (x) => [x[a], x[b], x[c], x[d], x[e]];
        case 6:
            return (x) => [x[a], x[b], x[c], x[d], x[e], x[f]];
        case 7:
            return (x) => [x[a], x[b], x[c], x[d], x[e], x[f], x[g]];
        case 8:
            return (x) => [x[a], x[b], x[c], x[d], x[e], x[f], x[g], x[h]];
        default:
            return (x) => {
                const res = [];
                for (let i = order.length; --i >= 0;) {
                    res[i] = x[order[i]];
                }
                return res;
            };
    }
};


/***/ }),

/***/ "./node_modules/@thi.ng/associative/array-set.js":
/*!*******************************************************!*\
  !*** ./node_modules/@thi.ng/associative/array-set.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArraySet": () => (/* binding */ ArraySet),
/* harmony export */   "defArraySet": () => (/* binding */ defArraySet)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _thi_ng_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/api */ "./node_modules/@thi.ng/api/constants.js");
/* harmony import */ var _thi_ng_arrays__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @thi.ng/arrays */ "./node_modules/@thi.ng/arrays/find.js");
/* harmony import */ var _thi_ng_equiv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/equiv */ "./node_modules/@thi.ng/equiv/index.js");
/* harmony import */ var _dissoc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dissoc */ "./node_modules/@thi.ng/associative/dissoc.js");
/* harmony import */ var _internal_equiv__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/equiv */ "./node_modules/@thi.ng/associative/internal/equiv.js");
/* harmony import */ var _internal_inspect__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./internal/inspect */ "./node_modules/@thi.ng/associative/internal/inspect.js");
/* harmony import */ var _into__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./into */ "./node_modules/@thi.ng/associative/into.js");
var ArraySet_1;








const __private = new WeakMap();
const __vals = (inst) => __private.get(inst).vals;
/**
 * An alternative set implementation to the native ES6 Set type. Uses
 * customizable equality/equivalence predicate and so is more useful
 * when dealing with structured data. Implements full API of native Set
 * and by the default uses {@link @thi.ng/equiv#equiv} for equivalence
 * checking.
 *
 * Additionally, the type also implements the {@link @thi.ng/api#ICopy},
 * {@link @thi.ng/api#IEmpty} and {@link @thi.ng/api#IEquiv} interfaces
 * itself.
 */
let ArraySet = ArraySet_1 = class ArraySet extends Set {
    constructor(vals, opts = {}) {
        super();
        __private.set(this, { equiv: opts.equiv || _thi_ng_equiv__WEBPACK_IMPORTED_MODULE_0__.equiv, vals: [] });
        vals && this.into(vals);
    }
    *[Symbol.iterator]() {
        yield* __vals(this);
    }
    get [Symbol.species]() {
        return ArraySet_1;
    }
    get [Symbol.toStringTag]() {
        return "ArraySet";
    }
    get size() {
        return __vals(this).length;
    }
    copy() {
        const { equiv, vals } = __private.get(this);
        const s = new ArraySet_1(null, { equiv });
        __private.get(s).vals = vals.slice();
        return s;
    }
    empty() {
        return new ArraySet_1(null, this.opts());
    }
    clear() {
        __vals(this).length = 0;
    }
    first() {
        if (this.size) {
            return __vals(this)[0];
        }
    }
    add(key) {
        !this.has(key) && __vals(this).push(key);
        return this;
    }
    into(keys) {
        return (0,_into__WEBPACK_IMPORTED_MODULE_1__.into)(this, keys);
    }
    has(key) {
        return this.get(key, _thi_ng_api__WEBPACK_IMPORTED_MODULE_2__.SEMAPHORE) !== _thi_ng_api__WEBPACK_IMPORTED_MODULE_2__.SEMAPHORE;
    }
    /**
     * Returns the canonical value for `x`, if present. If the set
     * contains no equivalent for `x`, returns `notFound`.
     *
     * @param key - search key
     * @param notFound - default value
     */
    get(key, notFound) {
        const { equiv, vals } = __private.get(this);
        const i = (0,_thi_ng_arrays__WEBPACK_IMPORTED_MODULE_3__.findIndex)(vals, key, equiv);
        return i >= 0 ? vals[i] : notFound;
    }
    delete(key) {
        const { equiv, vals } = __private.get(this);
        for (let i = vals.length; --i >= 0;) {
            if (equiv(vals[i], key)) {
                vals.splice(i, 1);
                return true;
            }
        }
        return false;
    }
    disj(keys) {
        return (0,_dissoc__WEBPACK_IMPORTED_MODULE_4__.dissoc)(this, keys);
    }
    equiv(o) {
        return (0,_internal_equiv__WEBPACK_IMPORTED_MODULE_5__.equivSet)(this, o);
    }
    /**
     * The value args given to the callback `fn` MUST be treated as
     * readonly/immutable. This could be enforced via TS, but would
     * break ES6 Set interface contract.
     *
     * @param fn
     * @param thisArg
     */
    forEach(fn, thisArg) {
        const vals = __vals(this);
        for (let i = vals.length; --i >= 0;) {
            const v = vals[i];
            fn.call(thisArg, v, v, this);
        }
    }
    *entries() {
        for (let v of __vals(this)) {
            yield [v, v];
        }
    }
    *keys() {
        yield* __vals(this);
    }
    *values() {
        yield* __vals(this);
    }
    opts() {
        return { equiv: __private.get(this).equiv };
    }
};
ArraySet = ArraySet_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([
    _internal_inspect__WEBPACK_IMPORTED_MODULE_7__.inspectable
], ArraySet);

const defArraySet = (vals, opts) => new ArraySet(vals, opts);


/***/ }),

/***/ "./node_modules/@thi.ng/associative/common-keys.js":
/*!*********************************************************!*\
  !*** ./node_modules/@thi.ng/associative/common-keys.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "commonKeysMap": () => (/* binding */ commonKeysMap),
/* harmony export */   "commonKeysObj": () => (/* binding */ commonKeysObj)
/* harmony export */ });
/**
 * Like {@link commonKeysObj}, but for ES6 Maps.
 *
 * @param a - first map
 * @param b - other map
 * @param out - result array
 */
const commonKeysMap = (a, b, out = []) => {
    for (let k of a.keys()) {
        b.has(k) && out.push(k);
    }
    return out;
};
/**
 * Returns array of keys present in both args, i.e. the set intersection
 * of the given objects' key / property sets.
 *
 * @example
 * ```ts
 * commonKeys({ a: 1, b: 2 }, { c: 10, b: 20, a: 30 })
 * // [ "a", "b" ]
 * ```
 *
 * @param a - first object
 * @param b - other object
 * @param out - result array
 */
const commonKeysObj = (a, b, out = []) => {
    for (let k in a) {
        b.hasOwnProperty(k) && out.push(k);
    }
    return out;
};


/***/ }),

/***/ "./node_modules/@thi.ng/associative/difference.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/associative/difference.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "difference": () => (/* binding */ difference),
/* harmony export */   "differenceR": () => (/* binding */ differenceR)
/* harmony export */ });
/* harmony import */ var _internal_xform_setop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/xform-setop */ "./node_modules/@thi.ng/associative/internal/xform-setop.js");
/* harmony import */ var _into__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./into */ "./node_modules/@thi.ng/associative/into.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@thi.ng/associative/utils.js");



/**
 * Computes the difference of sets `a - b` and writes results to new set
 * or optionally given set `out` (assumed to be empty for correct
 * results).
 *
 * @param a - first set
 * @param b - other set
 * @param out - optional result set
 */
const difference = (a, b, out) => {
    if (a === b) {
        return out || (0,_utils__WEBPACK_IMPORTED_MODULE_0__.empty)(a, Set);
    }
    out = out ? (0,_into__WEBPACK_IMPORTED_MODULE_1__.into)(out, a) : (0,_utils__WEBPACK_IMPORTED_MODULE_0__.copy)(a, Set);
    for (let i of b) {
        out.delete(i);
    }
    return out;
};
function differenceR(src) {
    return (0,_internal_xform_setop__WEBPACK_IMPORTED_MODULE_2__.xformSetOp)(differenceR, difference, src);
}


/***/ }),

/***/ "./node_modules/@thi.ng/associative/dissoc.js":
/*!****************************************************!*\
  !*** ./node_modules/@thi.ng/associative/dissoc.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dissoc": () => (/* binding */ dissoc),
/* harmony export */   "dissocObj": () => (/* binding */ dissocObj)
/* harmony export */ });
function dissoc(coll, keys) {
    for (let k of keys) {
        coll.delete(k);
    }
    return coll;
}
const dissocObj = (obj, keys) => {
    for (let k of keys) {
        delete obj[k];
    }
    return obj;
};


/***/ }),

/***/ "./node_modules/@thi.ng/associative/equiv-map.js":
/*!*******************************************************!*\
  !*** ./node_modules/@thi.ng/associative/equiv-map.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EquivMap": () => (/* binding */ EquivMap),
/* harmony export */   "defEquivMap": () => (/* binding */ defEquivMap)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _thi_ng_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @thi.ng/api */ "./node_modules/@thi.ng/api/constants.js");
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-plain-object.js");
/* harmony import */ var _thi_ng_equiv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/equiv */ "./node_modules/@thi.ng/equiv/index.js");
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/iter/pairs.js");
/* harmony import */ var _array_set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./array-set */ "./node_modules/@thi.ng/associative/array-set.js");
/* harmony import */ var _dissoc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dissoc */ "./node_modules/@thi.ng/associative/dissoc.js");
/* harmony import */ var _internal_equiv__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/equiv */ "./node_modules/@thi.ng/associative/internal/equiv.js");
/* harmony import */ var _internal_inspect__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./internal/inspect */ "./node_modules/@thi.ng/associative/internal/inspect.js");
/* harmony import */ var _into__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./into */ "./node_modules/@thi.ng/associative/into.js");
var EquivMap_1;










const __private = new WeakMap();
const __map = (map) => __private.get(map).map;
let EquivMap = EquivMap_1 = class EquivMap extends Map {
    /**
     * Creates a new instance with optional initial key-value pairs and
     * provided options. If no `opts` are given, uses `ArraySet` for
     * storing canonical keys and {@link @thi.ng/equiv#equiv} for
     * checking key equivalence.
     *
     * @param pairs - key-value pairs
     * @param opts - config options
     */
    constructor(pairs, opts) {
        super();
        const _opts = Object.assign({ equiv: _thi_ng_equiv__WEBPACK_IMPORTED_MODULE_0__.equiv, keys: _array_set__WEBPACK_IMPORTED_MODULE_1__.ArraySet }, opts);
        __private.set(this, {
            keys: new _opts.keys(null, { equiv: _opts.equiv }),
            map: new Map(),
            opts: _opts,
        });
        if (pairs) {
            this.into(pairs);
        }
    }
    [Symbol.iterator]() {
        return this.entries();
    }
    get [Symbol.species]() {
        return EquivMap_1;
    }
    get [Symbol.toStringTag]() {
        return "EquivMap";
    }
    get size() {
        return __private.get(this).keys.size;
    }
    clear() {
        const { keys, map } = __private.get(this);
        keys.clear();
        map.clear();
    }
    empty() {
        return new EquivMap_1(null, __private.get(this).opts);
    }
    copy() {
        const { keys, map, opts } = __private.get(this);
        const m = new EquivMap_1();
        __private.set(m, {
            keys: keys.copy(),
            map: new Map(map),
            opts,
        });
        return m;
    }
    equiv(o) {
        return (0,_internal_equiv__WEBPACK_IMPORTED_MODULE_2__.equivMap)(this, o);
    }
    delete(key) {
        const { keys, map } = __private.get(this);
        key = keys.get(key, _thi_ng_api__WEBPACK_IMPORTED_MODULE_3__.SEMAPHORE);
        if (key !== _thi_ng_api__WEBPACK_IMPORTED_MODULE_3__.SEMAPHORE) {
            map.delete(key);
            keys.delete(key);
            return true;
        }
        return false;
    }
    dissoc(keys) {
        return (0,_dissoc__WEBPACK_IMPORTED_MODULE_4__.dissoc)(this, keys);
    }
    /**
     * The key & value args given the callback `fn` MUST be treated as
     * readonly/immutable. This could be enforced via TS, but would
     * break ES6 Map interface contract.
     *
     * @param fn
     * @param thisArg
     */
    forEach(fn, thisArg) {
        for (let pair of __map(this)) {
            fn.call(thisArg, pair[1], pair[0], this);
        }
    }
    get(key, notFound) {
        const { keys, map } = __private.get(this);
        key = keys.get(key, _thi_ng_api__WEBPACK_IMPORTED_MODULE_3__.SEMAPHORE);
        if (key !== _thi_ng_api__WEBPACK_IMPORTED_MODULE_3__.SEMAPHORE) {
            return map.get(key);
        }
        return notFound;
    }
    has(key) {
        return __private.get(this).keys.has(key);
    }
    set(key, value) {
        const { keys, map } = __private.get(this);
        const k = keys.get(key, _thi_ng_api__WEBPACK_IMPORTED_MODULE_3__.SEMAPHORE);
        if (k !== _thi_ng_api__WEBPACK_IMPORTED_MODULE_3__.SEMAPHORE) {
            map.set(k, value);
        }
        else {
            keys.add(key);
            map.set(key, value);
        }
        return this;
    }
    into(pairs) {
        return (0,_into__WEBPACK_IMPORTED_MODULE_5__.into)(this, pairs);
    }
    entries() {
        return __map(this).entries();
    }
    keys() {
        return __map(this).keys();
    }
    values() {
        return __map(this).values();
    }
    opts() {
        return __private.get(this).opts;
    }
};
EquivMap = EquivMap_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([
    _internal_inspect__WEBPACK_IMPORTED_MODULE_7__.inspectable
], EquivMap);

function defEquivMap(src, opts) {
    return new EquivMap((0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_8__.isPlainObject)(src) ? (0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_9__.pairs)(src) : src, opts);
}


/***/ }),

/***/ "./node_modules/@thi.ng/associative/hash-map.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/associative/hash-map.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HashMap": () => (/* binding */ HashMap),
/* harmony export */   "defHashMap": () => (/* binding */ defHashMap)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _thi_ng_binary__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/binary */ "./node_modules/@thi.ng/binary/pow.js");
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-plain-object.js");
/* harmony import */ var _thi_ng_equiv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/equiv */ "./node_modules/@thi.ng/equiv/index.js");
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/xform/map.js");
/* harmony import */ var _dissoc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dissoc */ "./node_modules/@thi.ng/associative/dissoc.js");
/* harmony import */ var _internal_equiv__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/equiv */ "./node_modules/@thi.ng/associative/internal/equiv.js");
/* harmony import */ var _internal_inspect__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal/inspect */ "./node_modules/@thi.ng/associative/internal/inspect.js");
/* harmony import */ var _into__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./into */ "./node_modules/@thi.ng/associative/into.js");
var HashMap_1;









const __private = new WeakMap();
const __iterator = (map, id) => function* () {
    for (let p of __private.get(map).bins) {
        if (p)
            yield p[id];
    }
};
const DEFAULT_CAP = 16;
const DEFAULT_LOAD = 0.75;
/**
 * Configurable hash map implementation w/ ES6 Map API. Uses open
 * addressing / linear probing to resolve key collisions. Supports any
 * key types via mandatory user supplied hash function.
 *
 * See {@link HashMapOpts} for further configuration & behavior details.
 *
 * @example
 * ```ts
 * import { HashMap } from "@thi.ng/associative"
 * import { hash } from "@thi.ng/vectors"
 *
 * m = new HashMap([], { hash })
 * m.set([1, 2], "a");
 * m.set([3, 4], "b");
 * m.set([1, 2], "c");
 * // HashMap { [ 1, 2 ] => 'c', [ 3, 4 ] => 'b' }
 * ```
 *
 */
let HashMap = HashMap_1 = class HashMap extends Map {
    constructor(pairs, opts) {
        super();
        const m = (0,_thi_ng_binary__WEBPACK_IMPORTED_MODULE_0__.ceilPow2)(Math.min(opts.cap || DEFAULT_CAP, 4)) - 1;
        __private.set(this, {
            hash: opts.hash,
            equiv: opts.equiv || _thi_ng_equiv__WEBPACK_IMPORTED_MODULE_1__.equiv,
            load: opts.load || DEFAULT_LOAD,
            mask: m,
            bins: new Array(m + 1),
            size: 0,
        });
        if (pairs) {
            this.into(pairs);
        }
    }
    get [Symbol.species]() {
        return HashMap_1;
    }
    get [Symbol.toStringTag]() {
        return "HashMap";
    }
    get size() {
        return __private.get(this).size;
    }
    [Symbol.iterator]() {
        return this.entries();
    }
    *entries() {
        for (let p of __private.get(this).bins) {
            if (p)
                yield [p[0], p[1]];
        }
    }
    keys() {
        return __iterator(this, 0)();
    }
    values() {
        return __iterator(this, 1)();
    }
    /**
     * The key & value args given the callback `fn` MUST be treated as
     * readonly/immutable. This could be enforced via TS, but would
     * break ES6 Map interface contract.
     *
     * @param fn
     * @param thisArg
     */
    forEach(fn, thisArg) {
        for (let pair of __private.get(this).bins) {
            fn.call(thisArg, pair[1], pair[0], this);
        }
    }
    clear() {
        const $this = __private.get(this);
        $this.bins = new Array(DEFAULT_CAP);
        $this.mask = 15;
        $this.size = 0;
    }
    empty() {
        return new HashMap_1(null, this.opts({ cap: DEFAULT_CAP }));
    }
    copy() {
        const $this = __private.get(this);
        const m = new HashMap_1(null, this.opts({ cap: 4 }));
        Object.assign(__private.get(m), {
            bins: $this.bins.slice(),
            mask: $this.mask,
            size: $this.size,
        });
        return m;
    }
    equiv(o) {
        return (0,_internal_equiv__WEBPACK_IMPORTED_MODULE_2__.equivMap)(this, o);
    }
    has(key) {
        const $this = __private.get(this);
        const i = this.find(key, $this);
        return i >= 0 && $this.bins[i] != undefined;
    }
    get(key, notFound) {
        const $this = __private.get(this);
        const i = this.find(key, $this);
        return i >= 0 && $this.bins[i] ? $this.bins[i][1] : notFound;
    }
    set(key, val) {
        const $this = __private.get(this);
        let i = this.find(key, $this);
        if (i >= 0 && $this.bins[i]) {
            $this.bins[i][1] = val;
            return this;
        }
        if ($this.size > $this.mask * $this.load) {
            this.resize($this);
            i = this.find(key, $this);
        }
        $this.bins[i] = [key, val];
        $this.size++;
        return this;
    }
    delete(key) {
        const $this = __private.get(this);
        const { bins, mask } = $this;
        let i = this.find(key, $this);
        if (i >= 0 && !bins[i]) {
            return false;
        }
        $this.size--;
        let j = i;
        let k;
        while (true) {
            delete bins[i];
            do {
                j = (j + 1) & mask;
                if (!bins[j])
                    return true;
                k = $this.hash(bins[j][0]) & mask;
            } while (i <= j ? i < k && k <= j : i < k || k <= j);
            bins[i] = bins[j];
            i = j;
        }
    }
    into(pairs) {
        return (0,_into__WEBPACK_IMPORTED_MODULE_3__.into)(this, pairs);
    }
    dissoc(keys) {
        return (0,_dissoc__WEBPACK_IMPORTED_MODULE_4__.dissoc)(this, keys);
    }
    opts(overrides) {
        const $this = __private.get(this);
        return Object.assign({ hash: $this.hash, equiv: $this.equiv, load: $this.load, cap: $this.mask + 1 }, overrides);
    }
    find(key, $this) {
        const { bins, equiv, mask } = $this;
        let i = mask;
        let h = $this.hash(key) & mask;
        while (bins[h] && !equiv(bins[h][0], key)) {
            i--;
            if (i < 0)
                return -1;
            h = (h + 1) & mask;
        }
        return h;
    }
    resize($this) {
        const src = $this.bins;
        const cap = ($this.mask + 1) * 2;
        $this.bins = new Array(cap);
        $this.mask = cap - 1;
        $this.size = 0;
        for (let p of src) {
            if (p)
                this.set(p[0], p[1]);
        }
    }
};
HashMap = HashMap_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__decorate)([
    _internal_inspect__WEBPACK_IMPORTED_MODULE_6__.inspectable
], HashMap);

function defHashMap(src, opts) {
    if ((0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_7__.isPlainObject)(src)) {
        const keys = Object.keys(src);
        return new HashMap((0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_8__.map)((k) => [k, src[k]], keys), Object.assign({ cap: keys.length / (opts.load || DEFAULT_LOAD) }, opts));
    }
    else {
        return new HashMap(src, opts);
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/associative/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@thi.ng/associative/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArraySet": () => (/* reexport safe */ _array_set__WEBPACK_IMPORTED_MODULE_0__.ArraySet),
/* harmony export */   "defArraySet": () => (/* reexport safe */ _array_set__WEBPACK_IMPORTED_MODULE_0__.defArraySet),
/* harmony export */   "commonKeysMap": () => (/* reexport safe */ _common_keys__WEBPACK_IMPORTED_MODULE_1__.commonKeysMap),
/* harmony export */   "commonKeysObj": () => (/* reexport safe */ _common_keys__WEBPACK_IMPORTED_MODULE_1__.commonKeysObj),
/* harmony export */   "difference": () => (/* reexport safe */ _difference__WEBPACK_IMPORTED_MODULE_2__.difference),
/* harmony export */   "differenceR": () => (/* reexport safe */ _difference__WEBPACK_IMPORTED_MODULE_2__.differenceR),
/* harmony export */   "dissoc": () => (/* reexport safe */ _dissoc__WEBPACK_IMPORTED_MODULE_3__.dissoc),
/* harmony export */   "dissocObj": () => (/* reexport safe */ _dissoc__WEBPACK_IMPORTED_MODULE_3__.dissocObj),
/* harmony export */   "EquivMap": () => (/* reexport safe */ _equiv_map__WEBPACK_IMPORTED_MODULE_4__.EquivMap),
/* harmony export */   "defEquivMap": () => (/* reexport safe */ _equiv_map__WEBPACK_IMPORTED_MODULE_4__.defEquivMap),
/* harmony export */   "HashMap": () => (/* reexport safe */ _hash_map__WEBPACK_IMPORTED_MODULE_5__.HashMap),
/* harmony export */   "defHashMap": () => (/* reexport safe */ _hash_map__WEBPACK_IMPORTED_MODULE_5__.defHashMap),
/* harmony export */   "indexed": () => (/* reexport safe */ _indexed__WEBPACK_IMPORTED_MODULE_6__.indexed),
/* harmony export */   "intersection": () => (/* reexport safe */ _intersection__WEBPACK_IMPORTED_MODULE_7__.intersection),
/* harmony export */   "intersectionR": () => (/* reexport safe */ _intersection__WEBPACK_IMPORTED_MODULE_7__.intersectionR),
/* harmony export */   "into": () => (/* reexport safe */ _into__WEBPACK_IMPORTED_MODULE_8__.into),
/* harmony export */   "invertMap": () => (/* reexport safe */ _invert__WEBPACK_IMPORTED_MODULE_9__.invertMap),
/* harmony export */   "invertObj": () => (/* reexport safe */ _invert__WEBPACK_IMPORTED_MODULE_9__.invertObj),
/* harmony export */   "join": () => (/* reexport safe */ _join__WEBPACK_IMPORTED_MODULE_10__.join),
/* harmony export */   "joinWith": () => (/* reexport safe */ _join__WEBPACK_IMPORTED_MODULE_10__.joinWith),
/* harmony export */   "LLSet": () => (/* reexport safe */ _ll_set__WEBPACK_IMPORTED_MODULE_11__.LLSet),
/* harmony export */   "defLLSet": () => (/* reexport safe */ _ll_set__WEBPACK_IMPORTED_MODULE_11__.defLLSet),
/* harmony export */   "meldApplyObj": () => (/* reexport safe */ _merge_apply__WEBPACK_IMPORTED_MODULE_12__.meldApplyObj),
/* harmony export */   "mergeApplyMap": () => (/* reexport safe */ _merge_apply__WEBPACK_IMPORTED_MODULE_12__.mergeApplyMap),
/* harmony export */   "mergeApplyObj": () => (/* reexport safe */ _merge_apply__WEBPACK_IMPORTED_MODULE_12__.mergeApplyObj),
/* harmony export */   "meldDeepObj": () => (/* reexport safe */ _merge_deep__WEBPACK_IMPORTED_MODULE_13__.meldDeepObj),
/* harmony export */   "mergeDeepObj": () => (/* reexport safe */ _merge_deep__WEBPACK_IMPORTED_MODULE_13__.mergeDeepObj),
/* harmony export */   "meldObjWith": () => (/* reexport safe */ _merge_with__WEBPACK_IMPORTED_MODULE_14__.meldObjWith),
/* harmony export */   "mergeMapWith": () => (/* reexport safe */ _merge_with__WEBPACK_IMPORTED_MODULE_14__.mergeMapWith),
/* harmony export */   "mergeObjWith": () => (/* reexport safe */ _merge_with__WEBPACK_IMPORTED_MODULE_14__.mergeObjWith),
/* harmony export */   "mergeMap": () => (/* reexport safe */ _merge__WEBPACK_IMPORTED_MODULE_15__.mergeMap),
/* harmony export */   "mergeObj": () => (/* reexport safe */ _merge__WEBPACK_IMPORTED_MODULE_15__.mergeObj),
/* harmony export */   "MultiTrie": () => (/* reexport safe */ _multi_trie__WEBPACK_IMPORTED_MODULE_16__.MultiTrie),
/* harmony export */   "defMultiTrie": () => (/* reexport safe */ _multi_trie__WEBPACK_IMPORTED_MODULE_16__.defMultiTrie),
/* harmony export */   "renameKeysMap": () => (/* reexport safe */ _rename_keys__WEBPACK_IMPORTED_MODULE_17__.renameKeysMap),
/* harmony export */   "renameKeysObj": () => (/* reexport safe */ _rename_keys__WEBPACK_IMPORTED_MODULE_17__.renameKeysObj),
/* harmony export */   "renameTransformedKeys": () => (/* reexport safe */ _rename_keys__WEBPACK_IMPORTED_MODULE_17__.renameTransformedKeys),
/* harmony export */   "selectDefinedKeysMap": () => (/* reexport safe */ _select_keys__WEBPACK_IMPORTED_MODULE_18__.selectDefinedKeysMap),
/* harmony export */   "selectDefinedKeysObj": () => (/* reexport safe */ _select_keys__WEBPACK_IMPORTED_MODULE_18__.selectDefinedKeysObj),
/* harmony export */   "selectKeysMap": () => (/* reexport safe */ _select_keys__WEBPACK_IMPORTED_MODULE_18__.selectKeysMap),
/* harmony export */   "selectKeysObj": () => (/* reexport safe */ _select_keys__WEBPACK_IMPORTED_MODULE_18__.selectKeysObj),
/* harmony export */   "SortedMap": () => (/* reexport safe */ _sorted_map__WEBPACK_IMPORTED_MODULE_19__.SortedMap),
/* harmony export */   "defSortedMap": () => (/* reexport safe */ _sorted_map__WEBPACK_IMPORTED_MODULE_19__.defSortedMap),
/* harmony export */   "SortedSet": () => (/* reexport safe */ _sorted_set__WEBPACK_IMPORTED_MODULE_20__.SortedSet),
/* harmony export */   "defSortedSet": () => (/* reexport safe */ _sorted_set__WEBPACK_IMPORTED_MODULE_20__.defSortedSet),
/* harmony export */   "ASparseSet": () => (/* reexport safe */ _sparse_set__WEBPACK_IMPORTED_MODULE_21__.ASparseSet),
/* harmony export */   "SparseSet16": () => (/* reexport safe */ _sparse_set__WEBPACK_IMPORTED_MODULE_21__.SparseSet16),
/* harmony export */   "SparseSet32": () => (/* reexport safe */ _sparse_set__WEBPACK_IMPORTED_MODULE_21__.SparseSet32),
/* harmony export */   "SparseSet8": () => (/* reexport safe */ _sparse_set__WEBPACK_IMPORTED_MODULE_21__.SparseSet8),
/* harmony export */   "defSparseSet": () => (/* reexport safe */ _sparse_set__WEBPACK_IMPORTED_MODULE_21__.defSparseSet),
/* harmony export */   "TrieMap": () => (/* reexport safe */ _trie_map__WEBPACK_IMPORTED_MODULE_22__.TrieMap),
/* harmony export */   "defTrieMap": () => (/* reexport safe */ _trie_map__WEBPACK_IMPORTED_MODULE_22__.defTrieMap),
/* harmony export */   "union": () => (/* reexport safe */ _union__WEBPACK_IMPORTED_MODULE_23__.union),
/* harmony export */   "unionR": () => (/* reexport safe */ _union__WEBPACK_IMPORTED_MODULE_23__.unionR),
/* harmony export */   "withoutKeysMap": () => (/* reexport safe */ _without_keys__WEBPACK_IMPORTED_MODULE_24__.withoutKeysMap),
/* harmony export */   "withoutKeysObj": () => (/* reexport safe */ _without_keys__WEBPACK_IMPORTED_MODULE_24__.withoutKeysObj)
/* harmony export */ });
/* harmony import */ var _array_set__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./array-set */ "./node_modules/@thi.ng/associative/array-set.js");
/* harmony import */ var _common_keys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common-keys */ "./node_modules/@thi.ng/associative/common-keys.js");
/* harmony import */ var _difference__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./difference */ "./node_modules/@thi.ng/associative/difference.js");
/* harmony import */ var _dissoc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dissoc */ "./node_modules/@thi.ng/associative/dissoc.js");
/* harmony import */ var _equiv_map__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./equiv-map */ "./node_modules/@thi.ng/associative/equiv-map.js");
/* harmony import */ var _hash_map__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hash-map */ "./node_modules/@thi.ng/associative/hash-map.js");
/* harmony import */ var _indexed__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./indexed */ "./node_modules/@thi.ng/associative/indexed.js");
/* harmony import */ var _intersection__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./intersection */ "./node_modules/@thi.ng/associative/intersection.js");
/* harmony import */ var _into__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./into */ "./node_modules/@thi.ng/associative/into.js");
/* harmony import */ var _invert__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./invert */ "./node_modules/@thi.ng/associative/invert.js");
/* harmony import */ var _join__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./join */ "./node_modules/@thi.ng/associative/join.js");
/* harmony import */ var _ll_set__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ll-set */ "./node_modules/@thi.ng/associative/ll-set.js");
/* harmony import */ var _merge_apply__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./merge-apply */ "./node_modules/@thi.ng/associative/merge-apply.js");
/* harmony import */ var _merge_deep__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./merge-deep */ "./node_modules/@thi.ng/associative/merge-deep.js");
/* harmony import */ var _merge_with__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./merge-with */ "./node_modules/@thi.ng/associative/merge-with.js");
/* harmony import */ var _merge__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./merge */ "./node_modules/@thi.ng/associative/merge.js");
/* harmony import */ var _multi_trie__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./multi-trie */ "./node_modules/@thi.ng/associative/multi-trie.js");
/* harmony import */ var _rename_keys__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./rename-keys */ "./node_modules/@thi.ng/associative/rename-keys.js");
/* harmony import */ var _select_keys__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./select-keys */ "./node_modules/@thi.ng/associative/select-keys.js");
/* harmony import */ var _sorted_map__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./sorted-map */ "./node_modules/@thi.ng/associative/sorted-map.js");
/* harmony import */ var _sorted_set__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./sorted-set */ "./node_modules/@thi.ng/associative/sorted-set.js");
/* harmony import */ var _sparse_set__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./sparse-set */ "./node_modules/@thi.ng/associative/sparse-set.js");
/* harmony import */ var _trie_map__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./trie-map */ "./node_modules/@thi.ng/associative/trie-map.js");
/* harmony import */ var _union__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./union */ "./node_modules/@thi.ng/associative/union.js");
/* harmony import */ var _without_keys__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./without-keys */ "./node_modules/@thi.ng/associative/without-keys.js");




























/***/ }),

/***/ "./node_modules/@thi.ng/associative/indexed.js":
/*!*****************************************************!*\
  !*** ./node_modules/@thi.ng/associative/indexed.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "indexed": () => (/* binding */ indexed)
/* harmony export */ });
/* harmony import */ var _equiv_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./equiv-map */ "./node_modules/@thi.ng/associative/equiv-map.js");
/* harmony import */ var _select_keys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./select-keys */ "./node_modules/@thi.ng/associative/select-keys.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./node_modules/@thi.ng/associative/utils.js");



/**
 * Takes an iterable of plain objects and array of indexing keys. Calls
 * {@link selectKeysObj} on each value and uses returned objects as new keys
 * to group original values. Returns a new {@link EquivMap} of sets.
 *
 * @example
 * ```ts
 * indexed(
 *   new Set([{a: 1, b: 1}, {a: 1, b: 2}, {a: 1, b: 1, c: 2}]),
 *   ["a","b"]
 * )
 * // EquivMap {
 * //   { a: 1, b: 1 } => Set { { a: 1, b: 1 }, { a: 1, b: 1, c: 2 } },
 * //   { a: 1, b: 2 } => Set { { a: 1, b: 2 } } }
 * ```
 *
 * @param records - objects to index
 * @param ks - keys used for indexing
 */
const indexed = (records, ks) => {
    const res = new _equiv_map__WEBPACK_IMPORTED_MODULE_0__.EquivMap();
    let x, ik, rv;
    for (x of records) {
        ik = (0,_select_keys__WEBPACK_IMPORTED_MODULE_1__.selectKeysObj)(x, ks);
        rv = res.get(ik);
        !rv && res.set(ik, (rv = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.empty)(records, Set)));
        rv.add(x);
    }
    return res;
};


/***/ }),

/***/ "./node_modules/@thi.ng/associative/internal/equiv.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/associative/internal/equiv.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "equivMap": () => (/* binding */ equivMap),
/* harmony export */   "equivSet": () => (/* binding */ equivSet)
/* harmony export */ });
/* harmony import */ var _thi_ng_equiv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/equiv */ "./node_modules/@thi.ng/equiv/index.js");

const equivMap = (a, b) => {
    if (a === b) {
        return true;
    }
    if (!(b instanceof Map) || a.size !== b.size) {
        return false;
    }
    for (let p of a.entries()) {
        if (!(0,_thi_ng_equiv__WEBPACK_IMPORTED_MODULE_0__.equiv)(b.get(p[0]), p[1])) {
            return false;
        }
    }
    return true;
};
const equivSet = (a, b) => {
    if (a === b) {
        return true;
    }
    if (!(b instanceof Set) || a.size !== b.size) {
        return false;
    }
    for (let k of a.keys()) {
        if (!b.has(k)) {
            return false;
        }
    }
    return true;
};


/***/ }),

/***/ "./node_modules/@thi.ng/associative/internal/inspect.js":
/*!**************************************************************!*\
  !*** ./node_modules/@thi.ng/associative/internal/inspect.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "inspectable": () => (/* binding */ inspectable)
/* harmony export */ });
/* harmony import */ var _thi_ng_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/api */ "./node_modules/@thi.ng/api/mixin.js");
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-node.js");
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/xform/map.js");



const inspect = (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isNode)() ? __webpack_require__(/*! util */ "?606e").inspect : null;
const inspectSet = (coll, opts) => [...(0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_1__.map)((x) => inspect(x, opts), coll)].join(", ");
const inspectMap = (coll, opts) => [
    ...(0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_1__.map)(([k, v]) => `${inspect(k, opts)} => ${inspect(v, opts)}`, coll),
].join(", ");
/**
 * NodeJS inspection mixin
 *
 * @remarks
 * Reference:
 * https://nodejs.org/api/util.html#util_custom_inspection_functions_on_objects
 *
 * @internal
 */
const inspectable = (0,_thi_ng_api__WEBPACK_IMPORTED_MODULE_2__.mixin)({
    [Symbol.for("nodejs.util.inspect.custom")](depth, opts) {
        const name = this[Symbol.toStringTag];
        const childOpts = Object.assign(Object.assign({}, opts), { depth: opts.depth === null ? null : opts.depth - 1 });
        return depth >= 0
            ? [
                `${name}(${this.size || 0}) {`,
                inspect
                    ? this instanceof Set
                        ? inspectSet(this, childOpts)
                        : this instanceof Map
                            ? inspectMap(this, childOpts)
                            : ""
                    : "",
                "}",
            ].join(" ")
            : opts.stylize(`[${name}]`, "special");
    },
});


/***/ }),

/***/ "./node_modules/@thi.ng/associative/internal/xform-setop.js":
/*!******************************************************************!*\
  !*** ./node_modules/@thi.ng/associative/internal/xform-setop.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "xformSetOp": () => (/* binding */ xformSetOp)
/* harmony export */ });
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/reduce.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ "./node_modules/@thi.ng/associative/utils.js");


const xformSetOp = (rfn, op, src) => src
    ? (0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_0__.reduce)(rfn(), src)
    : [
        () => null,
        (acc) => acc || new Set(),
        (acc, x) => (!acc ? (0,_utils__WEBPACK_IMPORTED_MODULE_1__.ensureSet)(x) : op(acc, (0,_utils__WEBPACK_IMPORTED_MODULE_1__.ensureSet)(x))),
    ];


/***/ }),

/***/ "./node_modules/@thi.ng/associative/intersection.js":
/*!**********************************************************!*\
  !*** ./node_modules/@thi.ng/associative/intersection.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "intersection": () => (/* binding */ intersection),
/* harmony export */   "intersectionR": () => (/* binding */ intersectionR)
/* harmony export */ });
/* harmony import */ var _internal_xform_setop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/xform-setop */ "./node_modules/@thi.ng/associative/internal/xform-setop.js");
/* harmony import */ var _into__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./into */ "./node_modules/@thi.ng/associative/into.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@thi.ng/associative/utils.js");



/**
 * Computes the intersection of sets `a` and `b` and writes results into
 * new set or optionally given set `out` (assumed to be empty for
 * correct results). If `out` is *not* given, the returned Set type will
 * be that of `a` (provided it defines `Symbol.species`).
 *
 * @param a - first set
 * @param b - other set
 * @param out - result set
 */
const intersection = (a, b, out) => {
    out = out || (0,_utils__WEBPACK_IMPORTED_MODULE_0__.empty)(a, Set);
    if (a === b) {
        return (0,_into__WEBPACK_IMPORTED_MODULE_1__.into)(out, a);
    }
    if (b.size < a.size) {
        return intersection(b, a, out);
    }
    for (let i of b) {
        if (a.has(i)) {
            out.add(i);
        }
    }
    return out;
};
function intersectionR(src) {
    return (0,_internal_xform_setop__WEBPACK_IMPORTED_MODULE_2__.xformSetOp)(intersectionR, intersection, src);
}


/***/ }),

/***/ "./node_modules/@thi.ng/associative/into.js":
/*!**************************************************!*\
  !*** ./node_modules/@thi.ng/associative/into.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "into": () => (/* binding */ into)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-map.js");

function into(dest, src) {
    if ((0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isMap)(dest)) {
        for (let x of src) {
            dest.set(x[0], x[1]);
        }
    }
    else {
        for (let x of src) {
            dest.add(x);
        }
    }
    return dest;
}


/***/ }),

/***/ "./node_modules/@thi.ng/associative/invert.js":
/*!****************************************************!*\
  !*** ./node_modules/@thi.ng/associative/invert.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "invertMap": () => (/* binding */ invertMap),
/* harmony export */   "invertObj": () => (/* binding */ invertObj)
/* harmony export */ });
/**
 * Returns a new map in which the original values are used as keys and
 * original keys as values. If `dest` is given, writes results in that
 * map instead. Depending on the value type of `src` and/or if the
 * inverted map should use custom key equality semantics as provided by
 * the Map types in this package, you MUST provide a `dest` map, since
 * the default `dest` will only be a standard ES6 Map.
 *
 * @example
 * ```ts
 * invertMap(new Map(), new Map([["a", 1], ["b", 2]]));
 * // Map { 1 => 'a', 2 => 'b' }
 * ```
 *
 * @param src - map to invert
 * @param dest - result map
 */
const invertMap = (src, dest) => {
    dest = dest || new Map();
    for (let p of src) {
        dest.set(p[1], p[0]);
    }
    return dest;
};
/**
 * Returns a new object in which the original values are used as keys
 * and original keys as values. If `dest` is given, writes results in
 * that object instead.
 *
 * @example
 * ```ts
 * invertObj({a: 1, b: 2})
 * // { '1': 'a', '2': 'b' }
 * ```
 *
 * @param src - object to invert
 * @param dest - result object
 */
const invertObj = (src, dest = {}) => {
    for (let k in src) {
        dest[src[k]] = k;
    }
    return dest;
};


/***/ }),

/***/ "./node_modules/@thi.ng/associative/join.js":
/*!**************************************************!*\
  !*** ./node_modules/@thi.ng/associative/join.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "join": () => (/* binding */ join),
/* harmony export */   "joinWith": () => (/* binding */ joinWith)
/* harmony export */ });
/* harmony import */ var _common_keys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common-keys */ "./node_modules/@thi.ng/associative/common-keys.js");
/* harmony import */ var _indexed__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./indexed */ "./node_modules/@thi.ng/associative/indexed.js");
/* harmony import */ var _invert__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./invert */ "./node_modules/@thi.ng/associative/invert.js");
/* harmony import */ var _merge__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./merge */ "./node_modules/@thi.ng/associative/merge.js");
/* harmony import */ var _rename_keys__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./rename-keys */ "./node_modules/@thi.ng/associative/rename-keys.js");
/* harmony import */ var _select_keys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./select-keys */ "./node_modules/@thi.ng/associative/select-keys.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@thi.ng/associative/utils.js");







/**
 * Computes the natural join between the two sets of relations. Each set
 * is assumed to have plain objects as values with at least one of the
 * keys present in both sides. Furthermore the objects in each set are
 * assumed to have the same internal structure (i.e. sets of keys).
 * Returns new set of same type as `a`.
 *
 * @example
 * ```ts
 * join(
 *   new Set([
 *     {id: 1, name: "foo"},
 *     {id: 2, name: "bar"},
 *     {id: 3, name: "baz"}]),
 *   new Set([
 *     {id: 1, color: "red"},
 *     {id: 2, color: "blue"}])
 * )
 * // Set {
 * //   { id: 1, color: 'red', name: 'foo' },
 * //   { id: 2, color: 'blue', name: 'bar' }
 * // }
 * ```
 *
 * @param a - first set
 * @param b - other set
 */
const join = (a, b) => {
    if (a.size && b.size) {
        const ks = (0,_common_keys__WEBPACK_IMPORTED_MODULE_0__.commonKeysObj)((0,_utils__WEBPACK_IMPORTED_MODULE_1__.first)(a) || {}, (0,_utils__WEBPACK_IMPORTED_MODULE_1__.first)(b) || {});
        let aa, bb;
        if (a.size <= b.size) {
            aa = a;
            bb = b;
        }
        else {
            aa = b;
            bb = a;
        }
        const idx = (0,_indexed__WEBPACK_IMPORTED_MODULE_2__.indexed)(aa, ks);
        const res = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.empty)(a, Set);
        for (let x of bb) {
            const found = idx.get((0,_select_keys__WEBPACK_IMPORTED_MODULE_3__.selectKeysObj)(x, ks));
            if (found) {
                for (let f of found) {
                    res.add((0,_merge__WEBPACK_IMPORTED_MODULE_4__.mergeObj)(Object.assign({}, f), x));
                }
            }
        }
        return res;
    }
    return (0,_utils__WEBPACK_IMPORTED_MODULE_1__.empty)(a, Set);
};
/**
 * Similar to {@link join}, computes the join between two sets of
 * relations, using the given keys in `kmap` only for joining and
 * ignoring others. `kmap` can also be used to translate join keys in
 * `b` where needed. Else, if no renaming is desired, the values in
 * `kmap` should be the same as their respective keys, e.g. `{id:
 * "id"}`. Returns new set of same type as `a`.
 *
 * @example
 * ```ts
 * joinWith(
 *   new Set([
 *     {id: 1, name: "foo"},
 *     {id: 2, name: "bar"},
 *     {id: 3, name: "baz"}]),
 *   new Set([
 *     {type: 1, color: "red"},
 *     {type: 2, color: "blue"}]),
 *   {id: "type"}
 * )
 * // Set {
 * //   { type: 1, color: 'red', id: 1, name: 'foo' },
 * //   { type: 2, color: 'blue', id: 2, name: 'bar' } }
 * ```
 *
 * @param a - first set
 * @param b - other set
 * @param kmap - keys to compute join for
 */
const joinWith = (a, b, kmap) => {
    if (a.size && b.size) {
        let aa, bb;
        let k;
        if (a.size <= b.size) {
            aa = a;
            bb = b;
            k = (0,_invert__WEBPACK_IMPORTED_MODULE_5__.invertObj)(kmap);
        }
        else {
            aa = b;
            bb = a;
            k = kmap;
        }
        const idx = (0,_indexed__WEBPACK_IMPORTED_MODULE_2__.indexed)(aa, (0,_utils__WEBPACK_IMPORTED_MODULE_1__.objValues)(k));
        const ks = Object.keys(k);
        const res = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.empty)(a, Set);
        for (let x of bb) {
            const found = idx.get((0,_rename_keys__WEBPACK_IMPORTED_MODULE_6__.renameKeysObj)((0,_select_keys__WEBPACK_IMPORTED_MODULE_3__.selectKeysObj)(x, ks), k));
            if (found) {
                for (let f of found) {
                    res.add((0,_merge__WEBPACK_IMPORTED_MODULE_4__.mergeObj)(Object.assign({}, f), x));
                }
            }
        }
        return res;
    }
    return (0,_utils__WEBPACK_IMPORTED_MODULE_1__.empty)(a, Set);
};


/***/ }),

/***/ "./node_modules/@thi.ng/associative/ll-set.js":
/*!****************************************************!*\
  !*** ./node_modules/@thi.ng/associative/ll-set.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LLSet": () => (/* binding */ LLSet),
/* harmony export */   "defLLSet": () => (/* binding */ defLLSet)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _thi_ng_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @thi.ng/api */ "./node_modules/@thi.ng/api/constants.js");
/* harmony import */ var _thi_ng_dcons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/dcons */ "./node_modules/@thi.ng/dcons/dcons.js");
/* harmony import */ var _thi_ng_equiv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/equiv */ "./node_modules/@thi.ng/equiv/index.js");
/* harmony import */ var _dissoc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dissoc */ "./node_modules/@thi.ng/associative/dissoc.js");
/* harmony import */ var _internal_equiv__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/equiv */ "./node_modules/@thi.ng/associative/internal/equiv.js");
/* harmony import */ var _internal_inspect__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./internal/inspect */ "./node_modules/@thi.ng/associative/internal/inspect.js");
/* harmony import */ var _into__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./into */ "./node_modules/@thi.ng/associative/into.js");
var LLSet_1;








const __private = new WeakMap();
const __vals = (inst) => __private.get(inst).vals;
/**
 * Similar to {@link ArraySet}, this class is an alternative
 * implementation of the native ES6 Set API using a
 * {@link @thi.ng/dcons#DCons} linked list as backing store and a
 * customizable value equality / equivalence predicate. By the default
 * uses {@link @thi.ng/equiv#equiv} for equivalence checking.
 *
 * Additionally, the type also implements the {@link @thi.ng/api#ICopy},
 * {@link @thi.ng/api#IEmpty} and {@link @thi.ng/api#IEquiv} interfaces
 * itself.
 */
let LLSet = LLSet_1 = class LLSet extends Set {
    constructor(vals, opts = {}) {
        super();
        __private.set(this, {
            equiv: opts.equiv || _thi_ng_equiv__WEBPACK_IMPORTED_MODULE_0__.equiv,
            vals: new _thi_ng_dcons__WEBPACK_IMPORTED_MODULE_1__.DCons(),
        });
        vals && this.into(vals);
    }
    *[Symbol.iterator]() {
        yield* __vals(this);
    }
    get [Symbol.species]() {
        return LLSet_1;
    }
    get [Symbol.toStringTag]() {
        return "LLSet";
    }
    get size() {
        return __vals(this).length;
    }
    copy() {
        const s = new LLSet_1(null, this.opts());
        __private.get(s).vals = __vals(this).copy();
        return s;
    }
    empty() {
        return new LLSet_1(null, this.opts());
    }
    clear() {
        __vals(this).clear();
    }
    first() {
        if (this.size) {
            return __vals(this).head.value;
        }
    }
    add(key) {
        !this.has(key) && __vals(this).push(key);
        return this;
    }
    into(keys) {
        return (0,_into__WEBPACK_IMPORTED_MODULE_2__.into)(this, keys);
    }
    has(key) {
        return this.get(key, _thi_ng_api__WEBPACK_IMPORTED_MODULE_3__.SEMAPHORE) !== _thi_ng_api__WEBPACK_IMPORTED_MODULE_3__.SEMAPHORE;
    }
    /**
     * Returns the canonical (stored) value for `key`, if present. If
     * the set contains no equivalent for `key`, returns `notFound`.
     *
     * @param key - search key
     * @param notFound - default value
     */
    get(key, notFound) {
        const { equiv, vals } = __private.get(this);
        let i = vals.head;
        while (i) {
            if (equiv(i.value, key)) {
                return i.value;
            }
            i = i.next;
        }
        return notFound;
    }
    delete(key) {
        const { equiv, vals } = __private.get(this);
        let i = vals.head;
        while (i) {
            if (equiv(i.value, key)) {
                vals.splice(i, 1);
                return true;
            }
            i = i.next;
        }
        return false;
    }
    disj(keys) {
        return (0,_dissoc__WEBPACK_IMPORTED_MODULE_4__.dissoc)(this, keys);
    }
    equiv(o) {
        return (0,_internal_equiv__WEBPACK_IMPORTED_MODULE_5__.equivSet)(this, o);
    }
    /**
     * The value args given to the callback `fn` MUST be treated as
     * readonly/immutable. This could be enforced via TS, but would
     * break ES6 Set interface contract.
     *
     * @param fn
     * @param thisArg
     */
    forEach(fn, thisArg) {
        let i = __vals(this).head;
        while (i) {
            fn.call(thisArg, i.value, i.value, this);
            i = i.next;
        }
    }
    *entries() {
        for (let v of __vals(this)) {
            yield [v, v];
        }
    }
    *keys() {
        yield* __vals(this);
    }
    *values() {
        yield* __vals(this);
    }
    opts() {
        return { equiv: __private.get(this).equiv };
    }
};
LLSet = LLSet_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([
    _internal_inspect__WEBPACK_IMPORTED_MODULE_7__.inspectable
], LLSet);

const defLLSet = (vals, opts) => new LLSet(vals, opts);


/***/ }),

/***/ "./node_modules/@thi.ng/associative/merge-apply.js":
/*!*********************************************************!*\
  !*** ./node_modules/@thi.ng/associative/merge-apply.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mergeApplyMap": () => (/* binding */ mergeApplyMap),
/* harmony export */   "mergeApplyObj": () => (/* binding */ mergeApplyObj),
/* harmony export */   "meldApplyObj": () => (/* binding */ meldApplyObj)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-function.js");
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-proto-path.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@thi.ng/associative/utils.js");


/**
 * Similar to {@link mergeApplyObj}, but for ES6 Maps instead of plain objects.
 *
 * @param src - source map
 * @param xs - map w/ transformation functions
 */
const mergeApplyMap = (src, xs) => {
    const res = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.copy)(src, Map);
    for (let [k, v] of xs) {
        res.set(k, (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__.isFunction)(v) ? v(res.get(k)) : v);
    }
    return res;
};
/**
 * Similar to {@link mergeObjWith}, but only supports 2 args and any
 * function values in `xs` will be called with respective value in `src`
 * to produce a new / derived value for that key, i.e.
 *
 * @remarks
 * Since v4.4.0, the `__proto__` property will be ignored to avoid
 * prototype pollution.
 *
 * @example
 * ```ts
 * dest[k] = xs[k](src[k])
 * ```
 *
 * Returns new merged object and does not modify any of the inputs.
 *
 * @example
 * ```ts
 * mergeApplyObj(
 *   { a: "hello", b: 23, c: 12 },
 *   { a: (x) => x + " world", b: 42 }
 * );
 * // { a: 'hello world', b: 42, c: 12 }
 * ```
 *
 * @param src - source object
 * @param xs - object w/ transformation functions
 */
const mergeApplyObj = (src, xs) => meldApplyObj(Object.assign({}, src), xs);
/**
 * Mutable version of {@link mergeApplyObj}. Returns modified `src`
 * object.
 *
 * @remarks
 * Since v4.4.0, the `__proto__` property will be ignored to avoid
 * prototype pollution.
 *
 * @param src -
 * @param xs -
 */
const meldApplyObj = (src, xs) => {
    for (let k in xs) {
        if ((0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_2__.isIllegalKey)(k))
            continue;
        const v = xs[k];
        src[k] = (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__.isFunction)(v) ? v(src[k]) : v;
    }
    return src;
};


/***/ }),

/***/ "./node_modules/@thi.ng/associative/merge-deep.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/associative/merge-deep.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mergeDeepObj": () => (/* binding */ mergeDeepObj),
/* harmony export */   "meldDeepObj": () => (/* binding */ meldDeepObj)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-plain-object.js");
/* harmony import */ var _merge_with__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./merge-with */ "./node_modules/@thi.ng/associative/merge-with.js");


const mergeDeepObj = (dest, ...xs) => (0,_merge_with__WEBPACK_IMPORTED_MODULE_0__.mergeObjWith)((a, b) => (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(a) && (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(b) ? mergeDeepObj(a, b) : b, dest, ...xs);
const meldDeepObj = (dest, ...xs) => (0,_merge_with__WEBPACK_IMPORTED_MODULE_0__.meldObjWith)((a, b) => (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(a) && (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(b) ? meldDeepObj(a, b) : b, dest, ...xs);


/***/ }),

/***/ "./node_modules/@thi.ng/associative/merge-with.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/associative/merge-with.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mergeMapWith": () => (/* binding */ mergeMapWith),
/* harmony export */   "mergeObjWith": () => (/* binding */ mergeObjWith),
/* harmony export */   "meldObjWith": () => (/* binding */ meldObjWith)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-proto-path.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@thi.ng/associative/utils.js");


const mergeMapWith = (f, dest, ...xs) => {
    const res = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.copy)(dest, Map);
    for (let x of xs) {
        if (x != null) {
            for (let [k, v] of x) {
                res.set(k, res.has(k) ? f(res.get(k), v) : v);
            }
        }
    }
    return res;
};
/**
 * Immutably merges given objects in a pairwise manner. Applies function
 * `f` if the same key exists in both objects and uses that function's
 * return value as new value for that key.
 *
 * @remarks
 * Since v4.4.0, the `__proto__` property will be ignored to avoid
 * prototype pollution.
 *
 * @param f
 * @param dest
 * @param xs
 */
const mergeObjWith = (f, dest, ...xs) => meldObjWith(f, Object.assign({}, dest), ...xs);
/**
 * Mutable version of {@link mergeObjWith}. Returns modified `dest`
 * object.
 *
 * @remarks
 * Since v4.4.0, the `__proto__` property will be ignored to avoid
 * prototype pollution.
 *
 * @param f -
 * @param dest -
 * @param xs -
 */
const meldObjWith = (f, dest, ...xs) => {
    for (let x of xs) {
        if (x != null) {
            for (let k in x) {
                if ((0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__.isIllegalKey)(k))
                    continue;
                const v = x[k];
                dest[k] = dest.hasOwnProperty(k) ? f(dest[k], v) : v;
            }
        }
    }
    return dest;
};


/***/ }),

/***/ "./node_modules/@thi.ng/associative/merge.js":
/*!***************************************************!*\
  !*** ./node_modules/@thi.ng/associative/merge.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mergeMap": () => (/* binding */ mergeMap),
/* harmony export */   "mergeObj": () => (/* binding */ mergeObj)
/* harmony export */ });
/**
 * Merges all given maps in left-to-right order into `dest`.
 * Returns `dest`.
 *
 * @param dest - target map
 * @param xs - input maps
 */
const mergeMap = (dest, ...xs) => {
    for (let x of xs) {
        if (x != null) {
            for (let pair of x) {
                dest.set(pair[0], pair[1]);
            }
        }
    }
    return dest;
};
/**
 * Merges all given objects in left-to-right order into `dest`.
 * Returns `dest`.
 *
 * @param dest - target object
 * @param xs - input objects
 */
const mergeObj = (dest, ...xs) => Object.assign(dest, ...xs);


/***/ }),

/***/ "./node_modules/@thi.ng/associative/multi-trie.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/associative/multi-trie.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MultiTrie": () => (/* binding */ MultiTrie),
/* harmony export */   "defMultiTrie": () => (/* binding */ defMultiTrie)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-array.js");
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/xform/map.js");
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/iter/vals.js");


class MultiTrie {
    constructor(pairs, opts) {
        this.opts = opts;
        this.next = {};
        this.n = 0;
        pairs && this.into(pairs);
    }
    *[Symbol.iterator]() {
        const queue = [["", this]];
        while (queue.length) {
            const [prefix, node] = queue.pop();
            if (node.vals) {
                yield* (0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_0__.map)((v) => [prefix, v], node.vals);
            }
            else {
                node.queueChildren(queue, prefix);
            }
        }
    }
    *keys(sep = "", prefix = "") {
        const queue = [[prefix, this]];
        while (queue.length) {
            const [key, node] = queue.pop();
            if (node.vals) {
                yield key;
            }
            else {
                node.queueChildren(queue, key, sep);
            }
        }
    }
    *values() {
        const queue = [this];
        while (queue.length) {
            const node = queue.pop();
            if (node.vals) {
                yield* node.vals;
            }
            else {
                queue.push(...(0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_1__.vals)(node.next));
            }
        }
    }
    *suffixes(prefix, withPrefix = false, sep = "") {
        const node = this.find(prefix);
        if (node) {
            yield* node.keys(sep, withPrefix
                ? (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_2__.isArray)(prefix)
                    ? prefix.join(sep)
                    : prefix.toString()
                : "");
        }
    }
    clear() {
        this.next = {};
        this.n = 0;
        this.vals = undefined;
    }
    has(key) {
        return !!this.get(key);
    }
    hasPrefix(prefix) {
        return !!this.find(prefix);
    }
    get(key) {
        const node = this.find(key);
        return node ? node.vals : undefined;
    }
    find(key) {
        let node = this;
        for (let i = 0, n = key.length; i < n; i++) {
            node = node.next[key[i].toString()];
            if (!node)
                return;
        }
        return node;
    }
    /**
     * Returns longest known prefix for `key` as array. If array is
     * empty, the given key has no partial matches.
     *
     * @param key
     */
    knownPrefix(key) {
        let node = this;
        const prefix = [];
        for (let i = 0, n = key.length; i < n; i++) {
            const k = key[i].toString();
            const next = node.next[k];
            if (!next)
                break;
            prefix.push(k);
            node = next;
        }
        return prefix;
    }
    hasKnownPrefix(key) {
        return this.knownPrefix(key).length > 0;
    }
    add(key, val) {
        var _a;
        let node = this;
        for (let i = 0, n = key.length; i < n; i++) {
            const k = key[i].toString();
            const next = node.next[k];
            node = !next
                ? (node.n++, (node.next[k] = new MultiTrie(null, this.opts)))
                : next;
        }
        if (!node.vals) {
            const ctor = (_a = this.opts) === null || _a === void 0 ? void 0 : _a.vals;
            node.vals = ctor ? ctor() : new Set();
        }
        node.vals.add(val);
    }
    into(xs) {
        for (let [k, v] of xs) {
            this.add(k, v);
        }
    }
    delete(prefix, val) {
        const n = prefix.length;
        if (n < 1)
            return false;
        const path = [];
        const key = [];
        let i = 0;
        let node = this;
        for (; i < n; i++) {
            const k = prefix[i].toString();
            key.push(k);
            path.push(node);
            node = node.next[k];
            if (!node)
                return false;
        }
        // if val is given, remove from set
        // and only collapse path if no other vals for key
        if (val !== undefined) {
            const vals = node.vals;
            if (vals && vals.has(val)) {
                vals.delete(val);
                if (vals.size > 0)
                    return true;
            }
            else {
                return false;
            }
        }
        // collapse path
        while ((node = path[--i])) {
            delete node.next[key[i]];
            if (--node.n)
                break;
        }
        return true;
    }
    queueChildren(queue, prefix, sep = "") {
        prefix = prefix.length ? prefix + sep : prefix;
        queue.push(...Object.keys(this.next).map((k) => [prefix + k, this.next[k]]));
    }
}
const defMultiTrie = (pairs, opts) => new MultiTrie(pairs, opts);


/***/ }),

/***/ "./node_modules/@thi.ng/associative/rename-keys.js":
/*!*********************************************************!*\
  !*** ./node_modules/@thi.ng/associative/rename-keys.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "renameKeysMap": () => (/* binding */ renameKeysMap),
/* harmony export */   "renameKeysObj": () => (/* binding */ renameKeysObj),
/* harmony export */   "renameTransformedKeys": () => (/* binding */ renameTransformedKeys)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-array.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@thi.ng/associative/utils.js");


/**
 * Renames keys in `src` using mapping provided by key map `km`. Does
 * support key swapping / swizzling. Does not modify original.
 *
 * @param src - source map
 * @param km - key mappings
 * @param out - result map
 */
const renameKeysMap = (src, km, out) => {
    out = out || (0,_utils__WEBPACK_IMPORTED_MODULE_0__.empty)(src, Map);
    for (let [k, v] of src) {
        out.set(km.has(k) ? km.get(k) : k, v);
    }
    return out;
};
/**
 * Renames keys in `src` using mapping provided by key map `km`. Does
 * support key swapping / swizzling. Does not modify original.
 *
 * ```
 * // swap a & b, rename c
 * renameKeysObj({a: 1, b: 2, c: 3}, {a: "b", b: "a", c: "cc"})
 * // {b: 1, a: 2, cc: 3}
 * ```
 *
 * @param src - source object
 * @param km - key mappings
 * @param out - result object
 */
const renameKeysObj = (src, km, out = {}) => {
    for (let k in src) {
        out[km.hasOwnProperty(k) ? km[k] : k] = src[k];
    }
    return out;
};
/**
 * Similar to (combination of) {@link renameKeysObj} and
 * {@link selectDefinedKeysObj}. Takes a `src` object and `keys`, an object of
 * mappings to rename given keys and (optionally) transform their values.
 * Returns new object. If `src` is nullish itself, returns an empty object.
 *
 * @remarks
 * Only keys with non-nullish values (in `src`) are being processed. The `keys`
 * object uses the original key names as keys and the new keys as their values
 * (like {@link renameKeysObj}). If a transformation of a key's value is
 * desired, the format is `{ oldname: [newname, xform] }`, where `xform` is a
 * 2-arg function, receiving the original value of `oldname` and the entire
 * `src` object as 2nd arg. The return value of that function will be used as
 * the value of `newname`.
 *
 * @example
 * ```ts
 * renameTransformedKeys(
 *   // source object
 *   { a: 1, b: 2, c: null },
 *   // mappings
 *   {
 *     // rename a => aa
 *     a: "aa",
 *     // rename & transform
 *     b: ["bb", (x, src) => x * 10 + src.a]
 *     // ignored, since original c is null
 *     c: "cc"
 *   }
 * )
 * // { aa: 1, bb: 21 }
 * ```
 *
 * @param src
 * @param keys
 */
const renameTransformedKeys = (src, keys) => {
    if (!src)
        return {};
    const res = {};
    for (let $k in keys) {
        const spec = keys[$k];
        const [k, fn] = (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__.isArray)(spec) ? spec : [spec];
        const val = src[$k];
        if (val != null)
            res[k] = fn ? fn(val, src) : val;
    }
    return res;
};


/***/ }),

/***/ "./node_modules/@thi.ng/associative/select-keys.js":
/*!*********************************************************!*\
  !*** ./node_modules/@thi.ng/associative/select-keys.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "selectKeysMap": () => (/* binding */ selectKeysMap),
/* harmony export */   "selectDefinedKeysMap": () => (/* binding */ selectDefinedKeysMap),
/* harmony export */   "selectKeysObj": () => (/* binding */ selectKeysObj),
/* harmony export */   "selectDefinedKeysObj": () => (/* binding */ selectDefinedKeysObj)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@thi.ng/associative/utils.js");

/**
 * Returns a new map of same type as input only containing given keys
 * (and only if they existed in the original map).
 *
 * @param src - source map
 * @param ks - selected keys
 */
const selectKeysMap = (src, ks) => {
    const dest = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.empty)(src, Map);
    for (let k of ks) {
        src.has(k) && dest.set(k, src.get(k));
    }
    return dest;
};
/**
 * Similar to {@link selectKeysMap}, but only selects keys if their value is
 * defined (i.e. non-nullish).
 *
 * @param src
 * @param ks
 */
const selectDefinedKeysMap = (src, ks) => {
    const dest = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.empty)(src, Map);
    for (let k of ks) {
        const val = src.get(k);
        if (val != null)
            dest.set(k, val);
    }
    return dest;
};
/**
 * Returns a new object only containing given keys (and only if they
 * existed in the original).
 *
 * @param src - source object
 * @param ks - selected keys
 */
const selectKeysObj = (src, ks) => {
    const dest = {};
    for (let k of ks) {
        src.hasOwnProperty(k) && (dest[k] = src[k]);
    }
    return dest;
};
/**
 * Similar to {@link selectKeysObj}, but only selects keys if their value is
 * defined (i.e. non-nullish).
 *
 * @param src
 * @param ks
 */
const selectDefinedKeysObj = (src, ks) => {
    const res = {};
    for (let k of ks) {
        const val = src[k];
        if (val != null)
            res[k] = val;
    }
    return res;
};


/***/ }),

/***/ "./node_modules/@thi.ng/associative/sorted-map.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/associative/sorted-map.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SortedMap": () => (/* binding */ SortedMap),
/* harmony export */   "defSortedMap": () => (/* binding */ defSortedMap)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _thi_ng_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @thi.ng/api */ "./node_modules/@thi.ng/api/constants.js");
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-plain-object.js");
/* harmony import */ var _thi_ng_compare__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/compare */ "./node_modules/@thi.ng/compare/compare.js");
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/xform/map.js");
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/reduced.js");
/* harmony import */ var _dissoc__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dissoc */ "./node_modules/@thi.ng/associative/dissoc.js");
/* harmony import */ var _internal_equiv__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/equiv */ "./node_modules/@thi.ng/associative/internal/equiv.js");
/* harmony import */ var _internal_inspect__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./internal/inspect */ "./node_modules/@thi.ng/associative/internal/inspect.js");
/* harmony import */ var _into__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./into */ "./node_modules/@thi.ng/associative/into.js");
var SortedMap_1;









class Node {
    constructor(k, v, h) {
        this.k = k;
        this.v = v;
        this.next = new Array(h + 1);
    }
}
// stores private properties for all instances
// http://fitzgeraldnick.com/2014/01/13/hiding-implementation-details-with-e6-weakmaps.html
const __private = new WeakMap();
let SortedMap = SortedMap_1 = class SortedMap extends Map {
    /**
     * Creates new {@link SortedMap} instance with optionally given pairs
     * and/or options.
     *
     * @param pairs - key-value pairs
     * @param opts - config options
     */
    constructor(pairs, opts = {}) {
        super();
        const cap = opts.capacity || SortedMap_1.DEFAULT_CAP;
        const maxh = Math.ceil(Math.log2(cap));
        __private.set(this, {
            head: new Node(null, null, 0),
            cap: Math.pow(2, maxh),
            cmp: opts.compare || _thi_ng_compare__WEBPACK_IMPORTED_MODULE_0__.compare,
            p: opts.probability || SortedMap_1.DEFAULT_P,
            maxh,
            length: 0,
            h: 0,
        });
        if (pairs) {
            this.into(pairs);
        }
    }
    get [Symbol.species]() {
        return SortedMap_1;
    }
    *[Symbol.iterator]() {
        let node = __private.get(this).head;
        while ((node = node.next[0])) {
            yield [node.k, node.v];
        }
    }
    *entries(key, max = false) {
        let { head: node, cmp } = __private.get(this);
        let code;
        if (max) {
            while ((node = node.next[0])) {
                if (key === undefined || (code = cmp(node.k, key)) <= 0) {
                    yield [node.k, node.v];
                    if (code === 0)
                        return;
                }
            }
        }
        else {
            while ((node = node.next[0])) {
                if (key === undefined || (code = cmp(node.k, key)) >= 0) {
                    yield [node.k, node.v];
                }
            }
        }
    }
    keys(key, max = false) {
        return (0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_1__.map)((p) => p[0], this.entries(key, max));
    }
    values(key, max = false) {
        return (0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_1__.map)((p) => p[1], this.entries(key, max));
    }
    get size() {
        return __private.get(this).length;
    }
    clear() {
        const $this = __private.get(this);
        $this.head = new Node(null, null, 0);
        $this.length = 0;
        $this.h = 0;
    }
    empty() {
        return new SortedMap_1(null, Object.assign(Object.assign({}, this.opts()), { capacity: SortedMap_1.DEFAULT_CAP }));
    }
    copy() {
        return new SortedMap_1(this, this.opts());
    }
    compare(o) {
        const n = this.size;
        const m = o.size;
        if (n < m)
            return -1;
        if (n > m)
            return 1;
        const i = this.entries();
        const j = o.entries();
        let x, y;
        let c;
        while (((x = i.next()), (y = j.next()), !x.done && !y.done)) {
            if ((c = (0,_thi_ng_compare__WEBPACK_IMPORTED_MODULE_0__.compare)(x.value[0], y.value[0])) !== 0 ||
                (c = (0,_thi_ng_compare__WEBPACK_IMPORTED_MODULE_0__.compare)(x.value[1], y.value[1])) !== 0) {
                return c;
            }
        }
        return 0;
    }
    equiv(o) {
        return (0,_internal_equiv__WEBPACK_IMPORTED_MODULE_2__.equivMap)(this, o);
    }
    first() {
        const node = __private.get(this).head.next[0];
        return node ? [node.k, node.v] : undefined;
    }
    get(k, notFound) {
        const node = this.findPredNode(k).next[0];
        return node && __private.get(this).cmp(node.k, k) === 0
            ? node.v
            : notFound;
    }
    has(key) {
        return this.get(key, _thi_ng_api__WEBPACK_IMPORTED_MODULE_3__.SEMAPHORE) !== _thi_ng_api__WEBPACK_IMPORTED_MODULE_3__.SEMAPHORE;
    }
    set(k, v) {
        const $this = __private.get(this);
        let node = $this.head;
        let level = $this.h;
        let stack = new Array(level);
        const cmp = $this.cmp;
        let code;
        while (level >= 0) {
            while (node.next[level] &&
                (code = cmp(node.next[level].k, k)) < 0) {
                node = node.next[level];
            }
            if (node.next[level] && code === 0) {
                do {
                    node.next[level].v = v;
                } while (--level >= 0);
                return this;
            }
            stack[level--] = node;
        }
        const h = this.pickHeight($this.maxh, $this.h, $this.p);
        node = new Node(k, v, h);
        while ($this.h < h) {
            stack[++$this.h] = $this.head;
        }
        for (let i = 0; i <= h; i++) {
            node.next[i] = stack[i].next[i];
            stack[i].next[i] = node;
        }
        $this.length++;
        if ($this.length >= $this.cap) {
            $this.cap *= 2;
            $this.maxh++;
        }
        return this;
    }
    delete(k) {
        const $this = __private.get(this);
        let node = $this.head;
        let level = $this.h;
        let removed = false;
        const cmp = $this.cmp;
        let code;
        while (level >= 0) {
            while (node.next[level] &&
                (code = cmp(node.next[level].k, k)) < 0) {
                node = node.next[level];
            }
            if (node.next[level] && code === 0) {
                removed = true;
                node.next[level] = node.next[level].next[level];
                if (node == $this.head && !node.next[level]) {
                    $this.h = Math.max(0, $this.h - 1);
                }
            }
            level--;
        }
        if (removed)
            $this.length--;
        return removed;
    }
    into(pairs) {
        return (0,_into__WEBPACK_IMPORTED_MODULE_4__.into)(this, pairs);
    }
    dissoc(keys) {
        return (0,_dissoc__WEBPACK_IMPORTED_MODULE_5__.dissoc)(this, keys);
    }
    /**
     * The key & value args given the callback `fn` MUST be treated as
     * readonly/immutable. This could be enforced via TS, but would
     * break ES6 Map interface contract.
     *
     * @param fn
     * @param thisArg
     */
    forEach(fn, thisArg) {
        for (let p of this) {
            fn.call(thisArg, p[1], p[0], this);
        }
    }
    $reduce(rfn, acc) {
        let node = __private.get(this).head;
        while ((node = node.next[0]) && !(0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_6__.isReduced)(acc)) {
            acc = rfn(acc, [node.k, node.v]);
        }
        return acc;
    }
    opts() {
        const $this = __private.get(this);
        return {
            capacity: $this.cap,
            compare: $this.cmp,
            probability: $this.p,
        };
    }
    findPredNode(k) {
        let { cmp, head: node, h: level } = __private.get(this);
        while (level >= 0) {
            while (node.next[level] && cmp(node.next[level].k, k) < 0) {
                node = node.next[level];
            }
            level--;
        }
        return node;
    }
    pickHeight(maxh, h, p) {
        const max = Math.min(maxh, h + 1);
        let level = 0;
        while (Math.random() < p && level < max) {
            level++;
        }
        return level;
    }
};
SortedMap.DEFAULT_CAP = 8;
SortedMap.DEFAULT_P = 1 / Math.E;
SortedMap = SortedMap_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([
    _internal_inspect__WEBPACK_IMPORTED_MODULE_8__.inspectable
], SortedMap);

function defSortedMap(src, opts) {
    if ((0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_9__.isPlainObject)(src)) {
        const keys = Object.keys(src);
        return new SortedMap((0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_1__.map)((k) => [k, src[k]], keys), Object.assign({ capacity: keys.length }, opts));
    }
    else {
        return new SortedMap(src, opts);
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/associative/sorted-set.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/associative/sorted-set.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SortedSet": () => (/* binding */ SortedSet),
/* harmony export */   "defSortedSet": () => (/* binding */ defSortedSet)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _thi_ng_compare__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/compare */ "./node_modules/@thi.ng/compare/compare.js");
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/xform/map.js");
/* harmony import */ var _dissoc__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dissoc */ "./node_modules/@thi.ng/associative/dissoc.js");
/* harmony import */ var _internal_equiv__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/equiv */ "./node_modules/@thi.ng/associative/internal/equiv.js");
/* harmony import */ var _internal_inspect__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./internal/inspect */ "./node_modules/@thi.ng/associative/internal/inspect.js");
/* harmony import */ var _into__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./into */ "./node_modules/@thi.ng/associative/into.js");
/* harmony import */ var _sorted_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sorted-map */ "./node_modules/@thi.ng/associative/sorted-map.js");
var SortedSet_1;








const __private = new WeakMap();
/**
 * Sorted set implementation with standard ES6 Set API, customizable
 * value equality and comparison semantics and additional functionality:
 *
 * - range queries (via {@link SortedSet.entries},
 *   {@link SortedSet.keys}, {@link SortedSet.values})
 * - multiple value addition/deletion via {@link SortedSet.into} and
 *   {@link SortedSet.disj}
 *
 * Furthermore, this class implements the {@link @thi.ng/api#ICopy},
 * IEmpty`, {@link @thi.ng/api#ICompare} and {@link @thi.ng/api#IEquiv}
 * interfaces defined by {@link @thi.ng/api# | @thi.ng/api}. The latter two allow
 * instances to be used as keys themselves in other data types defined
 * in this (and other) package(s).
 *
 * This set uses a {@link SortedMap} as backing store and therefore has
 * the same resizing characteristics.
 */
let SortedSet = SortedSet_1 = class SortedSet extends Set {
    /**
     * Creates new instance with optional given values and/or
     * implementation options. The options are the same as used by
     * {@link SortedMap}.
     *
     * @param values - input values
     * @param opts - config options
     */
    constructor(values, opts) {
        super();
        __private.set(this, new _sorted_map__WEBPACK_IMPORTED_MODULE_0__.SortedMap(values ? (0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_1__.map)((x) => [x, x], values) : null, opts));
    }
    [Symbol.iterator]() {
        return this.keys();
    }
    get [Symbol.species]() {
        return SortedSet_1;
    }
    get [Symbol.toStringTag]() {
        return "SortedSet";
    }
    get size() {
        return __private.get(this).size;
    }
    copy() {
        return new SortedSet_1(this.keys(), this.opts());
    }
    empty() {
        return new SortedSet_1(null, Object.assign(Object.assign({}, this.opts()), { capacity: _sorted_map__WEBPACK_IMPORTED_MODULE_0__.SortedMap.DEFAULT_CAP }));
    }
    compare(o) {
        const n = this.size;
        const m = o.size;
        if (n < m)
            return -1;
        if (n > m)
            return 1;
        const i = this.entries();
        const j = o.entries();
        let x, y;
        let c;
        while (((x = i.next()), (y = j.next()), !x.done && !y.done)) {
            if ((c = (0,_thi_ng_compare__WEBPACK_IMPORTED_MODULE_2__.compare)(x.value[0], y.value[0])) !== 0) {
                return c;
            }
        }
        return 0;
    }
    equiv(o) {
        return (0,_internal_equiv__WEBPACK_IMPORTED_MODULE_3__.equivSet)(this, o);
    }
    $reduce(rfn, acc) {
        return __private.get(this).$reduce((_acc, x) => rfn(_acc, x[0]), acc);
    }
    entries(key, max = false) {
        return __private.get(this).entries(key, max);
    }
    keys(key, max = false) {
        return __private.get(this).keys(key, max);
    }
    values(key, max = false) {
        return __private.get(this).values(key, max);
    }
    add(key) {
        __private.get(this).set(key, key);
        return this;
    }
    into(keys) {
        return (0,_into__WEBPACK_IMPORTED_MODULE_4__.into)(this, keys);
    }
    clear() {
        __private.get(this).clear();
    }
    first() {
        const first = __private.get(this).first();
        return first ? first[0] : undefined;
    }
    delete(key) {
        return __private.get(this).delete(key);
    }
    disj(keys) {
        return (0,_dissoc__WEBPACK_IMPORTED_MODULE_5__.dissoc)(this, keys);
    }
    forEach(fn, thisArg) {
        for (let p of this) {
            fn.call(thisArg, p, p, this);
        }
    }
    has(key) {
        return __private.get(this).has(key);
    }
    get(key, notFound) {
        return __private.get(this).get(key, notFound);
    }
    opts() {
        return __private.get(this).opts();
    }
};
SortedSet = SortedSet_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([
    _internal_inspect__WEBPACK_IMPORTED_MODULE_7__.inspectable
], SortedSet);

const defSortedSet = (vals, opts) => new SortedSet(vals, opts);


/***/ }),

/***/ "./node_modules/@thi.ng/associative/sparse-set.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/associative/sparse-set.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ASparseSet": () => (/* binding */ ASparseSet),
/* harmony export */   "SparseSet8": () => (/* binding */ SparseSet8),
/* harmony export */   "SparseSet16": () => (/* binding */ SparseSet16),
/* harmony export */   "SparseSet32": () => (/* binding */ SparseSet32),
/* harmony export */   "defSparseSet": () => (/* binding */ defSparseSet)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-number.js");
/* harmony import */ var _thi_ng_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/errors */ "./node_modules/@thi.ng/errors/illegal-arguments.js");
/* harmony import */ var _dissoc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dissoc */ "./node_modules/@thi.ng/associative/dissoc.js");
/* harmony import */ var _internal_inspect__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/inspect */ "./node_modules/@thi.ng/associative/internal/inspect.js");
/* harmony import */ var _into__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./into */ "./node_modules/@thi.ng/associative/into.js");






const __private = new WeakMap();
const fail = () => (0,_thi_ng_errors__WEBPACK_IMPORTED_MODULE_0__.illegalArgs)(`dense & sparse arrays must be of same size`);
/**
 * After "An Efficient Representation for Sparse Sets"
 * Preston Briggs and Linda Torczon (1993)
 *
 * - {@link https://research.swtch.com/sparse}
 * - {@link https://programmingpraxis.com/2012/03/09/sparse-sets/}
 * - {@link https://blog.molecular-matters.com/2013/07/24/adventures-in-data-oriented-design-part-3c-external-references/}
 */
let ASparseSet = class ASparseSet extends Set {
    constructor(dense, sparse) {
        super();
        __private.set(this, { dense, sparse, n: 0 });
    }
    [Symbol.iterator]() {
        return this.keys();
    }
    get size() {
        return __private.get(this).n;
    }
    get capacity() {
        return __private.get(this).dense.length;
    }
    clear() {
        __private.get(this).n = 0;
    }
    equiv(o) {
        if (this === o) {
            return true;
        }
        if (!(o instanceof Set) || this.size !== o.size) {
            return false;
        }
        const $this = __private.get(this);
        const d = $this.dense;
        for (let i = $this.n; --i >= 0;) {
            if (!o.has(d[i])) {
                return false;
            }
        }
        return true;
    }
    add(key) {
        const $this = __private.get(this);
        const { dense, sparse, n } = $this;
        const max = dense.length;
        const i = sparse[key];
        if (key < max && n < max && !(i < n && dense[i] === key)) {
            dense[n] = key;
            sparse[key] = n;
            $this.n++;
        }
        return this;
    }
    delete(key) {
        const $this = __private.get(this);
        const { dense, sparse } = $this;
        const i = sparse[key];
        if (i < $this.n && dense[i] === key) {
            const j = dense[--$this.n];
            dense[i] = j;
            sparse[j] = i;
            return true;
        }
        return false;
    }
    has(key) {
        const $this = __private.get(this);
        const i = $this.sparse[key];
        return i < $this.n && $this.dense[i] === key;
    }
    get(key, notFound = -1) {
        return this.has(key) ? key : notFound;
    }
    first() {
        const $this = __private.get(this);
        return $this.n ? $this.dense[0] : undefined;
    }
    into(keys) {
        return (0,_into__WEBPACK_IMPORTED_MODULE_1__.into)(this, keys);
    }
    disj(keys) {
        return (0,_dissoc__WEBPACK_IMPORTED_MODULE_2__.dissoc)(this, keys);
    }
    forEach(fn, thisArg) {
        const $this = __private.get(this);
        const d = $this.dense;
        const n = $this.n;
        for (let i = 0; i < n; i++) {
            const v = d[i];
            fn.call(thisArg, v, v, this);
        }
    }
    *entries() {
        const { dense, n } = __private.get(this);
        for (let i = 0; i < n; i++) {
            yield [dense[i], dense[i]];
        }
    }
    *keys() {
        const { dense, n } = __private.get(this);
        for (let i = 0; i < n; i++) {
            yield dense[i];
        }
    }
    values() {
        return this.keys();
    }
    __copyTo(dest) {
        const $this = __private.get(this);
        const $c = __private.get(dest);
        $c.dense = $this.dense.slice();
        $c.sparse = $this.sparse.slice();
        $c.n = $this.n;
        return dest;
    }
};
ASparseSet = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    _internal_inspect__WEBPACK_IMPORTED_MODULE_4__.inspectable
], ASparseSet);

class SparseSet8 extends ASparseSet {
    constructor(n, sparse) {
        (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_5__.isNumber)(n)
            ? super(new Uint8Array(n), new Uint8Array(n))
            : n.length === sparse.length
                ? super(n, sparse)
                : fail();
    }
    get [Symbol.species]() {
        return SparseSet8;
    }
    get [Symbol.toStringTag]() {
        return "SparseSet8";
    }
    copy() {
        return this.__copyTo(new SparseSet8(0));
    }
    empty() {
        return new SparseSet8(this.capacity);
    }
}
class SparseSet16 extends ASparseSet {
    constructor(n, sparse) {
        (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_5__.isNumber)(n)
            ? super(new Uint16Array(n), new Uint16Array(n))
            : n.length === sparse.length
                ? super(n, sparse)
                : fail();
    }
    get [Symbol.species]() {
        return SparseSet16;
    }
    get [Symbol.toStringTag]() {
        return "SparseSet16";
    }
    copy() {
        return this.__copyTo(new SparseSet16(0));
    }
    empty() {
        return new SparseSet16(this.capacity);
    }
}
class SparseSet32 extends ASparseSet {
    constructor(n, sparse) {
        (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_5__.isNumber)(n)
            ? super(new Uint32Array(n), new Uint32Array(n))
            : n.length === sparse.length
                ? super(n, sparse)
                : fail();
    }
    get [Symbol.species]() {
        return SparseSet32;
    }
    get [Symbol.toStringTag]() {
        return "SparseSet32";
    }
    copy() {
        return this.__copyTo(new SparseSet32(0));
    }
    empty() {
        return new SparseSet32(this.capacity);
    }
}
/**
 * Creates a new sparse set with given max. capacity (max ID + 1) and
 * chooses most memory efficient implementation, e.g. if `n` <= 256
 * returns a {@link SparseSet8} instance.
 *
 * @param n - max capacity, ID range: [0...n)
 */
const defSparseSet = (n) => n <= 0x100
    ? new SparseSet8(n)
    : n <= 0x10000
        ? new SparseSet16(n)
        : new SparseSet32(n);


/***/ }),

/***/ "./node_modules/@thi.ng/associative/trie-map.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/associative/trie-map.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TrieMap": () => (/* binding */ TrieMap),
/* harmony export */   "defTrieMap": () => (/* binding */ defTrieMap)
/* harmony export */ });
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/iter/vals.js");

class TrieMap {
    constructor(pairs) {
        this.next = {};
        this.n = 0;
        pairs && this.into(pairs);
    }
    *[Symbol.iterator]() {
        const queue = [["", this]];
        while (queue.length) {
            const [prefix, node] = queue.pop();
            if (node.val !== undefined) {
                yield [prefix, node.val];
            }
            else {
                node.queueChildren(queue, prefix);
            }
        }
    }
    *keys(prefix = "") {
        const queue = [[prefix, this]];
        while (queue.length) {
            const [key, node] = queue.pop();
            if (node.val !== undefined) {
                yield key;
            }
            else {
                node.queueChildren(queue, key);
            }
        }
    }
    *values() {
        const queue = [this];
        while (queue.length) {
            const node = queue.pop();
            if (node.val !== undefined) {
                yield node.val;
            }
            else {
                queue.push(...(0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_0__.vals)(node.next));
            }
        }
    }
    *suffixes(prefix, withPrefix = false) {
        const node = this.find(prefix);
        if (node) {
            yield* node.keys(withPrefix ? prefix : "");
        }
    }
    clear() {
        this.next = {};
        this.n = 0;
        this.val = undefined;
    }
    has(key) {
        return this.get(key) !== undefined;
    }
    hasPrefix(prefix) {
        return !!this.find(prefix);
    }
    get(key, notFound) {
        const node = this.find(key);
        return node ? node.val : notFound;
    }
    find(key) {
        let node = this;
        for (let i = 0, n = key.length; i < n; i++) {
            node = node.next[key[i]];
            if (!node)
                return;
        }
        return node;
    }
    /**
     * Returns longest known prefix for `key`. Returns undefined if given key
     * has no partial matches.
     *
     * @param key
     */
    knownPrefix(key) {
        let node = this;
        let prefix = "";
        for (let i = 0, n = key.length; i < n; i++) {
            const k = key[i];
            const next = node.next[k];
            if (!next)
                break;
            prefix += k;
            node = next;
        }
        return prefix || undefined;
    }
    hasKnownPrefix(key) {
        return !!this.knownPrefix(key);
    }
    set(key, val) {
        let node = this;
        for (let i = 0, n = key.length; i < n; i++) {
            const k = key[i];
            const next = node.next[k];
            node = !next ? (node.n++, (node.next[k] = new TrieMap())) : next;
        }
        node.val = val;
    }
    into(pairs) {
        for (let [k, v] of pairs) {
            this.set(k, v);
        }
    }
    delete(prefix) {
        const n = prefix.length;
        if (n < 1)
            return false;
        const path = [];
        const key = [];
        let i = 0;
        let node = this;
        for (; i < n; i++) {
            const k = prefix[i];
            key.push(k);
            path.push(node);
            node = node.next[k];
            if (!node)
                return false;
        }
        while ((node = path[--i])) {
            delete node.next[key[i]];
            if (--node.n)
                break;
        }
        return true;
    }
    queueChildren(queue, prefix) {
        queue.push(...Object.keys(this.next).map((k) => [prefix + k, this.next[k]]));
    }
}
const defTrieMap = (pairs) => new TrieMap(pairs);


/***/ }),

/***/ "./node_modules/@thi.ng/associative/union.js":
/*!***************************************************!*\
  !*** ./node_modules/@thi.ng/associative/union.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "union": () => (/* binding */ union),
/* harmony export */   "unionR": () => (/* binding */ unionR)
/* harmony export */ });
/* harmony import */ var _internal_xform_setop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/xform-setop */ "./node_modules/@thi.ng/associative/internal/xform-setop.js");
/* harmony import */ var _into__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./into */ "./node_modules/@thi.ng/associative/into.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@thi.ng/associative/utils.js");



/**
 * Computes union of sets `a` and `b` and writes results to new set or
 * optionally given set `out` (assumed to be empty for correct results).
 *
 * @param a - first set
 * @param b - other set
 * @param out - result set
 */
const union = (a, b, out) => {
    if (a.size < b.size) {
        const t = a;
        a = b;
        b = t;
    }
    out = out ? (0,_into__WEBPACK_IMPORTED_MODULE_0__.into)(out, a) : (0,_utils__WEBPACK_IMPORTED_MODULE_1__.copy)(a, Set);
    return a === b ? out : (0,_into__WEBPACK_IMPORTED_MODULE_0__.into)(out, b);
};
function unionR(src) {
    return (0,_internal_xform_setop__WEBPACK_IMPORTED_MODULE_2__.xformSetOp)(unionR, union, src);
}


/***/ }),

/***/ "./node_modules/@thi.ng/associative/utils.js":
/*!***************************************************!*\
  !*** ./node_modules/@thi.ng/associative/utils.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "empty": () => (/* binding */ empty),
/* harmony export */   "copy": () => (/* binding */ copy),
/* harmony export */   "first": () => (/* binding */ first),
/* harmony export */   "objValues": () => (/* binding */ objValues),
/* harmony export */   "ensureMap": () => (/* binding */ ensureMap),
/* harmony export */   "ensureSet": () => (/* binding */ ensureSet)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/implements-function.js");
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-map.js");
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-set.js");

const empty = (x, ctor) => (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.implementsFunction)(x, "empty")
    ? x.empty()
    : new (x[Symbol.species] || ctor)();
const copy = (x, ctor) => (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.implementsFunction)(x, "copy")
    ? x.copy()
    : new (x[Symbol.species] || ctor)(x);
const first = (x) => x[Symbol.iterator]().next().value;
const objValues = (src) => {
    const vals = [];
    for (let k in src) {
        src.hasOwnProperty(k) && vals.push(src[k]);
    }
    return vals;
};
const ensureMap = (x) => (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__.isMap)(x) ? x : new Map(x);
const ensureSet = (x) => (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_2__.isSet)(x) ? x : new Set(x);


/***/ }),

/***/ "./node_modules/@thi.ng/associative/without-keys.js":
/*!**********************************************************!*\
  !*** ./node_modules/@thi.ng/associative/without-keys.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "withoutKeysMap": () => (/* binding */ withoutKeysMap),
/* harmony export */   "withoutKeysObj": () => (/* binding */ withoutKeysObj)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@thi.ng/associative/utils.js");

const withoutKeysMap = (src, keys) => {
    const ks = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.ensureSet)(keys);
    const dest = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.empty)(src, Map);
    for (let p of src.entries()) {
        const k = p[0];
        !ks.has(k) && dest.set(k, p[1]);
    }
    return dest;
};
const withoutKeysObj = (src, keys) => {
    const ks = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.ensureSet)(keys);
    const dest = {};
    for (let k in src) {
        src.hasOwnProperty(k) && !ks.has(k) && (dest[k] = src[k]);
    }
    return dest;
};


/***/ }),

/***/ "./node_modules/@thi.ng/binary/float.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/binary/float.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IS_LE": () => (/* binding */ IS_LE),
/* harmony export */   "floatToIntBits": () => (/* binding */ floatToIntBits),
/* harmony export */   "floatToUintBits": () => (/* binding */ floatToUintBits),
/* harmony export */   "intBitsToFloat": () => (/* binding */ intBitsToFloat),
/* harmony export */   "uintBitsToFloat": () => (/* binding */ uintBitsToFloat),
/* harmony export */   "floatToIntBits64": () => (/* binding */ floatToIntBits64),
/* harmony export */   "floatToUintBits64": () => (/* binding */ floatToUintBits64),
/* harmony export */   "intBitsToFloat64": () => (/* binding */ intBitsToFloat64),
/* harmony export */   "uintBitsToFloat64": () => (/* binding */ uintBitsToFloat64),
/* harmony export */   "floatToSortableInt": () => (/* binding */ floatToSortableInt),
/* harmony export */   "f32u8": () => (/* binding */ f32u8),
/* harmony export */   "f32u16": () => (/* binding */ f32u16),
/* harmony export */   "f32u24": () => (/* binding */ f32u24),
/* harmony export */   "f32u32": () => (/* binding */ f32u32),
/* harmony export */   "u8f32": () => (/* binding */ u8f32),
/* harmony export */   "u16f32": () => (/* binding */ u16f32),
/* harmony export */   "u24f32": () => (/* binding */ u24f32),
/* harmony export */   "u32f32": () => (/* binding */ u32f32)
/* harmony export */ });
const F64 = new Float64Array(1);
const F32 = new Float32Array(F64.buffer);
const I32 = new Int32Array(F64.buffer);
const U32 = new Uint32Array(F64.buffer);
/**
 * This value is true iff the environment is Little Endian.
 */
const IS_LE = ((F64[0] = 2), U32[1] === 0x40000000);
const floatToIntBits = (x) => ((F32[0] = x), I32[0]);
const floatToUintBits = (x) => ((F32[0] = x), U32[0]);
const intBitsToFloat = (x) => ((I32[0] = x), F32[0]);
const uintBitsToFloat = (x) => ((U32[0] = x), F32[0]);
/**
 * Returns i32 representation of f64 as [hi, lo] tuple (takes
 * environment's Little Endianess into account).
 *
 * @param x
 */
const floatToIntBits64 = (x) => ((F64[0] = x), IS_LE ? [I32[1], I32[0]] : [I32[0], I32[1]]);
/**
 * Returns u32 representation of f64 as [hi, lo] tuple (takes
 * environment's Little Endianess into account).
 *
 * @param x
 */
const floatToUintBits64 = (x) => ((F64[0] = x), IS_LE ? [U32[1], U32[0]] : [U32[0], U32[1]]);
/**
 * Reverse op of {@link floatToIntBits64}.
 *
 * @param hi
 * @param lo
 */
const intBitsToFloat64 = (hi, lo) => {
    IS_LE ? ((I32[1] = hi), (I32[0] = lo)) : ((I32[0] = hi), (I32[1] = lo));
    return F64[0];
};
/**
 * Reverse op of {@link floatToUintBits64}.
 *
 * @param hi
 * @param lo
 */
const uintBitsToFloat64 = (hi, lo) => {
    IS_LE ? ((U32[1] = hi), (U32[0] = lo)) : ((U32[0] = hi), (U32[1] = lo));
    return F64[0];
};
/**
 * Converts given float (f32) into a sortable integer representation,
 * using raw bitwise conversion via {@link floatToIntBits}.
 *
 * {@link https://github.com/tzaeschke/phtree/blob/develop/PhTreeRevisited.pdf}
 * (page 3)
 *
 * @param x - value to convert
 */
const floatToSortableInt = (x) => {
    if (x === -0)
        x = 0;
    const i = floatToIntBits(x);
    return x < 0 ? ~i | (1 << 31) : i;
};
const clamp11 = (x) => (x < -1 ? -1 : x > 1 ? 1 : x);
/**
 * Converts normalized float ([-1..1] range) to u8.
 *
 * @param x
 */
const f32u8 = (x) => (clamp11(x) * 0x7f) & 0xff;
/**
 * Converts normalized float ([-1..1] range) to u16.
 *
 * @param x
 */
const f32u16 = (x) => (clamp11(x) * 0x7fff) & 0xffff;
/**
 * Converts normalized float ([-1..1] range) to u24.
 *
 * @param x
 */
const f32u24 = (x) => (clamp11(x) * 0x7fffff) & 0xffffff;
/**
 * Converts normalized float ([-1..1] range) to u32.
 *
 * @param x
 */
const f32u32 = (x) => (clamp11(x) * 0x7fffffff) >>> 0;
/**
 * Reverse op of {@link f32u8}.
 *
 * @param x
 */
const u8f32 = (x) => ((x &= 0xff), (x | ((x >> 7) * 0xffffff00)) / 0x7f);
/**
 * Reverse op of {@link f32u16}.
 *
 * @param x
 */
const u16f32 = (x) => ((x &= 0xffff), (x | ((x >> 15) * 0xffff0000)) / 0x7fff);
/**
 * Reverse op of {@link f32u24}.
 *
 * @param x
 */
const u24f32 = (x) => ((x &= 0xffffff), (x | ((x >> 23) * 0xff000000)) / 0x7fffff);
/**
 * Reverse op of {@link f32u32}.
 *
 * @param x
 */
const u32f32 = (x) => (x | 0) / 0x7fffffff;


/***/ }),

/***/ "./node_modules/@thi.ng/binary/pow.js":
/*!********************************************!*\
  !*** ./node_modules/@thi.ng/binary/pow.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isPow2": () => (/* binding */ isPow2),
/* harmony export */   "ceilPow2": () => (/* binding */ ceilPow2),
/* harmony export */   "floorPow2": () => (/* binding */ floorPow2)
/* harmony export */ });
// http://graphics.stanford.edu/~seander/bithacks.html
const isPow2 = (x) => !!x && !(x & (x - 1));
const ceilPow2 = (x) => {
    x += (x === 0);
    --x;
    x |= x >>> 1;
    x |= x >>> 2;
    x |= x >>> 4;
    x |= x >>> 8;
    x |= x >>> 16;
    return x + 1;
};
const floorPow2 = (x) => {
    x |= x >>> 1;
    x |= x >>> 2;
    x |= x >>> 4;
    x |= x >>> 8;
    x |= x >>> 16;
    return x - (x >>> 1);
};


/***/ }),

/***/ "./node_modules/@thi.ng/binary/rotate.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/binary/rotate.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rotateLeft": () => (/* binding */ rotateLeft),
/* harmony export */   "rotateRight": () => (/* binding */ rotateRight)
/* harmony export */ });
/**
 * Rotates `x` `n` bits to the left.
 *
 * @param x - value
 * @param n - rotation step
 */
const rotateLeft = (x, n) => ((x << n) | (x >>> (32 - n))) >>> 0;
/**
 * Rotates `x` `n` bits to the right.
 *
 * @param x - value
 * @param n - rotation step
 */
const rotateRight = (x, n) => ((x >>> n) | (x << (32 - n))) >>> 0;


/***/ }),

/***/ "./node_modules/@thi.ng/checks/implements-function.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/checks/implements-function.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "implementsFunction": () => (/* binding */ implementsFunction)
/* harmony export */ });
const implementsFunction = (x, fn) => x != null && typeof x[fn] === "function";


/***/ }),

/***/ "./node_modules/@thi.ng/checks/is-array.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/checks/is-array.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isArray": () => (/* binding */ isArray)
/* harmony export */ });
const isArray = Array.isArray;


/***/ }),

/***/ "./node_modules/@thi.ng/checks/is-arraylike.js":
/*!*****************************************************!*\
  !*** ./node_modules/@thi.ng/checks/is-arraylike.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isArrayLike": () => (/* binding */ isArrayLike)
/* harmony export */ });
const isArrayLike = (x) => x != null && typeof x !== "function" && x.length !== undefined;


/***/ }),

/***/ "./node_modules/@thi.ng/checks/is-function.js":
/*!****************************************************!*\
  !*** ./node_modules/@thi.ng/checks/is-function.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isFunction": () => (/* binding */ isFunction)
/* harmony export */ });
const isFunction = (x) => typeof x === "function";


/***/ }),

/***/ "./node_modules/@thi.ng/checks/is-iterable.js":
/*!****************************************************!*\
  !*** ./node_modules/@thi.ng/checks/is-iterable.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isIterable": () => (/* binding */ isIterable)
/* harmony export */ });
const isIterable = (x) => x != null && typeof x[Symbol.iterator] === "function";


/***/ }),

/***/ "./node_modules/@thi.ng/checks/is-map.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/checks/is-map.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isMap": () => (/* binding */ isMap)
/* harmony export */ });
const isMap = (x) => x instanceof Map;


/***/ }),

/***/ "./node_modules/@thi.ng/checks/is-node.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/checks/is-node.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNode": () => (/* binding */ isNode)
/* harmony export */ });
const isNode = () => typeof process === "object" &&
    typeof process.versions === "object" &&
    typeof process.versions.node !== "undefined";


/***/ }),

/***/ "./node_modules/@thi.ng/checks/is-not-string-iterable.js":
/*!***************************************************************!*\
  !*** ./node_modules/@thi.ng/checks/is-not-string-iterable.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNotStringAndIterable": () => (/* binding */ isNotStringAndIterable)
/* harmony export */ });
const isNotStringAndIterable = (x) => x != null &&
    typeof x !== "string" &&
    typeof x[Symbol.iterator] === "function";


/***/ }),

/***/ "./node_modules/@thi.ng/checks/is-number.js":
/*!**************************************************!*\
  !*** ./node_modules/@thi.ng/checks/is-number.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNumber": () => (/* binding */ isNumber)
/* harmony export */ });
const isNumber = (x) => typeof x === "number";


/***/ }),

/***/ "./node_modules/@thi.ng/checks/is-plain-object.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/checks/is-plain-object.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isPlainObject": () => (/* binding */ isPlainObject)
/* harmony export */ });
const OBJP = Object.getPrototypeOf;
/**
 * Similar to {@link isObject}, but also checks if prototype is that of
 * `Object` (or `null`).
 *
 * @param x -
 */
const isPlainObject = (x) => {
    let p;
    return (x != null &&
        typeof x === "object" &&
        ((p = OBJP(x)) === null || OBJP(p) === null));
};


/***/ }),

/***/ "./node_modules/@thi.ng/checks/is-proto-path.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/checks/is-proto-path.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isIllegalKey": () => (/* binding */ isIllegalKey),
/* harmony export */   "isProtoPath": () => (/* binding */ isProtoPath)
/* harmony export */ });
/* harmony import */ var _is_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is-array */ "./node_modules/@thi.ng/checks/is-array.js");
/* harmony import */ var _is_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is-string */ "./node_modules/@thi.ng/checks/is-string.js");


const ILLEGAL_KEYS = new Set(["__proto__", "prototype", "constructor"]);
/**
 * Returns true, if given `x` is an illegal object key as per
 * {@link ILLEGAL_KEYS}.
 *
 * @see {@link isProtoPath} for more details
 *
 * @param x
 */
const isIllegalKey = (x) => ILLEGAL_KEYS.has(x);
/**
 * Returns true if given `path` contains any {@link ILLEGAL_KEYS}, i.e. could be
 * used to poison the prototype chain of an object.
 *
 * @remarks
 * If given an array, each item is considered a single sub-path property and
 * will be checked as is. If given a string it will be split using "." as
 * delimiter and each item checked as is (same way array paths are handled).
 *
 * Original discussion here, implementation updated to be more encompassing:
 * https://github.com/thi-ng/umbrella/pull/273
 *
 * @param path
 */
const isProtoPath = (path) => (0,_is_array__WEBPACK_IMPORTED_MODULE_0__.isArray)(path)
    ? path.some(isIllegalKey)
    : (0,_is_string__WEBPACK_IMPORTED_MODULE_1__.isString)(path)
        ? path.indexOf(".") !== -1
            ? path.split(".").some(isIllegalKey)
            : isIllegalKey(path)
        : false;


/***/ }),

/***/ "./node_modules/@thi.ng/checks/is-set.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/checks/is-set.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isSet": () => (/* binding */ isSet)
/* harmony export */ });
const isSet = (x) => x instanceof Set;


/***/ }),

/***/ "./node_modules/@thi.ng/checks/is-string.js":
/*!**************************************************!*\
  !*** ./node_modules/@thi.ng/checks/is-string.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isString": () => (/* binding */ isString)
/* harmony export */ });
const isString = (x) => typeof x === "string";


/***/ }),

/***/ "./node_modules/@thi.ng/compare/compare.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/compare/compare.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compare": () => (/* binding */ compare)
/* harmony export */ });
const compare = (a, b) => {
    if (a === b) {
        return 0;
    }
    if (a == null) {
        return b == null ? 0 : -1;
    }
    if (b == null) {
        return a == null ? 0 : 1;
    }
    if (typeof a.compare === "function") {
        return a.compare(b);
    }
    if (typeof b.compare === "function") {
        return -b.compare(a);
    }
    return a < b ? -1 : a > b ? 1 : 0;
};


/***/ }),

/***/ "./node_modules/@thi.ng/compare/numeric.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/compare/numeric.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compareNumAsc": () => (/* binding */ compareNumAsc),
/* harmony export */   "compareNumDesc": () => (/* binding */ compareNumDesc)
/* harmony export */ });
/**
 * Numeric comparator (ascending order)
 *
 * @param a -
 * @param b -
 */
const compareNumAsc = (a, b) => a - b;
/**
 * Numeric comparator (descending order)
 *
 * @param a -
 * @param b -
 */
const compareNumDesc = (a, b) => b - a;


/***/ }),

/***/ "./node_modules/@thi.ng/compose/comp.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/compose/comp.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "comp": () => (/* binding */ comp),
/* harmony export */   "compL": () => (/* binding */ compL),
/* harmony export */   "compI": () => (/* binding */ compI)
/* harmony export */ });
/* harmony import */ var _thi_ng_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/errors */ "./node_modules/@thi.ng/errors/illegal-arity.js");

function comp(...fns) {
    let [a, b, c, d, e, f, g, h, i, j] = fns;
    switch (fns.length) {
        case 0:
            (0,_thi_ng_errors__WEBPACK_IMPORTED_MODULE_0__.illegalArity)(0);
        case 1:
            return a;
        case 2:
            return (...xs) => a(b(...xs));
        case 3:
            return (...xs) => a(b(c(...xs)));
        case 4:
            return (...xs) => a(b(c(d(...xs))));
        case 5:
            return (...xs) => a(b(c(d(e(...xs)))));
        case 6:
            return (...xs) => a(b(c(d(e(f(...xs))))));
        case 7:
            return (...xs) => a(b(c(d(e(f(g(...xs)))))));
        case 8:
            return (...xs) => a(b(c(d(e(f(g(h(...xs))))))));
        case 9:
            return (...xs) => a(b(c(d(e(f(g(h(i(...xs)))))))));
        case 10:
        default:
            const fn = (...xs) => a(b(c(d(e(f(g(h(i(j(...xs))))))))));
            return fns.length === 10 ? fn : comp(fn, ...fns.slice(10));
    }
}
function compL(...fns) {
    return comp.apply(null, fns.reverse());
}
/**
 * @deprecated renamed to {@link (compL:1)}
 */
const compI = compL;


/***/ }),

/***/ "./node_modules/@thi.ng/compose/delayed.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/compose/delayed.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "delayed": () => (/* binding */ delayed)
/* harmony export */ });
const delayed = (x, t) => new Promise((resolve) => setTimeout(() => resolve(x), t));


/***/ }),

/***/ "./node_modules/@thi.ng/compose/identity.js":
/*!**************************************************!*\
  !*** ./node_modules/@thi.ng/compose/identity.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "identity": () => (/* binding */ identity)
/* harmony export */ });
const identity = (x) => x;


/***/ }),

/***/ "./node_modules/@thi.ng/compose/juxt.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/compose/juxt.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "juxt": () => (/* binding */ juxt)
/* harmony export */ });
function juxt(...fns) {
    const [a, b, c, d, e, f, g, h] = fns;
    switch (fns.length) {
        case 1:
            return (x) => [a(x)];
        case 2:
            return (x) => [a(x), b(x)];
        case 3:
            return (x) => [a(x), b(x), c(x)];
        case 4:
            return (x) => [a(x), b(x), c(x), d(x)];
        case 5:
            return (x) => [a(x), b(x), c(x), d(x), e(x)];
        case 6:
            return (x) => [a(x), b(x), c(x), d(x), e(x), f(x)];
        case 7:
            return (x) => [a(x), b(x), c(x), d(x), e(x), f(x), g(x)];
        case 8:
            return (x) => [a(x), b(x), c(x), d(x), e(x), f(x), g(x), h(x)];
        default:
            return (x) => {
                let res = new Array(fns.length);
                for (let i = fns.length; --i >= 0;) {
                    res[i] = fns[i](x);
                }
                return res;
            };
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/dcons/dcons.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/dcons/dcons.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DCons": () => (/* binding */ DCons),
/* harmony export */   "defDCons": () => (/* binding */ defDCons),
/* harmony export */   "dcons": () => (/* binding */ dcons)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-arraylike.js");
/* harmony import */ var _thi_ng_compare__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/compare */ "./node_modules/@thi.ng/compare/compare.js");
/* harmony import */ var _thi_ng_equiv__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/equiv */ "./node_modules/@thi.ng/equiv/index.js");
/* harmony import */ var _thi_ng_errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @thi.ng/errors */ "./node_modules/@thi.ng/errors/illegal-arguments.js");
/* harmony import */ var _thi_ng_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @thi.ng/errors */ "./node_modules/@thi.ng/errors/out-of-bounds.js");
/* harmony import */ var _thi_ng_random__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @thi.ng/random */ "./node_modules/@thi.ng/random/system.js");
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/reduced.js");






class DCons {
    constructor(src) {
        this._length = 0;
        if (src) {
            this.into(src);
        }
    }
    get length() {
        return this._length;
    }
    copy() {
        return new DCons(this);
    }
    empty() {
        return new DCons();
    }
    clear() {
        this.release();
    }
    release() {
        let cell = this.head, next;
        while (cell) {
            next = cell.next;
            delete cell.value;
            delete cell.prev;
            delete cell.next;
            cell = next;
        }
        delete this.head;
        delete this.tail;
        this._length = 0;
        return true;
    }
    compare(o) {
        const n = this._length;
        if (n < o._length) {
            return -1;
        }
        else if (n > o._length) {
            return 1;
        }
        else if (n === 0) {
            return 0;
        }
        else {
            let ca = this.head;
            let cb = o.head;
            let res = 0;
            while (ca && res == 0) {
                res = (0,_thi_ng_compare__WEBPACK_IMPORTED_MODULE_0__.compare)(ca.value, cb.value);
                ca = ca.next;
                cb = cb.next;
            }
            return res;
        }
    }
    equiv(o) {
        if (!(o instanceof DCons || (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__.isArrayLike)(o)) ||
            this._length !== o.length) {
            return false;
        }
        if (!this._length || this === o)
            return true;
        let cell = this.head;
        for (let x of o) {
            if (!(0,_thi_ng_equiv__WEBPACK_IMPORTED_MODULE_2__.equiv)(cell.value, x)) {
                return false;
            }
            cell = cell.next;
        }
        return true;
    }
    *[Symbol.iterator]() {
        let cell = this.head;
        while (cell) {
            yield cell.value;
            cell = cell.next;
        }
    }
    /** {@inheritDoc @thi.ng/api#ISeqable.seq} */
    seq(start = 0, end = this.length) {
        if (start >= end || start < 0)
            return;
        let cell = this.nthCell(start);
        const last = this.nthCell(end - 1);
        const $seq = (cell) => ({
            first() {
                return cell.value;
            },
            next() {
                return cell !== last && cell.next ? $seq(cell.next) : undefined;
            },
        });
        return cell ? $seq(cell) : undefined;
    }
    *cycle() {
        while (true) {
            yield* this;
        }
    }
    /** {@inheritDoc @thi.ng/transducers#IReducible.$reduce} */
    $reduce(rfn, acc) {
        let cell = this.head;
        while (cell && !(0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_3__.isReduced)(acc)) {
            acc = rfn(acc, cell.value);
            cell = cell.next;
        }
        return acc;
    }
    drop() {
        const cell = this.head;
        if (cell) {
            this.head = cell.next;
            if (this.head) {
                delete this.head.prev;
            }
            else {
                delete this.tail;
            }
            this._length--;
            return cell.value;
        }
    }
    cons(value) {
        const cell = { value, next: this.head };
        if (this.head) {
            this.head.prev = cell;
        }
        else {
            this.tail = cell;
        }
        this.head = cell;
        this._length++;
        return this;
    }
    insertBefore(cell, value) {
        if (!cell) {
            (0,_thi_ng_errors__WEBPACK_IMPORTED_MODULE_4__.illegalArgs)("cell is undefined");
        }
        const newCell = { value, next: cell, prev: cell.prev };
        if (cell.prev) {
            cell.prev.next = newCell;
        }
        else {
            this.head = newCell;
        }
        cell.prev = newCell;
        this._length++;
        return this;
    }
    insertAfter(cell, value) {
        if (!cell) {
            (0,_thi_ng_errors__WEBPACK_IMPORTED_MODULE_4__.illegalArgs)("cell is undefined");
        }
        const newCell = { value, next: cell.next, prev: cell };
        if (cell.next) {
            cell.next.prev = newCell;
        }
        else {
            this.tail = newCell;
        }
        cell.next = newCell;
        this._length++;
        return this;
    }
    insertBeforeNth(n, x) {
        if (n < 0) {
            n += this._length;
        }
        if (n <= 0) {
            return this.cons(x);
        }
        else {
            (0,_thi_ng_errors__WEBPACK_IMPORTED_MODULE_5__.ensureIndex)(n, 0, this._length);
            return this.insertBefore(this.nthCellUnsafe(n), x);
        }
    }
    insertAfterNth(n, x) {
        if (n < 0) {
            n += this._length;
        }
        if (n >= this._length - 1) {
            return this.push(x);
        }
        else {
            (0,_thi_ng_errors__WEBPACK_IMPORTED_MODULE_5__.ensureIndex)(n, 0, this._length);
            return this.insertAfter(this.nthCellUnsafe(n), x);
        }
    }
    insertSorted(value, cmp) {
        cmp = cmp || _thi_ng_compare__WEBPACK_IMPORTED_MODULE_0__.compare;
        let cell = this.head;
        while (cell) {
            if (cmp(value, cell.value) <= 0) {
                return this.insertBefore(cell, value);
            }
            cell = cell.next;
        }
        return this.push(value);
    }
    find(value) {
        let cell = this.head;
        while (cell) {
            if (cell.value === value) {
                return cell;
            }
            cell = cell.next;
        }
    }
    findWith(fn) {
        let cell = this.head;
        while (cell) {
            if (fn(cell.value)) {
                return cell;
            }
            cell = cell.next;
        }
    }
    concat(...slices) {
        const res = this.copy();
        for (let slice of slices) {
            res.into(slice);
        }
        return res;
    }
    into(src) {
        for (let x of src) {
            this.push(x);
        }
    }
    slice(from = 0, to = this.length) {
        let a = from < 0 ? from + this._length : from;
        let b = to < 0 ? to + this._length : to;
        if (a < 0 || b < 0) {
            (0,_thi_ng_errors__WEBPACK_IMPORTED_MODULE_4__.illegalArgs)("invalid indices: ${from} / ${to}");
        }
        const res = new DCons();
        let cell = this.nthCell(a);
        while (cell && ++a <= b) {
            res.push(cell.value);
            cell = cell.next;
        }
        return res;
    }
    splice(at, del = 0, insert) {
        let cell;
        if (typeof at === "number") {
            if (at < 0) {
                at += this._length;
            }
            (0,_thi_ng_errors__WEBPACK_IMPORTED_MODULE_5__.ensureIndex)(at, 0, this._length);
            cell = this.nthCellUnsafe(at);
        }
        else {
            cell = at;
        }
        const removed = new DCons();
        if (del > 0) {
            while (cell && del-- > 0) {
                this.remove(cell);
                removed.push(cell.value);
                cell = cell.next;
            }
        }
        else if (cell) {
            cell = cell.next;
        }
        if (insert) {
            if (cell) {
                for (let i of insert) {
                    this.insertBefore(cell, i);
                }
            }
            else {
                for (let i of insert) {
                    this.push(i);
                }
            }
        }
        return removed;
    }
    remove(cell) {
        if (cell.prev) {
            cell.prev.next = cell.next;
        }
        else {
            this.head = cell.next;
        }
        if (cell.next) {
            cell.next.prev = cell.prev;
        }
        else {
            this.tail = cell.prev;
        }
        this._length--;
        return this;
    }
    swap(a, b) {
        if (a !== b) {
            const t = a.value;
            a.value = b.value;
            b.value = t;
        }
        return this;
    }
    push(value) {
        if (this.tail) {
            const cell = { value, prev: this.tail };
            this.tail.next = cell;
            this.tail = cell;
            this._length++;
            return this;
        }
        else {
            return this.cons(value);
        }
    }
    pop() {
        const cell = this.tail;
        if (!cell) {
            return;
        }
        this.tail = cell.prev;
        if (this.tail) {
            delete this.tail.next;
        }
        else {
            delete this.head;
        }
        this._length--;
        return cell.value;
    }
    first() {
        return this.head && this.head.value;
    }
    peek() {
        return this.tail && this.tail.value;
    }
    setHead(v) {
        if (this.head) {
            this.head.value = v;
            return this;
        }
        return this.cons(v);
    }
    setTail(v) {
        if (this.tail) {
            this.tail.value = v;
            return this;
        }
        return this.push(v);
    }
    setNth(n, v) {
        const cell = this.nthCell(n);
        !cell && (0,_thi_ng_errors__WEBPACK_IMPORTED_MODULE_4__.illegalArgs)(`index out of bounds: ${n}`);
        cell.value = v;
        return this;
    }
    nth(n, notFound) {
        const cell = this.nthCell(n);
        return cell ? cell.value : notFound;
    }
    nthCell(n) {
        if (n < 0) {
            n += this._length;
        }
        if (n < 0 || n >= this._length) {
            return;
        }
        return this.nthCellUnsafe(n);
    }
    rotateLeft() {
        switch (this._length) {
            case 0:
            case 1:
                return this;
            case 2:
                return this.swap(this.head, this.tail);
            default:
                return this.push(this.drop());
        }
    }
    rotateRight() {
        switch (this._length) {
            case 0:
            case 1:
                return this;
            case 2:
                return this.swap(this.head, this.tail);
            default:
                const x = this.peek();
                this.pop();
                return this.cons(x);
        }
    }
    map(fn) {
        const res = new DCons();
        let cell = this.head;
        while (cell) {
            res.push(fn(cell.value));
            cell = cell.next;
        }
        return res;
    }
    filter(pred) {
        const res = new DCons();
        let cell = this.head;
        while (cell) {
            pred(cell.value) && res.push(cell.value);
            cell = cell.next;
        }
        return res;
    }
    reduce(rfn, initial) {
        let acc = initial;
        let cell = this.head;
        while (cell) {
            // TODO add early termination support
            acc = rfn(acc, cell.value);
            cell = cell.next;
        }
        return acc;
    }
    /**
     * Shuffles list by probabilistically moving cells to head or tail
     * positions.
     *
     * @remarks
     * Supports configurable iterations and custom PRNG via
     * {@link @thi.ng/random#IRandom} (default:
     * {@link @thi.ng/random#SYSTEM}).
     *
     * Default iterations: `ceil(3/2 * log2(n))`
     *
     * @param iter -
     * @param rnd -
     */
    shuffle(iter, rnd = _thi_ng_random__WEBPACK_IMPORTED_MODULE_6__.SYSTEM) {
        if (this._length < 2)
            return this;
        for (iter = iter !== null && iter !== void 0 ? iter : Math.ceil(1.5 * Math.log2(this._length)); iter > 0; iter--) {
            let cell = this.head;
            while (cell) {
                const next = cell.next;
                rnd.float() < 0.5 ? this.asHead(cell) : this.asTail(cell);
                cell = next;
            }
        }
        return this;
    }
    /**
     * Merge sort implementation based on Simon Tatham's algorithm:
     * https://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
     *
     * @remarks
     * Uses {@link @thi.ng/compare#compare} as default comparator.
     *
     * @param cmp -
     */
    sort(cmp = _thi_ng_compare__WEBPACK_IMPORTED_MODULE_0__.compare) {
        if (!this._length)
            return this;
        let inSize = 1;
        while (true) {
            let p = this.head;
            this.head = undefined;
            this.tail = undefined;
            let numMerges = 0;
            while (p) {
                numMerges++;
                let q = p;
                let psize = 0;
                for (let i = 0; i < inSize; i++) {
                    psize++;
                    q = q.next;
                    if (!q)
                        break;
                }
                let qsize = inSize;
                while (psize > 0 || (qsize > 0 && q)) {
                    let e;
                    if (psize === 0) {
                        e = q;
                        q = q.next;
                        qsize--;
                    }
                    else if (!q || qsize === 0) {
                        e = p;
                        p = p.next;
                        psize--;
                    }
                    else if (cmp(p.value, q.value) <= 0) {
                        e = p;
                        p = p.next;
                        psize--;
                    }
                    else {
                        e = q;
                        q = q.next;
                        qsize--;
                    }
                    if (this.tail) {
                        this.tail.next = e;
                    }
                    else {
                        this.head = e;
                    }
                    e.prev = this.tail;
                    this.tail = e;
                }
                p = q;
            }
            this.tail.next = undefined;
            if (numMerges <= 1) {
                return this;
            }
            inSize *= 2;
        }
    }
    reverse() {
        let head = this.head;
        let tail = this.tail;
        let n = (this._length >>> 1) + (this._length & 1);
        while (head && tail && n > 0) {
            const t = head.value;
            head.value = tail.value;
            tail.value = t;
            head = head.next;
            tail = tail.prev;
            n--;
        }
        return this;
    }
    asHead(cell) {
        if (cell === this.head) {
            return this;
        }
        this.remove(cell);
        this.head.prev = cell;
        cell.next = this.head;
        cell.prev = undefined;
        this.head = cell;
        this._length++;
        return this;
    }
    asTail(cell) {
        if (cell === this.tail) {
            return this;
        }
        this.remove(cell);
        this.tail.next = cell;
        cell.prev = this.tail;
        cell.next = undefined;
        this.tail = cell;
        this._length++;
        return this;
    }
    toString() {
        let res = [];
        let cell = this.head;
        while (cell) {
            res.push(String(cell.value));
            cell = cell.next;
        }
        return res.join(", ");
    }
    toJSON() {
        return [...this];
    }
    nthCellUnsafe(n) {
        let cell, dir;
        if (n <= this._length >> 1) {
            cell = this.head;
            dir = "next";
        }
        else {
            cell = this.tail;
            dir = "prev";
            n = this._length - n - 1;
        }
        while (n-- > 0 && cell) {
            cell = cell[dir];
        }
        return cell;
    }
}
/**
 * Functional syntax sugar for `new DCons(src?)`.
 *
 * @param src -
 */
const defDCons = (src) => new DCons(src);
/**
 * @deprecated use {@link defDCons} instead
 */
const dcons = defDCons;


/***/ }),

/***/ "./node_modules/@thi.ng/equiv/index.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/equiv/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "equiv": () => (/* binding */ equiv),
/* harmony export */   "equivArrayLike": () => (/* binding */ equivArrayLike),
/* harmony export */   "equivSet": () => (/* binding */ equivSet),
/* harmony export */   "equivMap": () => (/* binding */ equivMap),
/* harmony export */   "equivObject": () => (/* binding */ equivObject)
/* harmony export */ });
const OBJP = Object.getPrototypeOf({});
const FN = "function";
const STR = "string";
const equiv = (a, b) => {
    let proto;
    if (a === b) {
        return true;
    }
    if (a != null) {
        if (typeof a.equiv === FN) {
            return a.equiv(b);
        }
    }
    else {
        return a == b;
    }
    if (b != null) {
        if (typeof b.equiv === FN) {
            return b.equiv(a);
        }
    }
    else {
        return a == b;
    }
    if (typeof a === STR || typeof b === STR) {
        return false;
    }
    if (((proto = Object.getPrototypeOf(a)), proto == null || proto === OBJP) &&
        ((proto = Object.getPrototypeOf(b)), proto == null || proto === OBJP)) {
        return equivObject(a, b);
    }
    if (typeof a !== FN &&
        a.length !== undefined &&
        typeof b !== FN &&
        b.length !== undefined) {
        return equivArrayLike(a, b);
    }
    if (a instanceof Set && b instanceof Set) {
        return equivSet(a, b);
    }
    if (a instanceof Map && b instanceof Map) {
        return equivMap(a, b);
    }
    if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
    }
    if (a instanceof RegExp && b instanceof RegExp) {
        return a.toString() === b.toString();
    }
    // NaN
    return a !== a && b !== b;
};
const equivArrayLike = (a, b, _equiv = equiv) => {
    let l = a.length;
    if (l === b.length) {
        while (--l >= 0 && _equiv(a[l], b[l]))
            ;
    }
    return l < 0;
};
const equivSet = (a, b, _equiv = equiv) => a.size === b.size && _equiv([...a.keys()].sort(), [...b.keys()].sort());
const equivMap = (a, b, _equiv = equiv) => a.size === b.size && _equiv([...a].sort(), [...b].sort());
const equivObject = (a, b, _equiv = equiv) => {
    if (Object.keys(a).length !== Object.keys(b).length) {
        return false;
    }
    for (let k in a) {
        if (!b.hasOwnProperty(k) || !_equiv(a[k], b[k])) {
            return false;
        }
    }
    return true;
};


/***/ }),

/***/ "./node_modules/@thi.ng/errors/deferror.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/errors/deferror.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defError": () => (/* binding */ defError)
/* harmony export */ });
const defError = (prefix, suffix = (msg) => (msg !== undefined ? ": " + msg : "")) => class extends Error {
    constructor(msg) {
        super(prefix(msg) + suffix(msg));
    }
};


/***/ }),

/***/ "./node_modules/@thi.ng/errors/illegal-arguments.js":
/*!**********************************************************!*\
  !*** ./node_modules/@thi.ng/errors/illegal-arguments.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IllegalArgumentError": () => (/* binding */ IllegalArgumentError),
/* harmony export */   "illegalArgs": () => (/* binding */ illegalArgs)
/* harmony export */ });
/* harmony import */ var _deferror__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deferror */ "./node_modules/@thi.ng/errors/deferror.js");

const IllegalArgumentError = (0,_deferror__WEBPACK_IMPORTED_MODULE_0__.defError)(() => "illegal argument(s)");
const illegalArgs = (msg) => {
    throw new IllegalArgumentError(msg);
};


/***/ }),

/***/ "./node_modules/@thi.ng/errors/illegal-arity.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/errors/illegal-arity.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IllegalArityError": () => (/* binding */ IllegalArityError),
/* harmony export */   "illegalArity": () => (/* binding */ illegalArity)
/* harmony export */ });
/* harmony import */ var _deferror__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deferror */ "./node_modules/@thi.ng/errors/deferror.js");

const IllegalArityError = (0,_deferror__WEBPACK_IMPORTED_MODULE_0__.defError)(() => "illegal arity");
const illegalArity = (n) => {
    throw new IllegalArityError(n);
};


/***/ }),

/***/ "./node_modules/@thi.ng/errors/illegal-state.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/errors/illegal-state.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IllegalStateError": () => (/* binding */ IllegalStateError),
/* harmony export */   "illegalState": () => (/* binding */ illegalState)
/* harmony export */ });
/* harmony import */ var _deferror__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deferror */ "./node_modules/@thi.ng/errors/deferror.js");

const IllegalStateError = (0,_deferror__WEBPACK_IMPORTED_MODULE_0__.defError)(() => "illegal state");
const illegalState = (msg) => {
    throw new IllegalStateError(msg);
};


/***/ }),

/***/ "./node_modules/@thi.ng/errors/out-of-bounds.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/errors/out-of-bounds.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OutOfBoundsError": () => (/* binding */ OutOfBoundsError),
/* harmony export */   "outOfBounds": () => (/* binding */ outOfBounds),
/* harmony export */   "ensureIndex": () => (/* binding */ ensureIndex),
/* harmony export */   "ensureIndex2": () => (/* binding */ ensureIndex2)
/* harmony export */ });
/* harmony import */ var _deferror__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deferror */ "./node_modules/@thi.ng/errors/deferror.js");

const OutOfBoundsError = (0,_deferror__WEBPACK_IMPORTED_MODULE_0__.defError)(() => "index out of bounds");
const outOfBounds = (index) => {
    throw new OutOfBoundsError(index);
};
/**
 * Throws an {@link OutOfBoundsError} if `index` outside the `[min..max)` range.
 *
 * @param index
 * @param min
 * @param max
 */
const ensureIndex = (index, min, max) => (index < min || index >= max) && outOfBounds(index);
/**
 * Throws an {@link OutOfBoundsError} if either `x` or `y` is outside their
 * respective `[0..max)` range.
 *
 * @param x
 * @param y
 * @param maxX
 * @param maxY
 * @returns
 */
const ensureIndex2 = (x, y, maxX, maxY) => (x < 0 || x >= maxX || y < 0 || y >= maxY) && outOfBounds([x, y]);


/***/ }),

/***/ "./node_modules/@thi.ng/errors/unsupported.js":
/*!****************************************************!*\
  !*** ./node_modules/@thi.ng/errors/unsupported.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UnsupportedOperationError": () => (/* binding */ UnsupportedOperationError),
/* harmony export */   "unsupported": () => (/* binding */ unsupported)
/* harmony export */ });
/* harmony import */ var _deferror__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deferror */ "./node_modules/@thi.ng/errors/deferror.js");

const UnsupportedOperationError = (0,_deferror__WEBPACK_IMPORTED_MODULE_0__.defError)(() => "unsupported operation");
const unsupported = (msg) => {
    throw new UnsupportedOperationError(msg);
};


/***/ }),

/***/ "./node_modules/@thi.ng/math/abs.js":
/*!******************************************!*\
  !*** ./node_modules/@thi.ng/math/abs.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "absDiff": () => (/* binding */ absDiff),
/* harmony export */   "sign": () => (/* binding */ sign)
/* harmony export */ });
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ "./node_modules/@thi.ng/math/api.js");

const absDiff = (x, y) => Math.abs(x - y);
const sign = (x, eps = _api__WEBPACK_IMPORTED_MODULE_0__.EPS) => (x > eps ? 1 : x < -eps ? -1 : 0);


/***/ }),

/***/ "./node_modules/@thi.ng/math/angle.js":
/*!********************************************!*\
  !*** ./node_modules/@thi.ng/math/angle.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sincos": () => (/* binding */ sincos),
/* harmony export */   "cossin": () => (/* binding */ cossin),
/* harmony export */   "absTheta": () => (/* binding */ absTheta),
/* harmony export */   "absInnerAngle": () => (/* binding */ absInnerAngle),
/* harmony export */   "angleDist": () => (/* binding */ angleDist),
/* harmony export */   "atan2Abs": () => (/* binding */ atan2Abs),
/* harmony export */   "quadrant": () => (/* binding */ quadrant),
/* harmony export */   "deg": () => (/* binding */ deg),
/* harmony export */   "rad": () => (/* binding */ rad),
/* harmony export */   "csc": () => (/* binding */ csc),
/* harmony export */   "sec": () => (/* binding */ sec),
/* harmony export */   "cot": () => (/* binding */ cot),
/* harmony export */   "loc": () => (/* binding */ loc),
/* harmony export */   "normCos": () => (/* binding */ normCos),
/* harmony export */   "fastCos": () => (/* binding */ fastCos),
/* harmony export */   "fastSin": () => (/* binding */ fastSin)
/* harmony export */ });
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ "./node_modules/@thi.ng/math/api.js");

/**
 * Returns vector of `[sin(theta)*n, cos(theta)*n]`.
 *
 * @param theta -
 * @param n -
 */
const sincos = (theta, n = 1) => [
    Math.sin(theta) * n,
    Math.cos(theta) * n,
];
/**
 * Returns vector of `[cos(theta)*n, sin(theta)*n]`.
 *
 * @param theta -
 * @param n -
 */
const cossin = (theta, n = 1) => [
    Math.cos(theta) * n,
    Math.sin(theta) * n,
];
/**
 * Projects `theta` into [0 .. 2π] interval.
 *
 * @param theta -
 */
const absTheta = (theta) => ((theta %= _api__WEBPACK_IMPORTED_MODULE_0__.TAU), theta < 0 ? _api__WEBPACK_IMPORTED_MODULE_0__.TAU + theta : theta);
const absInnerAngle = (theta) => ((theta = Math.abs(theta)), theta > _api__WEBPACK_IMPORTED_MODULE_0__.PI ? _api__WEBPACK_IMPORTED_MODULE_0__.TAU - theta : theta);
/**
 * Returns smallest absolute angle difference between `a` and `b`.
 * Result will be in [0 .. π] interval.
 *
 * @param a -
 * @param b -
 */
const angleDist = (a, b) => absInnerAngle(absTheta((b % _api__WEBPACK_IMPORTED_MODULE_0__.TAU) - (a % _api__WEBPACK_IMPORTED_MODULE_0__.TAU)));
/**
 * Like `Math.atan2`, but always returns angle in [0 .. TAU) interval.
 *
 * @param y -
 * @param x -
 */
const atan2Abs = (y, x) => absTheta(Math.atan2(y, x));
/**
 * Returns quadrant ID (0-3) of given angle (in radians).
 *
 * @param theta -
 */
const quadrant = (theta) => (absTheta(theta) * _api__WEBPACK_IMPORTED_MODULE_0__.INV_HALF_PI) | 0;
/**
 * Converts angle to degrees.
 *
 * @param theta - angle in radians
 */
const deg = (theta) => theta * _api__WEBPACK_IMPORTED_MODULE_0__.RAD2DEG;
/**
 * Converts angle to radians.
 *
 * @param theta - angle in degrees
 */
const rad = (theta) => theta * _api__WEBPACK_IMPORTED_MODULE_0__.DEG2RAD;
/**
 * Cosecant. Approaches `±Infinity` for `theta` near multiples of π.
 *
 * @param theta - angle in radians
 */
const csc = (theta) => 1 / Math.sin(theta);
/**
 * Secant. Approaches `±Infinity` for `theta` near π/2 ± nπ
 *
 * @param theta - angle in radians
 */
const sec = (theta) => 1 / Math.cos(theta);
/**
 * Cotangent. Approaches `±Infinity` for `theta` near multiples of π.
 *
 * @param theta - angle in radians
 */
const cot = (theta) => 1 / Math.tan(theta);
/**
 * Law of Cosines. Takes length of two sides of a triangle and the inner
 * angle (in radians) between them. Returns length of third side.
 *
 * @param a -
 * @param b -
 * @param gamma -
 */
const loc = (a, b, gamma) => Math.sqrt(a * a + b * b - 2 * a * b * Math.cos(gamma));
/**
 * Approximates cos(xπ) for x in [-1,1]
 *
 * @param x -
 */
const normCos = (x) => {
    const x2 = x * x;
    return 1.0 + x2 * (-4 + 2 * x2);
};
const __fastCos = (x) => {
    const x2 = x * x;
    return 0.99940307 + x2 * (-0.49558072 + 0.03679168 * x2);
};
/**
 * Fast cosine approximation using {@link normCos} (polynomial). Max. error
 * ~0.00059693
 *
 * In [0 .. 2π] interval, approx. 18-20% faster than `Math.cos` on V8.
 *
 * @param theta - in radians
 */
const fastCos = (theta) => {
    theta %= _api__WEBPACK_IMPORTED_MODULE_0__.TAU;
    theta < 0 && (theta = -theta);
    switch ((theta * _api__WEBPACK_IMPORTED_MODULE_0__.INV_HALF_PI) | 0) {
        case 0:
            return __fastCos(theta);
        case 1:
            return -__fastCos(_api__WEBPACK_IMPORTED_MODULE_0__.PI - theta);
        case 2:
            return -__fastCos(theta - _api__WEBPACK_IMPORTED_MODULE_0__.PI);
        default:
            return __fastCos(_api__WEBPACK_IMPORTED_MODULE_0__.TAU - theta);
    }
};
/**
 * {@link fastCos}
 *
 * @param theta - in radians
 */
const fastSin = (theta) => fastCos(_api__WEBPACK_IMPORTED_MODULE_0__.HALF_PI - theta);


/***/ }),

/***/ "./node_modules/@thi.ng/math/api.js":
/*!******************************************!*\
  !*** ./node_modules/@thi.ng/math/api.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PI": () => (/* binding */ PI),
/* harmony export */   "TAU": () => (/* binding */ TAU),
/* harmony export */   "HALF_PI": () => (/* binding */ HALF_PI),
/* harmony export */   "THIRD_PI": () => (/* binding */ THIRD_PI),
/* harmony export */   "QUARTER_PI": () => (/* binding */ QUARTER_PI),
/* harmony export */   "SIXTH_PI": () => (/* binding */ SIXTH_PI),
/* harmony export */   "INV_PI": () => (/* binding */ INV_PI),
/* harmony export */   "INV_TAU": () => (/* binding */ INV_TAU),
/* harmony export */   "INV_HALF_PI": () => (/* binding */ INV_HALF_PI),
/* harmony export */   "DEG2RAD": () => (/* binding */ DEG2RAD),
/* harmony export */   "RAD2DEG": () => (/* binding */ RAD2DEG),
/* harmony export */   "PHI": () => (/* binding */ PHI),
/* harmony export */   "SQRT2": () => (/* binding */ SQRT2),
/* harmony export */   "SQRT3": () => (/* binding */ SQRT3),
/* harmony export */   "SQRT2_2": () => (/* binding */ SQRT2_2),
/* harmony export */   "SQRT2_3": () => (/* binding */ SQRT2_3),
/* harmony export */   "THIRD": () => (/* binding */ THIRD),
/* harmony export */   "TWO_THIRD": () => (/* binding */ TWO_THIRD),
/* harmony export */   "SIXTH": () => (/* binding */ SIXTH),
/* harmony export */   "EPS": () => (/* binding */ EPS)
/* harmony export */ });
const PI = Math.PI;
const TAU = PI * 2;
const HALF_PI = PI / 2;
const THIRD_PI = PI / 3;
const QUARTER_PI = PI / 4;
const SIXTH_PI = PI / 6;
const INV_PI = 1 / PI;
const INV_TAU = 1 / TAU;
const INV_HALF_PI = 1 / HALF_PI;
const DEG2RAD = PI / 180;
const RAD2DEG = 180 / PI;
const PHI = (1 + Math.sqrt(5)) / 2;
const SQRT2 = Math.SQRT2;
const SQRT3 = Math.sqrt(3);
const SQRT2_2 = SQRT2 / 2;
const SQRT2_3 = SQRT3 / 2;
const THIRD = 1 / 3;
const TWO_THIRD = 2 / 3;
const SIXTH = 1 / 6;
let EPS = 1e-6;


/***/ }),

/***/ "./node_modules/@thi.ng/math/eqdelta.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/math/eqdelta.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "eqDelta": () => (/* binding */ eqDelta),
/* harmony export */   "eqDeltaFixed": () => (/* binding */ eqDeltaFixed),
/* harmony export */   "eqDeltaScaled": () => (/* binding */ eqDeltaScaled)
/* harmony export */ });
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ "./node_modules/@thi.ng/math/api.js");

const abs = Math.abs;
const max = Math.max;
/**
 * Similar to {@link eqDelta}, but used given `eps` as is.
 *
 * @param a - left value
 * @param b - right value
 * @param eps - epsilon / tolerance, default `1e-6`
 */
const eqDelta = (a, b, eps = _api__WEBPACK_IMPORTED_MODULE_0__.EPS) => abs(a - b) <= eps;
/**
 * @deprecated
 */
const eqDeltaFixed = eqDelta;
/**
 * Checks if `|a - b| <= ε` and adapts given epsilon value to the given
 * arguments:
 *
 * ε is factored with the largest absolute value of `a` or `b` (but
 * never lesser than the given `eps` value):
 *
 * `ε = ε * max(1, |a|, |b|)`
 *
 * @param a - left value
 * @param b - right value
 * @param eps - epsilon / tolerance, default `1e-6`
 */
const eqDeltaScaled = (a, b, eps = _api__WEBPACK_IMPORTED_MODULE_0__.EPS) => abs(a - b) <= eps * max(1, abs(a), abs(b));


/***/ }),

/***/ "./node_modules/@thi.ng/math/fit.js":
/*!******************************************!*\
  !*** ./node_modules/@thi.ng/math/fit.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "norm": () => (/* binding */ norm),
/* harmony export */   "fit": () => (/* binding */ fit),
/* harmony export */   "fitClamped": () => (/* binding */ fitClamped),
/* harmony export */   "fit01": () => (/* binding */ fit01),
/* harmony export */   "fit10": () => (/* binding */ fit10),
/* harmony export */   "fit11": () => (/* binding */ fit11)
/* harmony export */ });
/* harmony import */ var _interval__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interval */ "./node_modules/@thi.ng/math/interval.js");

/**
 * Returns normalized value of `x` WRT to interval `a .. b`. If `a`
 * equals `b`, returns 0.
 *
 * @param x -
 * @param a -
 * @param b -
 */
const norm = (x, a, b) => (b !== a ? (x - a) / (b - a) : 0);
const fit = (x, a, b, c, d) => c + (d - c) * norm(x, a, b);
const fitClamped = (x, a, b, c, d) => c + (d - c) * (0,_interval__WEBPACK_IMPORTED_MODULE_0__.clamp01)(norm(x, a, b));
const fit01 = (x, a, b) => a + (b - a) * (0,_interval__WEBPACK_IMPORTED_MODULE_0__.clamp01)(x);
const fit10 = (x, a, b) => b + (a - b) * (0,_interval__WEBPACK_IMPORTED_MODULE_0__.clamp01)(x);
const fit11 = (x, a, b) => a + (b - a) * (0.5 + 0.5 * (0,_interval__WEBPACK_IMPORTED_MODULE_0__.clamp11)(x));


/***/ }),

/***/ "./node_modules/@thi.ng/math/interval.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/math/interval.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clamp": () => (/* binding */ clamp),
/* harmony export */   "clamp0": () => (/* binding */ clamp0),
/* harmony export */   "clamp01": () => (/* binding */ clamp01),
/* harmony export */   "clamp11": () => (/* binding */ clamp11),
/* harmony export */   "clamp05": () => (/* binding */ clamp05),
/* harmony export */   "wrap": () => (/* binding */ wrap),
/* harmony export */   "wrapOnce": () => (/* binding */ wrapOnce),
/* harmony export */   "wrap01": () => (/* binding */ wrap01),
/* harmony export */   "wrap11": () => (/* binding */ wrap11),
/* harmony export */   "min2id": () => (/* binding */ min2id),
/* harmony export */   "min3id": () => (/* binding */ min3id),
/* harmony export */   "min4id": () => (/* binding */ min4id),
/* harmony export */   "max2id": () => (/* binding */ max2id),
/* harmony export */   "max3id": () => (/* binding */ max3id),
/* harmony export */   "max4id": () => (/* binding */ max4id),
/* harmony export */   "minNonZero2": () => (/* binding */ minNonZero2),
/* harmony export */   "minNonZero3": () => (/* binding */ minNonZero3),
/* harmony export */   "smin": () => (/* binding */ smin),
/* harmony export */   "smax": () => (/* binding */ smax),
/* harmony export */   "sclamp": () => (/* binding */ sclamp),
/* harmony export */   "absMin": () => (/* binding */ absMin),
/* harmony export */   "absMax": () => (/* binding */ absMax),
/* harmony export */   "foldback": () => (/* binding */ foldback),
/* harmony export */   "inRange": () => (/* binding */ inRange),
/* harmony export */   "inOpenRange": () => (/* binding */ inOpenRange)
/* harmony export */ });
/**
 * Clamps value `x` to given closed interval.
 *
 * @param x - value to clamp
 * @param min - lower bound
 * @param max - upper bound
 */
const clamp = (x, min, max) => (x < min ? min : x > max ? max : x);
/**
 * Clamps value `x` to closed [0 .. ∞] interval.
 *
 * @param x
 */
const clamp0 = (x) => (x > 0 ? x : 0);
/**
 * Clamps value `x` to closed [0 .. 1] interval.
 *
 * @param x
 */
const clamp01 = (x) => (x < 0 ? 0 : x > 1 ? 1 : x);
/**
 * Clamps value `x` to closed [-1 .. 1] interval.
 *
 * @param x
 */
const clamp11 = (x) => (x < -1 ? -1 : x > 1 ? 1 : x);
/**
 * Clamps value `x` to closed [0 .. 0.5] interval.
 *
 * @param x
 */
const clamp05 = (x) => (x < 0 ? 0 : x > 0.5 ? 0.5 : x);
/**
 * Folds `x` back inside closed [min..max] interval. Also see
 * {@link wrapOnce}.
 *
 * @param x -
 * @param min -
 * @param max -
 */
const wrap = (x, min, max) => {
    if (min === max)
        return min;
    if (x > max) {
        const d = max - min;
        x -= d;
        if (x > max)
            x -= d * (((x - min) / d) | 0);
    }
    else if (x < min) {
        const d = max - min;
        x += d;
        if (x < min)
            x += d * (((min - x) / d + 1) | 0);
    }
    return x;
};
/**
 * Like {@link wrap}, but optimized for cases where `x` is guaranteed to
 * be in `[min - d, max + d]` interval, where `d = max - min`. Result
 * will be in closed `[min..max]` interval.
 *
 * @param x -
 * @param min -
 * @param max -
 */
const wrapOnce = (x, min, max) => x < min ? x - min + max : x > max ? x - max + min : x;
/**
 * Similar to {@link wrapOnce} for [0..1] interval.
 *
 * @param x -
 */
const wrap01 = (x) => (x < 0 ? x + 1 : x > 1 ? x - 1 : x);
/**
 * Similar to {@link wrapOnce} for [-1..1] interval.
 *
 * @param x -
 */
const wrap11 = (x) => (x < -1 ? x + 2 : x > 1 ? x - 2 : x);
const min2id = (a, b) => (a <= b ? 0 : 1);
const min3id = (a, b, c) => a <= b ? (a <= c ? 0 : 2) : b <= c ? 1 : 2;
const min4id = (a, b, c, d) => a <= b
    ? a <= c
        ? a <= d
            ? 0
            : 3
        : c <= d
            ? 2
            : 3
    : b <= c
        ? b <= d
            ? 1
            : 3
        : c <= d
            ? 2
            : 3;
const max2id = (a, b) => (a >= b ? 0 : 1);
const max3id = (a, b, c) => a >= b ? (a >= c ? 0 : 2) : b >= c ? 1 : 2;
const max4id = (a, b, c, d) => a >= b
    ? a >= c
        ? a >= d
            ? 0
            : 3
        : c >= d
            ? 2
            : 3
    : b >= c
        ? b >= d
            ? 1
            : 3
        : c >= d
            ? 2
            : 3;
/**
 * Returns the non-zero minimum value of the given `a`, `b` args.
 *
 * @param a
 * @param b
 */
const minNonZero2 = (a, b) => a !== 0 ? (b !== 0 ? Math.min(a, b) : a) : b;
/**
 * Returns the non-zero minimum value of the given `a`, `b`, `c` args.
 *
 * @param a
 * @param b
 * @param c
 */
const minNonZero3 = (a, b, c) => minNonZero2(minNonZero2(a, b), c);
/**
 * See `smax()`.
 *
 * @param a -
 * @param b -
 * @param k - smooth exponent (MUST be > 0)
 */
const smin = (a, b, k) => smax(a, b, -k);
/**
 * Smooth maximum. Note: Result values will be slightly larger than max
 * value near max(a,b) + eps due to exponential decay. Higher `k` values
 * reduce the error, but also reduce the smoothing. Recommended k=16.
 *
 * {@link https://en.wikipedia.org/wiki/Smooth_maximum}
 *
 * @param a -
 * @param b -
 * @param k - smooth exponent (MUST be > 0)
 */
const smax = (a, b, k) => {
    const ea = Math.exp(a * k);
    const eb = Math.exp(b * k);
    return (a * ea + b * eb) / (ea + eb);
};
/**
 * Same as `smin(smax(x, min, k), max, k)`.
 *
 * @param x -
 * @param min -
 * @param max -
 * @param k -
 */
const sclamp = (x, min, max, k) => smin(smax(x, min, k), max, k);
const absMin = (a, b) => (Math.abs(a) < Math.abs(b) ? a : b);
const absMax = (a, b) => (Math.abs(a) > Math.abs(b) ? a : b);
/**
 * If `abs(x) > abs(e)`, recursively mirrors `x` back into `[-e .. +e]`
 * interval at respective positive/negative boundary.
 *
 * @remarks
 * References:
 * - https://www.desmos.com/calculator/lkyf2ag3ta
 * - https://www.musicdsp.org/en/latest/Effects/203-fold-back-distortion.html
 *
 * @param e - threshold (> 0)
 * @param x - input value
 */
const foldback = (e, x) => x < -e || x > e ? Math.abs(Math.abs((x - e) % (4 * e)) - 2 * e) - e : x;
/**
 * Returns true iff `x` is in closed interval `[min .. max]`
 *
 * @param x -
 * @param min -
 * @param max -
 */
const inRange = (x, min, max) => x >= min && x <= max;
/**
 * Returns true iff `x` is in open interval `(min .. max)`
 *
 * @param x -
 * @param min -
 * @param max -
 */
const inOpenRange = (x, min, max) => x > min && x < max;


/***/ }),

/***/ "./node_modules/@thi.ng/math/mix.js":
/*!******************************************!*\
  !*** ./node_modules/@thi.ng/math/mix.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mix": () => (/* binding */ mix),
/* harmony export */   "mixBilinear": () => (/* binding */ mixBilinear),
/* harmony export */   "mixQuadratic": () => (/* binding */ mixQuadratic),
/* harmony export */   "mixCubic": () => (/* binding */ mixCubic),
/* harmony export */   "mixHermite": () => (/* binding */ mixHermite),
/* harmony export */   "mixCubicHermite": () => (/* binding */ mixCubicHermite),
/* harmony export */   "mixCubicHermiteFromPoints": () => (/* binding */ mixCubicHermiteFromPoints),
/* harmony export */   "mixBicubic": () => (/* binding */ mixBicubic),
/* harmony export */   "tangentCardinal": () => (/* binding */ tangentCardinal),
/* harmony export */   "tangentDiff3": () => (/* binding */ tangentDiff3),
/* harmony export */   "tween": () => (/* binding */ tween),
/* harmony export */   "circular": () => (/* binding */ circular),
/* harmony export */   "invCircular": () => (/* binding */ invCircular),
/* harmony export */   "lens": () => (/* binding */ lens),
/* harmony export */   "cosine": () => (/* binding */ cosine),
/* harmony export */   "decimated": () => (/* binding */ decimated),
/* harmony export */   "bounce": () => (/* binding */ bounce),
/* harmony export */   "ease": () => (/* binding */ ease),
/* harmony export */   "impulse": () => (/* binding */ impulse),
/* harmony export */   "gain": () => (/* binding */ gain),
/* harmony export */   "parabola": () => (/* binding */ parabola),
/* harmony export */   "cubicPulse": () => (/* binding */ cubicPulse),
/* harmony export */   "sinc": () => (/* binding */ sinc),
/* harmony export */   "sincNormalized": () => (/* binding */ sincNormalized),
/* harmony export */   "lanczos": () => (/* binding */ lanczos),
/* harmony export */   "sigmoid": () => (/* binding */ sigmoid),
/* harmony export */   "sigmoid01": () => (/* binding */ sigmoid01),
/* harmony export */   "sigmoid11": () => (/* binding */ sigmoid11),
/* harmony export */   "schlick": () => (/* binding */ schlick),
/* harmony export */   "expFactor": () => (/* binding */ expFactor),
/* harmony export */   "gaussian": () => (/* binding */ gaussian)
/* harmony export */ });
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ "./node_modules/@thi.ng/math/api.js");

/**
 * Linear interpolation without clamping. Computes `a + (b - a) * t`
 *
 * @param a - start value
 * @param b - end value
 * @param t - interpolation factor [0..1]
 */
const mix = (a, b, t) => a + (b - a) * t;
/**
 * Bilinear interpolation of given values (`a`,`b`,`c`,`d`).
 *
 * @example
 * ```ts
 * c    d
 * +----+
 * |    |
 * +----+
 * a    b
 * ```
 *
 * @param a - BL value
 * @param b - BR value
 * @param c - TL value
 * @param d - TR value
 * @param u - 1st interpolation factor
 * @param v - 2nd interpolation factor
 */
const mixBilinear = (a, b, c, d, u, v) => {
    const iu = 1 - u;
    const iv = 1 - v;
    return a * iu * iv + b * u * iv + c * iu * v + d * u * v;
};
const mixQuadratic = (a, b, c, t) => {
    const s = 1 - t;
    return a * s * s + b * 2 * s * t + c * t * t;
};
const mixCubic = (a, b, c, d, t) => {
    const t2 = t * t;
    const s = 1 - t;
    const s2 = s * s;
    return a * s2 * s + b * 3 * s2 * t + c * 3 * t2 * s + d * t2 * t;
};
/**
 * Returns hermite interpolation of `a, b, c, d` at normalized position
 * `t`, where `a` and `d` are used as predecessor/successor of `b` / `c`
 * and only inform the tangent of the interpolation curve. The
 * interpolated result is that of `b` and `c`.
 *
 * Assumes all inputs are uniformly spaced. If that's not the case, use
 * {@link mixCubicHermite} with one of the tangent generators supporting
 * non-uniform spacing of points.
 *
 * See: {@link https://www.desmos.com/calculator/j4gf8g9vkr}
 *
 * Source:
 * {@link https://www.musicdsp.org/en/latest/Other/93-hermite-interpollation.html}
 *
 * - {@link mixCubicHermite}
 * - {@link tangentCardinal}
 * - {@link tangentDiff3}
 *
 * @param a -
 * @param b -
 * @param c -
 * @param d -
 * @param t -
 */
const mixHermite = (a, b, c, d, t) => {
    const y1 = 0.5 * (c - a);
    const y2 = 1.5 * (b - c) + 0.5 * (d - a);
    return ((y2 * t + a - b + y1 - y2) * t + y1) * t + b;
};
/**
 * Computes cubic-hermite interpolation between `a` / `b` at normalized
 * time `t` and using respective tangents `ta` / `tb`.
 *
 * {@link https://en.wikipedia.org/wiki/Cubic_Hermite_spline}
 *
 * - {@link mixHermite}
 * - {@link tangentCardinal}
 * - {@link tangentDiff3}
 *
 * @param a -
 * @param ta -
 * @param b -
 * @param tb -
 * @param t -
 */
const mixCubicHermite = (a, ta, b, tb, t) => {
    const s = t - 1;
    const t2 = t * t;
    const s2 = s * s;
    const h00 = (1 + 2 * t) * s2;
    const h10 = t * s2;
    const h01 = t2 * (3 - 2 * t);
    const h11 = t2 * s;
    return h00 * a + h10 * ta + h01 * b + h11 * tb;
};
/**
 * Similar to {@link mixCubicHermite}, but takes 4 control values (uniformly
 * spaced) and computes tangents automatically. Returns `b` iff `t=0` and `c`
 * iff `t=1.0`.
 *
 * @param a
 * @param b
 * @param c
 * @param d
 * @param t
 */
const mixCubicHermiteFromPoints = (a, b, c, d, t) => {
    d *= 0.5;
    const aa = -0.5 * a + 1.5 * b - 1.5 * c + d;
    const bb = a - 2.5 * b + 2 * c - d;
    const cc = -0.5 * a + 0.5 * c;
    const dd = b;
    const t2 = t * t;
    return t * t2 * aa + t2 * bb + t * cc + dd;
};
/**
 * Bicubic interpolation of given 4x4 sample values (in row major order, i.e.
 * `s00..s03` = 1st row).
 *
 * @remarks
 * Result will not be clamped and might fall outside the total range of the
 * input samples.
 *
 * @param s00
 * @param s01
 * @param s02
 * @param s03
 * @param s10
 * @param s11
 * @param s12
 * @param s13
 * @param s20
 * @param s21
 * @param s22
 * @param s23
 * @param s30
 * @param s31
 * @param s32
 * @param s33
 * @param u
 * @param v
 * @returns
 */
const mixBicubic = (s00, s01, s02, s03, s10, s11, s12, s13, s20, s21, s22, s23, s30, s31, s32, s33, u, v) => mixCubicHermiteFromPoints(mixCubicHermiteFromPoints(s00, s01, s02, s03, u), mixCubicHermiteFromPoints(s10, s11, s12, s13, u), mixCubicHermiteFromPoints(s20, s21, s22, s23, u), mixCubicHermiteFromPoints(s30, s31, s32, s33, u), v);
/**
 * Helper function for {@link mixCubicHermite}. Computes cardinal tangents
 * based on point neighbors of a point B (not given), i.e. `a`
 * (predecessor) and `c` (successor) and their times (defaults to
 * uniformly spaced). The optional `tension` parameter can be used to
 * scale the tangent where 0.0 produces a Cardinal spline tangent and
 * 1.0 a Catmull-Rom (opposite to the Wikipedia ref).
 *
 * {@link https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Cardinal_spline}
 *
 * @param prev -
 * @param next -
 * @param scale -
 * @param ta -
 * @param tc -
 */
const tangentCardinal = (prev, next, scale = 0.5, ta = 0, tc = 2) => scale * ((next - prev) / (tc - ta));
/**
 * Helper function for {@link mixCubicHermite}. Computes tangent for `curr`,
 * based on 3-point finite difference, where `prev` & `next` are
 * `curr`'s neighbors and the `tX` the three points' respective time
 * values. The latter are equally spaced by default (each 1.0 apart).
 *
 * Using this function with equal spacing of 1.0 and together with
 * {@link mixCubicHermite} will produce same results as the somewhat
 * optimized variant {@link mixHermite}.
 *
 * {@link https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Finite_difference}
 *
 * @param prev -
 * @param curr -
 * @param next -
 * @param ta -
 * @param tb -
 * @param tc -
 */
const tangentDiff3 = (prev, curr, next, ta = 0, tb = 1, tc = 2) => 0.5 * ((next - curr) / (tc - tb) + (curr - prev) / (tb - ta));
/**
 * HOF interpolator. Takes a timing function `f` and interval `[from,to]`.
 * Returns function which takes normalized time (in [0,1] range) as single arg
 * and returns interpolated value.
 *
 * @param f -
 * @param from -
 * @param to -
 */
const tween = (f, from, to) => (t) => mix(from, to, f(t));
/**
 * Circular interpolation (ease out): `sqrt(1 - (1 - t)^2)`
 *
 * @remarks
 * Reference: https://www.desmos.com/calculator/tisoiazdrw
 *
 * @param t - interpolation factor [0..1]
 */
const circular = (t) => {
    t = 1 - t;
    return Math.sqrt(1 - t * t);
};
/**
 * Inverse/flipped version of {@link circular} (ease in).
 *
 * @remarks
 * Reference: https://www.desmos.com/calculator/tisoiazdrw
 *
 * @param t - interpolation factor [0..1]
 */
const invCircular = (t) => 1 - circular(1 - t);
/**
 * Zoomlens interpolation with customizable lens position, behavior and
 * strength.
 *
 * @remarks
 * Lens position must be given in (0..1) interval. Lens strength must be in
 * [-1,1] range. If negative, the lens will be bundling values near `pos`, if
 * positive the lens has dilating characteristics and will spread values near
 * `pos` towards the edges.
 *
 * Also see {@link schlick} for an alternative approach.
 *
 * @example
 * ```ts
 * // interpolated position in [100..400] interval for given `t`
 * y = mix(100, 400, lens(0.5, 1, t));
 *
 * // or build tween function via `tween()`
 * f = tween(partial(lens, 0.5, 1), 100, 400);
 *
 * f(t)
 * ```
 *
 * @param pos - lens pos
 * @param strength - lens strength
 * @param t - interpolation factor [0..1]
 */
const lens = (pos, strength, t) => {
    const impl = strength > 0 ? invCircular : circular;
    const tp = 1 - pos;
    const tl = t <= pos ? impl(t / pos) * pos : 1 - impl((1 - t) / tp) * tp;
    return mix(t, tl, Math.abs(strength));
};
const cosine = (t) => 1 - (Math.cos(t * _api__WEBPACK_IMPORTED_MODULE_0__.PI) * 0.5 + 0.5);
const decimated = (n, t) => Math.floor(t * n) / n;
const bounce = (k, amp, t) => {
    const tk = t * k;
    return 1 - ((amp * Math.sin(tk)) / tk) * Math.cos(t * _api__WEBPACK_IMPORTED_MODULE_0__.HALF_PI);
};
/**
 * Exponential easing.
 *
 * - `ease = 1` -> linear
 * - `ease > 1` -> ease in
 * - `ease < 1` -> ease out
 *
 * @param ease - easing behavior [0.0 .. ∞]
 * @param t -
 */
const ease = (ease, t) => Math.pow(t, ease);
/**
 * Impulse generator. Peaks at `t = 1/k`
 *
 * @param k - impulse width (higher values => shorter impulse)
 */
const impulse = (k, t) => {
    const h = k * t;
    return h * Math.exp(1 - h);
};
const gain = (k, t) => t < 0.5 ? 0.5 * Math.pow(2 * t, k) : 1 - 0.5 * Math.pow(2 - 2 * t, k);
const parabola = (k, t) => Math.pow(4.0 * t * (1.0 - t), k);
const cubicPulse = (w, c, t) => {
    t = Math.abs(t - c);
    return t > w ? 0 : ((t /= w), 1 - t * t * (3 - 2 * t));
};
/**
 * Unnormalized Sinc function: sin(x)/x. Returns 1 for t=0.
 *
 * @remarks
 * https://en.wikipedia.org/wiki/Sinc_function
 *
 * @param k
 * @param t
 */
const sinc = (t) => (t !== 0 ? Math.sin(t) / t : 1);
/**
 * Normalized Sinc function, returns sinc(π*k*t).
 *
 * @remarks
 * https://en.wikipedia.org/wiki/Sinc_function
 *
 * @see {@link sinc}
 *
 * @param k
 * @param t
 */
const sincNormalized = (k, t) => sinc(_api__WEBPACK_IMPORTED_MODULE_0__.PI * k * t);
/**
 * Lanczos filter. Returns `sinc(πt)sinc(πt/a)` iff `t` in (-a,a) interval, else
 * returns 0.
 *
 * @remarks
 * Interactive graph: https://www.desmos.com/calculator/pmypqgefle
 *
 * @param a
 * @param t
 */
const lanczos = (a, t) => t !== 0 ? (-a < t && t < a ? sinc(_api__WEBPACK_IMPORTED_MODULE_0__.PI * t) * sinc((_api__WEBPACK_IMPORTED_MODULE_0__.PI * t) / a) : 0) : 1;
/**
 * Sigmoid function for inputs arounds center bias.
 *
 * @remarks
 * Updated in v3.0.0 to add bias value to satisfy more use cases. Use
 * {@link sigmoid01} for old behavior.
 *
 * @param bias - center value (for which result = 0.5)
 * @param k - steepness
 * @param t - input value
 */
const sigmoid = (bias, k, t) => t != bias ? 1 / (1 + Math.exp(-k * (t - bias))) : 0.5;
/**
 * Sigmoid function for inputs in [0..1] interval. Center bias = 0.5.
 *
 * @param k - steepness
 * @param t - input value
 */
const sigmoid01 = (k, t) => sigmoid(0.5, k, t);
/**
 * Sigmoid function for inputs in [-1..+1] interval. Center bias = 0
 *
 * @param k -
 * @param t -
 */
const sigmoid11 = (k, t) => sigmoid(0, k, t);
/**
 * Generalized Schlick bias gain curve, based on:
 * https://arxiv.org/abs/2010.09714
 *
 * @remarks
 * Interactive graph:
 * https://www.desmos.com/calculator/u6bkm5rb7t
 *
 * @param a - curve strength. recommended (0..64]
 * @param b - pivot position [0..1]
 * @param t - input val [0..1]
 */
const schlick = (a, b, t) => t <= b
    ? (b * t) / (t + a * (b - t) + _api__WEBPACK_IMPORTED_MODULE_0__.EPS)
    : ((1 - b) * (t - 1)) / (1 - t - a * (b - t) + _api__WEBPACK_IMPORTED_MODULE_0__.EPS) + 1;
/**
 * Computes exponential factor to interpolate from `a` to `b` over
 * `num` steps. I.e. multiplying `a` with the returned factor will yield
 * `b` after `num` steps. All args must be > 0.
 *
 * @param a
 * @param b
 * @param num
 */
const expFactor = (a, b, num) => (b / a) ** (1 / num);
/**
 * Computes gaussian bell curve for given center `bias` and `sigma` (spread).
 *
 * @remarks
 * Interactive graph: https://www.desmos.com/calculator/aq6hdzxprv
 *
 * @param bias
 * @param sigma
 * @param t
 */
const gaussian = (bias, sigma, t) => Math.exp(-((t - bias) ** 2) / (2 * sigma * sigma));


/***/ }),

/***/ "./node_modules/@thi.ng/math/prec.js":
/*!*******************************************!*\
  !*** ./node_modules/@thi.ng/math/prec.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fmod": () => (/* binding */ fmod),
/* harmony export */   "fract": () => (/* binding */ fract),
/* harmony export */   "trunc": () => (/* binding */ trunc),
/* harmony export */   "roundTo": () => (/* binding */ roundTo),
/* harmony export */   "floorTo": () => (/* binding */ floorTo),
/* harmony export */   "ceilTo": () => (/* binding */ ceilTo),
/* harmony export */   "roundEps": () => (/* binding */ roundEps)
/* harmony export */ });
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ "./node_modules/@thi.ng/math/api.js");

/**
 * Returns `a - b * floor(a/b)`
 *
 * @param a -
 * @param b -
 */
const fmod = (a, b) => a - b * Math.floor(a / b);
const fract = (x) => x - Math.floor(x);
const trunc = (x) => (x < 0 ? Math.ceil(x) : Math.floor(x));
const roundTo = (x, prec = 1) => Math.round(x / prec) * prec;
const floorTo = (x, prec = 1) => Math.floor(x / prec) * prec;
const ceilTo = (x, prec = 1) => Math.ceil(x / prec) * prec;
/**
 * Only rounds `x` to nearest int if `fract(x)` <= `eps` or >= `1-eps`.
 *
 * @param x -
 * @param eps -
 */
const roundEps = (x, eps = _api__WEBPACK_IMPORTED_MODULE_0__.EPS) => {
    const f = fract(x);
    return f <= eps || f >= 1 - eps ? Math.round(x) : x;
};


/***/ }),

/***/ "./node_modules/@thi.ng/math/safe-div.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/math/safe-div.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "safeDiv": () => (/* binding */ safeDiv)
/* harmony export */ });
/**
 * Returns `a` divided by `b` or zero if `b = 0`.
 *
 * @param a
 * @param b
 */
const safeDiv = (a, b) => (b !== 0 ? a / b : 0);


/***/ }),

/***/ "./node_modules/@thi.ng/math/step.js":
/*!*******************************************!*\
  !*** ./node_modules/@thi.ng/math/step.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "step": () => (/* binding */ step),
/* harmony export */   "smoothStep": () => (/* binding */ smoothStep),
/* harmony export */   "smootherStep": () => (/* binding */ smootherStep),
/* harmony export */   "expStep": () => (/* binding */ expStep)
/* harmony export */ });
/* harmony import */ var _interval__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interval */ "./node_modules/@thi.ng/math/interval.js");

/**
 * Step/threshold function.
 *
 * @param edge - threshold
 * @param x - test value
 * @returns 0, if `x < e`, else 1
 */
const step = (edge, x) => (x < edge ? 0 : 1);
/**
 * GLSL-style smoothStep threshold function.
 *
 * @param edge - lower threshold
 * @param edge2 - upper threshold
 * @param x - test value
 * @returns 0, if `x < edge1`, 1 if `x > edge2`, else S-curve polynomial interpolation
 */
const smoothStep = (edge, edge2, x) => {
    x = (0,_interval__WEBPACK_IMPORTED_MODULE_0__.clamp01)((x - edge) / (edge2 - edge));
    return (3 - 2 * x) * x * x;
};
/**
 * Similar to {@link smoothStep} but using different, higher degree polynomial.
 *
 * @param edge -
 * @param edge2 -
 * @param x -
 */
const smootherStep = (edge, edge2, x) => {
    x = (0,_interval__WEBPACK_IMPORTED_MODULE_0__.clamp01)((x - edge) / (edge2 - edge));
    return x * x * x * (x * (x * 6 - 15) + 10);
};
/**
 * Exponential ramp with variable shape
 *
 * @remarks
 * Example configurations:
 *
 * - S-curve: k=8, n=4
 * - Step near 1.0: k=8, n=20
 * - Pulse: k=0.005, n=-10
 * - Ease-in: k=0.5, n=0.25
 *
 * Interactive graph: https://www.desmos.com/calculator/gcnuyppycz
 *
 * @param k -
 * @param n -
 * @param x -
 */
const expStep = (k, n, x) => 1 - Math.exp(-k * Math.pow(x, n));


/***/ }),

/***/ "./node_modules/@thi.ng/memoize/memoize1.js":
/*!**************************************************!*\
  !*** ./node_modules/@thi.ng/memoize/memoize1.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "memoize1": () => (/* binding */ memoize1)
/* harmony export */ });
/**
 * Optimized memoization for single arg functions. If the function
 * expects args other than strings or numbers, you MUST provide a `Map`
 * implementation which supports value (rather than object) equality,
 * e.g. one of those provided by
 * {@link @thi.ng/associative# | @thi.ng/associative}. Using a native
 * `Map` type here will lead to memory leaks! Alternatively, use
 * {@link (memoizeJ:1)}.
 *
 * @param fn -
 * @param cache -
 */
const memoize1 = (fn, cache) => {
    !cache && (cache = new Map());
    return (x) => {
        let res;
        return cache.has(x)
            ? cache.get(x)
            : (cache.set(x, (res = fn(x))), res);
    };
};


/***/ }),

/***/ "./node_modules/@thi.ng/random/arandom.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/random/arandom.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ARandom": () => (/* binding */ ARandom)
/* harmony export */ });
const INV_MAX = 1 / 0xffffffff;
class ARandom {
    float(norm = 1) {
        return this.int() * INV_MAX * norm;
    }
    norm(norm = 1) {
        return (this.int() * INV_MAX - 0.5) * 2 * norm;
    }
    minmax(min, max) {
        return this.float() * (max - min) + min;
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/random/system.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/random/system.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SystemRandom": () => (/* binding */ SystemRandom),
/* harmony export */   "SYSTEM": () => (/* binding */ SYSTEM)
/* harmony export */ });
/* harmony import */ var _arandom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arandom */ "./node_modules/@thi.ng/random/arandom.js");

const random = Math.random;
/**
 * A `Math.random()` based {@link IRandom} implementation. Also @see
 * {@link SYSTEM}.
 */
class SystemRandom extends _arandom__WEBPACK_IMPORTED_MODULE_0__.ARandom {
    int() {
        return (random() * 4294967296) /* 2**32 */ >>> 0;
    }
    float(norm = 1) {
        return random() * norm;
    }
    norm(norm = 1) {
        return (random() - 0.5) * 2 * norm;
    }
}
/**
 * Used as default PRNG throughout most other thi.ng projects, though usually is
 * configurable.
 */
const SYSTEM = new SystemRandom();


/***/ }),

/***/ "./node_modules/@thi.ng/random/weighted-random.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/random/weighted-random.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "weightedRandom": () => (/* binding */ weightedRandom)
/* harmony export */ });
/* harmony import */ var _thi_ng_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/api */ "./node_modules/@thi.ng/api/assert.js");
/* harmony import */ var _system__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./system */ "./node_modules/@thi.ng/random/system.js");


/**
 * Returns a no-arg function which produces a random choice of given weighted
 * `choices` and using given {@link IRandom} instance (default {@link SYSTEM}.
 * If `weights` are given, it must be the same size as `choices` (else missing
 * weights will be assumed zero). If omitted entirely, each choice will have
 * same probability.
 *
 * @remarks
 * Throws an error if the `choices` array is empty (requires at least 1 item).
 * If the total sum of `weights` is <= 0 a warning is printed to the console and
 * the resulting function will only ever return the first `choice`.
 *
 * Based on:
 * {@link https://www.electricmonk.nl/log/2009/12/23/weighted-random-distribution/}
 *
 * @param choices -
 * @param weights - optional weights
 */
const weightedRandom = (choices, weights, rnd = _system__WEBPACK_IMPORTED_MODULE_0__.SYSTEM) => {
    const n = choices.length;
    (0,_thi_ng_api__WEBPACK_IMPORTED_MODULE_1__.assert)(n > 0, "no choices given");
    const opts = weights
        ? choices
            .map((x, i) => [weights[i] || 0, x])
            .sort((a, b) => b[0] - a[0])
        : choices.map((x) => [1, x]);
    const total = opts.reduce((acc, o) => acc + o[0], 0);
    total <= 0 && console.warn("total weights <= 0");
    return () => {
        const r = rnd.float(total);
        let sum = total;
        for (let i = 0; i < n; i++) {
            sum -= opts[i][0];
            if (sum <= r) {
                return opts[i][1];
            }
        }
        return undefined;
    };
};


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/func/comp.js":
/*!*******************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/func/comp.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "comp": () => (/* binding */ comp)
/* harmony export */ });
/* harmony import */ var _thi_ng_compose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/compose */ "./node_modules/@thi.ng/compose/comp.js");
/* harmony import */ var _internal_ensure__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/ensure */ "./node_modules/@thi.ng/transducers/internal/ensure.js");


function comp(...fns) {
    fns = fns.map(_internal_ensure__WEBPACK_IMPORTED_MODULE_0__.ensureTransducer);
    return _thi_ng_compose__WEBPACK_IMPORTED_MODULE_1__.comp.apply(null, fns);
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/func/compr.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/func/compr.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "compR": () => (/* binding */ compR)
/* harmony export */ });
/**
 * Reducer composition helper, internally used by various transducers
 * during initialization. Takes existing reducer `rfn` (a 3-tuple) and a
 * reducing function `fn`. Returns a new reducer tuple.
 *
 * @remarks
 * `rfn[2]` reduces values of type `B` into an accumulator of type `A`.
 * `fn` accepts values of type `C` and produces interim results of type
 * `B`, which are then (possibly) passed to the "inner" `rfn[2]`
 * function. Therefore the resulting reducer takes inputs of `C` and an
 * accumulator of type `A`.
 *
 * It is assumed that `fn` internally calls `rfn[2]` to pass its own
 * results for further processing by the nested reducer `rfn`.
 *
 * @example
 * ```ts
 * compR(rfn, fn)
 * // [rfn[0], rfn[1], fn]
 * ```
 *
 * @param rfn -
 * @param fn -
 */
const compR = (rfn, fn) => [rfn[0], rfn[1], fn];


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/func/deep-transform.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/func/deep-transform.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deepTransform": () => (/* binding */ deepTransform)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-function.js");

/**
 * Higher-order deep object transformer used by {@link (mapDeep:1)}.
 * Accepts a nested `spec` array reflecting same key structure as the
 * object to be mapped, but with functions or sub-specs as their values.
 * Returns a new function, which when called, recursively applies nested
 * transformers in post-order traversal (child transformers are run
 * first) and returns the result of the root transformer.
 *
 * @remarks
 * The transform specs are given as arrays in this format:
 *
 * ```ts
 * [tx-function, { key1: [tx-function, {...}], key2: tx-fn }]
 * ```
 *
 * If a key in the spec has no further sub maps, its transform function
 * can be given directly without having to wrap it into the usual array
 * structure.
 *
 * @example
 * ```ts
 * // source object to be transformed
 * src = {
 *    meta: {
 *      author: { name: "Alice", email: "a@b.com" },
 *      date: 1041510896000
 *    },
 *    type: "post",
 *    title: "Hello world",
 *    body: "Ratione necessitatibus doloremque itaque."
 * };
 *
 * // deep transformation spec
 * spec = [
 *    // root transform (called last)
 *    ({type, meta, title, body}) => ["div", {class: type}, title, meta, body],
 *    // object of transform sub-specs
 *    {
 *      meta: [
 *        ({author, date}) => ["div.meta", author, `(${date})`],
 *        {
 *          author: ({email, name}) => ["a", {href: `mailto:${email}`}, name],
 *          date: (d) => new Date(d).toLocaleString()
 *        }
 *      ],
 *      title: (title) => ["h1", title]
 *    }
 * ];
 *
 * // build transformer & apply to src
 * deepTransform(spec)(src);
 *
 * // [ "div",
 * //   { class: "article" },
 * //   [ "h1", "Hello world" ],
 * //   [ "div.meta",
 * //     [ "a", { href: "mailto:a@.b.com" }, "Alice" ],
 * //     "(1/2/2003, 12:34:56 PM)" ],
 * //   "Ratione necessitatibus doloremque itaque." ]
 * ```
 *
 * @param spec - transformation spec
 */
const deepTransform = (spec) => {
    if ((0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isFunction)(spec)) {
        return spec;
    }
    const mapfns = Object.keys(spec[1] || {}).reduce((acc, k) => ((acc[k] = deepTransform(spec[1][k])), acc), {});
    return (x) => {
        const res = Object.assign({}, x);
        for (let k in mapfns) {
            res[k] = mapfns[k](res[k]);
        }
        return spec[0](res);
    };
};


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/func/juxtr.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/func/juxtr.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "juxtR": () => (/* binding */ juxtR)
/* harmony export */ });
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduced */ "./node_modules/@thi.ng/transducers/reduced.js");

function juxtR(...rs) {
    let [a, b, c] = rs;
    const n = rs.length;
    switch (n) {
        case 1: {
            const r = a[2];
            return [
                () => [a[0]()],
                (acc) => [a[1](acc[0])],
                (acc, x) => {
                    const aa1 = r(acc[0], x);
                    if ((0,_reduced__WEBPACK_IMPORTED_MODULE_0__.isReduced)(aa1)) {
                        return (0,_reduced__WEBPACK_IMPORTED_MODULE_0__.reduced)([(0,_reduced__WEBPACK_IMPORTED_MODULE_0__.unreduced)(aa1)]);
                    }
                    return [aa1];
                },
            ];
        }
        case 2: {
            const ra = a[2];
            const rb = b[2];
            return [
                () => [a[0](), b[0]()],
                (acc) => [a[1](acc[0]), b[1](acc[1])],
                (acc, x) => {
                    const aa1 = ra(acc[0], x);
                    const aa2 = rb(acc[1], x);
                    if ((0,_reduced__WEBPACK_IMPORTED_MODULE_0__.isReduced)(aa1) || (0,_reduced__WEBPACK_IMPORTED_MODULE_0__.isReduced)(aa2)) {
                        return (0,_reduced__WEBPACK_IMPORTED_MODULE_0__.reduced)([(0,_reduced__WEBPACK_IMPORTED_MODULE_0__.unreduced)(aa1), (0,_reduced__WEBPACK_IMPORTED_MODULE_0__.unreduced)(aa2)]);
                    }
                    return [aa1, aa2];
                },
            ];
        }
        case 3: {
            const ra = a[2];
            const rb = b[2];
            const rc = c[2];
            return [
                () => [a[0](), b[0](), c[0]()],
                (acc) => [a[1](acc[0]), b[1](acc[1]), c[1](acc[2])],
                (acc, x) => {
                    const aa1 = ra(acc[0], x);
                    const aa2 = rb(acc[1], x);
                    const aa3 = rc(acc[2], x);
                    if ((0,_reduced__WEBPACK_IMPORTED_MODULE_0__.isReduced)(aa1) || (0,_reduced__WEBPACK_IMPORTED_MODULE_0__.isReduced)(aa2) || (0,_reduced__WEBPACK_IMPORTED_MODULE_0__.isReduced)(aa3)) {
                        return (0,_reduced__WEBPACK_IMPORTED_MODULE_0__.reduced)([
                            (0,_reduced__WEBPACK_IMPORTED_MODULE_0__.unreduced)(aa1),
                            (0,_reduced__WEBPACK_IMPORTED_MODULE_0__.unreduced)(aa2),
                            (0,_reduced__WEBPACK_IMPORTED_MODULE_0__.unreduced)(aa3),
                        ]);
                    }
                    return [aa1, aa2, aa3];
                },
            ];
        }
        default:
            return [
                () => rs.map((r) => r[0]()),
                (acc) => rs.map((r, i) => r[1](acc[i])),
                (acc, x) => {
                    let done = false;
                    const res = [];
                    for (let i = 0; i < n; i++) {
                        let a = rs[i][2](acc[i], x);
                        if ((0,_reduced__WEBPACK_IMPORTED_MODULE_0__.isReduced)(a)) {
                            done = true;
                            a = (0,_reduced__WEBPACK_IMPORTED_MODULE_0__.unreduced)(a);
                        }
                        res[i] = a;
                    }
                    return done ? (0,_reduced__WEBPACK_IMPORTED_MODULE_0__.reduced)(res) : res;
                },
            ];
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/func/key-selector.js":
/*!***************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/func/key-selector.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "keySelector": () => (/* binding */ keySelector)
/* harmony export */ });
/* harmony import */ var _renamer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./renamer */ "./node_modules/@thi.ng/transducers/func/renamer.js");

const keySelector = (keys) => (0,_renamer__WEBPACK_IMPORTED_MODULE_0__.renamer)(keys.reduce((acc, x) => ((acc[x] = x), acc), {}));


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/func/lookup.js":
/*!*********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/func/lookup.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lookup1d": () => (/* binding */ lookup1d),
/* harmony export */   "lookup2d": () => (/* binding */ lookup2d),
/* harmony export */   "lookup3d": () => (/* binding */ lookup3d)
/* harmony export */ });
/**
 * Returns function accepting a single index arg used to
 * lookup value in given array. No bounds checks are done.
 *
 * @example
 * ```ts
 * [...map(lookup1d([10, 20, 30]), [2,0,1])]
 * // [ 30, 10, 20 ]
 * ```
 *
 * @param src - source data
 */
const lookup1d = (src) => (i) => src[i];
/**
 * Returns function accepting a single `[x, y]` index tuple, used to
 * lookup value in given array. Useful for transducers processing 2D
 * data.
 *
 * @remarks
 * The source data MUST be in row major linearized format, i.e. 1D
 * representation of 2D data (pixel buffer). No bounds checks are done.
 *
 * @example
 * ```ts
 * [...map(lookup2d([...range(9)], 3), range2d(2, -1, 0, 3))]
 * // [ 2, 1, 0, 5, 4, 3, 8, 7, 6 ]
 * ```
 *
 * @param src - source data
 * @param width - number of items along X (columns)
 */
const lookup2d = (src, width) => (i) => src[i[0] + i[1] * width];
/**
 * Same as {@link lookup2d}, but for 3D data. The index ordering of the
 * source data MUST be in Z, Y, X order (i.e. a stack of row major 2D slices).
 * No bounds checks are done.
 *
 * @param src - source data
 * @param width - number of items along X (columns)
 * @param height - number of items along Y (rows)
 */
const lookup3d = (src, width, height) => {
    const stridez = width * height;
    return (i) => src[i[0] + i[1] * width + i[2] * stridez];
};


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/func/renamer.js":
/*!**********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/func/renamer.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "renamer": () => (/* binding */ renamer)
/* harmony export */ });
const renamer = (kmap) => {
    const ks = Object.keys(kmap);
    const [a2, b2, c2] = ks;
    const [a1, b1, c1] = ks.map((k) => kmap[k]);
    switch (ks.length) {
        case 3:
            return (x) => {
                const res = {};
                let v;
                (v = x[c1]), v !== undefined && (res[c2] = v);
                (v = x[b1]), v !== undefined && (res[b2] = v);
                (v = x[a1]), v !== undefined && (res[a2] = v);
                return res;
            };
        case 2:
            return (x) => {
                const res = {};
                let v;
                (v = x[b1]), v !== undefined && (res[b2] = v);
                (v = x[a1]), v !== undefined && (res[a2] = v);
                return res;
            };
        case 1:
            return (x) => {
                const res = {};
                let v = x[a1];
                v !== undefined && (res[a2] = v);
                return res;
            };
        default:
            return (x) => {
                let k, v;
                const res = {};
                for (let i = ks.length - 1; i >= 0; i--) {
                    (k = ks[i]),
                        (v = x[kmap[k]]),
                        v !== undefined && (res[k] = v);
                }
                return res;
            };
    }
};


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$iter": () => (/* reexport safe */ _iterator__WEBPACK_IMPORTED_MODULE_0__.$iter),
/* harmony export */   "iterator": () => (/* reexport safe */ _iterator__WEBPACK_IMPORTED_MODULE_0__.iterator),
/* harmony export */   "iterator1": () => (/* reexport safe */ _iterator__WEBPACK_IMPORTED_MODULE_0__.iterator1),
/* harmony export */   "$$reduce": () => (/* reexport safe */ _reduce__WEBPACK_IMPORTED_MODULE_1__.$$reduce),
/* harmony export */   "reduce": () => (/* reexport safe */ _reduce__WEBPACK_IMPORTED_MODULE_1__.reduce),
/* harmony export */   "reduceRight": () => (/* reexport safe */ _reduce__WEBPACK_IMPORTED_MODULE_1__.reduceRight),
/* harmony export */   "reducer": () => (/* reexport safe */ _reduce__WEBPACK_IMPORTED_MODULE_1__.reducer),
/* harmony export */   "Reduced": () => (/* reexport safe */ _reduced__WEBPACK_IMPORTED_MODULE_2__.Reduced),
/* harmony export */   "ensureReduced": () => (/* reexport safe */ _reduced__WEBPACK_IMPORTED_MODULE_2__.ensureReduced),
/* harmony export */   "isReduced": () => (/* reexport safe */ _reduced__WEBPACK_IMPORTED_MODULE_2__.isReduced),
/* harmony export */   "reduced": () => (/* reexport safe */ _reduced__WEBPACK_IMPORTED_MODULE_2__.reduced),
/* harmony export */   "unreduced": () => (/* reexport safe */ _reduced__WEBPACK_IMPORTED_MODULE_2__.unreduced),
/* harmony export */   "run": () => (/* reexport safe */ _run__WEBPACK_IMPORTED_MODULE_3__.run),
/* harmony export */   "step": () => (/* reexport safe */ _step__WEBPACK_IMPORTED_MODULE_4__.step),
/* harmony export */   "transduce": () => (/* reexport safe */ _transduce__WEBPACK_IMPORTED_MODULE_5__.transduce),
/* harmony export */   "transduceRight": () => (/* reexport safe */ _transduce__WEBPACK_IMPORTED_MODULE_5__.transduceRight),
/* harmony export */   "add": () => (/* reexport safe */ _rfn_add__WEBPACK_IMPORTED_MODULE_6__.add),
/* harmony export */   "assocMap": () => (/* reexport safe */ _rfn_assoc_map__WEBPACK_IMPORTED_MODULE_7__.assocMap),
/* harmony export */   "assocObj": () => (/* reexport safe */ _rfn_assoc_obj__WEBPACK_IMPORTED_MODULE_8__.assocObj),
/* harmony export */   "autoObj": () => (/* reexport safe */ _rfn_auto_obj__WEBPACK_IMPORTED_MODULE_9__.autoObj),
/* harmony export */   "conj": () => (/* reexport safe */ _rfn_conj__WEBPACK_IMPORTED_MODULE_10__.conj),
/* harmony export */   "count": () => (/* reexport safe */ _rfn_count__WEBPACK_IMPORTED_MODULE_11__.count),
/* harmony export */   "div": () => (/* reexport safe */ _rfn_div__WEBPACK_IMPORTED_MODULE_12__.div),
/* harmony export */   "every": () => (/* reexport safe */ _rfn_every__WEBPACK_IMPORTED_MODULE_13__.every),
/* harmony export */   "fill": () => (/* reexport safe */ _rfn_fill__WEBPACK_IMPORTED_MODULE_14__.fill),
/* harmony export */   "fillN": () => (/* reexport safe */ _rfn_fill__WEBPACK_IMPORTED_MODULE_14__.fillN),
/* harmony export */   "frequencies": () => (/* reexport safe */ _rfn_frequencies__WEBPACK_IMPORTED_MODULE_15__.frequencies),
/* harmony export */   "groupBinary": () => (/* reexport safe */ _rfn_group_binary__WEBPACK_IMPORTED_MODULE_16__.groupBinary),
/* harmony export */   "groupByMap": () => (/* reexport safe */ _rfn_group_by_map__WEBPACK_IMPORTED_MODULE_17__.groupByMap),
/* harmony export */   "groupByObj": () => (/* reexport safe */ _rfn_group_by_obj__WEBPACK_IMPORTED_MODULE_18__.groupByObj),
/* harmony export */   "last": () => (/* reexport safe */ _rfn_last__WEBPACK_IMPORTED_MODULE_19__.last),
/* harmony export */   "max": () => (/* reexport safe */ _rfn_max__WEBPACK_IMPORTED_MODULE_20__.max),
/* harmony export */   "maxCompare": () => (/* reexport safe */ _rfn_max_compare__WEBPACK_IMPORTED_MODULE_21__.maxCompare),
/* harmony export */   "maxMag": () => (/* reexport safe */ _rfn_max_mag__WEBPACK_IMPORTED_MODULE_22__.maxMag),
/* harmony export */   "mean": () => (/* reexport safe */ _rfn_mean__WEBPACK_IMPORTED_MODULE_23__.mean),
/* harmony export */   "min": () => (/* reexport safe */ _rfn_min__WEBPACK_IMPORTED_MODULE_24__.min),
/* harmony export */   "minCompare": () => (/* reexport safe */ _rfn_min_compare__WEBPACK_IMPORTED_MODULE_25__.minCompare),
/* harmony export */   "minMag": () => (/* reexport safe */ _rfn_min_mag__WEBPACK_IMPORTED_MODULE_26__.minMag),
/* harmony export */   "minMax": () => (/* reexport safe */ _rfn_min_max__WEBPACK_IMPORTED_MODULE_27__.minMax),
/* harmony export */   "mul": () => (/* reexport safe */ _rfn_mul__WEBPACK_IMPORTED_MODULE_28__.mul),
/* harmony export */   "normCount": () => (/* reexport safe */ _rfn_norm_count__WEBPACK_IMPORTED_MODULE_29__.normCount),
/* harmony export */   "normFrequencies": () => (/* reexport safe */ _rfn_norm_frequencies__WEBPACK_IMPORTED_MODULE_30__.normFrequencies),
/* harmony export */   "normFrequenciesAuto": () => (/* reexport safe */ _rfn_norm_frequencies_auto__WEBPACK_IMPORTED_MODULE_31__.normFrequenciesAuto),
/* harmony export */   "push": () => (/* reexport safe */ _rfn_push__WEBPACK_IMPORTED_MODULE_32__.push),
/* harmony export */   "pushCopy": () => (/* reexport safe */ _rfn_push_copy__WEBPACK_IMPORTED_MODULE_33__.pushCopy),
/* harmony export */   "pushSort": () => (/* reexport safe */ _rfn_push_sort__WEBPACK_IMPORTED_MODULE_34__.pushSort),
/* harmony export */   "reductions": () => (/* reexport safe */ _rfn_reductions__WEBPACK_IMPORTED_MODULE_35__.reductions),
/* harmony export */   "some": () => (/* reexport safe */ _rfn_some__WEBPACK_IMPORTED_MODULE_36__.some),
/* harmony export */   "str": () => (/* reexport safe */ _rfn_str__WEBPACK_IMPORTED_MODULE_37__.str),
/* harmony export */   "sub": () => (/* reexport safe */ _rfn_sub__WEBPACK_IMPORTED_MODULE_38__.sub),
/* harmony export */   "benchmark": () => (/* reexport safe */ _xform_benchmark__WEBPACK_IMPORTED_MODULE_39__.benchmark),
/* harmony export */   "cat": () => (/* reexport safe */ _xform_cat__WEBPACK_IMPORTED_MODULE_40__.cat),
/* harmony export */   "converge": () => (/* reexport safe */ _xform_converge__WEBPACK_IMPORTED_MODULE_41__.converge),
/* harmony export */   "buildKernel1d": () => (/* reexport safe */ _xform_convolve__WEBPACK_IMPORTED_MODULE_42__.buildKernel1d),
/* harmony export */   "buildKernel2d": () => (/* reexport safe */ _xform_convolve__WEBPACK_IMPORTED_MODULE_42__.buildKernel2d),
/* harmony export */   "convolve1d": () => (/* reexport safe */ _xform_convolve__WEBPACK_IMPORTED_MODULE_42__.convolve1d),
/* harmony export */   "convolve2d": () => (/* reexport safe */ _xform_convolve__WEBPACK_IMPORTED_MODULE_42__.convolve2d),
/* harmony export */   "dedupe": () => (/* reexport safe */ _xform_dedupe__WEBPACK_IMPORTED_MODULE_43__.dedupe),
/* harmony export */   "delayed": () => (/* reexport safe */ _xform_delayed__WEBPACK_IMPORTED_MODULE_44__.delayed),
/* harmony export */   "distinct": () => (/* reexport safe */ _xform_distinct__WEBPACK_IMPORTED_MODULE_45__.distinct),
/* harmony export */   "dropNth": () => (/* reexport safe */ _xform_drop_nth__WEBPACK_IMPORTED_MODULE_46__.dropNth),
/* harmony export */   "dropWhile": () => (/* reexport safe */ _xform_drop_while__WEBPACK_IMPORTED_MODULE_47__.dropWhile),
/* harmony export */   "drop": () => (/* reexport safe */ _xform_drop__WEBPACK_IMPORTED_MODULE_48__.drop),
/* harmony export */   "duplicate": () => (/* reexport safe */ _xform_duplicate__WEBPACK_IMPORTED_MODULE_49__.duplicate),
/* harmony export */   "filter": () => (/* reexport safe */ _xform_filter__WEBPACK_IMPORTED_MODULE_50__.filter),
/* harmony export */   "filterFuzzy": () => (/* reexport safe */ _xform_filter_fuzzy__WEBPACK_IMPORTED_MODULE_51__.filterFuzzy),
/* harmony export */   "flattenWith": () => (/* reexport safe */ _xform_flatten_with__WEBPACK_IMPORTED_MODULE_52__.flattenWith),
/* harmony export */   "flatten": () => (/* reexport safe */ _xform_flatten__WEBPACK_IMPORTED_MODULE_53__.flatten),
/* harmony export */   "indexed": () => (/* reexport safe */ _xform_indexed__WEBPACK_IMPORTED_MODULE_54__.indexed),
/* harmony export */   "interleave": () => (/* reexport safe */ _xform_interleave__WEBPACK_IMPORTED_MODULE_55__.interleave),
/* harmony export */   "interpolate": () => (/* reexport safe */ _xform_interpolate__WEBPACK_IMPORTED_MODULE_56__.interpolate),
/* harmony export */   "interpolateHermite": () => (/* reexport safe */ _xform_interpolate_hermite__WEBPACK_IMPORTED_MODULE_57__.interpolateHermite),
/* harmony export */   "interpolateLinear": () => (/* reexport safe */ _xform_interpolate_linear__WEBPACK_IMPORTED_MODULE_58__.interpolateLinear),
/* harmony export */   "interpose": () => (/* reexport safe */ _xform_interpose__WEBPACK_IMPORTED_MODULE_59__.interpose),
/* harmony export */   "keep": () => (/* reexport safe */ _xform_keep__WEBPACK_IMPORTED_MODULE_60__.keep),
/* harmony export */   "labeled": () => (/* reexport safe */ _xform_labeled__WEBPACK_IMPORTED_MODULE_61__.labeled),
/* harmony export */   "mapDeep": () => (/* reexport safe */ _xform_map_deep__WEBPACK_IMPORTED_MODULE_62__.mapDeep),
/* harmony export */   "mapIndexed": () => (/* reexport safe */ _xform_map_indexed__WEBPACK_IMPORTED_MODULE_63__.mapIndexed),
/* harmony export */   "mapKeys": () => (/* reexport safe */ _xform_map_keys__WEBPACK_IMPORTED_MODULE_64__.mapKeys),
/* harmony export */   "mapNth": () => (/* reexport safe */ _xform_map_nth__WEBPACK_IMPORTED_MODULE_65__.mapNth),
/* harmony export */   "mapVals": () => (/* reexport safe */ _xform_map_vals__WEBPACK_IMPORTED_MODULE_66__.mapVals),
/* harmony export */   "map": () => (/* reexport safe */ _xform_map__WEBPACK_IMPORTED_MODULE_67__.map),
/* harmony export */   "mapcat": () => (/* reexport safe */ _xform_mapcat__WEBPACK_IMPORTED_MODULE_68__.mapcat),
/* harmony export */   "mapcatIndexed": () => (/* reexport safe */ _xform_mapcat_indexed__WEBPACK_IMPORTED_MODULE_69__.mapcatIndexed),
/* harmony export */   "matchFirst": () => (/* reexport safe */ _xform_match_first__WEBPACK_IMPORTED_MODULE_70__.matchFirst),
/* harmony export */   "matchLast": () => (/* reexport safe */ _xform_match_last__WEBPACK_IMPORTED_MODULE_71__.matchLast),
/* harmony export */   "movingAverage": () => (/* reexport safe */ _xform_moving_average__WEBPACK_IMPORTED_MODULE_72__.movingAverage),
/* harmony export */   "movingMedian": () => (/* reexport safe */ _xform_moving_median__WEBPACK_IMPORTED_MODULE_73__.movingMedian),
/* harmony export */   "multiplex": () => (/* reexport safe */ _xform_multiplex__WEBPACK_IMPORTED_MODULE_74__.multiplex),
/* harmony export */   "multiplexObj": () => (/* reexport safe */ _xform_multiplex_obj__WEBPACK_IMPORTED_MODULE_75__.multiplexObj),
/* harmony export */   "noop": () => (/* reexport safe */ _xform_noop__WEBPACK_IMPORTED_MODULE_76__.noop),
/* harmony export */   "padLast": () => (/* reexport safe */ _xform_pad_last__WEBPACK_IMPORTED_MODULE_77__.padLast),
/* harmony export */   "page": () => (/* reexport safe */ _xform_page__WEBPACK_IMPORTED_MODULE_78__.page),
/* harmony export */   "partitionBy": () => (/* reexport safe */ _xform_partition_by__WEBPACK_IMPORTED_MODULE_79__.partitionBy),
/* harmony export */   "partitionOf": () => (/* reexport safe */ _xform_partition_of__WEBPACK_IMPORTED_MODULE_80__.partitionOf),
/* harmony export */   "partitionSort": () => (/* reexport safe */ _xform_partition_sort__WEBPACK_IMPORTED_MODULE_81__.partitionSort),
/* harmony export */   "partitionSync": () => (/* reexport safe */ _xform_partition_sync__WEBPACK_IMPORTED_MODULE_82__.partitionSync),
/* harmony export */   "partitionTime": () => (/* reexport safe */ _xform_partition_time__WEBPACK_IMPORTED_MODULE_83__.partitionTime),
/* harmony export */   "partitionWhen": () => (/* reexport safe */ _xform_partition_when__WEBPACK_IMPORTED_MODULE_84__.partitionWhen),
/* harmony export */   "partition": () => (/* reexport safe */ _xform_partition__WEBPACK_IMPORTED_MODULE_85__.partition),
/* harmony export */   "peek": () => (/* reexport safe */ _xform_peek__WEBPACK_IMPORTED_MODULE_86__.peek),
/* harmony export */   "pluck": () => (/* reexport safe */ _xform_pluck__WEBPACK_IMPORTED_MODULE_87__.pluck),
/* harmony export */   "rename": () => (/* reexport safe */ _xform_rename__WEBPACK_IMPORTED_MODULE_88__.rename),
/* harmony export */   "sample": () => (/* reexport safe */ _xform_sample__WEBPACK_IMPORTED_MODULE_89__.sample),
/* harmony export */   "scan": () => (/* reexport safe */ _xform_scan__WEBPACK_IMPORTED_MODULE_90__.scan),
/* harmony export */   "selectKeys": () => (/* reexport safe */ _xform_select_keys__WEBPACK_IMPORTED_MODULE_91__.selectKeys),
/* harmony export */   "sideEffect": () => (/* reexport safe */ _xform_side_effect__WEBPACK_IMPORTED_MODULE_92__.sideEffect),
/* harmony export */   "slidingWindow": () => (/* reexport safe */ _xform_sliding_window__WEBPACK_IMPORTED_MODULE_93__.slidingWindow),
/* harmony export */   "streamShuffle": () => (/* reexport safe */ _xform_stream_shuffle__WEBPACK_IMPORTED_MODULE_94__.streamShuffle),
/* harmony export */   "streamSort": () => (/* reexport safe */ _xform_stream_sort__WEBPACK_IMPORTED_MODULE_95__.streamSort),
/* harmony export */   "struct": () => (/* reexport safe */ _xform_struct__WEBPACK_IMPORTED_MODULE_96__.struct),
/* harmony export */   "swizzle": () => (/* reexport safe */ _xform_swizzle__WEBPACK_IMPORTED_MODULE_97__.swizzle),
/* harmony export */   "takeNth": () => (/* reexport safe */ _xform_take_nth__WEBPACK_IMPORTED_MODULE_98__.takeNth),
/* harmony export */   "takeLast": () => (/* reexport safe */ _xform_take_last__WEBPACK_IMPORTED_MODULE_99__.takeLast),
/* harmony export */   "takeWhile": () => (/* reexport safe */ _xform_take_while__WEBPACK_IMPORTED_MODULE_100__.takeWhile),
/* harmony export */   "take": () => (/* reexport safe */ _xform_take__WEBPACK_IMPORTED_MODULE_101__.take),
/* harmony export */   "throttle": () => (/* reexport safe */ _xform_throttle__WEBPACK_IMPORTED_MODULE_102__.throttle),
/* harmony export */   "throttleTime": () => (/* reexport safe */ _xform_throttle_time__WEBPACK_IMPORTED_MODULE_103__.throttleTime),
/* harmony export */   "toggle": () => (/* reexport safe */ _xform_toggle__WEBPACK_IMPORTED_MODULE_104__.toggle),
/* harmony export */   "trace": () => (/* reexport safe */ _xform_trace__WEBPACK_IMPORTED_MODULE_105__.trace),
/* harmony export */   "wordWrap": () => (/* reexport safe */ _xform_word_wrap__WEBPACK_IMPORTED_MODULE_106__.wordWrap),
/* harmony export */   "comp": () => (/* reexport safe */ _func_comp__WEBPACK_IMPORTED_MODULE_107__.comp),
/* harmony export */   "compR": () => (/* reexport safe */ _func_compr__WEBPACK_IMPORTED_MODULE_108__.compR),
/* harmony export */   "deepTransform": () => (/* reexport safe */ _func_deep_transform__WEBPACK_IMPORTED_MODULE_109__.deepTransform),
/* harmony export */   "juxtR": () => (/* reexport safe */ _func_juxtr__WEBPACK_IMPORTED_MODULE_110__.juxtR),
/* harmony export */   "keySelector": () => (/* reexport safe */ _func_key_selector__WEBPACK_IMPORTED_MODULE_111__.keySelector),
/* harmony export */   "lookup1d": () => (/* reexport safe */ _func_lookup__WEBPACK_IMPORTED_MODULE_112__.lookup1d),
/* harmony export */   "lookup2d": () => (/* reexport safe */ _func_lookup__WEBPACK_IMPORTED_MODULE_112__.lookup2d),
/* harmony export */   "lookup3d": () => (/* reexport safe */ _func_lookup__WEBPACK_IMPORTED_MODULE_112__.lookup3d),
/* harmony export */   "renamer": () => (/* reexport safe */ _func_renamer__WEBPACK_IMPORTED_MODULE_113__.renamer),
/* harmony export */   "asIterable": () => (/* reexport safe */ _iter_as_iterable__WEBPACK_IMPORTED_MODULE_114__.asIterable),
/* harmony export */   "choices": () => (/* reexport safe */ _iter_choices__WEBPACK_IMPORTED_MODULE_115__.choices),
/* harmony export */   "concat": () => (/* reexport safe */ _iter_concat__WEBPACK_IMPORTED_MODULE_116__.concat),
/* harmony export */   "curve": () => (/* reexport safe */ _iter_curve__WEBPACK_IMPORTED_MODULE_117__.curve),
/* harmony export */   "cycle": () => (/* reexport safe */ _iter_cycle__WEBPACK_IMPORTED_MODULE_118__.cycle),
/* harmony export */   "dup": () => (/* reexport safe */ _iter_dup__WEBPACK_IMPORTED_MODULE_119__.dup),
/* harmony export */   "extendSides": () => (/* reexport safe */ _iter_extend_sides__WEBPACK_IMPORTED_MODULE_120__.extendSides),
/* harmony export */   "iterate": () => (/* reexport safe */ _iter_iterate__WEBPACK_IMPORTED_MODULE_121__.iterate),
/* harmony export */   "keyPermutations": () => (/* reexport safe */ _iter_key_permutations__WEBPACK_IMPORTED_MODULE_122__.keyPermutations),
/* harmony export */   "keys": () => (/* reexport safe */ _iter_keys__WEBPACK_IMPORTED_MODULE_123__.keys),
/* harmony export */   "line": () => (/* reexport safe */ _iter_line__WEBPACK_IMPORTED_MODULE_124__.line),
/* harmony export */   "normRange": () => (/* reexport safe */ _iter_norm_range__WEBPACK_IMPORTED_MODULE_125__.normRange),
/* harmony export */   "normRange2d": () => (/* reexport safe */ _iter_norm_range__WEBPACK_IMPORTED_MODULE_125__.normRange2d),
/* harmony export */   "normRange3d": () => (/* reexport safe */ _iter_norm_range__WEBPACK_IMPORTED_MODULE_125__.normRange3d),
/* harmony export */   "padSides": () => (/* reexport safe */ _iter_pad_sides__WEBPACK_IMPORTED_MODULE_126__.padSides),
/* harmony export */   "palindrome": () => (/* reexport safe */ _iter_palindrome__WEBPACK_IMPORTED_MODULE_127__.palindrome),
/* harmony export */   "pairs": () => (/* reexport safe */ _iter_pairs__WEBPACK_IMPORTED_MODULE_128__.pairs),
/* harmony export */   "permutations": () => (/* reexport safe */ _iter_permutations__WEBPACK_IMPORTED_MODULE_129__.permutations),
/* harmony export */   "permutationsN": () => (/* reexport safe */ _iter_permutations__WEBPACK_IMPORTED_MODULE_129__.permutationsN),
/* harmony export */   "Range": () => (/* reexport safe */ _iter_range__WEBPACK_IMPORTED_MODULE_130__.Range),
/* harmony export */   "range": () => (/* reexport safe */ _iter_range__WEBPACK_IMPORTED_MODULE_130__.range),
/* harmony export */   "range2d": () => (/* reexport safe */ _iter_range2d__WEBPACK_IMPORTED_MODULE_131__.range2d),
/* harmony export */   "range3d": () => (/* reexport safe */ _iter_range3d__WEBPACK_IMPORTED_MODULE_132__.range3d),
/* harmony export */   "rangeNd": () => (/* reexport safe */ _iter_range_nd__WEBPACK_IMPORTED_MODULE_133__.rangeNd),
/* harmony export */   "repeat": () => (/* reexport safe */ _iter_repeat__WEBPACK_IMPORTED_MODULE_134__.repeat),
/* harmony export */   "repeatedly": () => (/* reexport safe */ _iter_repeatedly__WEBPACK_IMPORTED_MODULE_135__.repeatedly),
/* harmony export */   "reverse": () => (/* reexport safe */ _iter_reverse__WEBPACK_IMPORTED_MODULE_136__.reverse),
/* harmony export */   "sortedKeys": () => (/* reexport safe */ _iter_sorted_keys__WEBPACK_IMPORTED_MODULE_137__.sortedKeys),
/* harmony export */   "symmetric": () => (/* reexport safe */ _iter_symmetric__WEBPACK_IMPORTED_MODULE_138__.symmetric),
/* harmony export */   "tween": () => (/* reexport safe */ _iter_tween__WEBPACK_IMPORTED_MODULE_139__.tween),
/* harmony export */   "vals": () => (/* reexport safe */ _iter_vals__WEBPACK_IMPORTED_MODULE_140__.vals),
/* harmony export */   "wrapSides": () => (/* reexport safe */ _iter_wrap_sides__WEBPACK_IMPORTED_MODULE_141__.wrapSides),
/* harmony export */   "zip": () => (/* reexport safe */ _iter_zip__WEBPACK_IMPORTED_MODULE_142__.zip)
/* harmony export */ });
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reduce */ "./node_modules/@thi.ng/transducers/reduce.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reduced */ "./node_modules/@thi.ng/transducers/reduced.js");
/* harmony import */ var _run__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./run */ "./node_modules/@thi.ng/transducers/run.js");
/* harmony import */ var _step__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./step */ "./node_modules/@thi.ng/transducers/step.js");
/* harmony import */ var _transduce__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./transduce */ "./node_modules/@thi.ng/transducers/transduce.js");
/* harmony import */ var _rfn_add__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./rfn/add */ "./node_modules/@thi.ng/transducers/rfn/add.js");
/* harmony import */ var _rfn_assoc_map__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./rfn/assoc-map */ "./node_modules/@thi.ng/transducers/rfn/assoc-map.js");
/* harmony import */ var _rfn_assoc_obj__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./rfn/assoc-obj */ "./node_modules/@thi.ng/transducers/rfn/assoc-obj.js");
/* harmony import */ var _rfn_auto_obj__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./rfn/auto-obj */ "./node_modules/@thi.ng/transducers/rfn/auto-obj.js");
/* harmony import */ var _rfn_conj__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./rfn/conj */ "./node_modules/@thi.ng/transducers/rfn/conj.js");
/* harmony import */ var _rfn_count__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./rfn/count */ "./node_modules/@thi.ng/transducers/rfn/count.js");
/* harmony import */ var _rfn_div__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./rfn/div */ "./node_modules/@thi.ng/transducers/rfn/div.js");
/* harmony import */ var _rfn_every__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./rfn/every */ "./node_modules/@thi.ng/transducers/rfn/every.js");
/* harmony import */ var _rfn_fill__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./rfn/fill */ "./node_modules/@thi.ng/transducers/rfn/fill.js");
/* harmony import */ var _rfn_frequencies__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./rfn/frequencies */ "./node_modules/@thi.ng/transducers/rfn/frequencies.js");
/* harmony import */ var _rfn_group_binary__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./rfn/group-binary */ "./node_modules/@thi.ng/transducers/rfn/group-binary.js");
/* harmony import */ var _rfn_group_by_map__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./rfn/group-by-map */ "./node_modules/@thi.ng/transducers/rfn/group-by-map.js");
/* harmony import */ var _rfn_group_by_obj__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./rfn/group-by-obj */ "./node_modules/@thi.ng/transducers/rfn/group-by-obj.js");
/* harmony import */ var _rfn_last__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./rfn/last */ "./node_modules/@thi.ng/transducers/rfn/last.js");
/* harmony import */ var _rfn_max__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./rfn/max */ "./node_modules/@thi.ng/transducers/rfn/max.js");
/* harmony import */ var _rfn_max_compare__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./rfn/max-compare */ "./node_modules/@thi.ng/transducers/rfn/max-compare.js");
/* harmony import */ var _rfn_max_mag__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./rfn/max-mag */ "./node_modules/@thi.ng/transducers/rfn/max-mag.js");
/* harmony import */ var _rfn_mean__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./rfn/mean */ "./node_modules/@thi.ng/transducers/rfn/mean.js");
/* harmony import */ var _rfn_min__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./rfn/min */ "./node_modules/@thi.ng/transducers/rfn/min.js");
/* harmony import */ var _rfn_min_compare__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./rfn/min-compare */ "./node_modules/@thi.ng/transducers/rfn/min-compare.js");
/* harmony import */ var _rfn_min_mag__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./rfn/min-mag */ "./node_modules/@thi.ng/transducers/rfn/min-mag.js");
/* harmony import */ var _rfn_min_max__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./rfn/min-max */ "./node_modules/@thi.ng/transducers/rfn/min-max.js");
/* harmony import */ var _rfn_mul__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./rfn/mul */ "./node_modules/@thi.ng/transducers/rfn/mul.js");
/* harmony import */ var _rfn_norm_count__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./rfn/norm-count */ "./node_modules/@thi.ng/transducers/rfn/norm-count.js");
/* harmony import */ var _rfn_norm_frequencies__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./rfn/norm-frequencies */ "./node_modules/@thi.ng/transducers/rfn/norm-frequencies.js");
/* harmony import */ var _rfn_norm_frequencies_auto__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./rfn/norm-frequencies-auto */ "./node_modules/@thi.ng/transducers/rfn/norm-frequencies-auto.js");
/* harmony import */ var _rfn_push__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./rfn/push */ "./node_modules/@thi.ng/transducers/rfn/push.js");
/* harmony import */ var _rfn_push_copy__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./rfn/push-copy */ "./node_modules/@thi.ng/transducers/rfn/push-copy.js");
/* harmony import */ var _rfn_push_sort__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./rfn/push-sort */ "./node_modules/@thi.ng/transducers/rfn/push-sort.js");
/* harmony import */ var _rfn_reductions__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./rfn/reductions */ "./node_modules/@thi.ng/transducers/rfn/reductions.js");
/* harmony import */ var _rfn_some__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./rfn/some */ "./node_modules/@thi.ng/transducers/rfn/some.js");
/* harmony import */ var _rfn_str__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./rfn/str */ "./node_modules/@thi.ng/transducers/rfn/str.js");
/* harmony import */ var _rfn_sub__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./rfn/sub */ "./node_modules/@thi.ng/transducers/rfn/sub.js");
/* harmony import */ var _xform_benchmark__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./xform/benchmark */ "./node_modules/@thi.ng/transducers/xform/benchmark.js");
/* harmony import */ var _xform_cat__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./xform/cat */ "./node_modules/@thi.ng/transducers/xform/cat.js");
/* harmony import */ var _xform_converge__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./xform/converge */ "./node_modules/@thi.ng/transducers/xform/converge.js");
/* harmony import */ var _xform_convolve__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./xform/convolve */ "./node_modules/@thi.ng/transducers/xform/convolve.js");
/* harmony import */ var _xform_dedupe__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./xform/dedupe */ "./node_modules/@thi.ng/transducers/xform/dedupe.js");
/* harmony import */ var _xform_delayed__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./xform/delayed */ "./node_modules/@thi.ng/transducers/xform/delayed.js");
/* harmony import */ var _xform_distinct__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./xform/distinct */ "./node_modules/@thi.ng/transducers/xform/distinct.js");
/* harmony import */ var _xform_drop_nth__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./xform/drop-nth */ "./node_modules/@thi.ng/transducers/xform/drop-nth.js");
/* harmony import */ var _xform_drop_while__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./xform/drop-while */ "./node_modules/@thi.ng/transducers/xform/drop-while.js");
/* harmony import */ var _xform_drop__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./xform/drop */ "./node_modules/@thi.ng/transducers/xform/drop.js");
/* harmony import */ var _xform_duplicate__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./xform/duplicate */ "./node_modules/@thi.ng/transducers/xform/duplicate.js");
/* harmony import */ var _xform_filter__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./xform/filter */ "./node_modules/@thi.ng/transducers/xform/filter.js");
/* harmony import */ var _xform_filter_fuzzy__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./xform/filter-fuzzy */ "./node_modules/@thi.ng/transducers/xform/filter-fuzzy.js");
/* harmony import */ var _xform_flatten_with__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./xform/flatten-with */ "./node_modules/@thi.ng/transducers/xform/flatten-with.js");
/* harmony import */ var _xform_flatten__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./xform/flatten */ "./node_modules/@thi.ng/transducers/xform/flatten.js");
/* harmony import */ var _xform_indexed__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./xform/indexed */ "./node_modules/@thi.ng/transducers/xform/indexed.js");
/* harmony import */ var _xform_interleave__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./xform/interleave */ "./node_modules/@thi.ng/transducers/xform/interleave.js");
/* harmony import */ var _xform_interpolate__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./xform/interpolate */ "./node_modules/@thi.ng/transducers/xform/interpolate.js");
/* harmony import */ var _xform_interpolate_hermite__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./xform/interpolate-hermite */ "./node_modules/@thi.ng/transducers/xform/interpolate-hermite.js");
/* harmony import */ var _xform_interpolate_linear__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./xform/interpolate-linear */ "./node_modules/@thi.ng/transducers/xform/interpolate-linear.js");
/* harmony import */ var _xform_interpose__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./xform/interpose */ "./node_modules/@thi.ng/transducers/xform/interpose.js");
/* harmony import */ var _xform_keep__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./xform/keep */ "./node_modules/@thi.ng/transducers/xform/keep.js");
/* harmony import */ var _xform_labeled__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./xform/labeled */ "./node_modules/@thi.ng/transducers/xform/labeled.js");
/* harmony import */ var _xform_map_deep__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./xform/map-deep */ "./node_modules/@thi.ng/transducers/xform/map-deep.js");
/* harmony import */ var _xform_map_indexed__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./xform/map-indexed */ "./node_modules/@thi.ng/transducers/xform/map-indexed.js");
/* harmony import */ var _xform_map_keys__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./xform/map-keys */ "./node_modules/@thi.ng/transducers/xform/map-keys.js");
/* harmony import */ var _xform_map_nth__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./xform/map-nth */ "./node_modules/@thi.ng/transducers/xform/map-nth.js");
/* harmony import */ var _xform_map_vals__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./xform/map-vals */ "./node_modules/@thi.ng/transducers/xform/map-vals.js");
/* harmony import */ var _xform_map__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./xform/map */ "./node_modules/@thi.ng/transducers/xform/map.js");
/* harmony import */ var _xform_mapcat__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./xform/mapcat */ "./node_modules/@thi.ng/transducers/xform/mapcat.js");
/* harmony import */ var _xform_mapcat_indexed__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./xform/mapcat-indexed */ "./node_modules/@thi.ng/transducers/xform/mapcat-indexed.js");
/* harmony import */ var _xform_match_first__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./xform/match-first */ "./node_modules/@thi.ng/transducers/xform/match-first.js");
/* harmony import */ var _xform_match_last__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./xform/match-last */ "./node_modules/@thi.ng/transducers/xform/match-last.js");
/* harmony import */ var _xform_moving_average__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./xform/moving-average */ "./node_modules/@thi.ng/transducers/xform/moving-average.js");
/* harmony import */ var _xform_moving_median__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./xform/moving-median */ "./node_modules/@thi.ng/transducers/xform/moving-median.js");
/* harmony import */ var _xform_multiplex__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./xform/multiplex */ "./node_modules/@thi.ng/transducers/xform/multiplex.js");
/* harmony import */ var _xform_multiplex_obj__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./xform/multiplex-obj */ "./node_modules/@thi.ng/transducers/xform/multiplex-obj.js");
/* harmony import */ var _xform_noop__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./xform/noop */ "./node_modules/@thi.ng/transducers/xform/noop.js");
/* harmony import */ var _xform_pad_last__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./xform/pad-last */ "./node_modules/@thi.ng/transducers/xform/pad-last.js");
/* harmony import */ var _xform_page__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./xform/page */ "./node_modules/@thi.ng/transducers/xform/page.js");
/* harmony import */ var _xform_partition_by__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./xform/partition-by */ "./node_modules/@thi.ng/transducers/xform/partition-by.js");
/* harmony import */ var _xform_partition_of__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./xform/partition-of */ "./node_modules/@thi.ng/transducers/xform/partition-of.js");
/* harmony import */ var _xform_partition_sort__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./xform/partition-sort */ "./node_modules/@thi.ng/transducers/xform/partition-sort.js");
/* harmony import */ var _xform_partition_sync__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./xform/partition-sync */ "./node_modules/@thi.ng/transducers/xform/partition-sync.js");
/* harmony import */ var _xform_partition_time__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./xform/partition-time */ "./node_modules/@thi.ng/transducers/xform/partition-time.js");
/* harmony import */ var _xform_partition_when__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./xform/partition-when */ "./node_modules/@thi.ng/transducers/xform/partition-when.js");
/* harmony import */ var _xform_partition__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./xform/partition */ "./node_modules/@thi.ng/transducers/xform/partition.js");
/* harmony import */ var _xform_peek__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./xform/peek */ "./node_modules/@thi.ng/transducers/xform/peek.js");
/* harmony import */ var _xform_pluck__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./xform/pluck */ "./node_modules/@thi.ng/transducers/xform/pluck.js");
/* harmony import */ var _xform_rename__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./xform/rename */ "./node_modules/@thi.ng/transducers/xform/rename.js");
/* harmony import */ var _xform_sample__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./xform/sample */ "./node_modules/@thi.ng/transducers/xform/sample.js");
/* harmony import */ var _xform_scan__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./xform/scan */ "./node_modules/@thi.ng/transducers/xform/scan.js");
/* harmony import */ var _xform_select_keys__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./xform/select-keys */ "./node_modules/@thi.ng/transducers/xform/select-keys.js");
/* harmony import */ var _xform_side_effect__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./xform/side-effect */ "./node_modules/@thi.ng/transducers/xform/side-effect.js");
/* harmony import */ var _xform_sliding_window__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./xform/sliding-window */ "./node_modules/@thi.ng/transducers/xform/sliding-window.js");
/* harmony import */ var _xform_stream_shuffle__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./xform/stream-shuffle */ "./node_modules/@thi.ng/transducers/xform/stream-shuffle.js");
/* harmony import */ var _xform_stream_sort__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./xform/stream-sort */ "./node_modules/@thi.ng/transducers/xform/stream-sort.js");
/* harmony import */ var _xform_struct__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ./xform/struct */ "./node_modules/@thi.ng/transducers/xform/struct.js");
/* harmony import */ var _xform_swizzle__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ./xform/swizzle */ "./node_modules/@thi.ng/transducers/xform/swizzle.js");
/* harmony import */ var _xform_take_nth__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ./xform/take-nth */ "./node_modules/@thi.ng/transducers/xform/take-nth.js");
/* harmony import */ var _xform_take_last__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ./xform/take-last */ "./node_modules/@thi.ng/transducers/xform/take-last.js");
/* harmony import */ var _xform_take_while__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ./xform/take-while */ "./node_modules/@thi.ng/transducers/xform/take-while.js");
/* harmony import */ var _xform_take__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(/*! ./xform/take */ "./node_modules/@thi.ng/transducers/xform/take.js");
/* harmony import */ var _xform_throttle__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(/*! ./xform/throttle */ "./node_modules/@thi.ng/transducers/xform/throttle.js");
/* harmony import */ var _xform_throttle_time__WEBPACK_IMPORTED_MODULE_103__ = __webpack_require__(/*! ./xform/throttle-time */ "./node_modules/@thi.ng/transducers/xform/throttle-time.js");
/* harmony import */ var _xform_toggle__WEBPACK_IMPORTED_MODULE_104__ = __webpack_require__(/*! ./xform/toggle */ "./node_modules/@thi.ng/transducers/xform/toggle.js");
/* harmony import */ var _xform_trace__WEBPACK_IMPORTED_MODULE_105__ = __webpack_require__(/*! ./xform/trace */ "./node_modules/@thi.ng/transducers/xform/trace.js");
/* harmony import */ var _xform_word_wrap__WEBPACK_IMPORTED_MODULE_106__ = __webpack_require__(/*! ./xform/word-wrap */ "./node_modules/@thi.ng/transducers/xform/word-wrap.js");
/* harmony import */ var _func_comp__WEBPACK_IMPORTED_MODULE_107__ = __webpack_require__(/*! ./func/comp */ "./node_modules/@thi.ng/transducers/func/comp.js");
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_108__ = __webpack_require__(/*! ./func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _func_deep_transform__WEBPACK_IMPORTED_MODULE_109__ = __webpack_require__(/*! ./func/deep-transform */ "./node_modules/@thi.ng/transducers/func/deep-transform.js");
/* harmony import */ var _func_juxtr__WEBPACK_IMPORTED_MODULE_110__ = __webpack_require__(/*! ./func/juxtr */ "./node_modules/@thi.ng/transducers/func/juxtr.js");
/* harmony import */ var _func_key_selector__WEBPACK_IMPORTED_MODULE_111__ = __webpack_require__(/*! ./func/key-selector */ "./node_modules/@thi.ng/transducers/func/key-selector.js");
/* harmony import */ var _func_lookup__WEBPACK_IMPORTED_MODULE_112__ = __webpack_require__(/*! ./func/lookup */ "./node_modules/@thi.ng/transducers/func/lookup.js");
/* harmony import */ var _func_renamer__WEBPACK_IMPORTED_MODULE_113__ = __webpack_require__(/*! ./func/renamer */ "./node_modules/@thi.ng/transducers/func/renamer.js");
/* harmony import */ var _iter_as_iterable__WEBPACK_IMPORTED_MODULE_114__ = __webpack_require__(/*! ./iter/as-iterable */ "./node_modules/@thi.ng/transducers/iter/as-iterable.js");
/* harmony import */ var _iter_choices__WEBPACK_IMPORTED_MODULE_115__ = __webpack_require__(/*! ./iter/choices */ "./node_modules/@thi.ng/transducers/iter/choices.js");
/* harmony import */ var _iter_concat__WEBPACK_IMPORTED_MODULE_116__ = __webpack_require__(/*! ./iter/concat */ "./node_modules/@thi.ng/transducers/iter/concat.js");
/* harmony import */ var _iter_curve__WEBPACK_IMPORTED_MODULE_117__ = __webpack_require__(/*! ./iter/curve */ "./node_modules/@thi.ng/transducers/iter/curve.js");
/* harmony import */ var _iter_cycle__WEBPACK_IMPORTED_MODULE_118__ = __webpack_require__(/*! ./iter/cycle */ "./node_modules/@thi.ng/transducers/iter/cycle.js");
/* harmony import */ var _iter_dup__WEBPACK_IMPORTED_MODULE_119__ = __webpack_require__(/*! ./iter/dup */ "./node_modules/@thi.ng/transducers/iter/dup.js");
/* harmony import */ var _iter_extend_sides__WEBPACK_IMPORTED_MODULE_120__ = __webpack_require__(/*! ./iter/extend-sides */ "./node_modules/@thi.ng/transducers/iter/extend-sides.js");
/* harmony import */ var _iter_iterate__WEBPACK_IMPORTED_MODULE_121__ = __webpack_require__(/*! ./iter/iterate */ "./node_modules/@thi.ng/transducers/iter/iterate.js");
/* harmony import */ var _iter_key_permutations__WEBPACK_IMPORTED_MODULE_122__ = __webpack_require__(/*! ./iter/key-permutations */ "./node_modules/@thi.ng/transducers/iter/key-permutations.js");
/* harmony import */ var _iter_keys__WEBPACK_IMPORTED_MODULE_123__ = __webpack_require__(/*! ./iter/keys */ "./node_modules/@thi.ng/transducers/iter/keys.js");
/* harmony import */ var _iter_line__WEBPACK_IMPORTED_MODULE_124__ = __webpack_require__(/*! ./iter/line */ "./node_modules/@thi.ng/transducers/iter/line.js");
/* harmony import */ var _iter_norm_range__WEBPACK_IMPORTED_MODULE_125__ = __webpack_require__(/*! ./iter/norm-range */ "./node_modules/@thi.ng/transducers/iter/norm-range.js");
/* harmony import */ var _iter_pad_sides__WEBPACK_IMPORTED_MODULE_126__ = __webpack_require__(/*! ./iter/pad-sides */ "./node_modules/@thi.ng/transducers/iter/pad-sides.js");
/* harmony import */ var _iter_palindrome__WEBPACK_IMPORTED_MODULE_127__ = __webpack_require__(/*! ./iter/palindrome */ "./node_modules/@thi.ng/transducers/iter/palindrome.js");
/* harmony import */ var _iter_pairs__WEBPACK_IMPORTED_MODULE_128__ = __webpack_require__(/*! ./iter/pairs */ "./node_modules/@thi.ng/transducers/iter/pairs.js");
/* harmony import */ var _iter_permutations__WEBPACK_IMPORTED_MODULE_129__ = __webpack_require__(/*! ./iter/permutations */ "./node_modules/@thi.ng/transducers/iter/permutations.js");
/* harmony import */ var _iter_range__WEBPACK_IMPORTED_MODULE_130__ = __webpack_require__(/*! ./iter/range */ "./node_modules/@thi.ng/transducers/iter/range.js");
/* harmony import */ var _iter_range2d__WEBPACK_IMPORTED_MODULE_131__ = __webpack_require__(/*! ./iter/range2d */ "./node_modules/@thi.ng/transducers/iter/range2d.js");
/* harmony import */ var _iter_range3d__WEBPACK_IMPORTED_MODULE_132__ = __webpack_require__(/*! ./iter/range3d */ "./node_modules/@thi.ng/transducers/iter/range3d.js");
/* harmony import */ var _iter_range_nd__WEBPACK_IMPORTED_MODULE_133__ = __webpack_require__(/*! ./iter/range-nd */ "./node_modules/@thi.ng/transducers/iter/range-nd.js");
/* harmony import */ var _iter_repeat__WEBPACK_IMPORTED_MODULE_134__ = __webpack_require__(/*! ./iter/repeat */ "./node_modules/@thi.ng/transducers/iter/repeat.js");
/* harmony import */ var _iter_repeatedly__WEBPACK_IMPORTED_MODULE_135__ = __webpack_require__(/*! ./iter/repeatedly */ "./node_modules/@thi.ng/transducers/iter/repeatedly.js");
/* harmony import */ var _iter_reverse__WEBPACK_IMPORTED_MODULE_136__ = __webpack_require__(/*! ./iter/reverse */ "./node_modules/@thi.ng/transducers/iter/reverse.js");
/* harmony import */ var _iter_sorted_keys__WEBPACK_IMPORTED_MODULE_137__ = __webpack_require__(/*! ./iter/sorted-keys */ "./node_modules/@thi.ng/transducers/iter/sorted-keys.js");
/* harmony import */ var _iter_symmetric__WEBPACK_IMPORTED_MODULE_138__ = __webpack_require__(/*! ./iter/symmetric */ "./node_modules/@thi.ng/transducers/iter/symmetric.js");
/* harmony import */ var _iter_tween__WEBPACK_IMPORTED_MODULE_139__ = __webpack_require__(/*! ./iter/tween */ "./node_modules/@thi.ng/transducers/iter/tween.js");
/* harmony import */ var _iter_vals__WEBPACK_IMPORTED_MODULE_140__ = __webpack_require__(/*! ./iter/vals */ "./node_modules/@thi.ng/transducers/iter/vals.js");
/* harmony import */ var _iter_wrap_sides__WEBPACK_IMPORTED_MODULE_141__ = __webpack_require__(/*! ./iter/wrap-sides */ "./node_modules/@thi.ng/transducers/iter/wrap-sides.js");
/* harmony import */ var _iter_zip__WEBPACK_IMPORTED_MODULE_142__ = __webpack_require__(/*! ./iter/zip */ "./node_modules/@thi.ng/transducers/iter/zip.js");


















































































































































/***/ }),

/***/ "./node_modules/@thi.ng/transducers/internal/drain.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/internal/drain.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__drain": () => (/* binding */ __drain)
/* harmony export */ });
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduced */ "./node_modules/@thi.ng/transducers/reduced.js");

/**
 * Helper HOF yielding a buffer drain completion function for some
 * transducers.
 *
 * @param buf -
 * @param complete -
 * @param reduce -
 *
 * @internal
 */
const __drain = (buf, complete, reduce) => (acc) => {
    while (buf.length && !(0,_reduced__WEBPACK_IMPORTED_MODULE_0__.isReduced)(acc)) {
        acc = reduce(acc, buf.shift());
    }
    return complete(acc);
};


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/internal/ensure.js":
/*!*************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/internal/ensure.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ensureTransducer": () => (/* binding */ ensureTransducer)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/implements-function.js");

const ensureTransducer = (x) => (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.implementsFunction)(x, "xform") ? x.xform() : x;


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/internal/group-opts.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/internal/group-opts.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__groupByOpts": () => (/* binding */ __groupByOpts)
/* harmony export */ });
/* harmony import */ var _thi_ng_compose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/compose */ "./node_modules/@thi.ng/compose/identity.js");
/* harmony import */ var _rfn_push__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../rfn/push */ "./node_modules/@thi.ng/transducers/rfn/push.js");


/**
 * Shared helper function for `groupBy*` reducers
 *
 * @param opts -
 *
 * @internal
 */
const __groupByOpts = (opts) => (Object.assign({ key: _thi_ng_compose__WEBPACK_IMPORTED_MODULE_0__.identity, group: (0,_rfn_push__WEBPACK_IMPORTED_MODULE_1__.push)() }, opts));


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/internal/mathop.js":
/*!*************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/internal/mathop.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__mathop": () => (/* binding */ __mathop)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");

/**
 * Higher-order reducer for math operations.
 *
 * @param rfn -
 * @param fn -
 * @param initDefault -
 * @param args -
 *
 * @internal
 */
const __mathop = (rfn, fn, initDefault, args) => {
    const res = (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.$$reduce)(rfn, args);
    if (res !== undefined) {
        return res;
    }
    const init = args[0] || initDefault;
    return (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reducer)(() => init, fn);
};


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/internal/sort-opts.js":
/*!****************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/internal/sort-opts.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__sortOpts": () => (/* binding */ __sortOpts)
/* harmony export */ });
/* harmony import */ var _thi_ng_compare__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/compare */ "./node_modules/@thi.ng/compare/compare.js");
/* harmony import */ var _thi_ng_compose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/compose */ "./node_modules/@thi.ng/compose/identity.js");


/**
 * Helper function to inject default {@link SortOpts}.
 *
 * @param opts -
 *
 * @internal
 */
const __sortOpts = (opts) => (Object.assign({ key: _thi_ng_compose__WEBPACK_IMPORTED_MODULE_0__.identity, compare: _thi_ng_compare__WEBPACK_IMPORTED_MODULE_1__.compare }, opts));


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/as-iterable.js":
/*!**************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/as-iterable.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asIterable": () => (/* binding */ asIterable)
/* harmony export */ });
/**
 * Helper function / generator to (re)provide given iterable in iterator
 * form.
 *
 * @param src -
 */
function* asIterable(src) {
    yield* src;
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/choices.js":
/*!**********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/choices.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "choices": () => (/* binding */ choices)
/* harmony export */ });
/* harmony import */ var _thi_ng_arrays__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @thi.ng/arrays */ "./node_modules/@thi.ng/arrays/ensure-array.js");
/* harmony import */ var _thi_ng_random__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/random */ "./node_modules/@thi.ng/random/system.js");
/* harmony import */ var _thi_ng_random__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/random */ "./node_modules/@thi.ng/random/weighted-random.js");
/* harmony import */ var _repeatedly__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./repeatedly */ "./node_modules/@thi.ng/transducers/iter/repeatedly.js");



/**
 * Returns an infinite iterator of random choices and their (optional)
 * weights. If `weights` is given, it must have at least the same size
 * as `choices`. If omitted, each choice will have same probability.
 *
 * @example
 * ```ts
 * transduce(take(1000), frequencies(), choices("abcd", [1, 0.5, 0.25, 0.125]))
 * // Map { 'c' => 132, 'a' => 545, 'b' => 251, 'd' => 72 }
 * ```
 *
 * {@link @thi.ng/random#weightedRandom}
 *
 * @param choices -
 * @param weights -
 */
const choices = (choices, weights, rnd = _thi_ng_random__WEBPACK_IMPORTED_MODULE_0__.SYSTEM) => (0,_repeatedly__WEBPACK_IMPORTED_MODULE_1__.repeatedly)(weights
    ? (0,_thi_ng_random__WEBPACK_IMPORTED_MODULE_2__.weightedRandom)((0,_thi_ng_arrays__WEBPACK_IMPORTED_MODULE_3__.ensureArray)(choices), weights, rnd)
    : () => choices[rnd.float(choices.length) | 0]);


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/concat.js":
/*!*********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/concat.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "concat": () => (/* binding */ concat)
/* harmony export */ });
/* harmony import */ var _thi_ng_arrays__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/arrays */ "./node_modules/@thi.ng/arrays/ensure-iterable.js");

/**
 * Yields iterator producing concatenation of given iterables.
 * Undefined & null inputs are silently ignored, however any
 * such values produced or contained in an input will remain.
 *
 * @example
 * ```ts
 * [...concat([1, 2, 3], null, [4, 5])]
 * // [ 1, 2, 3, 4, 5 ]
 *
 * [...concat([1, 2, 3, undefined], null, [4, 5])]
 * // [ 1, 2, 3, undefined, 4, 5 ]
 * ```
 *
 * @param xs -
 */
function* concat(...xs) {
    for (let x of xs) {
        x != null && (yield* (0,_thi_ng_arrays__WEBPACK_IMPORTED_MODULE_0__.ensureIterable)(x));
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/curve.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/curve.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "curve": () => (/* binding */ curve)
/* harmony export */ });
/**
 * Iterator producing an exponential curve (with adjustable curvature)
 * between `start` and `end` values over `num` steps. This is the
 * exponential equivalent of {@link line}.
 *
 * @remarks
 * Since `start` is the first value emitted, the `end` value is only
 * reached in the `num+1`th step.
 *
 * The curvature can be controlled via the logarithmic `rate` param.
 * Recommended range [0.0001 - 10000] (curved -> linear). Default: 0.1
 *
 * Similar functionality (w/ more options) is availble here:
 * {@link @thi.ng/dsp#curve}.
 *
 * @example
 * ```ts
 * [...curve(50, 100, 10, 2)]
 * // [
 * //   50,
 * //   73.193,
 * //   85.649,
 * //   92.339,
 * //   95.932,
 * //   97.861,
 * //   98.897,
 * //   99.454,
 * //   99.753,
 * //   99.913,
 * //   100
 * // ]
 * ```
 *
 * @param start -
 * @param end -
 * @param steps -
 * @param falloff -
 */
function* curve(start, end, steps = 10, rate = 0.1) {
    const c = Math.exp(-Math.log((Math.abs(end - start) + rate) / rate) / steps);
    const offset = (start < end ? end + rate : end - rate) * (1 - c);
    steps > 0 && (yield start);
    for (let x = start; --steps >= 0;) {
        yield (x = offset + x * c);
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/cycle.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/cycle.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cycle": () => (/* binding */ cycle)
/* harmony export */ });
/**
 * Iterator which yields an infinite repetition of given `input`
 * iterable's values. Produces no values if `input` is empty. If `num`
 * is given, only that many cycles will be emitted.
 *
 * @remarks
 * Also see {@link repeat}, {@link repeatedly} for related functions.
 *
 * @example
 * ```ts
 * // take 5 from infinite sequence
 * [...take(5, cycle([1, 2, 3]))]
 * // [1, 2, 3, 1, 2]
 *
 * // only produce 2 cycles
 * [...cycle(range(3), 2)]
 * // [ 0, 1, 2, 0, 1, 2 ]
 * ```
 *
 * @param input -
 * @param num -
 */
function* cycle(input, num = Infinity) {
    if (num < 1)
        return;
    let cache = [];
    for (let i of input) {
        cache.push(i);
        yield i;
    }
    if (cache.length > 0) {
        while (--num > 0) {
            yield* cache;
        }
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/dup.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/dup.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dup": () => (/* binding */ dup)
/* harmony export */ });
/* harmony import */ var _thi_ng_arrays__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/arrays */ "./node_modules/@thi.ng/arrays/ensure-array.js");
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-string.js");
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-array.js");
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./concat */ "./node_modules/@thi.ng/transducers/iter/concat.js");



function dup(x) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isString)(x)
        ? x + x
        : (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__.isArray)(x)
            ? x.concat(x)
            : ((x = (0,_thi_ng_arrays__WEBPACK_IMPORTED_MODULE_2__.ensureArray)(x)), (0,_concat__WEBPACK_IMPORTED_MODULE_3__.concat)(x, x));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/extend-sides.js":
/*!***************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/extend-sides.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "extendSides": () => (/* binding */ extendSides)
/* harmony export */ });
/* harmony import */ var _thi_ng_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/api */ "./node_modules/@thi.ng/api/constants.js");
/* harmony import */ var _repeat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./repeat */ "./node_modules/@thi.ng/transducers/iter/repeat.js");


/**
 * Yields iterator of given iterable which repeats the first and/or last
 * value(s) `numLeft`/`numRight` times (default: 1).
 *
 * @remarks
 * By default both sides are repeated, but can be adjusted by setting
 * either of them to zero. `numRight` defaults to same value as
 * `numLeft`.
 *
 * @example
 * ```ts
 * [...extendSides([1, 2, 3])]
 * // [ 1,  1, 2, 3,  3]
 *
 * [...extendSides([1, 2, 3], 3)]
 * // [ 1, 1, 1,  1, 2, 3,  3, 3, 3 ]
 *
 * [...extendSides([1, 2, 3], 0, 3)]
 * // [ 1, 2, 3,  3, 3, 3 ]
 * ```
 *
 * - {@link padSides}
 * - {@link wrapSides}
 *
 * @param src -
 * @param numLeft -
 * @param numRight -
 */
function* extendSides(src, numLeft = 1, numRight = numLeft) {
    let prev = _thi_ng_api__WEBPACK_IMPORTED_MODULE_0__.SEMAPHORE;
    for (let x of src) {
        if (numLeft > 0 && prev === _thi_ng_api__WEBPACK_IMPORTED_MODULE_0__.SEMAPHORE) {
            yield* (0,_repeat__WEBPACK_IMPORTED_MODULE_1__.repeat)(x, numLeft);
            numLeft = 0;
        }
        yield x;
        prev = x;
    }
    if (numRight > 0 && prev !== _thi_ng_api__WEBPACK_IMPORTED_MODULE_0__.SEMAPHORE) {
        yield* (0,_repeat__WEBPACK_IMPORTED_MODULE_1__.repeat)(prev, numRight);
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/iterate.js":
/*!**********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/iterate.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "iterate": () => (/* binding */ iterate)
/* harmony export */ });
/**
 * Yields an infinite iterator of the inductive sequence:
 *
 * `f(x+1) = f(f(x))`
 *
 * @remarks
 * The first value emitted always is `seed` itself, then f(seed),
 * f(f(seed, i)) etc. The given function is called with the current
 * iteration counter as 2nd arg (starting w/ i=1).
 *
 * @example
 * ```ts
 * [...iterate((x) => x * 2, 1, 5)]
 * // [ 1, 2, 4, 8, 16 ]
 *
 * [...iterate((x, i) => x * 10 + i, 0, 8)]
 * // [ 0, 1, 12, 123, 1234, 12345, 123456, 1234567 ]
 * ```
 *
 * @param fn -
 * @param seed -
 * @param num -
 */
function* iterate(fn, seed, num = Infinity) {
    for (let i = 1; i <= num; i++) {
        yield seed;
        seed = fn(seed, i);
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/key-permutations.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/key-permutations.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "keyPermutations": () => (/* binding */ keyPermutations)
/* harmony export */ });
/* harmony import */ var _rfn_assoc_obj__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../rfn/assoc-obj */ "./node_modules/@thi.ng/transducers/rfn/assoc-obj.js");
/* harmony import */ var _xform_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../xform/map */ "./node_modules/@thi.ng/transducers/xform/map.js");
/* harmony import */ var _xform_mapcat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../xform/mapcat */ "./node_modules/@thi.ng/transducers/xform/mapcat.js");
/* harmony import */ var _xform_partition__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../xform/partition */ "./node_modules/@thi.ng/transducers/xform/partition.js");
/* harmony import */ var _pairs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pairs */ "./node_modules/@thi.ng/transducers/iter/pairs.js");
/* harmony import */ var _permutations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./permutations */ "./node_modules/@thi.ng/transducers/iter/permutations.js");






/**
 * Similar to {@link permutations}, however takes an object with each
 * key specifying an array of its possible values. Yields an iterable of
 * objects of all value permutations.
 *
 * @remarks
 * The resulting object type will be derived from the value types in the
 * given `spec` object.
 *
 * The order of resulting permutations is not guaranteed and depending
 * on the VM's iteration behavior of `Object.keys()`.
 *
 * @example
 * ```ts
 * [...keyPermutations({ a: [1, 2], b: [true, false], c: ["X", "Y"] })]
 * // [
 * //   { a: 1, b: true, c: 'X' },
 * //   { a: 1, b: true, c: 'Y' },
 * //   { a: 1, b: false, c: 'X' },
 * //   { a: 1, b: false, c: 'Y' },
 * //   { a: 2, b: true, c: 'X' },
 * //   { a: 2, b: true, c: 'Y' },
 * //   { a: 2, b: false, c: 'X' },
 * //   { a: 2, b: false, c: 'Y' }
 * // ]
 * ```
 *
 * @param spec - permutation spec object
 */
const keyPermutations = (spec) => ((0,_xform_map__WEBPACK_IMPORTED_MODULE_0__.map)((x) => (0,_rfn_assoc_obj__WEBPACK_IMPORTED_MODULE_1__.assocObj)((0,_xform_partition__WEBPACK_IMPORTED_MODULE_2__.partition)(2, x)), (0,_permutations__WEBPACK_IMPORTED_MODULE_3__.permutations)(...(0,_xform_mapcat__WEBPACK_IMPORTED_MODULE_4__.mapcat)(([k, v]) => [[k], v], (0,_pairs__WEBPACK_IMPORTED_MODULE_5__.pairs)(spec)))));


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/keys.js":
/*!*******************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/keys.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "keys": () => (/* binding */ keys)
/* harmony export */ });
/**
 * Iterator which yields all names of given object's own properties
 * (Similar to `Object.keys()`).
 *
 * @remarks
 * See also:
 * - {@link pairs}
 * - {@link vals}
 *
 * @param x -
 */
function* keys(x) {
    for (let k in x) {
        if (x.hasOwnProperty(k)) {
            yield k;
        }
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/line.js":
/*!*******************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/line.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "line": () => (/* binding */ line)
/* harmony export */ });
/* harmony import */ var _xform_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../xform/map */ "./node_modules/@thi.ng/transducers/xform/map.js");
/* harmony import */ var _norm_range__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./norm-range */ "./node_modules/@thi.ng/transducers/iter/norm-range.js");


/**
 * Iterator yielding `steps` + 1 interpolated values on a line in the
 * closed `[start .. end]` interval.
 *
 * @remarks
 * This is similar to {@link range}, but potentially provides more
 * precise values (by avoiding the accumulation of floating point errors
 * during iteration).
 *
 * Similar functionality (w/ more options) is availble here:
 * {@link @thi.ng/dsp#line}.
 *
 * @example
 * ```ts
 * [...line(50, 100, 10)]
 * // [
 * //    50, 55, 60, 65, 70,
 * //    75, 80, 85, 90, 95,
 * //   100
 * // ]
 * ```
 *
 * @param start -
 * @param end -
 * @param steps -
 */
const line = (start, end, steps = 10) => {
    const delta = end - start;
    return (0,_xform_map__WEBPACK_IMPORTED_MODULE_0__.map)((t) => start + delta * t, (0,_norm_range__WEBPACK_IMPORTED_MODULE_1__.normRange)(steps));
};


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/norm-range.js":
/*!*************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/norm-range.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "normRange": () => (/* binding */ normRange),
/* harmony export */   "normRange2d": () => (/* binding */ normRange2d),
/* harmony export */   "normRange3d": () => (/* binding */ normRange3d)
/* harmony export */ });
/* harmony import */ var _xform_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../xform/map */ "./node_modules/@thi.ng/transducers/xform/map.js");

/**
 * Yields sequence of `n+1` monotonically increasing numbers in the
 * closed interval (0.0 .. 1.0). If `n <= 0`, yields nothing.
 *
 * @example
 * ```ts
 * [...normRange(4)]
 * // [0, 0.25, 0.5, 0.75, 1.0]
 * ```
 *
 * @param n - number of steps
 * @param includeLast - include last value (i.e. `1.0`)
 */
function* normRange(n, includeLast = true) {
    if (n > 0) {
        for (let i = 0, m = includeLast ? n + 1 : n; i < m; i++) {
            yield i / n;
        }
    }
}
/**
 * 2D version of {@link normRange} in Y-major order (i.e. X is inner loop).
 *
 * @param nx
 * @param ny
 * @param includeLastX
 * @param includeLastY
 */
function* normRange2d(nx, ny, includeLastX = true, includeLastY = true) {
    const rx = [...normRange(nx, includeLastX)];
    for (let y of normRange(ny, includeLastY)) {
        yield* (0,_xform_map__WEBPACK_IMPORTED_MODULE_0__.map)((x) => [x, y], rx);
    }
}
/**
 * 3D version of {@link normRange} in Z-major order (i.e. X being innermost
 * loop).
 *
 * @param nx
 * @param ny
 * @param includeLastX
 * @param includeLastY
 */
function* normRange3d(nx, ny, nz, includeLastX = true, includeLastY = true, includeLastZ = true) {
    const sliceXY = [...normRange2d(nx, ny, includeLastX, includeLastY)];
    for (let z of normRange(nz, includeLastZ)) {
        yield* (0,_xform_map__WEBPACK_IMPORTED_MODULE_0__.map)((xy) => [...xy, z], sliceXY);
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/pad-sides.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/pad-sides.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "padSides": () => (/* binding */ padSides)
/* harmony export */ });
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./concat */ "./node_modules/@thi.ng/transducers/iter/concat.js");
/* harmony import */ var _repeat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./repeat */ "./node_modules/@thi.ng/transducers/iter/repeat.js");


/**
 * Returns iterator of `src` padded with value `x`, repeated
 * `numLeft`/`numRight` times (default: 1). By default both sides are
 * padded, but can be adjusted by setting either of them to zero.
 * `numRight` defaults to same value as `numLeft`.
 *
 * @example
 * Essentially, syntax sugar for:
 *
 * ```ts
 * // default
 * concat(repeat(x, numLeft), src, repeat(x, numRight))
 *
 * // left only
 * concat(repeat(x, numLeft), src)
 *
 * // right only
 * concat(src, repeat(x, numRight))
 * ```
 *
 * - {@link extendSides}
 * - {@link wrapSides}
 *
 * @param src -
 * @param x -
 * @param numLeft -
 * @param numRight -
 */
const padSides = (src, x, numLeft = 1, numRight = numLeft) => numLeft > 0
    ? numRight > 0
        ? (0,_concat__WEBPACK_IMPORTED_MODULE_0__.concat)((0,_repeat__WEBPACK_IMPORTED_MODULE_1__.repeat)(x, numLeft), src, (0,_repeat__WEBPACK_IMPORTED_MODULE_1__.repeat)(x, numRight))
        : (0,_concat__WEBPACK_IMPORTED_MODULE_0__.concat)((0,_repeat__WEBPACK_IMPORTED_MODULE_1__.repeat)(x, numLeft), src)
    : numRight > 0
        ? (0,_concat__WEBPACK_IMPORTED_MODULE_0__.concat)(src, (0,_repeat__WEBPACK_IMPORTED_MODULE_1__.repeat)(x, numRight))
        : (0,_concat__WEBPACK_IMPORTED_MODULE_0__.concat)(src);


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/pairs.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/pairs.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pairs": () => (/* binding */ pairs)
/* harmony export */ });
/**
 * Iterator yielding key-value pairs of given object's own properties
 * and their values. Same as `zip(keys(x), vals(x))`.
 *
 * @remarks
 * - {@link vals}
 * - {@link (zip:1)}
 *
 * @example
 * ```ts
 * [...pairs({ a: 1, b: 2 })]
 * // [['a', 1], ['b', 2]]
 * ```
 *
 *
 * @param x -
 */
function* pairs(x) {
    for (let k in x) {
        if (x.hasOwnProperty(k)) {
            yield [k, x[k]];
        }
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/palindrome.js":
/*!*************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/palindrome.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "palindrome": () => (/* binding */ palindrome)
/* harmony export */ });
/* harmony import */ var _thi_ng_arrays__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @thi.ng/arrays */ "./node_modules/@thi.ng/arrays/ensure-array.js");
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-string.js");
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-array.js");
/* harmony import */ var _rfn_str__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../rfn/str */ "./node_modules/@thi.ng/transducers/rfn/str.js");
/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./concat */ "./node_modules/@thi.ng/transducers/iter/concat.js");
/* harmony import */ var _reverse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reverse */ "./node_modules/@thi.ng/transducers/iter/reverse.js");





function palindrome(x) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isString)(x)
        ? (0,_rfn_str__WEBPACK_IMPORTED_MODULE_1__.str)("", (0,_concat__WEBPACK_IMPORTED_MODULE_2__.concat)([x], (0,_reverse__WEBPACK_IMPORTED_MODULE_3__.reverse)(x)))
        : (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_4__.isArray)(x)
            ? x.concat(x.slice().reverse())
            : ((x = (0,_thi_ng_arrays__WEBPACK_IMPORTED_MODULE_5__.ensureArray)(x)), (0,_concat__WEBPACK_IMPORTED_MODULE_2__.concat)(x, (0,_reverse__WEBPACK_IMPORTED_MODULE_3__.reverse)(x)));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/permutations.js":
/*!***************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/permutations.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "permutations": () => (/* binding */ permutations),
/* harmony export */   "permutationsN": () => (/* binding */ permutationsN)
/* harmony export */ });
/* harmony import */ var _thi_ng_arrays__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/arrays */ "./node_modules/@thi.ng/arrays/ensure-array.js");
/* harmony import */ var _thi_ng_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/errors */ "./node_modules/@thi.ng/errors/illegal-arguments.js");
/* harmony import */ var _range__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./range */ "./node_modules/@thi.ng/transducers/iter/range.js");



function* permutations(...src) {
    const n = src.length - 1;
    if (n < 0) {
        return;
    }
    const step = new Array(n + 1).fill(0);
    const realized = src.map(_thi_ng_arrays__WEBPACK_IMPORTED_MODULE_0__.ensureArrayLike);
    const total = realized.reduce((acc, x) => acc * x.length, 1);
    for (let i = 0; i < total; i++) {
        const tuple = [];
        for (let j = n; j >= 0; j--) {
            const r = realized[j];
            let s = step[j];
            if (s === r.length) {
                step[j] = s = 0;
                j > 0 && step[j - 1]++;
            }
            tuple[j] = r[s];
        }
        step[n]++;
        yield tuple;
    }
}
/**
 * Iterator yielding the Cartesian Product for `n` items of `m` values
 * each.
 *
 * @remarks
 * If `m` is not given, defaults to value of `n`. The range of `m` is
 * `0..m-1`. The optional `offsets` array can be used to define start
 * values for each dimension.
 *
 * @example
 * ```ts
 * [...permutationsN(2)]
 * // [ [0, 0], [0, 1], [1, 0], [1, 1] ]
 *
 * [...permutationsN(2, 3)]
 * // [ [0, 0], [0, 1], [0, 2],
 * //   [1, 0], [1, 1], [1, 2],
 * //   [2, 0], [2, 1], [2, 2] ]
 *
 * [...permutationsN(2, 2, [10, 20])]
 * // [ [ 10, 20 ], [ 10, 21 ], [ 11, 20 ], [ 11, 21 ] ]
 * ```
 *
 * @param n -
 * @param m -
 * @param offsets -
 */
const permutationsN = (n, m = n, offsets) => {
    if (offsets && offsets.length < n) {
        (0,_thi_ng_errors__WEBPACK_IMPORTED_MODULE_1__.illegalArgs)(`insufficient offsets, got ${offsets.length}, needed ${n}`);
    }
    const seqs = [];
    while (--n >= 0) {
        const o = offsets ? offsets[n] : 0;
        seqs[n] = (0,_range__WEBPACK_IMPORTED_MODULE_2__.range)(o, o + m);
    }
    return permutations.apply(null, seqs);
};


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/range-nd.js":
/*!***********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/range-nd.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rangeNd": () => (/* binding */ rangeNd)
/* harmony export */ });
/* harmony import */ var _xform_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../xform/map */ "./node_modules/@thi.ng/transducers/xform/map.js");
/* harmony import */ var _permutations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./permutations */ "./node_modules/@thi.ng/transducers/iter/permutations.js");
/* harmony import */ var _range__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./range */ "./node_modules/@thi.ng/transducers/iter/range.js");
/* harmony import */ var _zip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./zip */ "./node_modules/@thi.ng/transducers/iter/zip.js");




/**
 * If called with one vector, yields an iterator for the n-dimensional
 * interval: `[[0, 0,...] .. [x, y,...])`. If called with two vectors,
 * the first vector defines the inclusive interval start and the 2nd
 * vector the exclusive interval end. Each dimension can also contain
 * negative values.
 *
 * @example
 * ```ts
 * [...rangeNd([2])]
 * // [ [ 0 ], [ 1 ] ]
 *
 * [...rangeNd([2, -2])]
 * // [ [ 0, 0 ], [ 0, -1 ], [ 1, 0 ], [ 1, -1 ] ]
 *
 * [...rangeNd([-1,2], [1,3])]
 * // [ [ -1, 2 ], [ -1, 3 ], [ 0, 2 ], [ 0, 3 ] ]
 *
 * [...rangeNd([2, 2, 2])]
 * // [
 * //   [ 0, 0, 0 ],
 * //   [ 0, 0, 1 ],
 * //   [ 0, 1, 0 ],
 * //   [ 0, 1, 1 ],
 * //   [ 1, 0, 0 ],
 * //   [ 1, 0, 1 ],
 * //   [ 1, 1, 0 ],
 * //   [ 1, 1, 1 ]
 * // ]
 * ```
 *
 * @param vec
 */
const rangeNd = (min, max) => _permutations__WEBPACK_IMPORTED_MODULE_0__.permutations.apply(null, ((max
    ? [...(0,_xform_map__WEBPACK_IMPORTED_MODULE_1__.map)(([a, b]) => (0,_range__WEBPACK_IMPORTED_MODULE_2__.range)(a, b), (0,_zip__WEBPACK_IMPORTED_MODULE_3__.zip)(min, max))]
    : [...(0,_xform_map__WEBPACK_IMPORTED_MODULE_1__.map)(_range__WEBPACK_IMPORTED_MODULE_2__.range, min)])));


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/range.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/range.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "range": () => (/* binding */ range),
/* harmony export */   "Range": () => (/* binding */ Range)
/* harmony export */ });
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduced */ "./node_modules/@thi.ng/transducers/reduced.js");

function range(from, to, step) {
    return new Range(from, to, step);
}
/**
 * Simple class wrapper around given range interval and implementing
 * `Iterable` and {@link IReducible} interfaces, the latter is used to
 * accelerate use with {@link (reduce:1)}.
 */
class Range {
    constructor(from, to, step) {
        if (from === undefined) {
            from = 0;
            to = Infinity;
        }
        else if (to === undefined) {
            to = from;
            from = 0;
        }
        step = step === undefined ? (from < to ? 1 : -1) : step;
        this.from = from;
        this.to = to;
        this.step = step;
    }
    *[Symbol.iterator]() {
        let { from, to, step } = this;
        if (step > 0) {
            while (from < to) {
                yield from;
                from += step;
            }
        }
        else if (step < 0) {
            while (from > to) {
                yield from;
                from += step;
            }
        }
    }
    $reduce(rfn, acc) {
        const step = this.step;
        if (step > 0) {
            for (let i = this.from, n = this.to; i < n && !(0,_reduced__WEBPACK_IMPORTED_MODULE_0__.isReduced)(acc); i += step) {
                acc = rfn(acc, i);
            }
        }
        else {
            for (let i = this.from, n = this.to; i > n && !(0,_reduced__WEBPACK_IMPORTED_MODULE_0__.isReduced)(acc); i += step) {
                acc = rfn(acc, i);
            }
        }
        return acc;
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/range2d.js":
/*!**********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/range2d.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "range2d": () => (/* binding */ range2d)
/* harmony export */ });
/* harmony import */ var _thi_ng_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/errors */ "./node_modules/@thi.ng/errors/illegal-arity.js");
/* harmony import */ var _range__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./range */ "./node_modules/@thi.ng/transducers/iter/range.js");


function* range2d(...args) {
    let fromX, toX, stepX;
    let fromY, toY, stepY;
    switch (args.length) {
        case 6:
            stepX = args[4];
            stepY = args[5];
        case 4:
            [fromX, toX, fromY, toY] = args;
            break;
        case 2:
            [toX, toY] = args;
            fromX = fromY = 0;
            break;
        default:
            (0,_thi_ng_errors__WEBPACK_IMPORTED_MODULE_0__.illegalArity)(args.length);
    }
    const rx = (0,_range__WEBPACK_IMPORTED_MODULE_1__.range)(fromX, toX, stepX);
    for (let y of (0,_range__WEBPACK_IMPORTED_MODULE_1__.range)(fromY, toY, stepY)) {
        for (let x of rx) {
            yield [x, y];
        }
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/range3d.js":
/*!**********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/range3d.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "range3d": () => (/* binding */ range3d)
/* harmony export */ });
/* harmony import */ var _thi_ng_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/errors */ "./node_modules/@thi.ng/errors/illegal-arity.js");
/* harmony import */ var _range__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./range */ "./node_modules/@thi.ng/transducers/iter/range.js");


function* range3d(...args) {
    let fromX, toX, stepX;
    let fromY, toY, stepY;
    let fromZ, toZ, stepZ;
    switch (args.length) {
        case 9:
            stepX = args[6];
            stepY = args[7];
            stepZ = args[8];
        case 6:
            [fromX, toX, fromY, toY, fromZ, toZ] = args;
            break;
        case 3:
            [toX, toY, toZ] = args;
            fromX = fromY = fromZ = 0;
            break;
        default:
            (0,_thi_ng_errors__WEBPACK_IMPORTED_MODULE_0__.illegalArity)(args.length);
    }
    const rx = (0,_range__WEBPACK_IMPORTED_MODULE_1__.range)(fromX, toX, stepX);
    const ry = (0,_range__WEBPACK_IMPORTED_MODULE_1__.range)(fromY, toY, stepY);
    for (let z of (0,_range__WEBPACK_IMPORTED_MODULE_1__.range)(fromZ, toZ, stepZ)) {
        for (let y of ry) {
            for (let x of rx) {
                yield [x, y, z];
            }
        }
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/repeat.js":
/*!*********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/repeat.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "repeat": () => (/* binding */ repeat)
/* harmony export */ });
/**
 * Iterator yielding an infinite (by default) repetition of given value
 * `x`. If `n` is given, only produces that many values.
 *
 * See also: {@link repeatedly}
 *
 * @example
 * ```ts
 * [...repeat(42, 5)]
 * // [42, 42, 42, 42, 42]
 * ```
 *
 * @param x - value to repeat
 * @param n - num values (default: ∞)
 */
function* repeat(x, n = Infinity) {
    while (n-- > 0) {
        yield x;
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/repeatedly.js":
/*!*************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/repeatedly.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "repeatedly": () => (/* binding */ repeatedly)
/* harmony export */ });
/**
 * Iterator yielding return values of given single-arg function `fn` (called
 * with `i`, current iteration count). If `n` is given, only that many values
 * will be produced, else the iterator is infinite.
 *
 * @example
 * ```ts
 * [...repeatedly(() => Math.floor(Math.random() * 10), 5)]
 * // [7, 0, 9, 3, 1]
 *
 * [...repeatedly((i) => i, 5)]
 * // [0, 1, 2, 3, 4]
 * ```
 *
 * @param fn - value producer
 * @param n - num values (default: ∞)
 */
function* repeatedly(fn, n = Infinity) {
    for (let i = 0; i < n; i++) {
        yield fn(i);
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/reverse.js":
/*!**********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/reverse.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reverse": () => (/* binding */ reverse)
/* harmony export */ });
/* harmony import */ var _thi_ng_arrays__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/arrays */ "./node_modules/@thi.ng/arrays/ensure-array.js");

/**
 * Yields iterator which consumes input and yield its values in reverse
 * order. Important: Input MUST be finite.
 *
 * @example
 * ```ts
 * [...tx.reverse("hello world")]
 * // [ "d", "l", "r", "o", "w", " ", "o", "l", "l", "e", "h" ]
 * ```
 *
 * @param input -
 */
function* reverse(input) {
    const _input = (0,_thi_ng_arrays__WEBPACK_IMPORTED_MODULE_0__.ensureArray)(input);
    let n = _input.length;
    while (--n >= 0) {
        yield _input[n];
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/sorted-keys.js":
/*!**************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/sorted-keys.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sortedKeys": () => (/* binding */ sortedKeys)
/* harmony export */ });
/* harmony import */ var _thi_ng_compare__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/compare */ "./node_modules/@thi.ng/compare/compare.js");

/**
 * Syntax sugar for `Object.keys(x).sort()` with support for custom
 * comparator (default: {@link @thi.ng/compare#compare}) and yielding
 * iterator of sorted keys.
 *
 * @param x -
 * @param cmp -
 */
function* sortedKeys(x, cmp = _thi_ng_compare__WEBPACK_IMPORTED_MODULE_0__.compare) {
    yield* Object.keys(x).sort(cmp);
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/symmetric.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/symmetric.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "symmetric": () => (/* binding */ symmetric)
/* harmony export */ });
/**
 * Yields an iterator of all `src` values, followed by the same values
 * in reverse order. Efficiently builds the reversed order via an
 * internal linked list.
 *
 * @example
 * ```ts
 * [...symmetric([1, 2, 3])]
 * // [ 1, 2, 3, 3, 2, 1 ]
 * ```
 *
 * @param src -
 */
function* symmetric(src) {
    let head = undefined;
    for (let x of src) {
        head = { x, n: head };
        yield x;
    }
    while (head) {
        yield head.x;
        head = head.n;
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/tween.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/tween.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tween": () => (/* binding */ tween)
/* harmony export */ });
/* harmony import */ var _norm_range__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./norm-range */ "./node_modules/@thi.ng/transducers/iter/norm-range.js");
/* harmony import */ var _repeat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./repeat */ "./node_modules/@thi.ng/transducers/iter/repeat.js");


/**
 * Keyframe based interpolator. Yields a sequence of `num+1` equally
 * spaced, tweened values from given keyframe tuples (`stops`).
 * Keyframes are defined as `[time, value]` tuples. Only values in the
 * closed `[min..max]` time interval will be computed.
 *
 * @remarks
 * Interpolation happens in two stages: First the given `init` function
 * is called to transform/prepare pairs of consecutive keyframes into a
 * single interval (user defined). Then, to produce each tweened value
 * calls `mix` with the currently active interval and interpolation time
 * value `t` (re-normalized and relative to current interval). The
 * iterator yields results of these `mix()` function calls.
 *
 * Depending on the overall `num`ber of samples requested and the
 * distance between keyframes, some keyframes MIGHT be skipped. E.g. if
 * requesting 10 samples within [0,1], the interval between two
 * successive keyframes at 0.12 and 0.19 would be skipped entirely,
 * since samples will only be taken at multiples of `1/num` (i.e. 0.0,
 * 0.1, 0.2... in this example).
 *
 * The given keyframe times can lie outside the `min`/`max` range and
 * also don't need to cover the range fully. In the latter case, tweened
 * values before the first or after the last keyframe will yield the
 * value of the first/last keyframe. If only a single keyframe is given
 * in total, all `num` yielded samples will be that keyframe's
 * transformed value.
 *
 * @example
 * ```ts
 * [...tween({
 *   num: 10,
 *   min: 0,
 *   max: 100,
 *   init: (a, b) => [a, b],
 *   mix: ([a, b], t) => Math.floor(a + (b - a) * t),
 *   stops: [[20, 100], [50, 200], [80, 0]]
 * })]
 * // [ 100, 100, 100, 133, 166, 200, 133, 66, 0, 0, 0 ]
 * ```
 *
 * Using easing functions (e.g. via {@link @thi.ng/math# | @thi.ng/math}),
 * non-linear interpolation within each keyframe interval can be achieved:
 *
 * @example
 * ```ts
 * import { mix, smoothStep } from "@thi.ng/math"
 *
 * [...tween({
 *   num: 10,
 *   min: 0,
 *   max: 100,
 *   init: (a, b) => [a, b],
 *   mix: ([a, b], t) => Math.floor(mix(a, b, smoothStep(0.1, 0.9, t))),
 *   stops: [[20, 100], [50, 200], [80, 0]]
 * })]
 * // [ 100, 100, 100, 120, 179, 200, 158, 41, 0, 0, 0 ]
 * ```
 *
 * - {@link TweenOpts}
 * - {@link (interpolate:1)}
 * - {@link (interpolateHermite:1)}
 * - {@link (interpolateLinear:1)}
 *
 * @param opts -
 */
function* tween(opts) {
    const { min, max, num, init, mix, stops } = opts;
    const easing = opts.easing || ((x) => x);
    let l = stops.length;
    if (l < 1)
        return;
    if (l === 1) {
        yield* (0,_repeat__WEBPACK_IMPORTED_MODULE_0__.repeat)(mix(init(stops[0][1], stops[0][1]), 0), num);
    }
    stops.sort((a, b) => a[0] - b[0]);
    stops[l - 1][0] < max && stops.push([max, stops[l - 1][1]]);
    stops[0][0] > min && stops.unshift([min, stops[0][1]]);
    const range = max - min;
    let start = stops[0][0];
    let end = stops[1][0];
    let delta = end - start;
    let interval = init(stops[0][1], stops[1][1]);
    let i = 1;
    l = stops.length;
    for (let t of (0,_norm_range__WEBPACK_IMPORTED_MODULE_1__.normRange)(num)) {
        t = min + range * t;
        if (t > end) {
            while (i < l && t > stops[i][0])
                i++;
            start = stops[i - 1][0];
            end = stops[i][0];
            delta = end - start;
            interval = init(stops[i - 1][1], stops[i][1]);
        }
        yield mix(interval, easing(delta !== 0 ? (t - start) / delta : 0));
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/vals.js":
/*!*******************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/vals.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "vals": () => (/* binding */ vals)
/* harmony export */ });
/**
 * Iterator which yields all values of given object's own properties
 * (Similar to `Object.values()`).
 *
 * @remarks
 * See also:
 * - {@link keys}
 * - {@link pairs}
 *
 * @param x -
 */
function* vals(x) {
    for (let k in x) {
        if (x.hasOwnProperty(k)) {
            yield x[k];
        }
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/wrap-sides.js":
/*!*************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/wrap-sides.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "wrapSides": () => (/* binding */ wrapSides)
/* harmony export */ });
/* harmony import */ var _thi_ng_arrays__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/arrays */ "./node_modules/@thi.ng/arrays/ensure-array.js");
/* harmony import */ var _thi_ng_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/errors */ "./node_modules/@thi.ng/errors/illegal-arguments.js");
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/transducers/node_modules/@thi.ng/math/interval.js");



/**
 * Yields iterator of `src` with the last `numLeft` values of `src`
 * prepended at the beginning and/or the first `numRight` values
 * appended at the end.
 *
 * @remarks
 * `numLeft` defaults to 1 and `numRight` defaults to same value as
 * `numLeft`, therefore wraps both sides by default and throws error if
 * either `nXXX < 0` or larger than `src.length`.
 *
 * See also:
 * - {@link extendSides}
 * - {@link padSides}
 *
 * @param src -
 * @param numLeft -
 * @param numRight -
 */
function* wrapSides(src, numLeft = 1, numRight = numLeft) {
    const _src = (0,_thi_ng_arrays__WEBPACK_IMPORTED_MODULE_0__.ensureArray)(src);
    !((0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.inRange)(numLeft, 0, _src.length) && (0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.inRange)(numRight, 0, _src.length)) &&
        (0,_thi_ng_errors__WEBPACK_IMPORTED_MODULE_2__.illegalArgs)(`allowed wrap range: [0..${_src.length}]`);
    if (numLeft > 0) {
        for (let m = _src.length, i = m - numLeft; i < m; i++) {
            yield _src[i];
        }
    }
    yield* _src;
    if (numRight > 0) {
        for (let i = 0; i < numRight; i++) {
            yield _src[i];
        }
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iter/zip.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iter/zip.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "zip": () => (/* binding */ zip)
/* harmony export */ });
function* zip(...src) {
    const iters = src.map((s) => s[Symbol.iterator]());
    while (true) {
        const tuple = [];
        for (let i of iters) {
            let v = i.next();
            if (v.done) {
                return;
            }
            tuple.push(v.value);
        }
        yield tuple;
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/iterator.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/iterator.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "iterator": () => (/* binding */ iterator),
/* harmony export */   "iterator1": () => (/* binding */ iterator1),
/* harmony export */   "$iter": () => (/* binding */ $iter)
/* harmony export */ });
/* harmony import */ var _thi_ng_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @thi.ng/api */ "./node_modules/@thi.ng/api/constants.js");
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _internal_ensure__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/ensure */ "./node_modules/@thi.ng/transducers/internal/ensure.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reduced */ "./node_modules/@thi.ng/transducers/reduced.js");
/* harmony import */ var _rfn_push__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rfn/push */ "./node_modules/@thi.ng/transducers/rfn/push.js");





/**
 * Takes a transducer and input iterable. Returns iterator of
 * transformed results.
 *
 * @param xform -
 * @param xs -
 */
function* iterator(xform, xs) {
    const rfn = (0,_internal_ensure__WEBPACK_IMPORTED_MODULE_0__.ensureTransducer)(xform)((0,_rfn_push__WEBPACK_IMPORTED_MODULE_1__.push)());
    const complete = rfn[1];
    const reduce = rfn[2];
    for (let x of xs) {
        const y = reduce([], x);
        if ((0,_reduced__WEBPACK_IMPORTED_MODULE_2__.isReduced)(y)) {
            yield* (0,_reduced__WEBPACK_IMPORTED_MODULE_2__.unreduced)(complete(y.deref()));
            return;
        }
        if (y.length) {
            yield* y;
        }
    }
    yield* (0,_reduced__WEBPACK_IMPORTED_MODULE_2__.unreduced)(complete([]));
}
/**
 * Optimized version of {@link iterator} for transducers which are
 * guaranteed to:
 *
 * 1) Only produce none or a single result per input
 * 2) Do not require a `completion` reduction step
 *
 * @param xform -
 * @param xs -
 */
function* iterator1(xform, xs) {
    const reduce = ((0,_internal_ensure__WEBPACK_IMPORTED_MODULE_0__.ensureTransducer)(xform)([_thi_ng_api__WEBPACK_IMPORTED_MODULE_3__.NO_OP, _thi_ng_api__WEBPACK_IMPORTED_MODULE_3__.NO_OP, (_, x) => x]))[2];
    for (let x of xs) {
        let y = reduce(_thi_ng_api__WEBPACK_IMPORTED_MODULE_3__.SEMAPHORE, x);
        if ((0,_reduced__WEBPACK_IMPORTED_MODULE_2__.isReduced)(y)) {
            y = (0,_reduced__WEBPACK_IMPORTED_MODULE_2__.unreduced)(y.deref());
            if (y !== _thi_ng_api__WEBPACK_IMPORTED_MODULE_3__.SEMAPHORE) {
                yield y;
            }
            return;
        }
        if (y !== _thi_ng_api__WEBPACK_IMPORTED_MODULE_3__.SEMAPHORE) {
            yield y;
        }
    }
}
/**
 * Helper function used by various transducers to wrap themselves as
 * transforming iterators. Delegates to {@link iterator1} by default.
 *
 * @param xform -
 * @param args -
 * @param impl -
 *
 * @internal
 */
const $iter = (xform, args, impl = iterator1) => {
    const n = args.length - 1;
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_4__.isIterable)(args[n])
        ? args.length > 1
            ? impl(xform.apply(null, args.slice(0, n)), args[n])
            : impl(xform(), args[0])
        : undefined;
};


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/node_modules/@thi.ng/math/api.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/node_modules/@thi.ng/math/api.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PI": () => (/* binding */ PI),
/* harmony export */   "TAU": () => (/* binding */ TAU),
/* harmony export */   "HALF_PI": () => (/* binding */ HALF_PI),
/* harmony export */   "THIRD_PI": () => (/* binding */ THIRD_PI),
/* harmony export */   "QUARTER_PI": () => (/* binding */ QUARTER_PI),
/* harmony export */   "SIXTH_PI": () => (/* binding */ SIXTH_PI),
/* harmony export */   "INV_PI": () => (/* binding */ INV_PI),
/* harmony export */   "INV_TAU": () => (/* binding */ INV_TAU),
/* harmony export */   "INV_HALF_PI": () => (/* binding */ INV_HALF_PI),
/* harmony export */   "DEG2RAD": () => (/* binding */ DEG2RAD),
/* harmony export */   "RAD2DEG": () => (/* binding */ RAD2DEG),
/* harmony export */   "PHI": () => (/* binding */ PHI),
/* harmony export */   "SQRT2": () => (/* binding */ SQRT2),
/* harmony export */   "SQRT3": () => (/* binding */ SQRT3),
/* harmony export */   "SQRT2_2": () => (/* binding */ SQRT2_2),
/* harmony export */   "SQRT2_3": () => (/* binding */ SQRT2_3),
/* harmony export */   "THIRD": () => (/* binding */ THIRD),
/* harmony export */   "TWO_THIRD": () => (/* binding */ TWO_THIRD),
/* harmony export */   "SIXTH": () => (/* binding */ SIXTH),
/* harmony export */   "EPS": () => (/* binding */ EPS)
/* harmony export */ });
const PI = Math.PI;
const TAU = PI * 2;
const HALF_PI = PI / 2;
const THIRD_PI = PI / 3;
const QUARTER_PI = PI / 4;
const SIXTH_PI = PI / 6;
const INV_PI = 1 / PI;
const INV_TAU = 1 / TAU;
const INV_HALF_PI = 1 / HALF_PI;
const DEG2RAD = PI / 180;
const RAD2DEG = 180 / PI;
const PHI = (1 + Math.sqrt(5)) / 2;
const SQRT2 = Math.SQRT2;
const SQRT3 = Math.sqrt(3);
const SQRT2_2 = SQRT2 / 2;
const SQRT2_3 = SQRT3 / 2;
const THIRD = 1 / 3;
const TWO_THIRD = 2 / 3;
const SIXTH = 1 / 6;
let EPS = 1e-6;


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/node_modules/@thi.ng/math/interval.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/node_modules/@thi.ng/math/interval.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clamp": () => (/* binding */ clamp),
/* harmony export */   "clamp0": () => (/* binding */ clamp0),
/* harmony export */   "clamp01": () => (/* binding */ clamp01),
/* harmony export */   "clamp11": () => (/* binding */ clamp11),
/* harmony export */   "clamp05": () => (/* binding */ clamp05),
/* harmony export */   "wrap": () => (/* binding */ wrap),
/* harmony export */   "wrapOnce": () => (/* binding */ wrapOnce),
/* harmony export */   "wrap01": () => (/* binding */ wrap01),
/* harmony export */   "wrap11": () => (/* binding */ wrap11),
/* harmony export */   "min2id": () => (/* binding */ min2id),
/* harmony export */   "min3id": () => (/* binding */ min3id),
/* harmony export */   "min4id": () => (/* binding */ min4id),
/* harmony export */   "max2id": () => (/* binding */ max2id),
/* harmony export */   "max3id": () => (/* binding */ max3id),
/* harmony export */   "max4id": () => (/* binding */ max4id),
/* harmony export */   "minNonZero2": () => (/* binding */ minNonZero2),
/* harmony export */   "minNonZero3": () => (/* binding */ minNonZero3),
/* harmony export */   "smin": () => (/* binding */ smin),
/* harmony export */   "smax": () => (/* binding */ smax),
/* harmony export */   "sclamp": () => (/* binding */ sclamp),
/* harmony export */   "absMin": () => (/* binding */ absMin),
/* harmony export */   "absMax": () => (/* binding */ absMax),
/* harmony export */   "foldback": () => (/* binding */ foldback),
/* harmony export */   "inRange": () => (/* binding */ inRange),
/* harmony export */   "inOpenRange": () => (/* binding */ inOpenRange)
/* harmony export */ });
/**
 * Clamps value `x` to given closed interval.
 *
 * @param x - value to clamp
 * @param min - lower bound
 * @param max - upper bound
 */
const clamp = (x, min, max) => (x < min ? min : x > max ? max : x);
/**
 * Clamps value `x` to closed [0 .. ∞] interval.
 *
 * @param x
 */
const clamp0 = (x) => (x > 0 ? x : 0);
/**
 * Clamps value `x` to closed [0 .. 1] interval.
 *
 * @param x
 */
const clamp01 = (x) => (x < 0 ? 0 : x > 1 ? 1 : x);
/**
 * Clamps value `x` to closed [-1 .. 1] interval.
 *
 * @param x
 */
const clamp11 = (x) => (x < -1 ? -1 : x > 1 ? 1 : x);
/**
 * Clamps value `x` to closed [0 .. 0.5] interval.
 *
 * @param x
 */
const clamp05 = (x) => (x < 0 ? 0 : x > 0.5 ? 0.5 : x);
/**
 * Folds `x` back inside closed [min..max] interval. Also see
 * {@link wrapOnce}.
 *
 * @param x -
 * @param min -
 * @param max -
 */
const wrap = (x, min, max) => {
    if (min === max)
        return min;
    if (x > max) {
        const d = max - min;
        x -= d;
        if (x > max)
            x -= d * (((x - min) / d) | 0);
    }
    else if (x < min) {
        const d = max - min;
        x += d;
        if (x < min)
            x += d * (((min - x) / d + 1) | 0);
    }
    return x;
};
/**
 * Like {@link wrap}, but optimized for cases where `x` is guaranteed to
 * be in `[min - d, max + d]` interval, where `d = max - min`. Result
 * will be in closed `[min..max]` interval.
 *
 * @param x -
 * @param min -
 * @param max -
 */
const wrapOnce = (x, min, max) => x < min ? x - min + max : x > max ? x - max + min : x;
/**
 * Similar to {@link wrapOnce} for [0..1] interval.
 *
 * @param x -
 */
const wrap01 = (x) => (x < 0 ? x + 1 : x > 1 ? x - 1 : x);
/**
 * Similar to {@link wrapOnce} for [-1..1] interval.
 *
 * @param x -
 */
const wrap11 = (x) => (x < -1 ? x + 2 : x > 1 ? x - 2 : x);
const min2id = (a, b) => (a <= b ? 0 : 1);
const min3id = (a, b, c) => a <= b ? (a <= c ? 0 : 2) : b <= c ? 1 : 2;
const min4id = (a, b, c, d) => a <= b
    ? a <= c
        ? a <= d
            ? 0
            : 3
        : c <= d
            ? 2
            : 3
    : b <= c
        ? b <= d
            ? 1
            : 3
        : c <= d
            ? 2
            : 3;
const max2id = (a, b) => (a >= b ? 0 : 1);
const max3id = (a, b, c) => a >= b ? (a >= c ? 0 : 2) : b >= c ? 1 : 2;
const max4id = (a, b, c, d) => a >= b
    ? a >= c
        ? a >= d
            ? 0
            : 3
        : c >= d
            ? 2
            : 3
    : b >= c
        ? b >= d
            ? 1
            : 3
        : c >= d
            ? 2
            : 3;
/**
 * Returns the non-zero minimum value of the given `a`, `b` args.
 *
 * @param a
 * @param b
 */
const minNonZero2 = (a, b) => a !== 0 ? (b !== 0 ? Math.min(a, b) : a) : b;
/**
 * Returns the non-zero minimum value of the given `a`, `b`, `c` args.
 *
 * @param a
 * @param b
 * @param c
 */
const minNonZero3 = (a, b, c) => minNonZero2(minNonZero2(a, b), c);
/**
 * See `smax()`.
 *
 * @param a -
 * @param b -
 * @param k - smooth exponent (MUST be > 0)
 */
const smin = (a, b, k) => smax(a, b, -k);
/**
 * Smooth maximum. Note: Result values will be slightly larger than max
 * value near max(a,b) + eps due to exponential decay. Higher `k` values
 * reduce the error, but also reduce the smoothing. Recommended k=16.
 *
 * {@link https://en.wikipedia.org/wiki/Smooth_maximum}
 *
 * @param a -
 * @param b -
 * @param k - smooth exponent (MUST be > 0)
 */
const smax = (a, b, k) => {
    const ea = Math.exp(a * k);
    const eb = Math.exp(b * k);
    return (a * ea + b * eb) / (ea + eb);
};
/**
 * Same as `smin(smax(x, min, k), max, k)`.
 *
 * @param x -
 * @param min -
 * @param max -
 * @param k -
 */
const sclamp = (x, min, max, k) => smin(smax(x, min, k), max, k);
const absMin = (a, b) => (Math.abs(a) < Math.abs(b) ? a : b);
const absMax = (a, b) => (Math.abs(a) > Math.abs(b) ? a : b);
/**
 * If `abs(x) > abs(e)`, recursively mirrors `x` back into `[-e .. +e]`
 * interval at respective positive/negative boundary.
 *
 * @remarks
 * References:
 * - https://www.desmos.com/calculator/lkyf2ag3ta
 * - https://www.musicdsp.org/en/latest/Effects/203-fold-back-distortion.html
 *
 * @param e - threshold (> 0)
 * @param x - input value
 */
const foldback = (e, x) => x < -e || x > e ? Math.abs(Math.abs((x - e) % (4 * e)) - 2 * e) - e : x;
/**
 * Returns true iff `x` is in closed interval `[min .. max]`
 *
 * @param x -
 * @param min -
 * @param max -
 */
const inRange = (x, min, max) => x >= min && x <= max;
/**
 * Returns true iff `x` is in open interval `(min .. max)`
 *
 * @param x -
 * @param min -
 * @param max -
 */
const inOpenRange = (x, min, max) => x > min && x < max;


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/node_modules/@thi.ng/math/mix.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/node_modules/@thi.ng/math/mix.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mix": () => (/* binding */ mix),
/* harmony export */   "mixBilinear": () => (/* binding */ mixBilinear),
/* harmony export */   "mixQuadratic": () => (/* binding */ mixQuadratic),
/* harmony export */   "mixCubic": () => (/* binding */ mixCubic),
/* harmony export */   "mixHermite": () => (/* binding */ mixHermite),
/* harmony export */   "mixCubicHermite": () => (/* binding */ mixCubicHermite),
/* harmony export */   "mixCubicHermiteFromPoints": () => (/* binding */ mixCubicHermiteFromPoints),
/* harmony export */   "mixBicubic": () => (/* binding */ mixBicubic),
/* harmony export */   "tangentCardinal": () => (/* binding */ tangentCardinal),
/* harmony export */   "tangentDiff3": () => (/* binding */ tangentDiff3),
/* harmony export */   "tween": () => (/* binding */ tween),
/* harmony export */   "circular": () => (/* binding */ circular),
/* harmony export */   "invCircular": () => (/* binding */ invCircular),
/* harmony export */   "lens": () => (/* binding */ lens),
/* harmony export */   "cosine": () => (/* binding */ cosine),
/* harmony export */   "decimated": () => (/* binding */ decimated),
/* harmony export */   "bounce": () => (/* binding */ bounce),
/* harmony export */   "ease": () => (/* binding */ ease),
/* harmony export */   "impulse": () => (/* binding */ impulse),
/* harmony export */   "gain": () => (/* binding */ gain),
/* harmony export */   "parabola": () => (/* binding */ parabola),
/* harmony export */   "cubicPulse": () => (/* binding */ cubicPulse),
/* harmony export */   "sinc": () => (/* binding */ sinc),
/* harmony export */   "sincNormalized": () => (/* binding */ sincNormalized),
/* harmony export */   "lanczos": () => (/* binding */ lanczos),
/* harmony export */   "sigmoid": () => (/* binding */ sigmoid),
/* harmony export */   "sigmoid01": () => (/* binding */ sigmoid01),
/* harmony export */   "sigmoid11": () => (/* binding */ sigmoid11),
/* harmony export */   "schlick": () => (/* binding */ schlick),
/* harmony export */   "expFactor": () => (/* binding */ expFactor),
/* harmony export */   "gaussian": () => (/* binding */ gaussian)
/* harmony export */ });
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ "./node_modules/@thi.ng/transducers/node_modules/@thi.ng/math/api.js");

/**
 * Linear interpolation without clamping. Computes `a + (b - a) * t`
 *
 * @param a - start value
 * @param b - end value
 * @param t - interpolation factor [0..1]
 */
const mix = (a, b, t) => a + (b - a) * t;
/**
 * Bilinear interpolation of given values (`a`,`b`,`c`,`d`).
 *
 * @example
 * ```ts
 * c    d
 * +----+
 * |    |
 * +----+
 * a    b
 * ```
 *
 * @param a - BL value
 * @param b - BR value
 * @param c - TL value
 * @param d - TR value
 * @param u - 1st interpolation factor
 * @param v - 2nd interpolation factor
 */
const mixBilinear = (a, b, c, d, u, v) => {
    const iu = 1 - u;
    const iv = 1 - v;
    return a * iu * iv + b * u * iv + c * iu * v + d * u * v;
};
const mixQuadratic = (a, b, c, t) => {
    const s = 1 - t;
    return a * s * s + b * 2 * s * t + c * t * t;
};
const mixCubic = (a, b, c, d, t) => {
    const t2 = t * t;
    const s = 1 - t;
    const s2 = s * s;
    return a * s2 * s + b * 3 * s2 * t + c * 3 * t2 * s + d * t2 * t;
};
/**
 * Returns hermite interpolation of `a, b, c, d` at normalized position
 * `t`, where `a` and `d` are used as predecessor/successor of `b` / `c`
 * and only inform the tangent of the interpolation curve. The
 * interpolated result is that of `b` and `c`.
 *
 * Assumes all inputs are uniformly spaced. If that's not the case, use
 * {@link mixCubicHermite} with one of the tangent generators supporting
 * non-uniform spacing of points.
 *
 * See: {@link https://www.desmos.com/calculator/j4gf8g9vkr}
 *
 * Source:
 * {@link https://www.musicdsp.org/en/latest/Other/93-hermite-interpollation.html}
 *
 * - {@link mixCubicHermite}
 * - {@link tangentCardinal}
 * - {@link tangentDiff3}
 *
 * @param a -
 * @param b -
 * @param c -
 * @param d -
 * @param t -
 */
const mixHermite = (a, b, c, d, t) => {
    const y1 = 0.5 * (c - a);
    const y2 = 1.5 * (b - c) + 0.5 * (d - a);
    return ((y2 * t + a - b + y1 - y2) * t + y1) * t + b;
};
/**
 * Computes cubic-hermite interpolation between `a` / `b` at normalized
 * time `t` and using respective tangents `ta` / `tb`.
 *
 * {@link https://en.wikipedia.org/wiki/Cubic_Hermite_spline}
 *
 * - {@link mixHermite}
 * - {@link tangentCardinal}
 * - {@link tangentDiff3}
 *
 * @param a -
 * @param ta -
 * @param b -
 * @param tb -
 * @param t -
 */
const mixCubicHermite = (a, ta, b, tb, t) => {
    const s = t - 1;
    const t2 = t * t;
    const s2 = s * s;
    const h00 = (1 + 2 * t) * s2;
    const h10 = t * s2;
    const h01 = t2 * (3 - 2 * t);
    const h11 = t2 * s;
    return h00 * a + h10 * ta + h01 * b + h11 * tb;
};
/**
 * Similar to {@link mixCubicHermite}, but takes 4 control values (uniformly
 * spaced) and computes tangents automatically. Returns `b` iff `t=0` and `c`
 * iff `t=1.0`.
 *
 * @param a
 * @param b
 * @param c
 * @param d
 * @param t
 */
const mixCubicHermiteFromPoints = (a, b, c, d, t) => {
    d *= 0.5;
    const aa = -0.5 * a + 1.5 * b - 1.5 * c + d;
    const bb = a - 2.5 * b + 2 * c - d;
    const cc = -0.5 * a + 0.5 * c;
    const dd = b;
    const t2 = t * t;
    return t * t2 * aa + t2 * bb + t * cc + dd;
};
/**
 * Bicubic interpolation of given 4x4 sample values (in row major order, i.e.
 * `s00..s03` = 1st row).
 *
 * @remarks
 * Result will not be clamped and might fall outside the total range of the
 * input samples.
 *
 * @param s00
 * @param s01
 * @param s02
 * @param s03
 * @param s10
 * @param s11
 * @param s12
 * @param s13
 * @param s20
 * @param s21
 * @param s22
 * @param s23
 * @param s30
 * @param s31
 * @param s32
 * @param s33
 * @param u
 * @param v
 * @returns
 */
const mixBicubic = (s00, s01, s02, s03, s10, s11, s12, s13, s20, s21, s22, s23, s30, s31, s32, s33, u, v) => mixCubicHermiteFromPoints(mixCubicHermiteFromPoints(s00, s01, s02, s03, u), mixCubicHermiteFromPoints(s10, s11, s12, s13, u), mixCubicHermiteFromPoints(s20, s21, s22, s23, u), mixCubicHermiteFromPoints(s30, s31, s32, s33, u), v);
/**
 * Helper function for {@link mixCubicHermite}. Computes cardinal tangents
 * based on point neighbors of a point B (not given), i.e. `a`
 * (predecessor) and `c` (successor) and their times (defaults to
 * uniformly spaced). The optional `tension` parameter can be used to
 * scale the tangent where 0.0 produces a Cardinal spline tangent and
 * 1.0 a Catmull-Rom (opposite to the Wikipedia ref).
 *
 * {@link https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Cardinal_spline}
 *
 * @param prev -
 * @param next -
 * @param scale -
 * @param ta -
 * @param tc -
 */
const tangentCardinal = (prev, next, scale = 0.5, ta = 0, tc = 2) => scale * ((next - prev) / (tc - ta));
/**
 * Helper function for {@link mixCubicHermite}. Computes tangent for `curr`,
 * based on 3-point finite difference, where `prev` & `next` are
 * `curr`'s neighbors and the `tX` the three points' respective time
 * values. The latter are equally spaced by default (each 1.0 apart).
 *
 * Using this function with equal spacing of 1.0 and together with
 * {@link mixCubicHermite} will produce same results as the somewhat
 * optimized variant {@link mixHermite}.
 *
 * {@link https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Finite_difference}
 *
 * @param prev -
 * @param curr -
 * @param next -
 * @param ta -
 * @param tb -
 * @param tc -
 */
const tangentDiff3 = (prev, curr, next, ta = 0, tb = 1, tc = 2) => 0.5 * ((next - curr) / (tc - tb) + (curr - prev) / (tb - ta));
/**
 * HOF interpolator. Takes a timing function `f` and interval `[from,to]`.
 * Returns function which takes normalized time (in [0,1] range) as single arg
 * and returns interpolated value.
 *
 * @param f -
 * @param from -
 * @param to -
 */
const tween = (f, from, to) => (t) => mix(from, to, f(t));
/**
 * Circular interpolation (ease out): `sqrt(1 - (1 - t)^2)`
 *
 * @remarks
 * Reference: https://www.desmos.com/calculator/tisoiazdrw
 *
 * @param t - interpolation factor [0..1]
 */
const circular = (t) => {
    t = 1 - t;
    return Math.sqrt(1 - t * t);
};
/**
 * Inverse/flipped version of {@link circular} (ease in).
 *
 * @remarks
 * Reference: https://www.desmos.com/calculator/tisoiazdrw
 *
 * @param t - interpolation factor [0..1]
 */
const invCircular = (t) => 1 - circular(1 - t);
/**
 * Zoomlens interpolation with customizable lens position, behavior and
 * strength.
 *
 * @remarks
 * Lens position must be given in (0..1) interval. Lens strength must be in
 * [-1,1] range. If negative, the lens will be bundling values near `pos`, if
 * positive the lens has dilating characteristics and will spread values near
 * `pos` towards the edges.
 *
 * Also see {@link schlick} for an alternative approach.
 *
 * @example
 * ```ts
 * // interpolated position in [100..400] interval for given `t`
 * y = mix(100, 400, lens(0.5, 1, t));
 *
 * // or build tween function via `tween()`
 * f = tween(partial(lens, 0.5, 1), 100, 400);
 *
 * f(t)
 * ```
 *
 * @param pos - lens pos
 * @param strength - lens strength
 * @param t - interpolation factor [0..1]
 */
const lens = (pos, strength, t) => {
    const impl = strength > 0 ? invCircular : circular;
    const tp = 1 - pos;
    const tl = t <= pos ? impl(t / pos) * pos : 1 - impl((1 - t) / tp) * tp;
    return mix(t, tl, Math.abs(strength));
};
const cosine = (t) => 1 - (Math.cos(t * _api__WEBPACK_IMPORTED_MODULE_0__.PI) * 0.5 + 0.5);
const decimated = (n, t) => Math.floor(t * n) / n;
const bounce = (k, amp, t) => {
    const tk = t * k;
    return 1 - ((amp * Math.sin(tk)) / tk) * Math.cos(t * _api__WEBPACK_IMPORTED_MODULE_0__.HALF_PI);
};
/**
 * Exponential easing.
 *
 * - `ease = 1` -> linear
 * - `ease > 1` -> ease in
 * - `ease < 1` -> ease out
 *
 * @param ease - easing behavior [0.0 .. ∞]
 * @param t -
 */
const ease = (ease, t) => Math.pow(t, ease);
/**
 * Impulse generator. Peaks at `t = 1/k`
 *
 * @param k - impulse width (higher values => shorter impulse)
 */
const impulse = (k, t) => {
    const h = k * t;
    return h * Math.exp(1 - h);
};
const gain = (k, t) => t < 0.5 ? 0.5 * Math.pow(2 * t, k) : 1 - 0.5 * Math.pow(2 - 2 * t, k);
const parabola = (k, t) => Math.pow(4.0 * t * (1.0 - t), k);
const cubicPulse = (w, c, t) => {
    t = Math.abs(t - c);
    return t > w ? 0 : ((t /= w), 1 - t * t * (3 - 2 * t));
};
/**
 * Unnormalized Sinc function: sin(x)/x. Returns 1 for t=0.
 *
 * @remarks
 * https://en.wikipedia.org/wiki/Sinc_function
 *
 * @param k
 * @param t
 */
const sinc = (t) => (t !== 0 ? Math.sin(t) / t : 1);
/**
 * Normalized Sinc function, returns sinc(π*k*t).
 *
 * @remarks
 * https://en.wikipedia.org/wiki/Sinc_function
 *
 * @see {@link sinc}
 *
 * @param k
 * @param t
 */
const sincNormalized = (k, t) => sinc(_api__WEBPACK_IMPORTED_MODULE_0__.PI * k * t);
/**
 * Lanczos filter. Returns `sinc(πt)sinc(πt/a)` iff `t` in (-a,a) interval, else
 * returns 0.
 *
 * @remarks
 * Interactive graph: https://www.desmos.com/calculator/pmypqgefle
 *
 * @param a
 * @param t
 */
const lanczos = (a, t) => t !== 0 ? (-a < t && t < a ? sinc(_api__WEBPACK_IMPORTED_MODULE_0__.PI * t) * sinc((_api__WEBPACK_IMPORTED_MODULE_0__.PI * t) / a) : 0) : 1;
/**
 * Sigmoid function for inputs arounds center bias.
 *
 * @remarks
 * Updated in v3.0.0 to add bias value to satisfy more use cases. Use
 * {@link sigmoid01} for old behavior.
 *
 * @param bias - center value (for which result = 0.5)
 * @param k - steepness
 * @param t - input value
 */
const sigmoid = (bias, k, t) => t != bias ? 1 / (1 + Math.exp(-k * (t - bias))) : 0.5;
/**
 * Sigmoid function for inputs in [0..1] interval. Center bias = 0.5.
 *
 * @param k - steepness
 * @param t - input value
 */
const sigmoid01 = (k, t) => sigmoid(0.5, k, t);
/**
 * Sigmoid function for inputs in [-1..+1] interval. Center bias = 0
 *
 * @param k -
 * @param t -
 */
const sigmoid11 = (k, t) => sigmoid(0, k, t);
/**
 * Generalized Schlick bias gain curve, based on:
 * https://arxiv.org/abs/2010.09714
 *
 * @remarks
 * Interactive graph:
 * https://www.desmos.com/calculator/u6bkm5rb7t
 *
 * @param a - curve strength. recommended (0..64]
 * @param b - pivot position [0..1]
 * @param t - input val [0..1]
 */
const schlick = (a, b, t) => t <= b
    ? (b * t) / (t + a * (b - t) + _api__WEBPACK_IMPORTED_MODULE_0__.EPS)
    : ((1 - b) * (t - 1)) / (1 - t - a * (b - t) + _api__WEBPACK_IMPORTED_MODULE_0__.EPS) + 1;
/**
 * Computes exponential factor to interpolate from `a` to `b` over
 * `num` steps. I.e. multiplying `a` with the returned factor will yield
 * `b` after `num` steps. All args must be > 0.
 *
 * @param a
 * @param b
 * @param num
 */
const expFactor = (a, b, num) => (b / a) ** (1 / num);
/**
 * Computes gaussian bell curve for given center `bias` and `sigma` (spread).
 *
 * @remarks
 * Interactive graph: https://www.desmos.com/calculator/aq6hdzxprv
 *
 * @param bias
 * @param sigma
 * @param t
 */
const gaussian = (bias, sigma, t) => Math.exp(-((t - bias) ** 2) / (2 * sigma * sigma));


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/reduce.js":
/*!****************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/reduce.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reduce": () => (/* binding */ reduce),
/* harmony export */   "reduceRight": () => (/* binding */ reduceRight),
/* harmony export */   "reducer": () => (/* binding */ reducer),
/* harmony export */   "$$reduce": () => (/* binding */ $$reduce)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/implements-function.js");
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-arraylike.js");
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _thi_ng_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/errors */ "./node_modules/@thi.ng/errors/illegal-arity.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reduced */ "./node_modules/@thi.ng/transducers/reduced.js");



const parseArgs = (args) => args.length === 2
    ? [undefined, args[1]]
    : args.length === 3
        ? [args[1], args[2]]
        : (0,_thi_ng_errors__WEBPACK_IMPORTED_MODULE_0__.illegalArity)(args.length);
function reduce(...args) {
    const rfn = args[0];
    const init = rfn[0];
    const complete = rfn[1];
    const reduce = rfn[2];
    args = parseArgs(args);
    const acc = args[0] == null ? init() : args[0];
    const xs = args[1];
    return (0,_reduced__WEBPACK_IMPORTED_MODULE_1__.unreduced)(complete((0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_2__.implementsFunction)(xs, "$reduce")
        ? xs.$reduce(reduce, acc)
        : (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_3__.isArrayLike)(xs)
            ? reduceArray(reduce, acc, xs)
            : reduceIterable(reduce, acc, xs)));
}
function reduceRight(...args) {
    const rfn = args[0];
    const init = rfn[0];
    const complete = rfn[1];
    const reduce = rfn[2];
    args = parseArgs(args);
    let acc = args[0] == null ? init() : args[0];
    const xs = args[1];
    for (let i = xs.length; --i >= 0;) {
        acc = reduce(acc, xs[i]);
        if ((0,_reduced__WEBPACK_IMPORTED_MODULE_1__.isReduced)(acc)) {
            acc = acc.deref();
            break;
        }
    }
    return (0,_reduced__WEBPACK_IMPORTED_MODULE_1__.unreduced)(complete(acc));
}
const reduceArray = (rfn, acc, xs) => {
    for (let i = 0, n = xs.length; i < n; i++) {
        acc = rfn(acc, xs[i]);
        if ((0,_reduced__WEBPACK_IMPORTED_MODULE_1__.isReduced)(acc)) {
            acc = acc.deref();
            break;
        }
    }
    return acc;
};
const reduceIterable = (rfn, acc, xs) => {
    for (let x of xs) {
        acc = rfn(acc, x);
        if ((0,_reduced__WEBPACK_IMPORTED_MODULE_1__.isReduced)(acc)) {
            acc = acc.deref();
            break;
        }
    }
    return acc;
};
/**
 * Convenience helper for building a full {@link Reducer} using the identity
 * function (i.e. `(x) => x`) as completion step (true for 90% of all
 * bundled transducers).
 *
 * @param init - init step of reducer
 * @param rfn - reduction step of reducer
 */
const reducer = (init, rfn) => [init, (acc) => acc, rfn];
const $$reduce = (rfn, args) => {
    const n = args.length - 1;
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_4__.isIterable)(args[n])
        ? args.length > 1
            ? reduce(rfn.apply(null, args.slice(0, n)), args[n])
            : reduce(rfn(), args[0])
        : undefined;
};


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/reduced.js":
/*!*****************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/reduced.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Reduced": () => (/* binding */ Reduced),
/* harmony export */   "reduced": () => (/* binding */ reduced),
/* harmony export */   "isReduced": () => (/* binding */ isReduced),
/* harmony export */   "ensureReduced": () => (/* binding */ ensureReduced),
/* harmony export */   "unreduced": () => (/* binding */ unreduced)
/* harmony export */ });
class Reduced {
    constructor(val) {
        this.value = val;
    }
    deref() {
        return this.value;
    }
}
const reduced = (x) => new Reduced(x);
const isReduced = (x) => x instanceof Reduced;
const ensureReduced = (x) => x instanceof Reduced ? x : new Reduced(x);
const unreduced = (x) => (x instanceof Reduced ? x.deref() : x);


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/add.js":
/*!*****************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/add.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "add": () => (/* binding */ add)
/* harmony export */ });
/* harmony import */ var _internal_mathop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/mathop */ "./node_modules/@thi.ng/transducers/internal/mathop.js");

function add(...args) {
    return (0,_internal_mathop__WEBPACK_IMPORTED_MODULE_0__.__mathop)(add, (acc, x) => acc + x, 0, args);
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/assoc-map.js":
/*!***********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/assoc-map.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assocMap": () => (/* binding */ assocMap)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");

function assocMap(xs) {
    return xs
        ? (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reduce)(assocMap(), xs)
        : (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reducer)(() => new Map(), (acc, [k, v]) => acc.set(k, v));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/assoc-obj.js":
/*!***********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/assoc-obj.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assocObj": () => (/* binding */ assocObj)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");

function assocObj(xs) {
    return xs
        ? (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reduce)(assocObj(), xs)
        : (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reducer)(() => ({}), (acc, [k, v]) => ((acc[k] = v), acc));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/auto-obj.js":
/*!**********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/auto-obj.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "autoObj": () => (/* binding */ autoObj)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");

function autoObj(prefix, xs) {
    let id = 0;
    return xs
        ? (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reduce)(autoObj(prefix), xs)
        : (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reducer)(() => ({}), (acc, v) => ((acc[prefix + id++] = v), acc));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/conj.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/conj.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conj": () => (/* binding */ conj)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");

function conj(xs) {
    return xs
        ? (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reduce)(conj(), xs)
        : (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reducer)(() => new Set(), (acc, x) => acc.add(x));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/count.js":
/*!*******************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/count.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "count": () => (/* binding */ count)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");

function count(...args) {
    const res = (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.$$reduce)(count, args);
    if (res !== undefined) {
        return res;
    }
    let offset = args[0] || 0;
    let step = args[1] || 1;
    return (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reducer)(() => offset, (acc, _) => acc + step);
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/div.js":
/*!*****************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/div.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "div": () => (/* binding */ div)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");

function div(init, xs) {
    return xs
        ? (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reduce)(div(init), xs)
        : (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reducer)(() => init, (acc, x) => acc / x);
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/every.js":
/*!*******************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/every.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "every": () => (/* binding */ every)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reduced */ "./node_modules/@thi.ng/transducers/reduced.js");


function every(...args) {
    const res = (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.$$reduce)(every, args);
    if (res !== undefined) {
        return res;
    }
    const pred = args[0];
    return (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reducer)(() => true, pred
        ? (acc, x) => (pred(x) ? acc : (0,_reduced__WEBPACK_IMPORTED_MODULE_1__.reduced)(false))
        : (acc, x) => (x ? acc : (0,_reduced__WEBPACK_IMPORTED_MODULE_1__.reduced)(false)));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/fill.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/fill.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fill": () => (/* binding */ fill),
/* harmony export */   "fillN": () => (/* binding */ fillN)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");

function fill(...args) {
    const res = (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.$$reduce)(fill, args);
    if (res !== undefined) {
        return res;
    }
    let start = args[0] || 0;
    return (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reducer)(() => [], (acc, x) => ((acc[start++] = x), acc));
}
function fillN(...args) {
    return fill(...args);
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/frequencies.js":
/*!*************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/frequencies.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "frequencies": () => (/* binding */ frequencies)
/* harmony export */ });
/* harmony import */ var _thi_ng_compose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/compose */ "./node_modules/@thi.ng/compose/identity.js");
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");
/* harmony import */ var _count__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./count */ "./node_modules/@thi.ng/transducers/rfn/count.js");
/* harmony import */ var _group_by_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./group-by-map */ "./node_modules/@thi.ng/transducers/rfn/group-by-map.js");




function frequencies(...args) {
    return ((0,_reduce__WEBPACK_IMPORTED_MODULE_0__.$$reduce)(frequencies, args) ||
        (0,_group_by_map__WEBPACK_IMPORTED_MODULE_1__.groupByMap)({ key: args[0] || _thi_ng_compose__WEBPACK_IMPORTED_MODULE_2__.identity, group: (0,_count__WEBPACK_IMPORTED_MODULE_3__.count)() }));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/group-binary.js":
/*!**************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/group-binary.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "groupBinary": () => (/* binding */ groupBinary)
/* harmony export */ });
/* harmony import */ var _group_by_obj__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./group-by-obj */ "./node_modules/@thi.ng/transducers/rfn/group-by-obj.js");
/* harmony import */ var _push__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./push */ "./node_modules/@thi.ng/transducers/rfn/push.js");


const branchPred = (key, b, l, r) => (x) => (key(x) & b ? r : l);
/**
 * Creates a bottom-up, unbalanced binary tree of desired depth and
 * choice of data structures. Any value can be indexed, as long as a
 * numeric representation (key) can be obtained. This numeric key is
 * produced by the supplied `key` function. IMPORTANT: the returned
 * values MUST be unsigned and less than the provided bit length (i.e.
 * `0 .. (2^bits) - 1` range).
 *
 * By default the tree is constructed using plain objects for branches,
 * with left branches stored as "l" and right ones as "r". The original
 * values are stored at the lowest tree level using a customizable
 * nested reducer. By default leaves are collected in arrays (using the
 * {@link (push:1)} reducer), but any suitable reducer can be used (e.g.
 * {@link (conj:1)} to collect values into sets).
 *
 * Index by lowest 4-bits of ID value:
 *
 * @example
 * ```ts
 * tree = reduce(
 *   groupBinary(4, x => x.id & 0xf),
 *   [{id: 3}, {id: 8}, {id: 15}, {id: 0}]
 * )
 *
 * tree.l.l.l.l
 * // [ { id: 0 } ]
 * tree.r.r.r.r
 * // [ { id: 15 } ]
 * tree.l.l.r.r
 * // [ { id: 3 } ]
 * ```
 *
 * Collecting as array:
 *
 * @example
 * ```ts
 * tree = reduce(
 *   groupBinary(4, identity, ()=>[], push(), 0, 1),
 *   [1,2,3,4,5,6,7]
 * )
 *
 * tree[0][1][0][1] // 0101 == 5 in binary
 * // [ 5 ]
 *
 * tree[0][1][1]    // 011* == branch
 * // [ [ 6 ], [ 7 ] ]
 * ```
 *
 * Using {@link (frequencies:1)} as leaf reducer:
 *
 * @example
 * ```ts
 * tree = reduce(
 *   groupBinary(3, (x: string) => x.length, null, frequencies()),
 *   "aa bbb dddd ccccc bbb eeee fff".split(" ")
 * )
 * // [ [ undefined,
 * //     [ Map { 'aa' => 1 },
 * //       Map { 'bbb' => 2, 'fff' => 1 } ] ],
 * //   [ [ Map { 'dddd' => 1, 'eeee' => 1 },
 * //       Map { 'ccccc' => 1 } ] ] ]
 *
 * tree[0][1][1]
 * // Map { 'bbb' => 2, 'fff' => 1 }
 * ```
 *
 * @param bits - index range (always from 0)
 * @param key - key function
 * @param branch - function to create a new branch container (object or
 * array)
 * @param leaf - reducer for leaf collection
 * @param left - key for storing left branches (e.g. `0` for arrays)
 * @param right - key for storing right branches (e.g. `1` for arrays)
 */
const groupBinary = (bits, key, branch, leaf, left = "l", right = "r") => {
    const init = branch || (() => ({}));
    let rfn = (0,_group_by_obj__WEBPACK_IMPORTED_MODULE_0__.groupByObj)({
        key: branchPred(key, 1, left, right),
        group: leaf || (0,_push__WEBPACK_IMPORTED_MODULE_1__.push)(),
    });
    for (let i = 2, maxIndex = 1 << bits; i < maxIndex; i <<= 1) {
        rfn = (0,_group_by_obj__WEBPACK_IMPORTED_MODULE_0__.groupByObj)({
            key: branchPred(key, i, left, right),
            group: [init, rfn[1], rfn[2]],
        });
    }
    return [init, rfn[1], rfn[2]];
};


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/group-by-map.js":
/*!**************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/group-by-map.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "groupByMap": () => (/* binding */ groupByMap)
/* harmony export */ });
/* harmony import */ var _internal_group_opts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/group-opts */ "./node_modules/@thi.ng/transducers/internal/group-opts.js");
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");


function groupByMap(...args) {
    const res = (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.$$reduce)(groupByMap, args);
    if (res !== undefined) {
        return res;
    }
    const opts = (0,_internal_group_opts__WEBPACK_IMPORTED_MODULE_1__.__groupByOpts)(args[0]);
    const [init, complete, reduce] = opts.group;
    return [
        () => new Map(),
        (acc) => {
            for (let k of acc.keys()) {
                acc.set(k, complete(acc.get(k)));
            }
            return acc;
        },
        (acc, x) => {
            const k = opts.key(x);
            return acc.set(k, acc.has(k)
                ? reduce(acc.get(k), x)
                : reduce(init(), x));
        },
    ];
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/group-by-obj.js":
/*!**************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/group-by-obj.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "groupByObj": () => (/* binding */ groupByObj)
/* harmony export */ });
/* harmony import */ var _internal_group_opts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/group-opts */ "./node_modules/@thi.ng/transducers/internal/group-opts.js");
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");


function groupByObj(...args) {
    const res = (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.$$reduce)(groupByObj, args);
    if (res) {
        return res;
    }
    const opts = (0,_internal_group_opts__WEBPACK_IMPORTED_MODULE_1__.__groupByOpts)(args[0]);
    const [_init, complete, _reduce] = opts.group;
    return [
        () => ({}),
        (acc) => {
            for (let k in acc) {
                acc[k] = complete(acc[k]);
            }
            return acc;
        },
        (acc, x) => {
            const k = opts.key(x);
            acc[k] = acc[k]
                ? _reduce(acc[k], x)
                : _reduce(_init(), x);
            return acc;
        },
    ];
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/last.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/last.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "last": () => (/* binding */ last)
/* harmony export */ });
/* harmony import */ var _thi_ng_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/api */ "./node_modules/@thi.ng/api/constants.js");
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");


function last(xs) {
    return xs ? (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reduce)(last(), xs) : (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reducer)(_thi_ng_api__WEBPACK_IMPORTED_MODULE_1__.NO_OP, (_, x) => x);
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/max-compare.js":
/*!*************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/max-compare.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxCompare": () => (/* binding */ maxCompare)
/* harmony export */ });
/* harmony import */ var _thi_ng_compare__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/compare */ "./node_modules/@thi.ng/compare/compare.js");
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");


function maxCompare(...args) {
    const res = (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.$$reduce)(maxCompare, args);
    if (res !== undefined) {
        return res;
    }
    const init = args[0];
    const cmp = args[1] || _thi_ng_compare__WEBPACK_IMPORTED_MODULE_1__.compare;
    return (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reducer)(init, (acc, x) => (cmp(acc, x) >= 0 ? acc : x));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/max-mag.js":
/*!*********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/max-mag.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maxMag": () => (/* binding */ maxMag)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");

function maxMag(xs) {
    return xs
        ? (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reduce)(maxMag(), xs)
        : (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reducer)(() => 0, (acc, x) => (Math.abs(x) > Math.abs(acc) ? x : acc));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/max.js":
/*!*****************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/max.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "max": () => (/* binding */ max)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");

function max(xs) {
    return xs
        ? (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reduce)(max(), xs)
        : (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reducer)(() => -Infinity, (acc, x) => Math.max(acc, x));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/mean.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/mean.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mean": () => (/* binding */ mean)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");

function mean(xs) {
    let n = 1;
    return xs
        ? (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reduce)(mean(), xs)
        : [
            () => (n = 0),
            (acc) => (n > 1 ? acc / n : acc),
            (acc, x) => (n++, acc + x),
        ];
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/min-compare.js":
/*!*************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/min-compare.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "minCompare": () => (/* binding */ minCompare)
/* harmony export */ });
/* harmony import */ var _thi_ng_compare__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/compare */ "./node_modules/@thi.ng/compare/compare.js");
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");


function minCompare(...args) {
    const res = (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.$$reduce)(minCompare, args);
    if (res !== undefined) {
        return res;
    }
    const init = args[0];
    const cmp = args[1] || _thi_ng_compare__WEBPACK_IMPORTED_MODULE_1__.compare;
    return (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reducer)(init, (acc, x) => (cmp(acc, x) <= 0 ? acc : x));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/min-mag.js":
/*!*********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/min-mag.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "minMag": () => (/* binding */ minMag)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");

function minMag(xs) {
    return xs
        ? (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reduce)(minMag(), xs)
        : (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reducer)(() => Infinity, (acc, x) => (Math.abs(x) < Math.abs(acc) ? x : acc));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/min-max.js":
/*!*********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/min-max.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "minMax": () => (/* binding */ minMax)
/* harmony export */ });
/* harmony import */ var _func_juxtr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../func/juxtr */ "./node_modules/@thi.ng/transducers/func/juxtr.js");
/* harmony import */ var _max__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./max */ "./node_modules/@thi.ng/transducers/rfn/max.js");
/* harmony import */ var _min__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./min */ "./node_modules/@thi.ng/transducers/rfn/min.js");



/**
 * Returns a reducer which computes both the min and max values of given inputs.
 * If the input source is empty the final result will be `[-∞,∞]`.
 */
const minMax = () => (0,_func_juxtr__WEBPACK_IMPORTED_MODULE_0__.juxtR)((0,_min__WEBPACK_IMPORTED_MODULE_1__.min)(), (0,_max__WEBPACK_IMPORTED_MODULE_2__.max)());


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/min.js":
/*!*****************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/min.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "min": () => (/* binding */ min)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");

function min(xs) {
    return xs
        ? (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reduce)(min(), xs)
        : (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reducer)(() => Infinity, (acc, x) => Math.min(acc, x));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/mul.js":
/*!*****************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/mul.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mul": () => (/* binding */ mul)
/* harmony export */ });
/* harmony import */ var _internal_mathop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/mathop */ "./node_modules/@thi.ng/transducers/internal/mathop.js");

function mul(...args) {
    return (0,_internal_mathop__WEBPACK_IMPORTED_MODULE_0__.__mathop)(mul, (acc, x) => acc * x, 1, args);
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/norm-count.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/norm-count.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "normCount": () => (/* binding */ normCount)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");

function normCount(...args) {
    const res = (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.$$reduce)(normCount, args);
    if (res !== undefined) {
        return res;
    }
    const norm = args[0];
    return [() => 0, (acc) => acc / norm, (acc) => acc + 1];
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/norm-frequencies-auto.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/norm-frequencies-auto.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "normFrequenciesAuto": () => (/* binding */ normFrequenciesAuto)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");
/* harmony import */ var _frequencies__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./frequencies */ "./node_modules/@thi.ng/transducers/rfn/frequencies.js");


function normFrequenciesAuto(...args) {
    const res = (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.$$reduce)(normFrequenciesAuto, args);
    if (res !== undefined) {
        return res;
    }
    const [init, complete, reduce] = (0,_frequencies__WEBPACK_IMPORTED_MODULE_1__.frequencies)(...args);
    let norm = 0;
    return [
        init,
        (acc) => {
            acc = complete(acc);
            for (let p of acc) {
                acc.set(p[0], p[1] / norm);
            }
            return acc;
        },
        (acc, x) => (norm++, reduce(acc, x)),
    ];
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/norm-frequencies.js":
/*!******************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/norm-frequencies.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "normFrequencies": () => (/* binding */ normFrequencies)
/* harmony export */ });
/* harmony import */ var _thi_ng_compose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/compose */ "./node_modules/@thi.ng/compose/identity.js");
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");
/* harmony import */ var _group_by_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./group-by-map */ "./node_modules/@thi.ng/transducers/rfn/group-by-map.js");
/* harmony import */ var _norm_count__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./norm-count */ "./node_modules/@thi.ng/transducers/rfn/norm-count.js");




function normFrequencies(...args) {
    return ((0,_reduce__WEBPACK_IMPORTED_MODULE_0__.$$reduce)(normFrequencies, args) ||
        (0,_group_by_map__WEBPACK_IMPORTED_MODULE_1__.groupByMap)({
            key: args[1] || _thi_ng_compose__WEBPACK_IMPORTED_MODULE_2__.identity,
            group: (0,_norm_count__WEBPACK_IMPORTED_MODULE_3__.normCount)(args[0]),
        }));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/push-copy.js":
/*!***********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/push-copy.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pushCopy": () => (/* binding */ pushCopy)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");

const pushCopy = () => (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reducer)(() => [], (acc, x) => ((acc = acc.slice()).push(x), acc));


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/push-sort.js":
/*!***********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/push-sort.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pushSort": () => (/* binding */ pushSort)
/* harmony export */ });
/* harmony import */ var _thi_ng_compare__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/compare */ "./node_modules/@thi.ng/compare/compare.js");

function pushSort(cmp = _thi_ng_compare__WEBPACK_IMPORTED_MODULE_0__.compare, xs) {
    return xs
        ? [...xs].sort(cmp)
        : [
            () => [],
            (acc) => acc.sort(cmp),
            (acc, x) => (acc.push(x), acc),
        ];
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/push.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/push.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "push": () => (/* binding */ push)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");

function push(xs) {
    return xs
        ? [...xs]
        : (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reducer)(() => [], (acc, x) => (acc.push(x), acc));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/reductions.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/reductions.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reductions": () => (/* binding */ reductions)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reduced */ "./node_modules/@thi.ng/transducers/reduced.js");


function reductions(rfn, xs) {
    const [init, complete, _reduce] = rfn;
    return xs
        ? (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reduce)(reductions(rfn), xs)
        : [
            () => [init()],
            (acc) => ((acc[acc.length - 1] = complete(acc[acc.length - 1])), acc),
            (acc, x) => {
                const res = _reduce(acc[acc.length - 1], x);
                if ((0,_reduced__WEBPACK_IMPORTED_MODULE_1__.isReduced)(res)) {
                    acc.push(res.deref());
                    return (0,_reduced__WEBPACK_IMPORTED_MODULE_1__.reduced)(acc);
                }
                acc.push(res);
                return acc;
            },
        ];
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/some.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/some.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "some": () => (/* binding */ some)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reduced */ "./node_modules/@thi.ng/transducers/reduced.js");


function some(...args) {
    const res = (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.$$reduce)(some, args);
    if (res !== undefined) {
        return res;
    }
    const pred = args[0];
    return (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reducer)(() => false, pred
        ? (acc, x) => (pred(x) ? (0,_reduced__WEBPACK_IMPORTED_MODULE_1__.reduced)(true) : acc)
        : (acc, x) => (x ? (0,_reduced__WEBPACK_IMPORTED_MODULE_1__.reduced)(true) : acc));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/str.js":
/*!*****************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/str.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "str": () => (/* binding */ str)
/* harmony export */ });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../reduce */ "./node_modules/@thi.ng/transducers/reduce.js");

function str(sep, xs) {
    sep = sep || "";
    let first = true;
    return xs
        ? [...xs].join(sep)
        : (0,_reduce__WEBPACK_IMPORTED_MODULE_0__.reducer)(() => "", (acc, x) => ((acc = first ? acc + x : acc + sep + x), (first = false), acc));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/rfn/sub.js":
/*!*****************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/rfn/sub.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sub": () => (/* binding */ sub)
/* harmony export */ });
/* harmony import */ var _internal_mathop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/mathop */ "./node_modules/@thi.ng/transducers/internal/mathop.js");

function sub(...args) {
    return (0,_internal_mathop__WEBPACK_IMPORTED_MODULE_0__.__mathop)(sub, (acc, x) => acc - x, 0, args);
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/run.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/run.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "run": () => (/* binding */ run)
/* harmony export */ });
/* harmony import */ var _thi_ng_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/api */ "./node_modules/@thi.ng/api/constants.js");
/* harmony import */ var _transduce__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transduce */ "./node_modules/@thi.ng/transducers/transduce.js");


const NO_OP_REDUCER = [_thi_ng_api__WEBPACK_IMPORTED_MODULE_0__.NO_OP, _thi_ng_api__WEBPACK_IMPORTED_MODULE_0__.NO_OP, _thi_ng_api__WEBPACK_IMPORTED_MODULE_0__.NO_OP];
function run(tx, ...args) {
    if (args.length === 1) {
        (0,_transduce__WEBPACK_IMPORTED_MODULE_1__.transduce)(tx, NO_OP_REDUCER, args[0]);
    }
    else {
        const fx = args[0];
        (0,_transduce__WEBPACK_IMPORTED_MODULE_1__.transduce)(tx, [_thi_ng_api__WEBPACK_IMPORTED_MODULE_0__.NO_OP, _thi_ng_api__WEBPACK_IMPORTED_MODULE_0__.NO_OP, (_, x) => fx(x)], args[1]);
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/step.js":
/*!**************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/step.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "step": () => (/* binding */ step)
/* harmony export */ });
/* harmony import */ var _internal_ensure__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/ensure */ "./node_modules/@thi.ng/transducers/internal/ensure.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./reduced */ "./node_modules/@thi.ng/transducers/reduced.js");
/* harmony import */ var _rfn_push__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rfn/push */ "./node_modules/@thi.ng/transducers/rfn/push.js");



/**
 * Single-step transducer execution wrapper.
 * Returns array if transducer produces multiple results
 * and undefined if there was no output. Else returns single
 * result value.
 *
 * @remarks
 * Likewise, once a transducer has produced a final / reduced
 * value, all further invocations of the stepper function will
 * return undefined.
 *
 * @example
 * ```ts
 * // single result
 * step(map(x => x * 10))(1);
 * // 10
 *
 * // multiple results
 * step(mapcat(x => [x, x + 1, x + 2]))(1)
 * // [ 1, 2, 3 ]
 *
 * // no result
 * f = step(filter((x) => !(x & 1)))
 * f(1); // undefined
 * f(2); // 2
 *
 * // reduced value termination
 * f = step(take(2));
 * f(1); // 1
 * f(1); // 1
 * f(1); // undefined
 * f(1); // undefined
 * ```
 *
 * @param tx -
 */
const step = (tx) => {
    const { 1: complete, 2: reduce } = (0,_internal_ensure__WEBPACK_IMPORTED_MODULE_0__.ensureTransducer)(tx)((0,_rfn_push__WEBPACK_IMPORTED_MODULE_1__.push)());
    let done = false;
    return (x) => {
        if (!done) {
            let acc = reduce([], x);
            done = (0,_reduced__WEBPACK_IMPORTED_MODULE_2__.isReduced)(acc);
            if (done) {
                acc = complete(acc.deref());
            }
            return acc.length === 1 ? acc[0] : acc.length > 0 ? acc : undefined;
        }
    };
};


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/transduce.js":
/*!*******************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/transduce.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "transduce": () => (/* binding */ transduce),
/* harmony export */   "transduceRight": () => (/* binding */ transduceRight)
/* harmony export */ });
/* harmony import */ var _thi_ng_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/errors */ "./node_modules/@thi.ng/errors/illegal-arity.js");
/* harmony import */ var _internal_ensure__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/ensure */ "./node_modules/@thi.ng/transducers/internal/ensure.js");
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reduce */ "./node_modules/@thi.ng/transducers/reduce.js");
/* harmony import */ var _xform_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xform/map */ "./node_modules/@thi.ng/transducers/xform/map.js");




function transduce(...args) {
    return $transduce(transduce, _reduce__WEBPACK_IMPORTED_MODULE_0__.reduce, args);
}
function transduceRight(...args) {
    return $transduce(transduceRight, _reduce__WEBPACK_IMPORTED_MODULE_0__.reduceRight, args);
}
const $transduce = (tfn, rfn, args) => {
    let acc, xs;
    switch (args.length) {
        case 4:
            xs = args[3];
            acc = args[2];
            break;
        case 3:
            xs = args[2];
            break;
        case 2:
            return (0,_xform_map__WEBPACK_IMPORTED_MODULE_1__.map)((x) => tfn(args[0], args[1], x));
        default:
            (0,_thi_ng_errors__WEBPACK_IMPORTED_MODULE_2__.illegalArity)(args.length);
    }
    return rfn((0,_internal_ensure__WEBPACK_IMPORTED_MODULE_3__.ensureTransducer)(args[0])(args[1]), acc, xs);
};


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/benchmark.js":
/*!*************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/benchmark.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "benchmark": () => (/* binding */ benchmark)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");



function benchmark(src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator1)(benchmark(), src)
        : (rfn) => {
            const r = rfn[2];
            let prev = Date.now();
            return (0,_func_compr__WEBPACK_IMPORTED_MODULE_2__.compR)(rfn, (acc, _) => {
                const t = Date.now();
                const x = t - prev;
                prev = t;
                return r(acc, x);
            });
        };
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/cat.js":
/*!*******************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/cat.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cat": () => (/* binding */ cat)
/* harmony export */ });
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reduced */ "./node_modules/@thi.ng/transducers/reduced.js");


/**
 * Transducer to concatenate iterable values. Iterates over each input
 * and emits individual values down stream, therefore removing one level
 * of nesting from the input.
 *
 * @remarks
 * If, during processing, the transducer is given a wrapped reduced
 * input iterable, it will still be processed as normal, but then
 * immediately triggers early termination by wrapping its own result in
 * {@link reduced}. E.g. this behavior allows a {@link (mapcat:1)} user
 * functions to benefit from reduced results.
 *
 * Also see:
 * - {@link concat}
 * - {@link (mapcat:1)}
 *
 * @example
 * ```ts
 * [...iterator(comp(map((x) => [x, x]), cat()), [1, 2, 3, 4])]
 * // [ 1, 1, 2, 2, 3, 3, 4, 4 ]
 *
 * [...iterator(
 *   comp(
 *     mapIndexed((i, x) => [[i], [x, x]]),
 *     cat(),
 *     cat()
 *   ),
 *   "abc"
 * )]
 * // [ 0, 'a', 'a', 1, 'b', 'b', 2, 'c', 'c' ]
 *
 * [...mapcat((x)=>(x > 1 ? reduced([x, x]) : [x, x]), [1, 2, 3, 4])]
 * // [ 1, 1, 2, 2 ]
 * ```
 *
 * @param rfn -
 */
const cat = () => (rfn) => {
    const r = rfn[2];
    return (0,_func_compr__WEBPACK_IMPORTED_MODULE_0__.compR)(rfn, (acc, x) => {
        if (x) {
            for (let y of (0,_reduced__WEBPACK_IMPORTED_MODULE_1__.unreduced)(x)) {
                acc = r(acc, y);
                if ((0,_reduced__WEBPACK_IMPORTED_MODULE_1__.isReduced)(acc)) {
                    break;
                }
            }
        }
        return (0,_reduced__WEBPACK_IMPORTED_MODULE_1__.isReduced)(x) ? (0,_reduced__WEBPACK_IMPORTED_MODULE_1__.ensureReduced)(acc) : acc;
    });
};


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/converge.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/converge.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "converge": () => (/* binding */ converge)
/* harmony export */ });
/* harmony import */ var _thi_ng_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/api */ "./node_modules/@thi.ng/api/constants.js");
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../reduced */ "./node_modules/@thi.ng/transducers/reduced.js");




function converge(...args) {
    return ((0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(converge, args) ||
        ((rfn) => {
            const r = rfn[2];
            const pred = args[0];
            let prev = _thi_ng_api__WEBPACK_IMPORTED_MODULE_1__.SEMAPHORE;
            let done = false;
            return (0,_func_compr__WEBPACK_IMPORTED_MODULE_2__.compR)(rfn, (acc, x) => {
                if (done || (prev !== _thi_ng_api__WEBPACK_IMPORTED_MODULE_1__.SEMAPHORE && pred(prev, x))) {
                    done = true;
                    return (0,_reduced__WEBPACK_IMPORTED_MODULE_3__.ensureReduced)(r(acc, x));
                }
                prev = x;
                return r(acc, x);
            });
        }));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/convolve.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/convolve.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "buildKernel1d": () => (/* binding */ buildKernel1d),
/* harmony export */   "buildKernel2d": () => (/* binding */ buildKernel2d),
/* harmony export */   "convolve1d": () => (/* binding */ convolve1d),
/* harmony export */   "convolve2d": () => (/* binding */ convolve2d)
/* harmony export */ });
/* harmony import */ var _thi_ng_errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @thi.ng/errors */ "./node_modules/@thi.ng/errors/illegal-arguments.js");
/* harmony import */ var _iter_range__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iter/range */ "./node_modules/@thi.ng/transducers/iter/range.js");
/* harmony import */ var _iter_range2d__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../iter/range2d */ "./node_modules/@thi.ng/transducers/iter/range2d.js");
/* harmony import */ var _iter_zip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iter/zip */ "./node_modules/@thi.ng/transducers/iter/zip.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _rfn_add__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../rfn/add */ "./node_modules/@thi.ng/transducers/rfn/add.js");
/* harmony import */ var _transduce__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../transduce */ "./node_modules/@thi.ng/transducers/transduce.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./map */ "./node_modules/@thi.ng/transducers/xform/map.js");








const buildKernel1d = (weights, w) => {
    const w2 = w >> 1;
    return [...(0,_iter_zip__WEBPACK_IMPORTED_MODULE_0__.zip)(weights, (0,_iter_range__WEBPACK_IMPORTED_MODULE_1__.range)(-w2, w2 + 1))];
};
const buildKernel2d = (weights, w, h = w) => {
    const w2 = w >> 1;
    const h2 = h >> 1;
    return [...(0,_iter_zip__WEBPACK_IMPORTED_MODULE_0__.zip)(weights, (0,_iter_range2d__WEBPACK_IMPORTED_MODULE_2__.range2d)(-w2, w2 + 1, -h2, h2 + 1))];
};
const kernelLookup1d = (src, x, width, wrap, border) => wrap
    ? ({ 0: w, 1: ox }) => {
        const xx = x < -ox ? width + ox : x >= width - ox ? ox - 1 : x + ox;
        return w * src[xx];
    }
    : ({ 0: w, 1: ox }) => {
        return x < -ox || x >= width - ox ? border : w * src[x + ox];
    };
const kernelLookup2d = (src, x, y, width, height, wrap, border) => wrap
    ? ({ 0: w, 1: { 0: ox, 1: oy } }) => {
        const xx = x < -ox ? width + ox : x >= width - ox ? ox - 1 : x + ox;
        const yy = y < -oy ? height + oy : y >= height - oy ? oy - 1 : y + oy;
        return w * src[yy * width + xx];
    }
    : ({ 0: w, 1: { 0: ox, 1: oy } }) => {
        return x < -ox || y < -oy || x >= width - ox || y >= height - oy
            ? border
            : w * src[(y + oy) * width + x + ox];
    };
const kernelError = () => (0,_thi_ng_errors__WEBPACK_IMPORTED_MODULE_3__.illegalArgs)(`no kernel or kernel config`);
function convolve1d(opts, indices) {
    if (indices) {
        return (0,_iterator__WEBPACK_IMPORTED_MODULE_4__.iterator1)(convolve1d(opts), indices);
    }
    const { src, width } = opts;
    const wrap = opts.wrap !== false;
    const border = opts.border || 0;
    const rfn = opts.reduce || _rfn_add__WEBPACK_IMPORTED_MODULE_5__.add;
    let kernel = opts.kernel;
    if (!kernel) {
        !(opts.weights && opts.kwidth) && kernelError();
        kernel = buildKernel1d(opts.weights, opts.kwidth);
    }
    return (0,_map__WEBPACK_IMPORTED_MODULE_6__.map)((p) => (0,_transduce__WEBPACK_IMPORTED_MODULE_7__.transduce)((0,_map__WEBPACK_IMPORTED_MODULE_6__.map)(kernelLookup1d(src, p, width, wrap, border)), rfn(), kernel));
}
function convolve2d(opts, indices) {
    if (indices) {
        return (0,_iterator__WEBPACK_IMPORTED_MODULE_4__.iterator1)(convolve2d(opts), indices);
    }
    const { src, width, height } = opts;
    const wrap = opts.wrap !== false;
    const border = opts.border || 0;
    const rfn = opts.reduce || _rfn_add__WEBPACK_IMPORTED_MODULE_5__.add;
    let kernel = opts.kernel;
    if (!kernel) {
        !(opts.weights && opts.kwidth && opts.kheight) && kernelError();
        kernel = buildKernel2d(opts.weights, opts.kwidth, opts.kheight);
    }
    return (0,_map__WEBPACK_IMPORTED_MODULE_6__.map)((p) => (0,_transduce__WEBPACK_IMPORTED_MODULE_7__.transduce)((0,_map__WEBPACK_IMPORTED_MODULE_6__.map)(kernelLookup2d(src, p[0], p[1], width, height, wrap, border)), rfn(), kernel));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/dedupe.js":
/*!**********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/dedupe.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dedupe": () => (/* binding */ dedupe)
/* harmony export */ });
/* harmony import */ var _thi_ng_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/api */ "./node_modules/@thi.ng/api/constants.js");
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");



function dedupe(...args) {
    return ((0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(dedupe, args) ||
        ((rfn) => {
            const r = rfn[2];
            const equiv = args[0];
            let prev = _thi_ng_api__WEBPACK_IMPORTED_MODULE_1__.SEMAPHORE;
            return (0,_func_compr__WEBPACK_IMPORTED_MODULE_2__.compR)(rfn, equiv
                ? (acc, x) => {
                    acc =
                        prev !== _thi_ng_api__WEBPACK_IMPORTED_MODULE_1__.SEMAPHORE && equiv(prev, x)
                            ? acc
                            : r(acc, x);
                    prev = x;
                    return acc;
                }
                : (acc, x) => {
                    acc = prev === x ? acc : r(acc, x);
                    prev = x;
                    return acc;
                });
        }));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/delayed.js":
/*!***********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/delayed.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "delayed": () => (/* binding */ delayed)
/* harmony export */ });
/* harmony import */ var _thi_ng_compose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/compose */ "./node_modules/@thi.ng/compose/delayed.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map */ "./node_modules/@thi.ng/transducers/xform/map.js");


/**
 * Yields transducer which wraps incoming values in promises, which each
 * resolve after specified delay time (in ms).
 *
 * @remarks
 * Only to be used in async contexts and NOT with {@link (transduce:1)}
 * directly.
 *
 * @param t -
 */
const delayed = (t) => (0,_map__WEBPACK_IMPORTED_MODULE_0__.map)((x) => (0,_thi_ng_compose__WEBPACK_IMPORTED_MODULE_1__.delayed)(x, t));


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/distinct.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/distinct.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "distinct": () => (/* binding */ distinct)
/* harmony export */ });
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");


function distinct(...args) {
    return ((0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(distinct, args) ||
        ((rfn) => {
            const r = rfn[2];
            const opts = (args[0] || {});
            const key = opts.key;
            const seen = (opts.cache || (() => new Set()))();
            return (0,_func_compr__WEBPACK_IMPORTED_MODULE_1__.compR)(rfn, key
                ? (acc, x) => {
                    const k = key(x);
                    return !seen.has(k) ? (seen.add(k), r(acc, x)) : acc;
                }
                : (acc, x) => !seen.has(x) ? (seen.add(x), r(acc, x)) : acc);
        }));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/drop-nth.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/drop-nth.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dropNth": () => (/* binding */ dropNth)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/transducers/node_modules/@thi.ng/math/interval.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _throttle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./throttle */ "./node_modules/@thi.ng/transducers/xform/throttle.js");




function dropNth(n, src) {
    if ((0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)) {
        return (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator1)(dropNth(n), src);
    }
    n = (0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_2__.clamp0)(n - 1);
    return (0,_throttle__WEBPACK_IMPORTED_MODULE_3__.throttle)(() => {
        let skip = n;
        return () => (skip-- > 0 ? true : ((skip = n), false));
    });
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/drop-while.js":
/*!**************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/drop-while.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dropWhile": () => (/* binding */ dropWhile)
/* harmony export */ });
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");


function dropWhile(...args) {
    return ((0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(dropWhile, args) ||
        ((rfn) => {
            const r = rfn[2];
            const pred = args[0];
            let ok = true;
            return (0,_func_compr__WEBPACK_IMPORTED_MODULE_1__.compR)(rfn, (acc, x) => (ok = ok && pred(x)) ? acc : r(acc, x));
        }));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/drop.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/drop.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "drop": () => (/* binding */ drop)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");



function drop(n, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator1)(drop(n), src)
        : (rfn) => {
            const r = rfn[2];
            let m = n;
            return (0,_func_compr__WEBPACK_IMPORTED_MODULE_2__.compR)(rfn, (acc, x) => m > 0 ? (m--, acc) : r(acc, x));
        };
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/duplicate.js":
/*!*************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/duplicate.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "duplicate": () => (/* binding */ duplicate)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../reduced */ "./node_modules/@thi.ng/transducers/reduced.js");




function duplicate(n = 1, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator)(duplicate(n), src)
        : (rfn) => {
            const r = rfn[2];
            return (0,_func_compr__WEBPACK_IMPORTED_MODULE_2__.compR)(rfn, (acc, x) => {
                for (let i = n; i >= 0 && !(0,_reduced__WEBPACK_IMPORTED_MODULE_3__.isReduced)(acc); i--) {
                    acc = r(acc, x);
                }
                return acc;
            });
        };
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/filter-fuzzy.js":
/*!****************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/filter-fuzzy.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "filterFuzzy": () => (/* binding */ filterFuzzy)
/* harmony export */ });
/* harmony import */ var _thi_ng_arrays__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/arrays */ "./node_modules/@thi.ng/arrays/fuzzy-match.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./filter */ "./node_modules/@thi.ng/transducers/xform/filter.js");



function filterFuzzy(...args) {
    const iter = args.length > 1 && (0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(filterFuzzy, args);
    if (iter) {
        return iter;
    }
    const query = args[0];
    const { key, equiv } = (args[1] || {});
    return (0,_filter__WEBPACK_IMPORTED_MODULE_1__.filter)((x) => (0,_thi_ng_arrays__WEBPACK_IMPORTED_MODULE_2__.fuzzyMatch)(key != null ? key(x) : x, query, equiv));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/filter.js":
/*!**********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/filter.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "filter": () => (/* binding */ filter)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");



function filter(pred, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator1)(filter(pred), src)
        : (rfn) => {
            const r = rfn[2];
            return (0,_func_compr__WEBPACK_IMPORTED_MODULE_2__.compR)(rfn, (acc, x) => (pred(x) ? r(acc, x) : acc));
        };
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/flatten-with.js":
/*!****************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/flatten-with.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "flattenWith": () => (/* binding */ flattenWith)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-string.js");
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../reduced */ "./node_modules/@thi.ng/transducers/reduced.js");




function flattenWith(fn, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator)(flattenWith(fn), (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_2__.isString)(src) ? [src] : src)
        : (rfn) => {
            const reduce = rfn[2];
            const flatten = (acc, x) => {
                const xx = fn(x);
                if (xx) {
                    for (let y of xx) {
                        acc = flatten(acc, y);
                        if ((0,_reduced__WEBPACK_IMPORTED_MODULE_3__.isReduced)(acc)) {
                            break;
                        }
                    }
                    return acc;
                }
                return reduce(acc, x);
            };
            return (0,_func_compr__WEBPACK_IMPORTED_MODULE_4__.compR)(rfn, flatten);
        };
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/flatten.js":
/*!***********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/flatten.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "flatten": () => (/* binding */ flatten)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-not-string-iterable.js");
/* harmony import */ var _flatten_with__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./flatten-with */ "./node_modules/@thi.ng/transducers/xform/flatten-with.js");


function flatten(src) {
    return (0,_flatten_with__WEBPACK_IMPORTED_MODULE_0__.flattenWith)((x) => ((0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__.isNotStringAndIterable)(x) ? x : undefined), src);
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/indexed.js":
/*!***********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/indexed.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "indexed": () => (/* binding */ indexed)
/* harmony export */ });
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _map_indexed__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./map-indexed */ "./node_modules/@thi.ng/transducers/xform/map-indexed.js");


function indexed(...args) {
    const iter = (0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(indexed, args);
    if (iter) {
        return iter;
    }
    const from = args[0] || 0;
    return (0,_map_indexed__WEBPACK_IMPORTED_MODULE_1__.mapIndexed)((i, x) => [from + i, x]);
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/interleave.js":
/*!**************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/interleave.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "interleave": () => (/* binding */ interleave)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../reduced */ "./node_modules/@thi.ng/transducers/reduced.js");




function interleave(sep, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator)(interleave(sep), src)
        : (rfn) => {
            const r = rfn[2];
            const _sep = typeof sep === "function" ? sep : () => sep;
            return (0,_func_compr__WEBPACK_IMPORTED_MODULE_2__.compR)(rfn, (acc, x) => {
                acc = r(acc, _sep());
                return (0,_reduced__WEBPACK_IMPORTED_MODULE_3__.isReduced)(acc) ? acc : r(acc, x);
            });
        };
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/interpolate-hermite.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/interpolate-hermite.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "interpolateHermite": () => (/* binding */ interpolateHermite)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/transducers/node_modules/@thi.ng/math/mix.js");
/* harmony import */ var _interpolate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interpolate */ "./node_modules/@thi.ng/transducers/xform/interpolate.js");


function interpolateHermite(n, src) {
    return (0,_interpolate__WEBPACK_IMPORTED_MODULE_0__.interpolate)((chunk, t) => (0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.mixHermite)(...chunk, t), 4, n, src);
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/interpolate-linear.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/interpolate-linear.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "interpolateLinear": () => (/* binding */ interpolateLinear)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/transducers/node_modules/@thi.ng/math/mix.js");
/* harmony import */ var _interpolate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interpolate */ "./node_modules/@thi.ng/transducers/xform/interpolate.js");


function interpolateLinear(n, src) {
    return (0,_interpolate__WEBPACK_IMPORTED_MODULE_0__.interpolate)((chunk, t) => (0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.mix)(...chunk, t), 2, n, src);
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/interpolate.js":
/*!***************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/interpolate.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "interpolate": () => (/* binding */ interpolate)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _func_comp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../func/comp */ "./node_modules/@thi.ng/transducers/func/comp.js");
/* harmony import */ var _iter_norm_range__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../iter/norm-range */ "./node_modules/@thi.ng/transducers/iter/norm-range.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./map */ "./node_modules/@thi.ng/transducers/xform/map.js");
/* harmony import */ var _mapcat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mapcat */ "./node_modules/@thi.ng/transducers/xform/mapcat.js");
/* harmony import */ var _partition__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./partition */ "./node_modules/@thi.ng/transducers/xform/partition.js");







// prettier-ignore
function interpolate(fn, window, n, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator)(interpolate(fn, window, n), src)
        : (0,_func_comp__WEBPACK_IMPORTED_MODULE_2__.comp)((0,_partition__WEBPACK_IMPORTED_MODULE_3__.partition)(window, 1), (0,_mapcat__WEBPACK_IMPORTED_MODULE_4__.mapcat)((chunk) => (0,_map__WEBPACK_IMPORTED_MODULE_5__.map)((t) => fn(chunk, t), (0,_iter_norm_range__WEBPACK_IMPORTED_MODULE_6__.normRange)(n, false))));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/interpose.js":
/*!*************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/interpose.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "interpose": () => (/* binding */ interpose)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../reduced */ "./node_modules/@thi.ng/transducers/reduced.js");




function interpose(sep, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator)(interpose(sep), src)
        : (rfn) => {
            const r = rfn[2];
            const _sep = typeof sep === "function" ? sep : () => sep;
            let first = true;
            return (0,_func_compr__WEBPACK_IMPORTED_MODULE_2__.compR)(rfn, (acc, x) => {
                if (first) {
                    first = false;
                    return r(acc, x);
                }
                acc = r(acc, _sep());
                return (0,_reduced__WEBPACK_IMPORTED_MODULE_3__.isReduced)(acc) ? acc : r(acc, x);
            });
        };
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/keep.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/keep.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "keep": () => (/* binding */ keep)
/* harmony export */ });
/* harmony import */ var _thi_ng_compose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/compose */ "./node_modules/@thi.ng/compose/identity.js");
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");



function keep(...args) {
    return ((0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(keep, args) ||
        ((rfn) => {
            const r = rfn[2];
            const pred = args[0] || _thi_ng_compose__WEBPACK_IMPORTED_MODULE_1__.identity;
            return (0,_func_compr__WEBPACK_IMPORTED_MODULE_2__.compR)(rfn, (acc, x) => pred(x) != null ? r(acc, x) : acc);
        }));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/labeled.js":
/*!***********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/labeled.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "labeled": () => (/* binding */ labeled)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-function.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./map */ "./node_modules/@thi.ng/transducers/xform/map.js");



function labeled(id, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator1)(labeled(id), src)
        : (0,_map__WEBPACK_IMPORTED_MODULE_2__.map)((0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_3__.isFunction)(id) ? (x) => [id(x), x] : (x) => [id, x]);
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/map-deep.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/map-deep.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mapDeep": () => (/* binding */ mapDeep)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _func_deep_transform__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../func/deep-transform */ "./node_modules/@thi.ng/transducers/func/deep-transform.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./map */ "./node_modules/@thi.ng/transducers/xform/map.js");




function mapDeep(spec, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator1)(mapDeep(spec), src)
        : (0,_map__WEBPACK_IMPORTED_MODULE_2__.map)((0,_func_deep_transform__WEBPACK_IMPORTED_MODULE_3__.deepTransform)(spec));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/map-indexed.js":
/*!***************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/map-indexed.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mapIndexed": () => (/* binding */ mapIndexed)
/* harmony export */ });
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");


function mapIndexed(...args) {
    return ((0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(mapIndexed, args) ||
        ((rfn) => {
            const r = rfn[2];
            const fn = args[0];
            let i = args[1] || 0;
            return (0,_func_compr__WEBPACK_IMPORTED_MODULE_1__.compR)(rfn, (acc, x) => r(acc, fn(i++, x)));
        }));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/map-keys.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/map-keys.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mapKeys": () => (/* binding */ mapKeys)
/* harmony export */ });
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./map */ "./node_modules/@thi.ng/transducers/xform/map.js");


function mapKeys(...args) {
    const iter = (0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(mapKeys, args);
    if (iter) {
        return iter;
    }
    const keys = args[0];
    const copy = args[1] !== false;
    return (0,_map__WEBPACK_IMPORTED_MODULE_1__.map)((x) => {
        const res = copy ? Object.assign({}, x) : x;
        for (let k in keys) {
            res[k] = keys[k](x[k], x);
        }
        return res;
    });
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/map-nth.js":
/*!***********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/map-nth.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mapNth": () => (/* binding */ mapNth)
/* harmony export */ });
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");


function mapNth(...args) {
    const iter = (0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(mapNth, args);
    if (iter) {
        return iter;
    }
    let n = args[0] - 1;
    let offset;
    let fn;
    if (typeof args[1] === "number") {
        offset = args[1];
        fn = args[2];
    }
    else {
        fn = args[1];
        offset = 0;
    }
    return (rfn) => {
        const r = rfn[2];
        let skip = 0, off = offset;
        return (0,_func_compr__WEBPACK_IMPORTED_MODULE_1__.compR)(rfn, (acc, x) => {
            if (off === 0) {
                if (skip === 0) {
                    skip = n;
                    return r(acc, fn(x));
                }
                skip--;
            }
            else {
                off--;
            }
            return r(acc, x);
        });
    };
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/map-vals.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/map-vals.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mapVals": () => (/* binding */ mapVals)
/* harmony export */ });
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./map */ "./node_modules/@thi.ng/transducers/xform/map.js");


function mapVals(...args) {
    const iter = (0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(mapVals, args);
    if (iter) {
        return iter;
    }
    const fn = args[0];
    const copy = args[1] !== false;
    return (0,_map__WEBPACK_IMPORTED_MODULE_1__.map)((x) => {
        const res = copy ? {} : x;
        for (let k in x) {
            res[k] = fn(x[k]);
        }
        return res;
    });
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/map.js":
/*!*******************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/map.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "map": () => (/* binding */ map)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");



function map(fn, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator1)(map(fn), src)
        : (rfn) => {
            const r = rfn[2];
            return (0,_func_compr__WEBPACK_IMPORTED_MODULE_2__.compR)(rfn, (acc, x) => r(acc, fn(x)));
        };
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/mapcat-indexed.js":
/*!******************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/mapcat-indexed.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mapcatIndexed": () => (/* binding */ mapcatIndexed)
/* harmony export */ });
/* harmony import */ var _func_comp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../func/comp */ "./node_modules/@thi.ng/transducers/func/comp.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _cat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cat */ "./node_modules/@thi.ng/transducers/xform/cat.js");
/* harmony import */ var _map_indexed__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./map-indexed */ "./node_modules/@thi.ng/transducers/xform/map-indexed.js");




function mapcatIndexed(...args) {
    return ((0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(mapcatIndexed, args, _iterator__WEBPACK_IMPORTED_MODULE_0__.iterator) ||
        (0,_func_comp__WEBPACK_IMPORTED_MODULE_1__.comp)((0,_map_indexed__WEBPACK_IMPORTED_MODULE_2__.mapIndexed)(args[0], args[1]), (0,_cat__WEBPACK_IMPORTED_MODULE_3__.cat)()));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/mapcat.js":
/*!**********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/mapcat.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mapcat": () => (/* binding */ mapcat)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _func_comp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../func/comp */ "./node_modules/@thi.ng/transducers/func/comp.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _cat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cat */ "./node_modules/@thi.ng/transducers/xform/cat.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./map */ "./node_modules/@thi.ng/transducers/xform/map.js");





function mapcat(fn, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src) ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator)(mapcat(fn), src) : (0,_func_comp__WEBPACK_IMPORTED_MODULE_2__.comp)((0,_map__WEBPACK_IMPORTED_MODULE_3__.map)(fn), (0,_cat__WEBPACK_IMPORTED_MODULE_4__.cat)());
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/match-first.js":
/*!***************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/match-first.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "matchFirst": () => (/* binding */ matchFirst)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _func_comp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../func/comp */ "./node_modules/@thi.ng/transducers/func/comp.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./filter */ "./node_modules/@thi.ng/transducers/xform/filter.js");
/* harmony import */ var _take__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./take */ "./node_modules/@thi.ng/transducers/xform/take.js");





function matchFirst(pred, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? [...(0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator1)(matchFirst(pred), src)][0]
        : (0,_func_comp__WEBPACK_IMPORTED_MODULE_2__.comp)((0,_filter__WEBPACK_IMPORTED_MODULE_3__.filter)(pred), (0,_take__WEBPACK_IMPORTED_MODULE_4__.take)(1));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/match-last.js":
/*!**************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/match-last.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "matchLast": () => (/* binding */ matchLast)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _func_comp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../func/comp */ "./node_modules/@thi.ng/transducers/func/comp.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./filter */ "./node_modules/@thi.ng/transducers/xform/filter.js");
/* harmony import */ var _take_last__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./take-last */ "./node_modules/@thi.ng/transducers/xform/take-last.js");





function matchLast(pred, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? [...(0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator)(matchLast(pred), src)][0]
        : (0,_func_comp__WEBPACK_IMPORTED_MODULE_2__.comp)((0,_filter__WEBPACK_IMPORTED_MODULE_3__.filter)(pred), (0,_take_last__WEBPACK_IMPORTED_MODULE_4__.takeLast)(1));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/moving-average.js":
/*!******************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/moving-average.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "movingAverage": () => (/* binding */ movingAverage)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _thi_ng_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/errors */ "./node_modules/@thi.ng/errors/illegal-arguments.js");
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");




function movingAverage(period, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator1)(movingAverage(period), src)
        : (rfn) => {
            period |= 0;
            period < 2 && (0,_thi_ng_errors__WEBPACK_IMPORTED_MODULE_2__.illegalArgs)("period must be >= 2");
            const reduce = rfn[2];
            const window = [];
            let sum = 0;
            return (0,_func_compr__WEBPACK_IMPORTED_MODULE_3__.compR)(rfn, (acc, x) => {
                const n = window.push(x);
                sum += x;
                n > period && (sum -= window.shift());
                return n >= period ? reduce(acc, sum / period) : acc;
            });
        };
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/moving-median.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/moving-median.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "movingMedian": () => (/* binding */ movingMedian)
/* harmony export */ });
/* harmony import */ var _func_comp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../func/comp */ "./node_modules/@thi.ng/transducers/func/comp.js");
/* harmony import */ var _internal_sort_opts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/sort-opts */ "./node_modules/@thi.ng/transducers/internal/sort-opts.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./map */ "./node_modules/@thi.ng/transducers/xform/map.js");
/* harmony import */ var _partition__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./partition */ "./node_modules/@thi.ng/transducers/xform/partition.js");





function movingMedian(...args) {
    const iter = (0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(movingMedian, args);
    if (iter) {
        return iter;
    }
    const { key, compare } = (0,_internal_sort_opts__WEBPACK_IMPORTED_MODULE_1__.__sortOpts)(args[1]);
    const n = args[0];
    const m = n >> 1;
    return (0,_func_comp__WEBPACK_IMPORTED_MODULE_2__.comp)((0,_partition__WEBPACK_IMPORTED_MODULE_3__.partition)(n, 1, true), (0,_map__WEBPACK_IMPORTED_MODULE_4__.map)((window) => window.slice().sort((a, b) => compare(key(a), key(b)))[m]));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/multiplex-obj.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/multiplex-obj.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "multiplexObj": () => (/* binding */ multiplexObj)
/* harmony export */ });
/* harmony import */ var _func_comp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../func/comp */ "./node_modules/@thi.ng/transducers/func/comp.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _multiplex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./multiplex */ "./node_modules/@thi.ng/transducers/xform/multiplex.js");
/* harmony import */ var _rename__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rename */ "./node_modules/@thi.ng/transducers/xform/rename.js");




function multiplexObj(...args) {
    const iter = (0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(multiplexObj, args);
    if (iter) {
        return iter;
    }
    const [xforms, rfn] = args;
    const ks = Object.keys(xforms);
    return (0,_func_comp__WEBPACK_IMPORTED_MODULE_1__.comp)(_multiplex__WEBPACK_IMPORTED_MODULE_2__.multiplex.apply(null, ks.map((k) => xforms[k])), (0,_rename__WEBPACK_IMPORTED_MODULE_3__.rename)(ks, rfn));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/multiplex.js":
/*!*************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/multiplex.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "multiplex": () => (/* binding */ multiplex)
/* harmony export */ });
/* harmony import */ var _thi_ng_compose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/compose */ "./node_modules/@thi.ng/compose/juxt.js");
/* harmony import */ var _step__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../step */ "./node_modules/@thi.ng/transducers/step.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map */ "./node_modules/@thi.ng/transducers/xform/map.js");



function multiplex(...args) {
    return (0,_map__WEBPACK_IMPORTED_MODULE_0__.map)(_thi_ng_compose__WEBPACK_IMPORTED_MODULE_1__.juxt.apply(null, args.map(_step__WEBPACK_IMPORTED_MODULE_2__.step)));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/noop.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/noop.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "noop": () => (/* binding */ noop)
/* harmony export */ });
/**
 * No-op / pass-through transducer, essentially the same as:
 * `map((x) => x)`, but faster. Useful for testing and / or to keep
 * existing values in a {@link (multiplex:1)} tuple lane.
 */
const noop = () => (rfn) => rfn;


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/pad-last.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/pad-last.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "padLast": () => (/* binding */ padLast)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../reduced */ "./node_modules/@thi.ng/transducers/reduced.js");



function padLast(n, fill, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator)(padLast(n, fill), src)
        : ([init, complete, reduce]) => {
            let m = 0;
            return [
                init,
                (acc) => {
                    let rem = m % n;
                    if (rem > 0) {
                        while (++rem <= n && !(0,_reduced__WEBPACK_IMPORTED_MODULE_2__.isReduced)(acc)) {
                            acc = reduce(acc, fill);
                        }
                    }
                    return complete(acc);
                },
                (acc, x) => (m++, reduce(acc, x)),
            ];
        };
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/page.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/page.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "page": () => (/* binding */ page)
/* harmony export */ });
/* harmony import */ var _func_comp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../func/comp */ "./node_modules/@thi.ng/transducers/func/comp.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _drop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./drop */ "./node_modules/@thi.ng/transducers/xform/drop.js");
/* harmony import */ var _take__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./take */ "./node_modules/@thi.ng/transducers/xform/take.js");




function page(...args) {
    return ((0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(page, args) ||
        (0,_func_comp__WEBPACK_IMPORTED_MODULE_1__.comp)((0,_drop__WEBPACK_IMPORTED_MODULE_2__.drop)(args[0] * (args[1] || 10)), (0,_take__WEBPACK_IMPORTED_MODULE_3__.take)(args[1] || 10)));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/partition-by.js":
/*!****************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/partition-by.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "partitionBy": () => (/* binding */ partitionBy)
/* harmony export */ });
/* harmony import */ var _thi_ng_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/api */ "./node_modules/@thi.ng/api/constants.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../reduced */ "./node_modules/@thi.ng/transducers/reduced.js");



function partitionBy(...args) {
    return ((0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(partitionBy, args, _iterator__WEBPACK_IMPORTED_MODULE_0__.iterator) ||
        (([init, complete, reduce]) => {
            const fn = args[0];
            const f = args[1] === true ? fn() : fn;
            let prev = _thi_ng_api__WEBPACK_IMPORTED_MODULE_1__.SEMAPHORE;
            let chunk;
            return [
                init,
                (acc) => {
                    if (chunk && chunk.length) {
                        acc = reduce(acc, chunk);
                        chunk = null;
                    }
                    return complete(acc);
                },
                (acc, x) => {
                    const curr = f(x);
                    if (prev === _thi_ng_api__WEBPACK_IMPORTED_MODULE_1__.SEMAPHORE) {
                        prev = curr;
                        chunk = [x];
                    }
                    else if (curr === prev) {
                        chunk.push(x);
                    }
                    else {
                        chunk && (acc = reduce(acc, chunk));
                        chunk = (0,_reduced__WEBPACK_IMPORTED_MODULE_2__.isReduced)(acc) ? null : [x];
                        prev = curr;
                    }
                    return acc;
                },
            ];
        }));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/partition-of.js":
/*!****************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/partition-of.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "partitionOf": () => (/* binding */ partitionOf)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _partition_by__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./partition-by */ "./node_modules/@thi.ng/transducers/xform/partition-by.js");



function partitionOf(sizes, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator)(partitionOf(sizes), src)
        : (0,_partition_by__WEBPACK_IMPORTED_MODULE_2__.partitionBy)(() => {
            let i = 0, j = 0;
            return () => {
                if (i++ === sizes[j]) {
                    i = 1;
                    j = (j + 1) % sizes.length;
                }
                return j;
            };
        }, true);
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/partition-sort.js":
/*!******************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/partition-sort.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "partitionSort": () => (/* binding */ partitionSort)
/* harmony export */ });
/* harmony import */ var _func_comp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../func/comp */ "./node_modules/@thi.ng/transducers/func/comp.js");
/* harmony import */ var _internal_sort_opts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/sort-opts */ "./node_modules/@thi.ng/transducers/internal/sort-opts.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _mapcat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mapcat */ "./node_modules/@thi.ng/transducers/xform/mapcat.js");
/* harmony import */ var _partition__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./partition */ "./node_modules/@thi.ng/transducers/xform/partition.js");





function partitionSort(...args) {
    const iter = (0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(partitionSort, args, _iterator__WEBPACK_IMPORTED_MODULE_0__.iterator);
    if (iter) {
        return iter;
    }
    const { key, compare } = (0,_internal_sort_opts__WEBPACK_IMPORTED_MODULE_1__.__sortOpts)(args[1]);
    return (0,_func_comp__WEBPACK_IMPORTED_MODULE_2__.comp)((0,_partition__WEBPACK_IMPORTED_MODULE_3__.partition)(args[0], true), (0,_mapcat__WEBPACK_IMPORTED_MODULE_4__.mapcat)((window) => window.slice().sort((a, b) => compare(key(a), key(b)))));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/partition-sync.js":
/*!******************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/partition-sync.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "partitionSync": () => (/* binding */ partitionSync)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-array.js");
/* harmony import */ var _thi_ng_compose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/compose */ "./node_modules/@thi.ng/compose/identity.js");
/* harmony import */ var _thi_ng_errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @thi.ng/errors */ "./node_modules/@thi.ng/errors/illegal-state.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../reduced */ "./node_modules/@thi.ng/transducers/reduced.js");





function partitionSync(...args) {
    const iter = (0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(partitionSync, args, _iterator__WEBPACK_IMPORTED_MODULE_0__.iterator);
    if (iter)
        return iter;
    const { key, mergeOnly, reset, all, backPressure } = Object.assign({ key: _thi_ng_compose__WEBPACK_IMPORTED_MODULE_1__.identity, mergeOnly: false, reset: true, all: true, backPressure: 0 }, args[1]);
    const requiredKeys = (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_2__.isArray)(args[0])
        ? new Set(args[0])
        : args[0];
    const currKeys = new Set();
    const cache = new Map();
    let curr = {};
    const xform = ([init, complete, reduce]) => {
        let first = true;
        if (mergeOnly || backPressure < 1) {
            return [
                init,
                (acc) => {
                    if ((reset && all && currKeys.size > 0) ||
                        (!reset && first)) {
                        acc = reduce(acc, curr);
                        curr = {};
                        currKeys.clear();
                        first = false;
                    }
                    return complete(acc);
                },
                (acc, x) => {
                    const k = key(x);
                    if (requiredKeys.has(k)) {
                        curr[k] = x;
                        currKeys.add(k);
                        if (mergeOnly ||
                            requiredInputs(requiredKeys, currKeys)) {
                            acc = reduce(acc, curr);
                            first = false;
                            if (reset) {
                                curr = {};
                                currKeys.clear();
                            }
                            else {
                                curr = Object.assign({}, curr);
                            }
                        }
                    }
                    return acc;
                },
            ];
        }
        else {
            // with backpressure / caching...
            return [
                init,
                (acc) => {
                    if (all && currKeys.size > 0) {
                        acc = reduce(acc, collect(cache, currKeys));
                        cache.clear();
                        currKeys.clear();
                    }
                    return complete(acc);
                },
                (acc, x) => {
                    const k = key(x);
                    if (requiredKeys.has(k)) {
                        let slot = cache.get(k);
                        !slot && cache.set(k, (slot = []));
                        slot.length >= backPressure &&
                            (0,_thi_ng_errors__WEBPACK_IMPORTED_MODULE_3__.illegalState)(`max back pressure (${backPressure}) exceeded for input: ${String(k)}`);
                        slot.push(x);
                        currKeys.add(k);
                        while (requiredInputs(requiredKeys, currKeys)) {
                            acc = reduce(acc, collect(cache, currKeys));
                            first = false;
                            if ((0,_reduced__WEBPACK_IMPORTED_MODULE_4__.isReduced)(acc))
                                break;
                        }
                    }
                    return acc;
                },
            ];
        }
    };
    xform.keys = () => requiredKeys;
    xform.clear = () => {
        cache.clear();
        requiredKeys.clear();
        currKeys.clear();
        curr = {};
    };
    xform.add = (id) => {
        requiredKeys.add(id);
    };
    xform.delete = (id, clean = true) => {
        cache.delete(id);
        requiredKeys.delete(id);
        if (clean) {
            currKeys.delete(id);
            delete curr[id];
        }
    };
    return xform;
}
const requiredInputs = (required, curr) => {
    if (curr.size < required.size)
        return false;
    for (let id of required) {
        if (!curr.has(id))
            return false;
    }
    return true;
};
const collect = (cache, currKeys) => {
    const curr = {};
    for (let id of currKeys) {
        const slot = cache.get(id);
        curr[id] = slot.shift();
        !slot.length && currKeys.delete(id);
    }
    return curr;
};


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/partition-time.js":
/*!******************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/partition-time.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "partitionTime": () => (/* binding */ partitionTime)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _partition_by__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./partition-by */ "./node_modules/@thi.ng/transducers/xform/partition-by.js");



function partitionTime(period, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator)(partitionTime(period), src)
        : (0,_partition_by__WEBPACK_IMPORTED_MODULE_2__.partitionBy)(() => {
            let last = 0;
            return () => {
                const t = Date.now();
                t - last >= period && (last = t);
                return last;
            };
        }, true);
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/partition-when.js":
/*!******************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/partition-when.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "partitionWhen": () => (/* binding */ partitionWhen)
/* harmony export */ });
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reduced */ "./node_modules/@thi.ng/transducers/reduced.js");


function partitionWhen(...args) {
    return ((0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(partitionWhen, args, _iterator__WEBPACK_IMPORTED_MODULE_0__.iterator) ||
        (([init, complete, reduce]) => {
            const pred = args[0];
            const f = args[1] === true ? pred() : pred;
            let chunk;
            return [
                init,
                (acc) => {
                    if (chunk && chunk.length) {
                        acc = reduce(acc, chunk);
                        chunk = null;
                    }
                    return complete(acc);
                },
                (acc, x) => {
                    if (f(x)) {
                        chunk && (acc = reduce(acc, chunk));
                        chunk = (0,_reduced__WEBPACK_IMPORTED_MODULE_1__.isReduced)(acc) ? null : [x];
                    }
                    else {
                        chunk ? chunk.push(x) : (chunk = [x]);
                    }
                    return acc;
                },
            ];
        }));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/partition.js":
/*!*************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/partition.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "partition": () => (/* binding */ partition)
/* harmony export */ });
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");

function partition(...args) {
    const iter = (0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(partition, args, _iterator__WEBPACK_IMPORTED_MODULE_0__.iterator);
    if (iter) {
        return iter;
    }
    let size = args[0], all, step;
    if (typeof args[1] == "number") {
        step = args[1];
        all = args[2];
    }
    else {
        step = size;
        all = args[1];
    }
    return ([init, complete, reduce]) => {
        let buf = [];
        let skip = 0;
        return [
            init,
            (acc) => {
                if (all && buf.length > 0) {
                    acc = reduce(acc, buf);
                    buf = [];
                }
                return complete(acc);
            },
            (acc, x) => {
                if (skip <= 0) {
                    if (buf.length < size) {
                        buf.push(x);
                    }
                    if (buf.length === size) {
                        acc = reduce(acc, buf);
                        buf = step < size ? buf.slice(step) : [];
                        skip = step - size;
                    }
                }
                else {
                    skip--;
                }
                return acc;
            },
        ];
    };
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/peek.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/peek.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "peek": () => (/* binding */ peek)
/* harmony export */ });
/* harmony import */ var _thi_ng_arrays__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/arrays */ "./node_modules/@thi.ng/arrays/peek.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map */ "./node_modules/@thi.ng/transducers/xform/map.js");


function peek(src) {
    return (0,_map__WEBPACK_IMPORTED_MODULE_0__.map)(_thi_ng_arrays__WEBPACK_IMPORTED_MODULE_1__.peek, src);
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/pluck.js":
/*!*********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/pluck.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pluck": () => (/* binding */ pluck)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./map */ "./node_modules/@thi.ng/transducers/xform/map.js");



function pluck(key, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator1)(pluck(key), src)
        : (0,_map__WEBPACK_IMPORTED_MODULE_2__.map)((x) => x[key]);
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/rename.js":
/*!**********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/rename.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rename": () => (/* binding */ rename)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-array.js");
/* harmony import */ var _func_comp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../func/comp */ "./node_modules/@thi.ng/transducers/func/comp.js");
/* harmony import */ var _func_renamer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../func/renamer */ "./node_modules/@thi.ng/transducers/func/renamer.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _transduce__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../transduce */ "./node_modules/@thi.ng/transducers/transduce.js");
/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./filter */ "./node_modules/@thi.ng/transducers/xform/filter.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./map */ "./node_modules/@thi.ng/transducers/xform/map.js");







function rename(...args) {
    const iter = args.length > 2 && (0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(rename, args);
    if (iter) {
        return iter;
    }
    let kmap = args[0];
    if ((0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_1__.isArray)(kmap)) {
        kmap = kmap.reduce((acc, k, i) => ((acc[k] = i), acc), {});
    }
    if (args[1]) {
        const ks = Object.keys(kmap);
        return (0,_map__WEBPACK_IMPORTED_MODULE_2__.map)((y) => (0,_transduce__WEBPACK_IMPORTED_MODULE_3__.transduce)((0,_func_comp__WEBPACK_IMPORTED_MODULE_4__.comp)((0,_map__WEBPACK_IMPORTED_MODULE_2__.map)((k) => [k, y[kmap[k]]]), (0,_filter__WEBPACK_IMPORTED_MODULE_5__.filter)((x) => x[1] !== undefined)), args[1], ks));
    }
    else {
        return (0,_map__WEBPACK_IMPORTED_MODULE_2__.map)((0,_func_renamer__WEBPACK_IMPORTED_MODULE_6__.renamer)(kmap));
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/sample.js":
/*!**********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/sample.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sample": () => (/* binding */ sample)
/* harmony export */ });
/* harmony import */ var _thi_ng_random__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/random */ "./node_modules/@thi.ng/random/system.js");
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");



function sample(...args) {
    const iter = (0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(sample, args);
    if (iter) {
        return iter;
    }
    const prob = args[0];
    const rnd = args[1] || _thi_ng_random__WEBPACK_IMPORTED_MODULE_1__.SYSTEM;
    return (rfn) => {
        const r = rfn[2];
        return (0,_func_compr__WEBPACK_IMPORTED_MODULE_2__.compR)(rfn, (acc, x) => rnd.float() < prob ? r(acc, x) : acc);
    };
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/scan.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/scan.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "scan": () => (/* binding */ scan)
/* harmony export */ });
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reduced */ "./node_modules/@thi.ng/transducers/reduced.js");


function scan(...args) {
    return ((args.length > 2 && (0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(scan, args, _iterator__WEBPACK_IMPORTED_MODULE_0__.iterator)) ||
        (([inito, completeo, reduceo]) => {
            const [initi, completei, reducei] = args[0];
            let acc = args.length > 1 && args[1] != null ? args[1] : initi();
            return [
                inito,
                (_acc) => {
                    let a = completei(acc);
                    if (a !== acc) {
                        _acc = (0,_reduced__WEBPACK_IMPORTED_MODULE_1__.unreduced)(reduceo(_acc, a));
                    }
                    acc = a;
                    return completeo(_acc);
                },
                (_acc, x) => {
                    acc = reducei(acc, x);
                    if ((0,_reduced__WEBPACK_IMPORTED_MODULE_1__.isReduced)(acc)) {
                        return (0,_reduced__WEBPACK_IMPORTED_MODULE_1__.ensureReduced)(reduceo(_acc, acc.deref()));
                    }
                    return reduceo(_acc, acc);
                },
            ];
        }));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/select-keys.js":
/*!***************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/select-keys.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "selectKeys": () => (/* binding */ selectKeys)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _func_key_selector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../func/key-selector */ "./node_modules/@thi.ng/transducers/func/key-selector.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./map */ "./node_modules/@thi.ng/transducers/xform/map.js");




function selectKeys(keys, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator1)(selectKeys(keys), src)
        : (0,_map__WEBPACK_IMPORTED_MODULE_2__.map)((0,_func_key_selector__WEBPACK_IMPORTED_MODULE_3__.keySelector)(keys));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/side-effect.js":
/*!***************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/side-effect.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sideEffect": () => (/* binding */ sideEffect)
/* harmony export */ });
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map */ "./node_modules/@thi.ng/transducers/xform/map.js");

/**
 * Helper transducer. Applies given `fn` to each input value, presumably
 * for side effects. Discards function's result and yields original
 * inputs.
 *
 * @param fn - side effect
 */
const sideEffect = (fn) => (0,_map__WEBPACK_IMPORTED_MODULE_0__.map)((x) => (fn(x), x));


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/sliding-window.js":
/*!******************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/sliding-window.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "slidingWindow": () => (/* binding */ slidingWindow)
/* harmony export */ });
/* harmony import */ var _thi_ng_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/api */ "./node_modules/@thi.ng/api/api/deref.js");
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");



function slidingWindow(...args) {
    const iter = (0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(slidingWindow, args);
    if (iter)
        return iter;
    const size = args[0];
    const partial = args[1] !== false;
    return (rfn) => {
        const reduce = rfn[2];
        let buf = [];
        return (0,_func_compr__WEBPACK_IMPORTED_MODULE_1__.compR)(rfn, (acc, x) => {
            buf.push(x);
            const _size = (0,_thi_ng_api__WEBPACK_IMPORTED_MODULE_2__.deref)(size);
            if (partial || buf.length >= _size) {
                acc = reduce(acc, buf);
                buf = buf.slice(buf.length >= _size ? 1 : 0, _size);
            }
            return acc;
        });
    };
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/stream-shuffle.js":
/*!******************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/stream-shuffle.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "streamShuffle": () => (/* binding */ streamShuffle)
/* harmony export */ });
/* harmony import */ var _thi_ng_arrays__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/arrays */ "./node_modules/@thi.ng/arrays/shuffle.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../reduced */ "./node_modules/@thi.ng/transducers/reduced.js");



function streamShuffle(...args) {
    return ((0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(streamShuffle, args, _iterator__WEBPACK_IMPORTED_MODULE_0__.iterator) ||
        (([init, complete, reduce]) => {
            const n = args[0];
            const maxSwaps = args[1] || n;
            const buf = [];
            return [
                init,
                (acc) => {
                    while (buf.length && !(0,_reduced__WEBPACK_IMPORTED_MODULE_1__.isReduced)(acc)) {
                        (0,_thi_ng_arrays__WEBPACK_IMPORTED_MODULE_2__.shuffle)(buf, maxSwaps);
                        acc = reduce(acc, buf.shift());
                    }
                    acc = complete(acc);
                    return acc;
                },
                (acc, x) => {
                    buf.push(x);
                    (0,_thi_ng_arrays__WEBPACK_IMPORTED_MODULE_2__.shuffle)(buf, maxSwaps);
                    if (buf.length === n) {
                        acc = reduce(acc, buf.shift());
                    }
                    return acc;
                },
            ];
        }));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/stream-sort.js":
/*!***************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/stream-sort.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "streamSort": () => (/* binding */ streamSort)
/* harmony export */ });
/* harmony import */ var _thi_ng_arrays__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @thi.ng/arrays */ "./node_modules/@thi.ng/arrays/binary-search.js");
/* harmony import */ var _internal_drain__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/drain */ "./node_modules/@thi.ng/transducers/internal/drain.js");
/* harmony import */ var _internal_sort_opts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/sort-opts */ "./node_modules/@thi.ng/transducers/internal/sort-opts.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");




function streamSort(...args) {
    const iter = (0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(streamSort, args, _iterator__WEBPACK_IMPORTED_MODULE_0__.iterator);
    if (iter) {
        return iter;
    }
    const { key, compare } = (0,_internal_sort_opts__WEBPACK_IMPORTED_MODULE_1__.__sortOpts)(args[1]);
    const n = args[0];
    return ([init, complete, reduce]) => {
        const buf = [];
        return [
            init,
            (0,_internal_drain__WEBPACK_IMPORTED_MODULE_2__.__drain)(buf, complete, reduce),
            (acc, x) => {
                const idx = (0,_thi_ng_arrays__WEBPACK_IMPORTED_MODULE_3__.binarySearch)(buf, x, key, compare);
                buf.splice(idx < 0 ? -(idx + 1) : idx, 0, x);
                if (buf.length === n) {
                    acc = reduce(acc, buf.shift());
                }
                return acc;
            },
        ];
    };
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/struct.js":
/*!**********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/struct.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "struct": () => (/* binding */ struct)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _func_comp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../func/comp */ "./node_modules/@thi.ng/transducers/func/comp.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _map_keys__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./map-keys */ "./node_modules/@thi.ng/transducers/xform/map-keys.js");
/* harmony import */ var _partition__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./partition */ "./node_modules/@thi.ng/transducers/xform/partition.js");
/* harmony import */ var _partition_of__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./partition-of */ "./node_modules/@thi.ng/transducers/xform/partition-of.js");
/* harmony import */ var _rename__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./rename */ "./node_modules/@thi.ng/transducers/xform/rename.js");







function struct(fields, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator)(struct(fields), src)
        : (0,_func_comp__WEBPACK_IMPORTED_MODULE_2__.comp)((0,_partition_of__WEBPACK_IMPORTED_MODULE_3__.partitionOf)(fields.map((f) => f[1])), (0,_partition__WEBPACK_IMPORTED_MODULE_4__.partition)(fields.length), (0,_rename__WEBPACK_IMPORTED_MODULE_5__.rename)(fields.map((f) => f[0])), (0,_map_keys__WEBPACK_IMPORTED_MODULE_6__.mapKeys)(fields.reduce((acc, f) => (f[2] ? ((acc[f[0]] = f[2]), acc) : acc), {}), false));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/swizzle.js":
/*!***********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/swizzle.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "swizzle": () => (/* binding */ swizzle)
/* harmony export */ });
/* harmony import */ var _thi_ng_arrays__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @thi.ng/arrays */ "./node_modules/@thi.ng/arrays/swizzle.js");
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./map */ "./node_modules/@thi.ng/transducers/xform/map.js");




function swizzle(order, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator1)(swizzle(order), src)
        : (0,_map__WEBPACK_IMPORTED_MODULE_2__.map)((0,_thi_ng_arrays__WEBPACK_IMPORTED_MODULE_3__.swizzle)(order));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/take-last.js":
/*!*************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/take-last.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "takeLast": () => (/* binding */ takeLast)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _internal_drain__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/drain */ "./node_modules/@thi.ng/transducers/internal/drain.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");



function takeLast(n, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator)(takeLast(n), src)
        : ([init, complete, reduce]) => {
            const buf = [];
            return [
                init,
                (0,_internal_drain__WEBPACK_IMPORTED_MODULE_2__.__drain)(buf, complete, reduce),
                (acc, x) => {
                    if (buf.length === n) {
                        buf.shift();
                    }
                    buf.push(x);
                    return acc;
                },
            ];
        };
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/take-nth.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/take-nth.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "takeNth": () => (/* binding */ takeNth)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/transducers/node_modules/@thi.ng/math/interval.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _throttle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./throttle */ "./node_modules/@thi.ng/transducers/xform/throttle.js");




function takeNth(n, src) {
    if ((0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)) {
        return (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator1)(takeNth(n), src);
    }
    n = (0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_2__.clamp0)(n - 1);
    return (0,_throttle__WEBPACK_IMPORTED_MODULE_3__.throttle)(() => {
        let skip = 0;
        return () => (skip === 0 ? ((skip = n), true) : (skip--, false));
    });
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/take-while.js":
/*!**************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/take-while.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "takeWhile": () => (/* binding */ takeWhile)
/* harmony export */ });
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../reduced */ "./node_modules/@thi.ng/transducers/reduced.js");



function takeWhile(...args) {
    return ((0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(takeWhile, args) ||
        ((rfn) => {
            const r = rfn[2];
            const pred = args[0];
            let ok = true;
            return (0,_func_compr__WEBPACK_IMPORTED_MODULE_1__.compR)(rfn, (acc, x) => (ok = ok && pred(x)) ? r(acc, x) : (0,_reduced__WEBPACK_IMPORTED_MODULE_2__.reduced)(acc));
        }));
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/take.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/take.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "take": () => (/* binding */ take)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _reduced__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../reduced */ "./node_modules/@thi.ng/transducers/reduced.js");




function take(n, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator)(take(n), src)
        : (rfn) => {
            const r = rfn[2];
            let m = n;
            return (0,_func_compr__WEBPACK_IMPORTED_MODULE_2__.compR)(rfn, (acc, x) => --m > 0
                ? r(acc, x)
                : m === 0
                    ? (0,_reduced__WEBPACK_IMPORTED_MODULE_3__.ensureReduced)(r(acc, x))
                    : (0,_reduced__WEBPACK_IMPORTED_MODULE_3__.reduced)(acc));
        };
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/throttle-time.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/throttle-time.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "throttleTime": () => (/* binding */ throttleTime)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _throttle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./throttle */ "./node_modules/@thi.ng/transducers/xform/throttle.js");



function throttleTime(delay, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator1)(throttleTime(delay), src)
        : (0,_throttle__WEBPACK_IMPORTED_MODULE_2__.throttle)(() => {
            let last = 0;
            return () => {
                const t = Date.now();
                return t - last >= delay ? ((last = t), true) : false;
            };
        });
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/throttle.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/throttle.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "throttle": () => (/* binding */ throttle)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _func_compr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../func/compr */ "./node_modules/@thi.ng/transducers/func/compr.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");



function throttle(pred, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator1)(throttle(pred), src)
        : (rfn) => {
            const r = rfn[2];
            const _pred = pred();
            return (0,_func_compr__WEBPACK_IMPORTED_MODULE_2__.compR)(rfn, (acc, x) => (_pred(x) ? r(acc, x) : acc));
        };
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/toggle.js":
/*!**********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/toggle.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toggle": () => (/* binding */ toggle)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-iterable.js");
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");


function toggle(on, off, initial = false, src) {
    return (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isIterable)(src)
        ? (0,_iterator__WEBPACK_IMPORTED_MODULE_1__.iterator1)(toggle(on, off, initial), src)
        : ([init, complete, reduce]) => {
            let state = initial;
            return [
                init,
                complete,
                (acc) => reduce(acc, (state = !state) ? on : off),
            ];
        };
}


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/trace.js":
/*!*********************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/trace.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "trace": () => (/* binding */ trace)
/* harmony export */ });
/* harmony import */ var _side_effect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./side-effect */ "./node_modules/@thi.ng/transducers/xform/side-effect.js");

const trace = (prefix = "") => (0,_side_effect__WEBPACK_IMPORTED_MODULE_0__.sideEffect)((x) => console.log(prefix, x));


/***/ }),

/***/ "./node_modules/@thi.ng/transducers/xform/word-wrap.js":
/*!*************************************************************!*\
  !*** ./node_modules/@thi.ng/transducers/xform/word-wrap.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "wordWrap": () => (/* binding */ wordWrap)
/* harmony export */ });
/* harmony import */ var _iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../iterator */ "./node_modules/@thi.ng/transducers/iterator.js");
/* harmony import */ var _partition_by__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./partition-by */ "./node_modules/@thi.ng/transducers/xform/partition-by.js");


function wordWrap(...args) {
    const iter = (0,_iterator__WEBPACK_IMPORTED_MODULE_0__.$iter)(wordWrap, args, _iterator__WEBPACK_IMPORTED_MODULE_0__.iterator);
    if (iter) {
        return iter;
    }
    const lineLength = args[0];
    const { delim, always } = Object.assign({ delim: 1, always: true }, args[1]);
    return (0,_partition_by__WEBPACK_IMPORTED_MODULE_1__.partitionBy)(() => {
        let n = 0;
        let flag = false;
        return (w) => {
            n += w.length + delim;
            if (n > lineLength + (always ? 0 : delim)) {
                flag = !flag;
                n = w.length + delim;
            }
            return flag;
        };
    }, true);
}


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/abs.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/abs.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "abs": () => (/* binding */ abs),
/* harmony export */   "abs2": () => (/* binding */ abs2),
/* harmony export */   "abs3": () => (/* binding */ abs3),
/* harmony export */   "abs4": () => (/* binding */ abs4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [abs, abs2, abs3, abs4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("Math.abs");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/acos.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/acos.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acos": () => (/* binding */ acos),
/* harmony export */   "acos2": () => (/* binding */ acos2),
/* harmony export */   "acos3": () => (/* binding */ acos3),
/* harmony export */   "acos4": () => (/* binding */ acos4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [acos, acos2, acos3, acos4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("Math.acos");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/add.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/add.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "add": () => (/* binding */ add),
/* harmony export */   "add2": () => (/* binding */ add2),
/* harmony export */   "add3": () => (/* binding */ add3),
/* harmony export */   "add4": () => (/* binding */ add4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [add, add2, add3, add4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defMathOp)("+");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/addi.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/addi.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addI": () => (/* binding */ addI),
/* harmony export */   "addI2": () => (/* binding */ addI2),
/* harmony export */   "addI3": () => (/* binding */ addI3),
/* harmony export */   "addI4": () => (/* binding */ addI4),
/* harmony export */   "addU": () => (/* binding */ addU),
/* harmony export */   "addU2": () => (/* binding */ addU2),
/* harmony export */   "addU3": () => (/* binding */ addU3),
/* harmony export */   "addU4": () => (/* binding */ addU4),
/* harmony export */   "addNI": () => (/* binding */ addNI),
/* harmony export */   "addNI2": () => (/* binding */ addNI2),
/* harmony export */   "addNI3": () => (/* binding */ addNI3),
/* harmony export */   "addNI4": () => (/* binding */ addNI4),
/* harmony export */   "addNU": () => (/* binding */ addNU),
/* harmony export */   "addNU2": () => (/* binding */ addNU2),
/* harmony export */   "addNU3": () => (/* binding */ addNU3),
/* harmony export */   "addNU4": () => (/* binding */ addNU4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [addI, addI2, addI3, addI4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOp)("+", true);
const [addU, addU2, addU3, addU4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOp)("+");
const [addNI, addNI2, addNI3, addNI4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOpN)("+", true);
const [addNU, addNU2, addNU3, addNU4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOpN)("+");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/addm.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/addm.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addm": () => (/* binding */ addm),
/* harmony export */   "addm2": () => (/* binding */ addm2),
/* harmony export */   "addm3": () => (/* binding */ addm3),
/* harmony export */   "addm4": () => (/* binding */ addm4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


/**
 * Returns `out = (a + b) * c`.
 *
 * - {@link madd}
 * - {@link subm}
 */
const [addm, addm2, addm3, addm4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH2)("+", "*"), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/addmn.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/addmn.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addmN": () => (/* binding */ addmN),
/* harmony export */   "addmN2": () => (/* binding */ addmN2),
/* harmony export */   "addmN3": () => (/* binding */ addmN3),
/* harmony export */   "addmN4": () => (/* binding */ addmN4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


/**
 * Returns `out = (a + b) * n`.
 */
const [addmN, addmN2, addmN3, addmN4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH2_N)("+", "*"), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVN);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/addmns.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/addmns.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addmNS2": () => (/* binding */ addmNS2),
/* harmony export */   "addmNS3": () => (/* binding */ addmNS3),
/* harmony export */   "addmNS4": () => (/* binding */ addmNS4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [addmNS2, addmNS3, addmNS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOpS)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH2_N)("+", "*"), `${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVN},${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.SARGS_VV}`);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/addms.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/addms.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addmS2": () => (/* binding */ addmS2),
/* harmony export */   "addmS3": () => (/* binding */ addmS3),
/* harmony export */   "addmS4": () => (/* binding */ addmS4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [addmS2, addmS3, addmS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOpS)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH2)("+", "*"), `${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV},${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.SARGS_VVV}`, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/addn.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/addn.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addN": () => (/* binding */ addN),
/* harmony export */   "addN2": () => (/* binding */ addN2),
/* harmony export */   "addN3": () => (/* binding */ addN3),
/* harmony export */   "addN4": () => (/* binding */ addN4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [addN, addN2, addN3, addN4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defMathOpN)("+");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/addns.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/addns.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addNS2": () => (/* binding */ addNS2),
/* harmony export */   "addNS3": () => (/* binding */ addNS3),
/* harmony export */   "addNS4": () => (/* binding */ addNS4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [addNS2, addNS3, addNS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOpS)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH_N)("+"), `${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VN},${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.SARGS_V}`, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_V);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/adds.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/adds.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addS2": () => (/* binding */ addS2),
/* harmony export */   "addS3": () => (/* binding */ addS3),
/* harmony export */   "addS4": () => (/* binding */ addS4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [addS2, addS3, addS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOpS)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH)("+"));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/addw.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/addw.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addW2": () => (/* binding */ addW2),
/* harmony export */   "addW3": () => (/* binding */ addW3),
/* harmony export */   "addW4": () => (/* binding */ addW4),
/* harmony export */   "addW5": () => (/* binding */ addW5)
/* harmony export */ });
/* harmony import */ var _maddn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./maddn */ "./node_modules/@thi.ng/vectors/maddn.js");
/* harmony import */ var _muln__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./muln */ "./node_modules/@thi.ng/vectors/muln.js");


const addW2 = (out, a, b, wa, wb) => (!out && (out = a), (0,_maddn__WEBPACK_IMPORTED_MODULE_0__.maddN)(out, b, wb, (0,_muln__WEBPACK_IMPORTED_MODULE_1__.mulN)(out, a, wa)));
const addW3 = (out, a, b, c, wa, wb, wc) => (!out && (out = a), (0,_maddn__WEBPACK_IMPORTED_MODULE_0__.maddN)(out, c, wc, (0,_maddn__WEBPACK_IMPORTED_MODULE_0__.maddN)(out, b, wb, (0,_muln__WEBPACK_IMPORTED_MODULE_1__.mulN)(out, a, wa))));
const addW4 = (out, a, b, c, d, wa, wb, wc, wd) => (!out && (out = a),
    (0,_maddn__WEBPACK_IMPORTED_MODULE_0__.maddN)(out, d, wd, (0,_maddn__WEBPACK_IMPORTED_MODULE_0__.maddN)(out, c, wc, (0,_maddn__WEBPACK_IMPORTED_MODULE_0__.maddN)(out, b, wb, (0,_muln__WEBPACK_IMPORTED_MODULE_1__.mulN)(out, a, wa)))));
const addW5 = (out, a, b, c, d, e, wa, wb, wc, wd, we) => (!out && (out = a),
    (0,_maddn__WEBPACK_IMPORTED_MODULE_0__.maddN)(out, e, we, (0,_maddn__WEBPACK_IMPORTED_MODULE_0__.maddN)(out, d, wd, (0,_maddn__WEBPACK_IMPORTED_MODULE_0__.maddN)(out, c, wc, (0,_maddn__WEBPACK_IMPORTED_MODULE_0__.maddN)(out, b, wb, (0,_muln__WEBPACK_IMPORTED_MODULE_1__.mulN)(out, a, wa))))));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/angle-between.js":
/*!*******************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/angle-between.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "angleRatio": () => (/* binding */ angleRatio),
/* harmony export */   "angleBetween2": () => (/* binding */ angleBetween2),
/* harmony export */   "angleBetween3": () => (/* binding */ angleBetween3)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/angle.js");
/* harmony import */ var _cross__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cross */ "./node_modules/@thi.ng/vectors/cross.js");
/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dot */ "./node_modules/@thi.ng/vectors/dot.js");
/* harmony import */ var _mag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mag */ "./node_modules/@thi.ng/vectors/mag.js");




const angleRatio = (a, b) => (0,_dot__WEBPACK_IMPORTED_MODULE_0__.dot)(a, b) / ((0,_mag__WEBPACK_IMPORTED_MODULE_1__.mag)(a) * (0,_mag__WEBPACK_IMPORTED_MODULE_1__.mag)(b));
const angleBetween2 = (a, b, absInner = false) => {
    const t = Math.atan2((0,_cross__WEBPACK_IMPORTED_MODULE_2__.cross2)(a, b), (0,_dot__WEBPACK_IMPORTED_MODULE_0__.dot)(a, b));
    return absInner ? (0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_3__.absInnerAngle)(t) : t;
};
const angleBetween3 = (a, b, normalize = true, absInner = false) => {
    const t = normalize ? Math.acos(angleRatio(a, b)) : Math.acos((0,_dot__WEBPACK_IMPORTED_MODULE_0__.dot)(a, b));
    return absInner ? (0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_3__.absInnerAngle)(t) : t;
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/api.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/api.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MIN2": () => (/* binding */ MIN2),
/* harmony export */   "MAX2": () => (/* binding */ MAX2),
/* harmony export */   "ONE2": () => (/* binding */ ONE2),
/* harmony export */   "ZERO2": () => (/* binding */ ZERO2),
/* harmony export */   "X2": () => (/* binding */ X2),
/* harmony export */   "Y2": () => (/* binding */ Y2),
/* harmony export */   "MIN3": () => (/* binding */ MIN3),
/* harmony export */   "MAX3": () => (/* binding */ MAX3),
/* harmony export */   "ONE3": () => (/* binding */ ONE3),
/* harmony export */   "ZERO3": () => (/* binding */ ZERO3),
/* harmony export */   "X3": () => (/* binding */ X3),
/* harmony export */   "Y3": () => (/* binding */ Y3),
/* harmony export */   "Z3": () => (/* binding */ Z3),
/* harmony export */   "MIN4": () => (/* binding */ MIN4),
/* harmony export */   "MAX4": () => (/* binding */ MAX4),
/* harmony export */   "ONE4": () => (/* binding */ ONE4),
/* harmony export */   "ZERO4": () => (/* binding */ ZERO4),
/* harmony export */   "X4": () => (/* binding */ X4),
/* harmony export */   "Y4": () => (/* binding */ Y4),
/* harmony export */   "Z4": () => (/* binding */ Z4),
/* harmony export */   "W4": () => (/* binding */ W4)
/* harmony export */ });
const mi = -Infinity;
const mx = Infinity;
const MIN2 = Object.freeze([mi, mi]);
const MAX2 = Object.freeze([mx, mx]);
const ONE2 = Object.freeze([1, 1]);
const ZERO2 = Object.freeze([0, 0]);
const X2 = Object.freeze([1, 0]);
const Y2 = Object.freeze([0, 1]);
const MIN3 = Object.freeze([mi, mi, mi]);
const MAX3 = Object.freeze([mx, mx, mx]);
const ONE3 = Object.freeze([1, 1, 1]);
const ZERO3 = Object.freeze([0, 0, 0]);
const X3 = Object.freeze([1, 0, 0]);
const Y3 = Object.freeze([0, 1, 0]);
const Z3 = Object.freeze([0, 0, 1]);
const MIN4 = Object.freeze([mi, mi, mi, mi]);
const MAX4 = Object.freeze([mx, mx, mx, mx]);
const ONE4 = Object.freeze([1, 1, 1, 1]);
const ZERO4 = Object.freeze([0, 0, 0, 0]);
const X4 = Object.freeze([1, 0, 0, 0]);
const Y4 = Object.freeze([0, 1, 0, 0]);
const Z4 = Object.freeze([0, 0, 1, 0]);
const W4 = Object.freeze([0, 0, 0, 1]);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/asin.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/asin.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asin": () => (/* binding */ asin),
/* harmony export */   "asin2": () => (/* binding */ asin2),
/* harmony export */   "asin3": () => (/* binding */ asin3),
/* harmony export */   "asin4": () => (/* binding */ asin4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [asin, asin2, asin3, asin4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("Math.asin");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/atan.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/atan.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "atan": () => (/* binding */ atan),
/* harmony export */   "atan2": () => (/* binding */ atan2),
/* harmony export */   "atan3": () => (/* binding */ atan3),
/* harmony export */   "atan4": () => (/* binding */ atan4),
/* harmony export */   "atan_2": () => (/* binding */ atan_2),
/* harmony export */   "atan_22": () => (/* binding */ atan_22),
/* harmony export */   "atan_23": () => (/* binding */ atan_23),
/* harmony export */   "atan_24": () => (/* binding */ atan_24)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [atan, atan2, atan3, atan4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("Math.atan");
const [atan_2, atan_22, atan_23, atan_24] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.FN2)("Math.atan2"), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VV);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/bisect.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/bisect.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bisect2": () => (/* binding */ bisect2),
/* harmony export */   "cornerBisector": () => (/* binding */ cornerBisector),
/* harmony export */   "cornerBisector2": () => (/* binding */ cornerBisector2)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/api.js");
/* harmony import */ var _addmn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./addmn */ "./node_modules/@thi.ng/vectors/addmn.js");
/* harmony import */ var _direction__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./direction */ "./node_modules/@thi.ng/vectors/direction.js");
/* harmony import */ var _heading__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./heading */ "./node_modules/@thi.ng/vectors/heading.js");
/* harmony import */ var _mixn__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mixn */ "./node_modules/@thi.ng/vectors/mixn.js");
/* harmony import */ var _normalize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./normalize */ "./node_modules/@thi.ng/vectors/normalize.js");
/* harmony import */ var _perpendicular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./perpendicular */ "./node_modules/@thi.ng/vectors/perpendicular.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sub */ "./node_modules/@thi.ng/vectors/sub.js");








const bisect2 = (a, b) => {
    const theta = ((0,_heading__WEBPACK_IMPORTED_MODULE_0__.headingXY)(a) + (0,_heading__WEBPACK_IMPORTED_MODULE_0__.headingXY)(b)) / 2;
    return theta <= _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.HALF_PI ? theta : _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.PI - theta;
};
/**
 * Returns normalized bisector vector for point `b` in the triangle `a`
 * -> `b` -> `c`. If `out` is null, creates a new result vector. The `n`
 * arg can be used to scale the result vector to given length (default:
 * 1).
 *
 * @param out -
 * @param a -
 * @param b -
 * @param c -
 * @param n -
 */
const cornerBisector = (out, a, b, c, n = 1) => (!out && (out = []),
    (0,_normalize__WEBPACK_IMPORTED_MODULE_2__.normalize)(out, (0,_addmn__WEBPACK_IMPORTED_MODULE_3__.addmN)(out, (0,_normalize__WEBPACK_IMPORTED_MODULE_2__.normalize)(out, (0,_sub__WEBPACK_IMPORTED_MODULE_4__.sub)(out, a, b)), (0,_normalize__WEBPACK_IMPORTED_MODULE_2__.normalize)(null, (0,_sub__WEBPACK_IMPORTED_MODULE_4__.sub)([], c, b)), 0.5), n));
/**
 * 2D version of {@link cornerBisector} which doesn't always bisect the
 * smaller/inside angle, but also doesn't suffer sign/orientation
 * flipping of returned bisector vector.
 *
 * @remarks
 * Instead, the direction of the result is dependent on the orientation
 * of the input triangle. If `a`, `b`, `c` are in CW order, the result
 * will point away from the triangle's centroid. If CCW, the result will
 * point towards the inside.
 *
 * @param out -
 * @param a -
 * @param b -
 * @param c -
 * @param n -
 */
const cornerBisector2 = (out, a, b, c, n = 1) => (!out && (out = []),
    (0,_perpendicular__WEBPACK_IMPORTED_MODULE_5__.perpendicularCCW)(out, (0,_normalize__WEBPACK_IMPORTED_MODULE_2__.normalize)(out, (0,_mixn__WEBPACK_IMPORTED_MODULE_6__.mixN2)(out, (0,_direction__WEBPACK_IMPORTED_MODULE_7__.direction)(out, a, b), (0,_direction__WEBPACK_IMPORTED_MODULE_7__.direction)([], b, c), 0.5), n)));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/bit-and.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/bit-and.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bitAndI": () => (/* binding */ bitAndI),
/* harmony export */   "bitAndI2": () => (/* binding */ bitAndI2),
/* harmony export */   "bitAndI3": () => (/* binding */ bitAndI3),
/* harmony export */   "bitAndI4": () => (/* binding */ bitAndI4),
/* harmony export */   "bitAndU": () => (/* binding */ bitAndU),
/* harmony export */   "bitAndU2": () => (/* binding */ bitAndU2),
/* harmony export */   "bitAndU3": () => (/* binding */ bitAndU3),
/* harmony export */   "bitAndU4": () => (/* binding */ bitAndU4),
/* harmony export */   "bitAndNI": () => (/* binding */ bitAndNI),
/* harmony export */   "bitAndNI2": () => (/* binding */ bitAndNI2),
/* harmony export */   "bitAndNI3": () => (/* binding */ bitAndNI3),
/* harmony export */   "bitAndNI4": () => (/* binding */ bitAndNI4),
/* harmony export */   "bitAndNU": () => (/* binding */ bitAndNU),
/* harmony export */   "bitAndNU2": () => (/* binding */ bitAndNU2),
/* harmony export */   "bitAndNU3": () => (/* binding */ bitAndNU3),
/* harmony export */   "bitAndNU4": () => (/* binding */ bitAndNU4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [bitAndI, bitAndI2, bitAndI3, bitAndI4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOp)("&", true);
const [bitAndU, bitAndU2, bitAndU3, bitAndU4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOp)("&");
const [bitAndNI, bitAndNI2, bitAndNI3, bitAndNI4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOpN)("&", true);
const [bitAndNU, bitAndNU2, bitAndNU3, bitAndNU4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOpN)("&");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/bit-not.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/bit-not.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bitNotI": () => (/* binding */ bitNotI),
/* harmony export */   "bitNotI2": () => (/* binding */ bitNotI2),
/* harmony export */   "bitNotI3": () => (/* binding */ bitNotI3),
/* harmony export */   "bitNotI4": () => (/* binding */ bitNotI4),
/* harmony export */   "bitNotU": () => (/* binding */ bitNotU),
/* harmony export */   "bitNotU2": () => (/* binding */ bitNotU2),
/* harmony export */   "bitNotU3": () => (/* binding */ bitNotU3),
/* harmony export */   "bitNotU4": () => (/* binding */ bitNotU4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [bitNotI, bitNotI2, bitNotI3, bitNotI4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)(([o, a]) => `${o}=(~${a})|0;`, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_V);
const [bitNotU, bitNotU2, bitNotU3, bitNotU4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)(([o, a]) => `${o}=(~${a})>>>0;`, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_V);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/bit-or.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/bit-or.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bitOrI": () => (/* binding */ bitOrI),
/* harmony export */   "bitOrI2": () => (/* binding */ bitOrI2),
/* harmony export */   "bitOrI3": () => (/* binding */ bitOrI3),
/* harmony export */   "bitOrI4": () => (/* binding */ bitOrI4),
/* harmony export */   "bitOrU": () => (/* binding */ bitOrU),
/* harmony export */   "bitOrU2": () => (/* binding */ bitOrU2),
/* harmony export */   "bitOrU3": () => (/* binding */ bitOrU3),
/* harmony export */   "bitOrU4": () => (/* binding */ bitOrU4),
/* harmony export */   "bitOrNI": () => (/* binding */ bitOrNI),
/* harmony export */   "bitOrNI2": () => (/* binding */ bitOrNI2),
/* harmony export */   "bitOrNI3": () => (/* binding */ bitOrNI3),
/* harmony export */   "bitOrNI4": () => (/* binding */ bitOrNI4),
/* harmony export */   "bitOrNU": () => (/* binding */ bitOrNU),
/* harmony export */   "bitOrNU2": () => (/* binding */ bitOrNU2),
/* harmony export */   "bitOrNU3": () => (/* binding */ bitOrNU3),
/* harmony export */   "bitOrNU4": () => (/* binding */ bitOrNU4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [bitOrI, bitOrI2, bitOrI3, bitOrI4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOp)("|", true);
const [bitOrU, bitOrU2, bitOrU3, bitOrU4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOp)("|");
const [bitOrNI, bitOrNI2, bitOrNI3, bitOrNI4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOpN)("|", true);
const [bitOrNU, bitOrNU2, bitOrNU3, bitOrNU4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOpN)("|");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/bit-xor.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/bit-xor.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bitXorI": () => (/* binding */ bitXorI),
/* harmony export */   "bitXorI2": () => (/* binding */ bitXorI2),
/* harmony export */   "bitXorI3": () => (/* binding */ bitXorI3),
/* harmony export */   "bitXorI4": () => (/* binding */ bitXorI4),
/* harmony export */   "bitXorU": () => (/* binding */ bitXorU),
/* harmony export */   "bitXorU2": () => (/* binding */ bitXorU2),
/* harmony export */   "bitXorU3": () => (/* binding */ bitXorU3),
/* harmony export */   "bitXorU4": () => (/* binding */ bitXorU4),
/* harmony export */   "bitXorNI": () => (/* binding */ bitXorNI),
/* harmony export */   "bitXorNI2": () => (/* binding */ bitXorNI2),
/* harmony export */   "bitXorNI3": () => (/* binding */ bitXorNI3),
/* harmony export */   "bitXorNI4": () => (/* binding */ bitXorNI4),
/* harmony export */   "bitXorNU": () => (/* binding */ bitXorNU),
/* harmony export */   "bitXorNU2": () => (/* binding */ bitXorNU2),
/* harmony export */   "bitXorNU3": () => (/* binding */ bitXorNU3),
/* harmony export */   "bitXorNU4": () => (/* binding */ bitXorNU4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [bitXorI, bitXorI2, bitXorI3, bitXorI4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOp)("^", true);
const [bitXorU, bitXorU2, bitXorU3, bitXorU4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOp)("^");
const [bitXorNI, bitXorNI2, bitXorNI3, bitXorNI4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOpN)("^", true);
const [bitXorNU, bitXorNU2, bitXorNU3, bitXorNU4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOpN)("^");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/buffer.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/buffer.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mapBuffer": () => (/* binding */ mapBuffer),
/* harmony export */   "intoBuffer": () => (/* binding */ intoBuffer),
/* harmony export */   "mapStridedBuffer": () => (/* binding */ mapStridedBuffer),
/* harmony export */   "intoStridedBuffer": () => (/* binding */ intoStridedBuffer)
/* harmony export */ });
/* harmony import */ var _thi_ng_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/api */ "./node_modules/@thi.ng/api/api/typedarray.js");

/**
 * Takes an `ArrayBuffer` and creates a number of typed array vector
 * views of `type` with given `size` (number of elements per vector) and
 * spacing. `byteOffset` defines the start offset for the first vector
 * and `byteStride` the number of bytes between resulting vectors
 * (defaults to `size * SIZEOF[type]`). It's user's responsibility to
 * ensure these two values are compatible with the chosen array type
 * (i.e. for `"f32"`, these MUST be multiples of 4).
 *
 * @example
 * ```ts
 * mapBuffer("f32", new ArrayBuffer(32), 4, 2)
 * // [
 * //   Float32Array [ 0, 0 ],
 * //   Float32Array [ 0, 0 ],
 * //   Float32Array [ 0, 0 ],
 * //   Float32Array [ 0, 0 ]
 * // ]
 * ```
 *
 * @param type -
 * @param buf -
 * @param num -
 * @param size -
 * @param byteOffset -
 * @param byteStride -
 */
const mapBuffer = (type, buf, num, size, byteOffset = 0, byteStride = size * _thi_ng_api__WEBPACK_IMPORTED_MODULE_0__.SIZEOF[type]) => {
    const res = [];
    for (; --num >= 0; byteOffset += byteStride) {
        res.push((0,_thi_ng_api__WEBPACK_IMPORTED_MODULE_0__.typedArray)(type, buf, byteOffset, size));
    }
    return res;
};
/**
 * Writes given `src` vector values into mapped `ArrayBuffer` of stated
 * `type` and from given offset & stride/spacing.
 *
 * {@link mapBuffer}
 *
 * @param type -
 * @param buf -
 * @param src -
 * @param byteOffset -
 * @param byteStride -
 */
const intoBuffer = (type, buf, src, byteOffset, byteStride) => {
    const view = (0,_thi_ng_api__WEBPACK_IMPORTED_MODULE_0__.typedArray)(type, buf);
    const size = _thi_ng_api__WEBPACK_IMPORTED_MODULE_0__.SIZEOF[type];
    byteOffset /= size;
    byteStride /= size;
    for (let x of src) {
        view.set(x, byteOffset);
        byteOffset += byteStride;
    }
};
const mapStridedBuffer = (ctor, buf, num, start, cstride, estride) => {
    const res = [];
    while (--num >= 0) {
        res.push(new ctor(buf, start, cstride));
        start += estride;
    }
    return res;
};
const intoStridedBuffer = (set, buf, src, start, cstride, estride) => {
    for (let v of src) {
        set(buf, v, start, 0, cstride, 1);
        start += estride;
    }
    return buf;
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/cartesian.js":
/*!***************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/cartesian.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cartesian": () => (/* binding */ cartesian),
/* harmony export */   "cartesian2": () => (/* binding */ cartesian2),
/* harmony export */   "cartesian3": () => (/* binding */ cartesian3)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/angle.js");
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./api */ "./node_modules/@thi.ng/vectors/api.js");
/* harmony import */ var _internal_vop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/vop */ "./node_modules/@thi.ng/vectors/internal/vop.js");
/* harmony import */ var _maddn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./maddn */ "./node_modules/@thi.ng/vectors/maddn.js");
/* harmony import */ var _setc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./setc */ "./node_modules/@thi.ng/vectors/setc.js");





const cos = Math.cos;
const sin = Math.sin;
/**
 * Converts polar vector `v` to cartesian coordinates and adds optional
 * `offset`. See {@link polar} for reverse operation. If `out` is null,
 * modifies `v` in place.
 *
 * @param out -
 * @param v -
 * @param offset -
 */
const cartesian = (0,_internal_vop__WEBPACK_IMPORTED_MODULE_0__.vop)(1);
/**
 * Converts 2D polar vector `v` to cartesian coordinates and adds
 * optional `offset`. See {@link polar} for reverse operation. If `out` is
 * null, modifies `v` in place.
 *
 * @param out -
 * @param v -
 * @param offset -
 */
const cartesian2 = cartesian.add(2, (out, a, b = _api__WEBPACK_IMPORTED_MODULE_1__.ZERO2) => (0,_maddn__WEBPACK_IMPORTED_MODULE_2__.maddN2)(out || a, (0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_3__.cossin)(a[1]), a[0], b));
/**
 * Converts 3D polar vector `v` to cartesian coordinates and adds
 * optional `offset`. See {@link polar} for reverse operation. If `out` is
 * null, modifies `v` in place.
 *
 * @param out -
 * @param v -
 * @param offset -
 */
const cartesian3 = cartesian.add(3, (out, a, b = _api__WEBPACK_IMPORTED_MODULE_1__.ZERO3) => {
    const r = a[0];
    const theta = a[1];
    const phi = a[2];
    const ct = cos(theta);
    return (0,_setc__WEBPACK_IMPORTED_MODULE_4__.setC3)(out || a, r * ct * cos(phi) + b[0], r * ct * sin(phi) + b[1], r * sin(theta) + b[2]);
});


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/ceil.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/ceil.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ceil": () => (/* binding */ ceil),
/* harmony export */   "ceil2": () => (/* binding */ ceil2),
/* harmony export */   "ceil3": () => (/* binding */ ceil3),
/* harmony export */   "ceil4": () => (/* binding */ ceil4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [ceil, ceil2, ceil3, ceil4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("Math.ceil");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/clamp.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/clamp.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clamp": () => (/* binding */ clamp),
/* harmony export */   "clamp2": () => (/* binding */ clamp2),
/* harmony export */   "clamp3": () => (/* binding */ clamp3),
/* harmony export */   "clamp4": () => (/* binding */ clamp4),
/* harmony export */   "clamp01": () => (/* binding */ clamp01),
/* harmony export */   "clamp01_2": () => (/* binding */ clamp01_2),
/* harmony export */   "clamp01_3": () => (/* binding */ clamp01_3),
/* harmony export */   "clamp01_4": () => (/* binding */ clamp01_4),
/* harmony export */   "clamp11": () => (/* binding */ clamp11),
/* harmony export */   "clamp11_2": () => (/* binding */ clamp11_2),
/* harmony export */   "clamp11_3": () => (/* binding */ clamp11_3),
/* harmony export */   "clamp11_4": () => (/* binding */ clamp11_4)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/interval.js");
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");



const [clamp, clamp2, clamp3, clamp4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.clamp, (0,_internal_templates__WEBPACK_IMPORTED_MODULE_2__.FN3)(), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV);
const [clamp01, clamp01_2, clamp01_3, clamp01_4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.clamp01, (0,_internal_templates__WEBPACK_IMPORTED_MODULE_2__.FN3)(), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV);
const [clamp11, clamp11_2, clamp11_3, clamp11_4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.clamp11, (0,_internal_templates__WEBPACK_IMPORTED_MODULE_2__.FN3)(), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/clampn.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/clampn.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clampN": () => (/* binding */ clampN),
/* harmony export */   "clampN2": () => (/* binding */ clampN2),
/* harmony export */   "clampN3": () => (/* binding */ clampN3),
/* harmony export */   "clampN4": () => (/* binding */ clampN4)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/interval.js");
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");


const [clampN, clampN2, clampN3, clampN4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.clamp, ([o, a]) => `${o}=op(${a},n,m);`, "o,a,n,m", "o,a");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/clockwise.js":
/*!***************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/clockwise.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "corner2": () => (/* binding */ corner2),
/* harmony export */   "clockwise2": () => (/* binding */ clockwise2)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/api.js");
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/abs.js");
/* harmony import */ var _signed_area__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./signed-area */ "./node_modules/@thi.ng/vectors/signed-area.js");


/**
 * Syntax sugar for `sign(signedArea2(a, b, c))`.
 *
 * - {@link @thi.ng/math#sign}
 * - {@link signedArea2}
 *
 * @param a -
 * @param b -
 * @param c -
 * @param eps - zero tolerance for sign computation
 */
const corner2 = (a, b, c, eps = _thi_ng_math__WEBPACK_IMPORTED_MODULE_0__.EPS) => (0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.sign)((0,_signed_area__WEBPACK_IMPORTED_MODULE_2__.signedArea2)(a, b, c), eps);
/**
 * Returns true, if the triangle `a`, `b`, `c` is in clockwise order,
 * i.e. if `corner2(a,b,c)` returned -1.
 *
 * @param a -
 * @param b -
 * @param c -
 * @param eps -
 */
const clockwise2 = (a, b, c, eps = _thi_ng_math__WEBPACK_IMPORTED_MODULE_0__.EPS) => corner2(a, b, c, eps) < 0;


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/compare.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/compare.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "comparator2": () => (/* binding */ comparator2),
/* harmony export */   "comparator3": () => (/* binding */ comparator3),
/* harmony export */   "comparator4": () => (/* binding */ comparator4)
/* harmony export */ });
/**
 * Returns a new 2D vector comparator using given component order. The
 * comparator returns the signed index+1 of the first differing
 * component, e.g. if order is `0,1`, a return value of -2 means that
 * `a.y < b.y`.
 *
 * @param o1 -
 * @param o2 -
 */
const comparator2 = (o1, o2) => (a, b) => {
    const ax = a[o1];
    const ay = a[o2];
    const bx = b[o1];
    const by = b[o2];
    return ax === bx ? (ay === by ? 0 : ay < by ? -2 : 2) : ax < bx ? -1 : 1;
};
/**
 * Returns a new 3D vector comparator using given component order. The
 * comparator returns the signed index+1 of the first differing
 * component, e.g. if order is `0,1,2`, a return value of -3 means that
 * `a.z < b.z`.
 *
 * @param o1 -
 * @param o2 -
 * @param o3 -
 */
const comparator3 = (o1, o2, o3) => (a, b) => {
    const ax = a[o1];
    const ay = a[o2];
    const az = a[o3];
    const bx = b[o1];
    const by = b[o2];
    const bz = b[o3];
    return ax === bx
        ? ay === by
            ? az === bz
                ? 0
                : az < bz
                    ? -3
                    : 3
            : ay < by
                ? -2
                : 2
        : ax < bx
            ? -1
            : 1;
};
/**
 * Returns a new 4D vector comparator using given component order. The
 * comparator returns the signed index+1 of the first differing
 * component, e.g. if order is `0,1,2,3`, a return value of -4 means
 * that `a.w < b.w`.
 *
 * @param o1 -
 * @param o2 -
 * @param o3 -
 * @param o4 -
 */
const comparator4 = (o1, o2, o3, o4) => (a, b) => {
    const ax = a[o1];
    const ay = a[o2];
    const az = a[o3];
    const aw = b[o4];
    const bx = b[o1];
    const by = b[o2];
    const bz = b[o3];
    const bw = b[o4];
    return ax === bx
        ? ay === by
            ? az === bz
                ? aw === bw
                    ? 0
                    : aw < bw
                        ? -4
                        : 4
                : az < bz
                    ? -3
                    : 3
            : ay < by
                ? -2
                : 2
        : ax < bx
            ? -1
            : 1;
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/convert.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/convert.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asIVec": () => (/* binding */ asIVec),
/* harmony export */   "asIVec2": () => (/* binding */ asIVec2),
/* harmony export */   "asIVec3": () => (/* binding */ asIVec3),
/* harmony export */   "asIVec4": () => (/* binding */ asIVec4),
/* harmony export */   "asUVec": () => (/* binding */ asUVec),
/* harmony export */   "asUVec2": () => (/* binding */ asUVec2),
/* harmony export */   "asUVec3": () => (/* binding */ asUVec3),
/* harmony export */   "asUVec4": () => (/* binding */ asUVec4),
/* harmony export */   "asBVec": () => (/* binding */ asBVec),
/* harmony export */   "asBVec2": () => (/* binding */ asBVec2),
/* harmony export */   "asBVec3": () => (/* binding */ asBVec3),
/* harmony export */   "asBVec4": () => (/* binding */ asBVec4),
/* harmony export */   "fromBVec": () => (/* binding */ fromBVec),
/* harmony export */   "fromBVec2": () => (/* binding */ fromBVec2),
/* harmony export */   "fromBVec3": () => (/* binding */ fromBVec3),
/* harmony export */   "fromBVec4": () => (/* binding */ fromBVec4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const $ = (tpl, pre = _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.NEW_OUT) => (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)(tpl, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_V, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_V, "o", 1, pre);
const [asIVec, asIVec2, asIVec3, asIVec4] = $(([o, a]) => `${o}=${a}|0;`);
const [asUVec, asUVec2, asUVec3, asUVec4] = $(([o, a]) => `${o}=${a}>>>0;`);
const [asBVec, asBVec2, asBVec3, asBVec4] = $(([o, a]) => `${o}=!!${a};`);
const [fromBVec, fromBVec2, fromBVec3, fromBVec4] = $(([o, a]) => `${o}=~~${a};`);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/copy.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/copy.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "copy": () => (/* binding */ copy),
/* harmony export */   "copyVectors": () => (/* binding */ copyVectors)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/implements-function.js");
/* harmony import */ var _set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./set */ "./node_modules/@thi.ng/vectors/set.js");


const copy = (v) => (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.implementsFunction)(v, "copy") ? v.copy() : (0,_set__WEBPACK_IMPORTED_MODULE_1__.set)([], v);
const copyVectors = (pts) => pts.map(copy);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/cos.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/cos.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cos": () => (/* binding */ cos),
/* harmony export */   "cos2": () => (/* binding */ cos2),
/* harmony export */   "cos3": () => (/* binding */ cos3),
/* harmony export */   "cos4": () => (/* binding */ cos4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [cos, cos2, cos3, cos4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("Math.cos");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/cosh.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/cosh.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cosh": () => (/* binding */ cosh),
/* harmony export */   "cosh2": () => (/* binding */ cosh2),
/* harmony export */   "cosh3": () => (/* binding */ cosh3),
/* harmony export */   "cosh4": () => (/* binding */ cosh4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [cosh, cosh2, cosh3, cosh4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("Math.cosh");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/cross.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/cross.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cross2": () => (/* binding */ cross2),
/* harmony export */   "cross3": () => (/* binding */ cross3)
/* harmony export */ });
/* harmony import */ var _setc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setc */ "./node_modules/@thi.ng/vectors/setc.js");

const cross2 = (a, b) => a[0] * b[1] - a[1] * b[0];
const cross3 = (out, a, b) => (0,_setc__WEBPACK_IMPORTED_MODULE_0__.setC3)(out || a, a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/crosss.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/crosss.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "crossS2": () => (/* binding */ crossS2),
/* harmony export */   "crossS3": () => (/* binding */ crossS3)
/* harmony export */ });
/* harmony import */ var _setcs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setcs */ "./node_modules/@thi.ng/vectors/setcs.js");

const crossS2 = (a, b, ia = 0, ib = 0, sa = 1, sb = 1) => a[ia] * b[ib + sb] - a[ia + sa] * b[ib];
const crossS3 = (out, a, b, io = 0, ia = 0, ib = 0, so = 1, sa = 1, sb = 1) => (0,_setcs__WEBPACK_IMPORTED_MODULE_0__.setCS3)(out || a, a[ia + sa] * b[ib + 2 * sb] - a[ia + 2 * sa] * b[ib + sb], a[ia + 2 * sa] * b[ib] - a[ia] * b[ib + 2 * sb], a[ia] * b[ib + sb] - a[ia + sa] * b[ib], io, so);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/degrees.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/degrees.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "degrees": () => (/* binding */ degrees),
/* harmony export */   "degrees2": () => (/* binding */ degrees2),
/* harmony export */   "degrees3": () => (/* binding */ degrees3),
/* harmony export */   "degrees4": () => (/* binding */ degrees4)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/angle.js");
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");



const [degrees, degrees2, degrees3, degrees4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.deg, (0,_internal_templates__WEBPACK_IMPORTED_MODULE_2__.FN)("op"));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/direction.js":
/*!***************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/direction.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "direction": () => (/* binding */ direction)
/* harmony export */ });
/* harmony import */ var _normalize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./normalize */ "./node_modules/@thi.ng/vectors/normalize.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sub */ "./node_modules/@thi.ng/vectors/sub.js");


/**
 * Computes direction vector `a` -> `b`, normalized to length `n`
 * (default 1).
 *
 * @param a -
 * @param b -
 * @param n -
 */
const direction = (out, a, b, n = 1) => (0,_normalize__WEBPACK_IMPORTED_MODULE_0__.normalize)(null, (0,_sub__WEBPACK_IMPORTED_MODULE_1__.sub)(out || a, b, a), n);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/dist-chebyshev.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/dist-chebyshev.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "distChebyshev": () => (/* binding */ distChebyshev),
/* harmony export */   "distChebyshev2": () => (/* binding */ distChebyshev2),
/* harmony export */   "distChebyshev3": () => (/* binding */ distChebyshev3),
/* harmony export */   "distChebyshev4": () => (/* binding */ distChebyshev4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_vop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/vop */ "./node_modules/@thi.ng/vectors/internal/vop.js");


const $ = (dim) => distChebyshev.add(dim, (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.compile)(dim, ([a, b]) => `Math.abs(${a}-${b})`, "a,b", undefined, "", ",", "return Math.max(", ");"));
const distChebyshev = (0,_internal_vop__WEBPACK_IMPORTED_MODULE_1__.vop)();
distChebyshev.default((a, b) => {
    let max = 0;
    for (let i = a.length; --i >= 0;) {
        max = Math.max(max, Math.abs(a[i] - b[i]));
    }
    return max;
});
const distChebyshev2 = $(2);
const distChebyshev3 = $(3);
const distChebyshev4 = $(4);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/dist-haversine.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/dist-haversine.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "distHaversineLatLon": () => (/* binding */ distHaversineLatLon),
/* harmony export */   "distHaversineLonLat": () => (/* binding */ distHaversineLonLat)
/* harmony export */ });
/* harmony import */ var _radians__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./radians */ "./node_modules/@thi.ng/vectors/radians.js");

/**
 * Returns distance between 2 points along a great circle on a sphere, using the
 * Haversine formula, with each point given as [lat, lon] (in WGS84 format).
 * Uses Earth's radius `r=6371` by default, therefore returns distance in km (by
 * default).
 *
 * @remarks
 * References:
 * - https://en.wikipedia.org/wiki/Haversine_formula
 * - https://stackoverflow.com/a/21623206
 *
 * @param a
 * @param b
 * @param r
 */
const distHaversineLatLon = (a, b, r = 6371) => {
    a = (0,_radians__WEBPACK_IMPORTED_MODULE_0__.radians2)([], a);
    b = (0,_radians__WEBPACK_IMPORTED_MODULE_0__.radians2)([], b);
    return dist(a[0], a[1], b[0], b[1], r);
};
/**
 * Same as {@link distHaversineLatLon}, only for coordinates defined in
 * [lon,lat] order.
 *
 * @param a
 * @param b
 * @param r
 * @returns
 */
const distHaversineLonLat = (a, b, r = 6371) => {
    a = (0,_radians__WEBPACK_IMPORTED_MODULE_0__.radians2)([], a);
    b = (0,_radians__WEBPACK_IMPORTED_MODULE_0__.radians2)([], b);
    return dist(a[1], a[0], b[1], b[0], r);
};
const dist = (lat1, lon1, lat2, lon2, r) => {
    const dlat = 0.5 - Math.cos(lat2 - lat1) * 0.5;
    const dlon = (1 - Math.cos(lon2 - lon1)) * 0.5;
    const combined = dlat + Math.cos(lat1) * Math.cos(lat2) * dlon;
    return 2 * r * Math.asin(Math.sqrt(combined));
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/dist-manhattan.js":
/*!********************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/dist-manhattan.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "distManhattan": () => (/* binding */ distManhattan),
/* harmony export */   "distManhattan2": () => (/* binding */ distManhattan2),
/* harmony export */   "distManhattan3": () => (/* binding */ distManhattan3),
/* harmony export */   "distManhattan4": () => (/* binding */ distManhattan4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_vop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/vop */ "./node_modules/@thi.ng/vectors/internal/vop.js");


const $ = (dim) => distManhattan.add(dim, (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.compile)(dim, ([a, b]) => `Math.abs(${a}-${b})`, "a,b", undefined, "", "+", "return ", ";"));
const distManhattan = (0,_internal_vop__WEBPACK_IMPORTED_MODULE_1__.vop)();
distManhattan.default((0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.compileG)(([a, b]) => `sum+=Math.abs(${a}-${b});`, "a,b", undefined, "sum", "let sum=0;"));
const distManhattan2 = $(2);
const distManhattan3 = $(3);
const distManhattan4 = $(4);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/dist-weighted.js":
/*!*******************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/dist-weighted.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "weightedDistance": () => (/* binding */ weightedDistance)
/* harmony export */ });
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mul */ "./node_modules/@thi.ng/vectors/mul.js");

/**
 * Higher order distance function. Takes an existing {@link DistanceFn} `fn` and
 * a vector of `weights` to control impact of each dimension. Returns new
 * {@link DistanceFn}, which when called, first applies `weights` to both inputs
 * and then uses `fn` to compute distance between the weighted results.
 *
 * @example
 * ```ts
 * const distXZ = weightedDistance(dist3, [1,0,1]);
 *
 * // distance in XZ plane only
 * distXZ(ONE3, ZERO3);
 * // 1.4142135623730951
 *
 * // compare with full eucledian distance
 * dist3(ONE3, ZERO3);
 * // 1.7320508075688772
 * ```
 *
 * @param fn
 * @param weights
 */
const weightedDistance = (fn, weights) => (a, b) => fn((0,_mul__WEBPACK_IMPORTED_MODULE_0__.mul)([], a, weights), (0,_mul__WEBPACK_IMPORTED_MODULE_0__.mul)([], b, weights));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/dist.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/dist.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dist": () => (/* binding */ dist),
/* harmony export */   "dist2": () => (/* binding */ dist2),
/* harmony export */   "dist3": () => (/* binding */ dist3),
/* harmony export */   "dist4": () => (/* binding */ dist4)
/* harmony export */ });
/* harmony import */ var _distsq__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distsq */ "./node_modules/@thi.ng/vectors/distsq.js");

const dist = (a, b) => Math.sqrt((0,_distsq__WEBPACK_IMPORTED_MODULE_0__.distSq)(a, b));
const dist2 = (a, b) => Math.sqrt((0,_distsq__WEBPACK_IMPORTED_MODULE_0__.distSq2)(a, b));
const dist3 = (a, b) => Math.sqrt((0,_distsq__WEBPACK_IMPORTED_MODULE_0__.distSq3)(a, b));
const dist4 = (a, b) => Math.sqrt((0,_distsq__WEBPACK_IMPORTED_MODULE_0__.distSq4)(a, b));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/distsq.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/distsq.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "distSq": () => (/* binding */ distSq),
/* harmony export */   "distSq2": () => (/* binding */ distSq2),
/* harmony export */   "distSq3": () => (/* binding */ distSq3),
/* harmony export */   "distSq4": () => (/* binding */ distSq4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_vop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/vop */ "./node_modules/@thi.ng/vectors/internal/vop.js");


const tpl = ([a, b]) => `t=${a}-${b};s+=t*t;`;
const pre = "let t,s=0;";
const $ = (dim) => distSq.add(dim, (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.compile)(dim, tpl, "a,b", undefined, "s", "", pre));
const distSq = (0,_internal_vop__WEBPACK_IMPORTED_MODULE_1__.vop)();
distSq.default((0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.compileG)(tpl, "a,b", undefined, "s", pre));
const distSq2 = $(2);
const distSq3 = $(3);
const distSq4 = $(4);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/div.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/div.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "div": () => (/* binding */ div),
/* harmony export */   "div2": () => (/* binding */ div2),
/* harmony export */   "div3": () => (/* binding */ div3),
/* harmony export */   "div4": () => (/* binding */ div4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [div, div2, div3, div4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defMathOp)("/");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/divi.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/divi.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "divI": () => (/* binding */ divI),
/* harmony export */   "divI2": () => (/* binding */ divI2),
/* harmony export */   "divI3": () => (/* binding */ divI3),
/* harmony export */   "divI4": () => (/* binding */ divI4),
/* harmony export */   "divU": () => (/* binding */ divU),
/* harmony export */   "divU2": () => (/* binding */ divU2),
/* harmony export */   "divU3": () => (/* binding */ divU3),
/* harmony export */   "divU4": () => (/* binding */ divU4),
/* harmony export */   "divNI": () => (/* binding */ divNI),
/* harmony export */   "divNI2": () => (/* binding */ divNI2),
/* harmony export */   "divNI3": () => (/* binding */ divNI3),
/* harmony export */   "divNI4": () => (/* binding */ divNI4),
/* harmony export */   "divNU": () => (/* binding */ divNU),
/* harmony export */   "divNU2": () => (/* binding */ divNU2),
/* harmony export */   "divNU3": () => (/* binding */ divNU3),
/* harmony export */   "divNU4": () => (/* binding */ divNU4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [divI, divI2, divI3, divI4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOp)("/", true);
const [divU, divU2, divU3, divU4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOp)("/");
const [divNI, divNI2, divNI3, divNI4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOpN)("/", true);
const [divNU, divNU2, divNU3, divNU4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOpN)("/");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/divn.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/divn.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "divN": () => (/* binding */ divN),
/* harmony export */   "divN2": () => (/* binding */ divN2),
/* harmony export */   "divN3": () => (/* binding */ divN3),
/* harmony export */   "divN4": () => (/* binding */ divN4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [divN, divN2, divN3, divN4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defMathOpN)("/");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/divns.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/divns.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "divNS2": () => (/* binding */ divNS2),
/* harmony export */   "divNS3": () => (/* binding */ divNS3),
/* harmony export */   "divNS4": () => (/* binding */ divNS4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [divNS2, divNS3, divNS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOpS)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH_N)("/"), `${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VN},${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.SARGS_V}`, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_V);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/divs.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/divs.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "divS2": () => (/* binding */ divS2),
/* harmony export */   "divS3": () => (/* binding */ divS3),
/* harmony export */   "divS4": () => (/* binding */ divS4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [divS2, divS3, divS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOpS)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH)("/"));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/dot.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/dot.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dot": () => (/* binding */ dot),
/* harmony export */   "dot2": () => (/* binding */ dot2),
/* harmony export */   "dot3": () => (/* binding */ dot3),
/* harmony export */   "dot4": () => (/* binding */ dot4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");
/* harmony import */ var _internal_vop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/vop */ "./node_modules/@thi.ng/vectors/internal/vop.js");



const $ = (dim) => dot.add(dim, (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.compile)(dim, _internal_templates__WEBPACK_IMPORTED_MODULE_1__.DOT, "a,b", undefined, "", "+", "return ", ";"));
const dot = (0,_internal_vop__WEBPACK_IMPORTED_MODULE_2__.vop)();
dot.default((0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.compileG)(_internal_templates__WEBPACK_IMPORTED_MODULE_1__.DOT_G, "a,b", undefined, "s", "let s=0;"));
const dot2 = $(2);
const dot3 = $(3);
const dot4 = $(4);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/dotc.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/dotc.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dotC4": () => (/* binding */ dotC4),
/* harmony export */   "dotC6": () => (/* binding */ dotC6),
/* harmony export */   "dotC8": () => (/* binding */ dotC8)
/* harmony export */ });
/**
 * Returns pairwise product sum of given components.
 *
 * @param a -
 * @param b -
 * @param c -
 * @param d -
 */
const dotC4 = (a, b, c, d) => a * b + c * d;
/**
 * Returns pairwise product sum of given components.
 *
 * @param a -
 * @param b -
 * @param c -
 * @param d -
 * @param e -
 * @param f -
 */
const dotC6 = (a, b, c, d, e, f) => a * b + c * d + e * f;
/**
 * Returns pairwise product sum of given components.
 *
 * @param a -
 * @param b -
 * @param c -
 * @param d -
 * @param e -
 * @param f -
 * @param g -
 * @param h -
 */
const dotC8 = (a, b, c, d, e, f, g, h) => a * b + c * d + e * f + g * h;


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/dots.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/dots.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dotS2": () => (/* binding */ dotS2),
/* harmony export */   "dotS3": () => (/* binding */ dotS3),
/* harmony export */   "dotS4": () => (/* binding */ dotS4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const $ = (dim) => (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.compile)(dim, _internal_templates__WEBPACK_IMPORTED_MODULE_1__.DOT, `o,a,${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.SARGS_V}`, "o,a", "", "+", "return ", ";", true);
const dotS2 = $(2);
const dotS3 = $(3);
const dotS4 = $(4);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/empty.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/empty.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "empty": () => (/* binding */ empty)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/implements-function.js");
/* harmony import */ var _setn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./setn */ "./node_modules/@thi.ng/vectors/setn.js");


const empty = (v) => (0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.implementsFunction)(v, "empty") ? v.empty() : (0,_setn__WEBPACK_IMPORTED_MODULE_1__.zeroes)(v.length);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/eq.js":
/*!********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/eq.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "eq": () => (/* binding */ eq),
/* harmony export */   "eq2": () => (/* binding */ eq2),
/* harmony export */   "eq3": () => (/* binding */ eq3),
/* harmony export */   "eq4": () => (/* binding */ eq4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [eq, eq2, eq3, eq4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH)("==="));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/eqdelta.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/eqdelta.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "eqDelta": () => (/* binding */ eqDelta),
/* harmony export */   "eqDelta2": () => (/* binding */ eqDelta2),
/* harmony export */   "eqDelta3": () => (/* binding */ eqDelta3),
/* harmony export */   "eqDelta4": () => (/* binding */ eqDelta4),
/* harmony export */   "eqDeltaS": () => (/* binding */ eqDeltaS),
/* harmony export */   "eqDeltaArray": () => (/* binding */ eqDeltaArray),
/* harmony export */   "isInArray": () => (/* binding */ isInArray)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/implements-function.js");
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/eqdelta.js");
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/api.js");
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_vop__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/vop */ "./node_modules/@thi.ng/vectors/internal/vop.js");




const $ = (dim) => eqDelta.add(dim, (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.compileHOF)(dim, [_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.eqDelta, _thi_ng_math__WEBPACK_IMPORTED_MODULE_2__.EPS], ([a, b]) => `eq(${a},${b},eps)`, "eq,_eps", "a,b,eps=_eps", "a,b", "", "&&", "return a.length === b.length && ", ";"));
/**
 * Checks given vectors for componentwise equality, taking tolerance
 * `eps` (default: {@link @thi.ng/math#EPS}) into account.
 *
 * @param a
 * @param b
 * @param eps
 */
const eqDelta = (0,_internal_vop__WEBPACK_IMPORTED_MODULE_3__.vop)();
eqDelta.default((v1, v2, eps = _thi_ng_math__WEBPACK_IMPORTED_MODULE_2__.EPS) => {
    if ((0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_4__.implementsFunction)(v1, "eqDelta")) {
        return v1.eqDelta(v2, eps);
    }
    if ((0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_4__.implementsFunction)(v2, "eqDelta")) {
        return v2.eqDelta(v1, eps);
    }
    return eqDeltaS(v1, v2, v1.length, eps);
});
const eqDelta2 = $(2);
const eqDelta3 = $(3);
const eqDelta4 = $(4);
/**
 * Checks given strided vectors for componentwise equality, taking
 * tolerance `eps` (default: {@link @thi.ng/math#EPS}) into account.
 *
 * @param a - first vector
 * @param b - second vector
 * @param n - number of elements
 * @param eps - tolerance
 * @param ia - start index a
 * @param ib - start index b
 * @param sa - stride a
 * @param sb - stride b
 */
const eqDeltaS = (a, b, n, eps = _thi_ng_math__WEBPACK_IMPORTED_MODULE_2__.EPS, ia = 0, ib = 0, sa = 1, sb = 1) => {
    for (; n > 0; n--, ia += sa, ib += sb) {
        if (!(0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.eqDelta)(a[ia], b[ib], eps)) {
            return false;
        }
    }
    return true;
};
const eqDeltaArray = (a, b, eps = _thi_ng_math__WEBPACK_IMPORTED_MODULE_2__.EPS) => {
    if (a === b)
        return true;
    if (a.length !== b.length)
        return false;
    for (let i = a.length; --i >= 0;) {
        if (!eqDelta(a[i], b[i], eps)) {
            return false;
        }
    }
    return true;
};
const isInArray = (p, pts, eps = _thi_ng_math__WEBPACK_IMPORTED_MODULE_2__.EPS) => {
    for (let i = pts.length; --i >= 0;) {
        if (eqDelta(p, pts[i], eps)) {
            return true;
        }
    }
    return false;
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/equals.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/equals.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "equals": () => (/* binding */ equals),
/* harmony export */   "equals2": () => (/* binding */ equals2),
/* harmony export */   "equals3": () => (/* binding */ equals3),
/* harmony export */   "equals4": () => (/* binding */ equals4)
/* harmony export */ });
/* harmony import */ var _thi_ng_equiv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/equiv */ "./node_modules/@thi.ng/equiv/index.js");
/* harmony import */ var _internal_vop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/vop */ "./node_modules/@thi.ng/vectors/internal/vop.js");


const equals = (0,_internal_vop__WEBPACK_IMPORTED_MODULE_0__.vop)(0);
const equals2 = equals.add(2, (a, b) => a[0] === b[0] && a[1] === b[1]);
const equals3 = equals.add(3, (a, b) => a[0] === b[0] && a[1] === b[1] && a[2] === b[2]);
const equals4 = equals.add(4, (a, b) => a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3]);
equals.default(_thi_ng_equiv__WEBPACK_IMPORTED_MODULE_1__.equivArrayLike);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/every.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/every.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "every": () => (/* binding */ every),
/* harmony export */   "every2": () => (/* binding */ every2),
/* harmony export */   "every3": () => (/* binding */ every3),
/* harmony export */   "every4": () => (/* binding */ every4)
/* harmony export */ });
/* harmony import */ var _internal_vop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/vop */ "./node_modules/@thi.ng/vectors/internal/vop.js");

/**
 * Returns returns true if all vector components in `v` are truthy.
 *
 * @param v -
 */
const every = (0,_internal_vop__WEBPACK_IMPORTED_MODULE_0__.vop)();
every.default((v) => {
    for (let i = v.length; --i >= 0;) {
        if (!v[i])
            return false;
    }
    return true;
});
const every2 = every.add(2, (a) => a[0] && a[1]);
const every3 = every.add(3, (a) => a[0] && a[1] && a[2]);
const every4 = every.add(4, (a) => a[0] && a[1] && a[2] && a[3]);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/exp.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/exp.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "exp": () => (/* binding */ exp),
/* harmony export */   "exp2": () => (/* binding */ exp2),
/* harmony export */   "exp3": () => (/* binding */ exp3),
/* harmony export */   "exp4": () => (/* binding */ exp4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [exp, exp2, exp3, exp4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("Math.exp");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/exp_2.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/exp_2.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "exp_2": () => (/* binding */ exp_2),
/* harmony export */   "exp_22": () => (/* binding */ exp_22),
/* harmony export */   "exp_23": () => (/* binding */ exp_23),
/* harmony export */   "exp_24": () => (/* binding */ exp_24)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

/**
 * Componentwise 2^x
 */
const [exp_2, exp_22, exp_23, exp_24] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)(([o, a]) => `${o}=Math.pow(2,${a});`, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_V);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/face-forward.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/face-forward.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "faceForward": () => (/* binding */ faceForward)
/* harmony export */ });
/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dot */ "./node_modules/@thi.ng/vectors/dot.js");
/* harmony import */ var _muln__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./muln */ "./node_modules/@thi.ng/vectors/muln.js");
/* harmony import */ var _set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./set */ "./node_modules/@thi.ng/vectors/set.js");



const faceForward = (out, n, i, nref) => {
    !out && (out = n);
    return (0,_dot__WEBPACK_IMPORTED_MODULE_0__.dot)(nref, i) < 0
        ? out !== n
            ? (0,_set__WEBPACK_IMPORTED_MODULE_1__.set)(out, n)
            : out
        : (0,_muln__WEBPACK_IMPORTED_MODULE_2__.mulN)(out, n, -1);
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/fill.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/fill.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fill": () => (/* binding */ fill)
/* harmony export */ });
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map */ "./node_modules/@thi.ng/vectors/map.js");
/* harmony import */ var _set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./set */ "./node_modules/@thi.ng/vectors/set.js");


/**
 * Fills Vec2/3/4 view based buffer, supporting arbitrary component and
 * element layouts of both the input and output buffers. The `out`
 * vector is used as write cursor over the underlying buffer and will be
 * filled with the components of vector `v`.
 *
 * @example
 * ```ts
 * fill(
 *   new Vec2(new Float32Array(12)),
 *   new Vec2([1, 2]),
 *   3, // num elements
 *   4  // stride
 * )
 * // Float32Array [1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0]
 * ```
 *
 * @param out - target vector / wrapped buffer
 * @param v - fill vector
 * @param num - number of elements to fill
 * @param so - output stride
 */
const fill = (out, v, num, so = out.length * out.stride) => (0,_map__WEBPACK_IMPORTED_MODULE_0__.mapV)(_set__WEBPACK_IMPORTED_MODULE_1__.set.impl(v.length), out, v, num, so, 0);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/fit.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/fit.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fit": () => (/* binding */ fit),
/* harmony export */   "fit2": () => (/* binding */ fit2),
/* harmony export */   "fit3": () => (/* binding */ fit3),
/* harmony export */   "fit4": () => (/* binding */ fit4),
/* harmony export */   "fit01": () => (/* binding */ fit01),
/* harmony export */   "fit01_2": () => (/* binding */ fit01_2),
/* harmony export */   "fit01_3": () => (/* binding */ fit01_3),
/* harmony export */   "fit01_4": () => (/* binding */ fit01_4),
/* harmony export */   "fit11": () => (/* binding */ fit11),
/* harmony export */   "fit11_2": () => (/* binding */ fit11_2),
/* harmony export */   "fit11_3": () => (/* binding */ fit11_3),
/* harmony export */   "fit11_4": () => (/* binding */ fit11_4)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/fit.js");
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");



const [fit, fit2, fit3, fit4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.fit, (0,_internal_templates__WEBPACK_IMPORTED_MODULE_2__.FN5)(), "o,a,b,c,d,e");
const [fit01, fit01_2, fit01_3, fit01_4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.fit01, (0,_internal_templates__WEBPACK_IMPORTED_MODULE_2__.FN3)(), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV);
const [fit11, fit11_2, fit11_3, fit11_4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.fit11, (0,_internal_templates__WEBPACK_IMPORTED_MODULE_2__.FN3)(), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/floor.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/floor.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "floor": () => (/* binding */ floor),
/* harmony export */   "floor2": () => (/* binding */ floor2),
/* harmony export */   "floor3": () => (/* binding */ floor3),
/* harmony export */   "floor4": () => (/* binding */ floor4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [floor, floor2, floor3, floor4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("Math.floor");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/fmod.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/fmod.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fmod": () => (/* binding */ fmod),
/* harmony export */   "fmod2": () => (/* binding */ fmod2),
/* harmony export */   "fmod3": () => (/* binding */ fmod3),
/* harmony export */   "fmod4": () => (/* binding */ fmod4)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/prec.js");
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");



/**
 * This version of mod uses the same logic as in GLSL, whereas {@link mod}
 * merely uses JavaScript's `%` modulo operator, yielding different
 * results for negative values, i.e. using the sign of the last arg.
 *
 * `a - b * floor(a/b)`
 *
 */
const [fmod, fmod2, fmod3, fmod4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.fmod, (0,_internal_templates__WEBPACK_IMPORTED_MODULE_2__.FN2)("op"), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VV);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/fmodn.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/fmodn.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fmodN": () => (/* binding */ fmodN),
/* harmony export */   "fmodN2": () => (/* binding */ fmodN2),
/* harmony export */   "fmodN3": () => (/* binding */ fmodN3),
/* harmony export */   "fmodN4": () => (/* binding */ fmodN4)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/prec.js");
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");



/**
 * Same as {@link fmod}, but 2nd operand is a single scalar (uniform domain
 * for all vector components).
 */
const [fmodN, fmodN2, fmodN3, fmodN4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.fmod, (0,_internal_templates__WEBPACK_IMPORTED_MODULE_2__.FN_N)("op"), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VN, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_V);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/fract.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/fract.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fract": () => (/* binding */ fract),
/* harmony export */   "fract2": () => (/* binding */ fract2),
/* harmony export */   "fract3": () => (/* binding */ fract3),
/* harmony export */   "fract4": () => (/* binding */ fract4)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/prec.js");
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");


const [fract, fract2, fract3, fract4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.fract);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/gt.js":
/*!********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/gt.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gt": () => (/* binding */ gt),
/* harmony export */   "gt2": () => (/* binding */ gt2),
/* harmony export */   "gt3": () => (/* binding */ gt3),
/* harmony export */   "gt4": () => (/* binding */ gt4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [gt, gt2, gt3, gt4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH)(">"));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/gte.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/gte.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gte": () => (/* binding */ gte),
/* harmony export */   "gte2": () => (/* binding */ gte2),
/* harmony export */   "gte3": () => (/* binding */ gte3),
/* harmony export */   "gte4": () => (/* binding */ gte4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [gte, gte2, gte3, gte4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH)(">="));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/gvec.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/gvec.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gvec": () => (/* binding */ gvec)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/api.js");
/* harmony import */ var _thi_ng_memoize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/memoize */ "./node_modules/@thi.ng/memoize/memoize1.js");
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/xform/map.js");
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/iter/range.js");
/* harmony import */ var _eqdelta__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./eqdelta */ "./node_modules/@thi.ng/vectors/eqdelta.js");
/* harmony import */ var _internal_vec_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/vec-utils */ "./node_modules/@thi.ng/vectors/internal/vec-utils.js");
/* harmony import */ var _setn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./setn */ "./node_modules/@thi.ng/vectors/setn.js");
/* harmony import */ var _sets__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sets */ "./node_modules/@thi.ng/vectors/sets.js");







const SYM_B = "buf";
const SYM_L = "length";
const SYM_O = "offset";
const SYM_S = "stride";
const SYM_C = "copy";
const SYM_CV = "copyView";
const SYM_EMPTY = "empty";
const SYM_EQD = "eqDelta";
const SYM_STR = "toString";
const PROPS = new Set([
    SYM_B,
    SYM_C,
    SYM_CV,
    SYM_EMPTY,
    SYM_EQD,
    SYM_L,
    SYM_O,
    SYM_S,
    SYM_STR,
    Symbol.iterator,
]);
const keys = (0,_thi_ng_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize1)((size) => [
    ...(0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_1__.map)(String, (0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_2__.range)(size)),
    ...PROPS,
]);
/**
 * Wrapper for strided, arbitrary length vectors.
 *
 * @remarks
 * Wraps given buffer in ES6 `Proxy` with custom property
 * getters/setters and implements the following interfaces:
 *
 * - `Iterable` (ES6)
 * - {@link @thi.ng/api#ICopy}
 * - {@link @thi.ng/api#IEmpty}
 * - {@link @thi.ng/api#IEqualsDelta}
 * - {@link IVector}
 * - `Object.toString()`
 *
 * Read/write access for the following properties:
 *
 * - array indices in the [0 .. `size`) interval
 * - `offset` - start index
 * - `stride` - component stride
 * - `buf` - backing buffer (readonly)
 * - `length` - vector size
 *
 * Array index access uses bounds checking against the [0 .. `size`)
 * interval, but, for performance reasons, **not** against the actual
 * wrapped buffer.
 *
 * Note: ES6 proxies are ~10x slower than standard array accesses. If
 * several computations are to be performed on such vectors it will be
 * much more efficient to first copy them to compact arrays and then
 * copy result back if needed.
 *
 * @example
 * ```
 * // 3D vector w/ stride length of 4
 * a = gvec([1,0,0,0,2,0,0,0,3,0,0,0], 3, 0, 4);
 * a[0] // 1
 * a[1] // 2
 * a[2] // 3
 *
 * a.stride
 * // 4
 *
 * [...a]
 * // [1, 2, 3]
 *
 * a.toString()
 * // "[1,2,3]"
 *
 * add([], a, a)
 * // [2, 4, 6]
 *
 * copy(a)
 * // [1, 2, 3]
 *
 * a.copyView()
 * // Proxy [ [ 1, 0, 2, 0, 3, 0 ], ... }
 *
 * eqDelta(a, [1, 2, 3])
 * // true
 * ```
 *
 * @param buf - backing buffer
 * @param size - vector size / num components
 * @param offset - start index
 * @param stride - component stride
 */
const gvec = (buf, size, offset = 0, stride = 1) => new Proxy(buf, {
    get(obj, id) {
        switch (id) {
            case Symbol.iterator:
                return () => (0,_internal_vec_utils__WEBPACK_IMPORTED_MODULE_3__.stridedValues)(obj, size, offset, stride);
            case SYM_L:
                return size;
            case SYM_B:
                return buf;
            case SYM_O:
                return offset;
            case SYM_S:
                return stride;
            case SYM_C:
                return () => (0,_sets__WEBPACK_IMPORTED_MODULE_4__.setS)([], obj, size, 0, offset, 1, stride);
            case SYM_CV:
                return () => gvec(obj, size, offset, stride);
            case SYM_EMPTY:
                return () => (0,_setn__WEBPACK_IMPORTED_MODULE_5__.zeroes)(size);
            case SYM_EQD:
                return (o, eps = _thi_ng_math__WEBPACK_IMPORTED_MODULE_6__.EPS) => (0,_eqdelta__WEBPACK_IMPORTED_MODULE_7__.eqDeltaS)(buf, o, size, eps, offset, 0, stride, 1);
            case SYM_STR:
                return () => JSON.stringify([
                    ...(0,_internal_vec_utils__WEBPACK_IMPORTED_MODULE_3__.stridedValues)(obj, size, offset, stride),
                ]);
            default:
                const j = parseInt(id);
                return !isNaN(j) && j >= 0 && j < size
                    ? obj[offset + j * stride]
                    : undefined;
        }
    },
    set(obj, id, value) {
        const j = parseInt(id);
        if (!isNaN(j) && j >= 0 && j < size) {
            obj[offset + (id | 0) * stride] = value;
        }
        else {
            switch (id) {
                case SYM_O:
                    offset = value;
                    break;
                case SYM_S:
                    stride = value;
                    break;
                case SYM_L:
                    size = value;
                    break;
                default:
                    return false;
            }
        }
        return true;
    },
    has(_, id) {
        return (id >= 0 && id < size) || PROPS.has(id);
    },
    ownKeys() {
        return keys(size);
    },
});


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/hash.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/hash.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hash": () => (/* binding */ hash)
/* harmony export */ });
/* harmony import */ var _thi_ng_binary__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/binary */ "./node_modules/@thi.ng/binary/float.js");
/* harmony import */ var _thi_ng_binary__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/binary */ "./node_modules/@thi.ng/binary/rotate.js");

/**
 * Returns an unsigned 32-bit hash code for the given vector.
 *
 * @remarks
 * The hash is the reduction of `hash = H * hash + murmur(x)`, where
 * `murmur(x)` is the partial Murmur3 hash of a single vector
 * component's bitwise representation and `H` an optional hash factor,
 * by default Knuth's 0x9e3779b1 (see TAOCP, section 6.4, page 516). If
 * the vector `v` is empty (length 0), the function returns -1.
 *
 * Hashes for zero-vectors:
 *
 * - `[0]`: 1209856430
 * - `[0, 0]`: 3623989185
 * - `[0, 0, 0]`: 4192292821
 * - `[0, 0, 0, 0]`: 2558592725
 *
 * @example
 * Hash collisions:
 *
 * ```ts
 * // integer grid coords
 * uniq = tx.transduce(tx.map(v.hash32), tx.conj(), tx.range2d(0x1000, 0x1000)).size
 * // 16744420
 *
 * // collision rate
 * (1 - uniq / (0x1000 ** 2)) * 100
 * // 0.1955 %
 *
 * // normalized grid coords
 * uniq = tx.transduce(
 *   tx.map(v.hash32),
 *   tx.conj(),
 *   tx.permutations(tx.normRange(1000), tx.normRange(1000))
 * ).size
 * // 1001895
 *
 * // collision rate
 * (1 - uniq / (1001 ** 2)) * 100
 * // 0.0106 %
 * ```
 *
 * - {@link https://github.com/thi-ng/c-thing/blob/develop/src/math/hashfn.c}
 * - {@link @thi.ng/morton# | @thi.ng/morton} for Z-curve ordered hashing
 *
 * @param v - vector
 * @param hash - hash factor
 */
const hash = (v, H = 0x9e3779b1) => {
    let hash = -1;
    for (let i = v.length; --i >= 0;) {
        hash = (Math.imul(H, hash) + mix(hash, (0,_thi_ng_binary__WEBPACK_IMPORTED_MODULE_0__.floatToUintBits)(v[i]))) >>> 0;
    }
    return hash;
};
const M1 = 0xcc9e2d51;
const M2 = 0x1b873593;
const M3 = 0xe6546b64;
const mix = (h, k) => {
    k = Math.imul((0,_thi_ng_binary__WEBPACK_IMPORTED_MODULE_1__.rotateLeft)(Math.imul(k, M1) >>> 0, 15), M2) >>> 0;
    return ((Math.imul((0,_thi_ng_binary__WEBPACK_IMPORTED_MODULE_1__.rotateLeft)(h ^ k, 13), 5) >>> 0) + M3) >>> 0;
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/heading-segment.js":
/*!*********************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/heading-segment.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "headingSegmentXY": () => (/* binding */ headingSegmentXY),
/* harmony export */   "headingSegmentXZ": () => (/* binding */ headingSegmentXZ),
/* harmony export */   "headingSegmentYZ": () => (/* binding */ headingSegmentYZ),
/* harmony export */   "headingSegment": () => (/* binding */ headingSegment)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/angle.js");

const $ = (u, v) => (a, b) => (0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_0__.atan2Abs)(b[u] - a[u], b[v] - a[v]);
/**
 * Computes direction angle (in radians) of line segment `a` -> `b` in
 * XY plane.
 *
 * @param a -
 * @param b -
 */
const headingSegmentXY = $(1, 0);
/**
 * Computes direction angle (in radians) of line segment `a` -> `b` in
 * XZ plane.
 *
 * @param a -
 * @param b -
 */
const headingSegmentXZ = $(2, 0);
/**
 * Computes direction angle (in radians) of line segment `a` -> `b` in
 * ZY plane.
 *
 * @param a -
 * @param b -
 */
const headingSegmentYZ = $(2, 1);
/**
 * Same as {@link headingSegmentXY}.
 */
const headingSegment = headingSegmentXY;


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/heading.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/heading.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "headingXY": () => (/* binding */ headingXY),
/* harmony export */   "headingXZ": () => (/* binding */ headingXZ),
/* harmony export */   "headingYZ": () => (/* binding */ headingYZ),
/* harmony export */   "heading": () => (/* binding */ heading)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/angle.js");

/**
 * Returns orientation angle (in radians) of vector `a` in XY plane.
 *
 * @param a -
 */
const headingXY = (a) => (0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_0__.atan2Abs)(a[1], a[0]);
/**
 * Returns orientation angle (in radians) of vector `a` in XZ plane.
 *
 * @param a -
 */
const headingXZ = (a) => (0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_0__.atan2Abs)(a[2], a[0]);
/**
 * Returns orientation angle (in radians) of vector `a` in ZY plane.
 *
 * @param a -
 */
const headingYZ = (a) => (0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_0__.atan2Abs)(a[2], a[1]);
/**
 * Same as {@link headingXY}
 */
const heading = headingXY;


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/homogeneous.js":
/*!*****************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/homogeneous.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromHomogeneous": () => (/* binding */ fromHomogeneous),
/* harmony export */   "fromHomogeneous3": () => (/* binding */ fromHomogeneous3),
/* harmony export */   "fromHomogeneous4": () => (/* binding */ fromHomogeneous4)
/* harmony export */ });
/* harmony import */ var _internal_vop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/vop */ "./node_modules/@thi.ng/vectors/internal/vop.js");
/* harmony import */ var _setc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./setc */ "./node_modules/@thi.ng/vectors/setc.js");


const fromHomogeneous = (0,_internal_vop__WEBPACK_IMPORTED_MODULE_0__.vop)(1);
const fromHomogeneous3 = fromHomogeneous.add(3, (out, [x, y, w]) => (0,_setc__WEBPACK_IMPORTED_MODULE_1__.setC2)(out || [], x / w, y / w));
const fromHomogeneous4 = fromHomogeneous.add(4, (out, [x, y, z, w]) => (0,_setc__WEBPACK_IMPORTED_MODULE_1__.setC3)(out || [], x / w, y / w, z / w));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/index.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MAX2": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.MAX2),
/* harmony export */   "MAX3": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.MAX3),
/* harmony export */   "MAX4": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.MAX4),
/* harmony export */   "MIN2": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.MIN2),
/* harmony export */   "MIN3": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.MIN3),
/* harmony export */   "MIN4": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.MIN4),
/* harmony export */   "ONE2": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.ONE2),
/* harmony export */   "ONE3": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.ONE3),
/* harmony export */   "ONE4": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.ONE4),
/* harmony export */   "W4": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.W4),
/* harmony export */   "X2": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.X2),
/* harmony export */   "X3": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.X3),
/* harmony export */   "X4": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.X4),
/* harmony export */   "Y2": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.Y2),
/* harmony export */   "Y3": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.Y3),
/* harmony export */   "Y4": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.Y4),
/* harmony export */   "Z3": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.Z3),
/* harmony export */   "Z4": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.Z4),
/* harmony export */   "ZERO2": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.ZERO2),
/* harmony export */   "ZERO3": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.ZERO3),
/* harmony export */   "ZERO4": () => (/* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.ZERO4),
/* harmony export */   "declareIndex": () => (/* reexport safe */ _internal_accessors__WEBPACK_IMPORTED_MODULE_1__.declareIndex),
/* harmony export */   "declareIndices": () => (/* reexport safe */ _internal_accessors__WEBPACK_IMPORTED_MODULE_1__.declareIndices),
/* harmony export */   "AVec": () => (/* reexport safe */ _internal_avec__WEBPACK_IMPORTED_MODULE_2__.AVec),
/* harmony export */   "ARGS_V": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.ARGS_V),
/* harmony export */   "ARGS_VN": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.ARGS_VN),
/* harmony export */   "ARGS_VNV": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.ARGS_VNV),
/* harmony export */   "ARGS_VV": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.ARGS_VV),
/* harmony export */   "ARGS_VVN": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.ARGS_VVN),
/* harmony export */   "ARGS_VVV": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.ARGS_VVV),
/* harmony export */   "DEFAULT_OUT": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_OUT),
/* harmony export */   "NEW_OUT": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.NEW_OUT),
/* harmony export */   "SARGS_V": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.SARGS_V),
/* harmony export */   "SARGS_VV": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.SARGS_VV),
/* harmony export */   "SARGS_VVV": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.SARGS_VVV),
/* harmony export */   "compile": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.compile),
/* harmony export */   "compileG": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.compileG),
/* harmony export */   "compileGHOF": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.compileGHOF),
/* harmony export */   "compileHOF": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.compileHOF),
/* harmony export */   "defBitOp": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.defBitOp),
/* harmony export */   "defBitOpN": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.defBitOpN),
/* harmony export */   "defFnOp": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.defFnOp),
/* harmony export */   "defHofOp": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.defHofOp),
/* harmony export */   "defHofOpS": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.defHofOpS),
/* harmony export */   "defMathOp": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.defMathOp),
/* harmony export */   "defMathOpN": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.defMathOpN),
/* harmony export */   "defOp": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.defOp),
/* harmony export */   "defOpS": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.defOpS),
/* harmony export */   "defaultOut": () => (/* reexport safe */ _internal_codegen__WEBPACK_IMPORTED_MODULE_3__.defaultOut),
/* harmony export */   "DOT": () => (/* reexport safe */ _internal_templates__WEBPACK_IMPORTED_MODULE_4__.DOT),
/* harmony export */   "DOT_G": () => (/* reexport safe */ _internal_templates__WEBPACK_IMPORTED_MODULE_4__.DOT_G),
/* harmony export */   "FN": () => (/* reexport safe */ _internal_templates__WEBPACK_IMPORTED_MODULE_4__.FN),
/* harmony export */   "FN2": () => (/* reexport safe */ _internal_templates__WEBPACK_IMPORTED_MODULE_4__.FN2),
/* harmony export */   "FN3": () => (/* reexport safe */ _internal_templates__WEBPACK_IMPORTED_MODULE_4__.FN3),
/* harmony export */   "FN5": () => (/* reexport safe */ _internal_templates__WEBPACK_IMPORTED_MODULE_4__.FN5),
/* harmony export */   "FN_N": () => (/* reexport safe */ _internal_templates__WEBPACK_IMPORTED_MODULE_4__.FN_N),
/* harmony export */   "MATH": () => (/* reexport safe */ _internal_templates__WEBPACK_IMPORTED_MODULE_4__.MATH),
/* harmony export */   "MATH2": () => (/* reexport safe */ _internal_templates__WEBPACK_IMPORTED_MODULE_4__.MATH2),
/* harmony export */   "MATH2A_N": () => (/* reexport safe */ _internal_templates__WEBPACK_IMPORTED_MODULE_4__.MATH2A_N),
/* harmony export */   "MATH2_N": () => (/* reexport safe */ _internal_templates__WEBPACK_IMPORTED_MODULE_4__.MATH2_N),
/* harmony export */   "MATH_N": () => (/* reexport safe */ _internal_templates__WEBPACK_IMPORTED_MODULE_4__.MATH_N),
/* harmony export */   "MIX": () => (/* reexport safe */ _internal_templates__WEBPACK_IMPORTED_MODULE_4__.MIX),
/* harmony export */   "MIX_N": () => (/* reexport safe */ _internal_templates__WEBPACK_IMPORTED_MODULE_4__.MIX_N),
/* harmony export */   "SET": () => (/* reexport safe */ _internal_templates__WEBPACK_IMPORTED_MODULE_4__.SET),
/* harmony export */   "SET_N": () => (/* reexport safe */ _internal_templates__WEBPACK_IMPORTED_MODULE_4__.SET_N),
/* harmony export */   "SIGNED": () => (/* reexport safe */ _internal_templates__WEBPACK_IMPORTED_MODULE_4__.SIGNED),
/* harmony export */   "SIGNED_N": () => (/* reexport safe */ _internal_templates__WEBPACK_IMPORTED_MODULE_4__.SIGNED_N),
/* harmony export */   "UNSIGNED": () => (/* reexport safe */ _internal_templates__WEBPACK_IMPORTED_MODULE_4__.UNSIGNED),
/* harmony export */   "UNSIGNED_N": () => (/* reexport safe */ _internal_templates__WEBPACK_IMPORTED_MODULE_4__.UNSIGNED_N),
/* harmony export */   "stridedValues": () => (/* reexport safe */ _internal_vec_utils__WEBPACK_IMPORTED_MODULE_5__.stridedValues),
/* harmony export */   "vecIterator": () => (/* reexport safe */ _internal_vec_utils__WEBPACK_IMPORTED_MODULE_5__.vecIterator),
/* harmony export */   "vop": () => (/* reexport safe */ _internal_vop__WEBPACK_IMPORTED_MODULE_6__.vop),
/* harmony export */   "Vec2": () => (/* reexport safe */ _vec2__WEBPACK_IMPORTED_MODULE_7__.Vec2),
/* harmony export */   "asVec2": () => (/* reexport safe */ _vec2__WEBPACK_IMPORTED_MODULE_7__.asVec2),
/* harmony export */   "vec2": () => (/* reexport safe */ _vec2__WEBPACK_IMPORTED_MODULE_7__.vec2),
/* harmony export */   "vec2n": () => (/* reexport safe */ _vec2__WEBPACK_IMPORTED_MODULE_7__.vec2n),
/* harmony export */   "Vec3": () => (/* reexport safe */ _vec3__WEBPACK_IMPORTED_MODULE_8__.Vec3),
/* harmony export */   "asVec3": () => (/* reexport safe */ _vec3__WEBPACK_IMPORTED_MODULE_8__.asVec3),
/* harmony export */   "vec3": () => (/* reexport safe */ _vec3__WEBPACK_IMPORTED_MODULE_8__.vec3),
/* harmony export */   "vec3n": () => (/* reexport safe */ _vec3__WEBPACK_IMPORTED_MODULE_8__.vec3n),
/* harmony export */   "Vec4": () => (/* reexport safe */ _vec4__WEBPACK_IMPORTED_MODULE_9__.Vec4),
/* harmony export */   "asVec4": () => (/* reexport safe */ _vec4__WEBPACK_IMPORTED_MODULE_9__.asVec4),
/* harmony export */   "vec4": () => (/* reexport safe */ _vec4__WEBPACK_IMPORTED_MODULE_9__.vec4),
/* harmony export */   "vec4n": () => (/* reexport safe */ _vec4__WEBPACK_IMPORTED_MODULE_9__.vec4n),
/* harmony export */   "abs": () => (/* reexport safe */ _abs__WEBPACK_IMPORTED_MODULE_10__.abs),
/* harmony export */   "abs2": () => (/* reexport safe */ _abs__WEBPACK_IMPORTED_MODULE_10__.abs2),
/* harmony export */   "abs3": () => (/* reexport safe */ _abs__WEBPACK_IMPORTED_MODULE_10__.abs3),
/* harmony export */   "abs4": () => (/* reexport safe */ _abs__WEBPACK_IMPORTED_MODULE_10__.abs4),
/* harmony export */   "acos": () => (/* reexport safe */ _acos__WEBPACK_IMPORTED_MODULE_11__.acos),
/* harmony export */   "acos2": () => (/* reexport safe */ _acos__WEBPACK_IMPORTED_MODULE_11__.acos2),
/* harmony export */   "acos3": () => (/* reexport safe */ _acos__WEBPACK_IMPORTED_MODULE_11__.acos3),
/* harmony export */   "acos4": () => (/* reexport safe */ _acos__WEBPACK_IMPORTED_MODULE_11__.acos4),
/* harmony export */   "addW2": () => (/* reexport safe */ _addw__WEBPACK_IMPORTED_MODULE_12__.addW2),
/* harmony export */   "addW3": () => (/* reexport safe */ _addw__WEBPACK_IMPORTED_MODULE_12__.addW3),
/* harmony export */   "addW4": () => (/* reexport safe */ _addw__WEBPACK_IMPORTED_MODULE_12__.addW4),
/* harmony export */   "addW5": () => (/* reexport safe */ _addw__WEBPACK_IMPORTED_MODULE_12__.addW5),
/* harmony export */   "add": () => (/* reexport safe */ _add__WEBPACK_IMPORTED_MODULE_13__.add),
/* harmony export */   "add2": () => (/* reexport safe */ _add__WEBPACK_IMPORTED_MODULE_13__.add2),
/* harmony export */   "add3": () => (/* reexport safe */ _add__WEBPACK_IMPORTED_MODULE_13__.add3),
/* harmony export */   "add4": () => (/* reexport safe */ _add__WEBPACK_IMPORTED_MODULE_13__.add4),
/* harmony export */   "addI": () => (/* reexport safe */ _addi__WEBPACK_IMPORTED_MODULE_14__.addI),
/* harmony export */   "addI2": () => (/* reexport safe */ _addi__WEBPACK_IMPORTED_MODULE_14__.addI2),
/* harmony export */   "addI3": () => (/* reexport safe */ _addi__WEBPACK_IMPORTED_MODULE_14__.addI3),
/* harmony export */   "addI4": () => (/* reexport safe */ _addi__WEBPACK_IMPORTED_MODULE_14__.addI4),
/* harmony export */   "addNI": () => (/* reexport safe */ _addi__WEBPACK_IMPORTED_MODULE_14__.addNI),
/* harmony export */   "addNI2": () => (/* reexport safe */ _addi__WEBPACK_IMPORTED_MODULE_14__.addNI2),
/* harmony export */   "addNI3": () => (/* reexport safe */ _addi__WEBPACK_IMPORTED_MODULE_14__.addNI3),
/* harmony export */   "addNI4": () => (/* reexport safe */ _addi__WEBPACK_IMPORTED_MODULE_14__.addNI4),
/* harmony export */   "addNU": () => (/* reexport safe */ _addi__WEBPACK_IMPORTED_MODULE_14__.addNU),
/* harmony export */   "addNU2": () => (/* reexport safe */ _addi__WEBPACK_IMPORTED_MODULE_14__.addNU2),
/* harmony export */   "addNU3": () => (/* reexport safe */ _addi__WEBPACK_IMPORTED_MODULE_14__.addNU3),
/* harmony export */   "addNU4": () => (/* reexport safe */ _addi__WEBPACK_IMPORTED_MODULE_14__.addNU4),
/* harmony export */   "addU": () => (/* reexport safe */ _addi__WEBPACK_IMPORTED_MODULE_14__.addU),
/* harmony export */   "addU2": () => (/* reexport safe */ _addi__WEBPACK_IMPORTED_MODULE_14__.addU2),
/* harmony export */   "addU3": () => (/* reexport safe */ _addi__WEBPACK_IMPORTED_MODULE_14__.addU3),
/* harmony export */   "addU4": () => (/* reexport safe */ _addi__WEBPACK_IMPORTED_MODULE_14__.addU4),
/* harmony export */   "addm": () => (/* reexport safe */ _addm__WEBPACK_IMPORTED_MODULE_15__.addm),
/* harmony export */   "addm2": () => (/* reexport safe */ _addm__WEBPACK_IMPORTED_MODULE_15__.addm2),
/* harmony export */   "addm3": () => (/* reexport safe */ _addm__WEBPACK_IMPORTED_MODULE_15__.addm3),
/* harmony export */   "addm4": () => (/* reexport safe */ _addm__WEBPACK_IMPORTED_MODULE_15__.addm4),
/* harmony export */   "addmN": () => (/* reexport safe */ _addmn__WEBPACK_IMPORTED_MODULE_16__.addmN),
/* harmony export */   "addmN2": () => (/* reexport safe */ _addmn__WEBPACK_IMPORTED_MODULE_16__.addmN2),
/* harmony export */   "addmN3": () => (/* reexport safe */ _addmn__WEBPACK_IMPORTED_MODULE_16__.addmN3),
/* harmony export */   "addmN4": () => (/* reexport safe */ _addmn__WEBPACK_IMPORTED_MODULE_16__.addmN4),
/* harmony export */   "addmS2": () => (/* reexport safe */ _addms__WEBPACK_IMPORTED_MODULE_17__.addmS2),
/* harmony export */   "addmS3": () => (/* reexport safe */ _addms__WEBPACK_IMPORTED_MODULE_17__.addmS3),
/* harmony export */   "addmS4": () => (/* reexport safe */ _addms__WEBPACK_IMPORTED_MODULE_17__.addmS4),
/* harmony export */   "addmNS2": () => (/* reexport safe */ _addmns__WEBPACK_IMPORTED_MODULE_18__.addmNS2),
/* harmony export */   "addmNS3": () => (/* reexport safe */ _addmns__WEBPACK_IMPORTED_MODULE_18__.addmNS3),
/* harmony export */   "addmNS4": () => (/* reexport safe */ _addmns__WEBPACK_IMPORTED_MODULE_18__.addmNS4),
/* harmony export */   "addN": () => (/* reexport safe */ _addn__WEBPACK_IMPORTED_MODULE_19__.addN),
/* harmony export */   "addN2": () => (/* reexport safe */ _addn__WEBPACK_IMPORTED_MODULE_19__.addN2),
/* harmony export */   "addN3": () => (/* reexport safe */ _addn__WEBPACK_IMPORTED_MODULE_19__.addN3),
/* harmony export */   "addN4": () => (/* reexport safe */ _addn__WEBPACK_IMPORTED_MODULE_19__.addN4),
/* harmony export */   "addS2": () => (/* reexport safe */ _adds__WEBPACK_IMPORTED_MODULE_20__.addS2),
/* harmony export */   "addS3": () => (/* reexport safe */ _adds__WEBPACK_IMPORTED_MODULE_20__.addS3),
/* harmony export */   "addS4": () => (/* reexport safe */ _adds__WEBPACK_IMPORTED_MODULE_20__.addS4),
/* harmony export */   "addNS2": () => (/* reexport safe */ _addns__WEBPACK_IMPORTED_MODULE_21__.addNS2),
/* harmony export */   "addNS3": () => (/* reexport safe */ _addns__WEBPACK_IMPORTED_MODULE_21__.addNS3),
/* harmony export */   "addNS4": () => (/* reexport safe */ _addns__WEBPACK_IMPORTED_MODULE_21__.addNS4),
/* harmony export */   "angleBetween2": () => (/* reexport safe */ _angle_between__WEBPACK_IMPORTED_MODULE_22__.angleBetween2),
/* harmony export */   "angleBetween3": () => (/* reexport safe */ _angle_between__WEBPACK_IMPORTED_MODULE_22__.angleBetween3),
/* harmony export */   "angleRatio": () => (/* reexport safe */ _angle_between__WEBPACK_IMPORTED_MODULE_22__.angleRatio),
/* harmony export */   "asin": () => (/* reexport safe */ _asin__WEBPACK_IMPORTED_MODULE_23__.asin),
/* harmony export */   "asin2": () => (/* reexport safe */ _asin__WEBPACK_IMPORTED_MODULE_23__.asin2),
/* harmony export */   "asin3": () => (/* reexport safe */ _asin__WEBPACK_IMPORTED_MODULE_23__.asin3),
/* harmony export */   "asin4": () => (/* reexport safe */ _asin__WEBPACK_IMPORTED_MODULE_23__.asin4),
/* harmony export */   "atan": () => (/* reexport safe */ _atan__WEBPACK_IMPORTED_MODULE_24__.atan),
/* harmony export */   "atan2": () => (/* reexport safe */ _atan__WEBPACK_IMPORTED_MODULE_24__.atan2),
/* harmony export */   "atan3": () => (/* reexport safe */ _atan__WEBPACK_IMPORTED_MODULE_24__.atan3),
/* harmony export */   "atan4": () => (/* reexport safe */ _atan__WEBPACK_IMPORTED_MODULE_24__.atan4),
/* harmony export */   "atan_2": () => (/* reexport safe */ _atan__WEBPACK_IMPORTED_MODULE_24__.atan_2),
/* harmony export */   "atan_22": () => (/* reexport safe */ _atan__WEBPACK_IMPORTED_MODULE_24__.atan_22),
/* harmony export */   "atan_23": () => (/* reexport safe */ _atan__WEBPACK_IMPORTED_MODULE_24__.atan_23),
/* harmony export */   "atan_24": () => (/* reexport safe */ _atan__WEBPACK_IMPORTED_MODULE_24__.atan_24),
/* harmony export */   "bisect2": () => (/* reexport safe */ _bisect__WEBPACK_IMPORTED_MODULE_25__.bisect2),
/* harmony export */   "cornerBisector": () => (/* reexport safe */ _bisect__WEBPACK_IMPORTED_MODULE_25__.cornerBisector),
/* harmony export */   "cornerBisector2": () => (/* reexport safe */ _bisect__WEBPACK_IMPORTED_MODULE_25__.cornerBisector2),
/* harmony export */   "bitAndI": () => (/* reexport safe */ _bit_and__WEBPACK_IMPORTED_MODULE_26__.bitAndI),
/* harmony export */   "bitAndI2": () => (/* reexport safe */ _bit_and__WEBPACK_IMPORTED_MODULE_26__.bitAndI2),
/* harmony export */   "bitAndI3": () => (/* reexport safe */ _bit_and__WEBPACK_IMPORTED_MODULE_26__.bitAndI3),
/* harmony export */   "bitAndI4": () => (/* reexport safe */ _bit_and__WEBPACK_IMPORTED_MODULE_26__.bitAndI4),
/* harmony export */   "bitAndNI": () => (/* reexport safe */ _bit_and__WEBPACK_IMPORTED_MODULE_26__.bitAndNI),
/* harmony export */   "bitAndNI2": () => (/* reexport safe */ _bit_and__WEBPACK_IMPORTED_MODULE_26__.bitAndNI2),
/* harmony export */   "bitAndNI3": () => (/* reexport safe */ _bit_and__WEBPACK_IMPORTED_MODULE_26__.bitAndNI3),
/* harmony export */   "bitAndNI4": () => (/* reexport safe */ _bit_and__WEBPACK_IMPORTED_MODULE_26__.bitAndNI4),
/* harmony export */   "bitAndNU": () => (/* reexport safe */ _bit_and__WEBPACK_IMPORTED_MODULE_26__.bitAndNU),
/* harmony export */   "bitAndNU2": () => (/* reexport safe */ _bit_and__WEBPACK_IMPORTED_MODULE_26__.bitAndNU2),
/* harmony export */   "bitAndNU3": () => (/* reexport safe */ _bit_and__WEBPACK_IMPORTED_MODULE_26__.bitAndNU3),
/* harmony export */   "bitAndNU4": () => (/* reexport safe */ _bit_and__WEBPACK_IMPORTED_MODULE_26__.bitAndNU4),
/* harmony export */   "bitAndU": () => (/* reexport safe */ _bit_and__WEBPACK_IMPORTED_MODULE_26__.bitAndU),
/* harmony export */   "bitAndU2": () => (/* reexport safe */ _bit_and__WEBPACK_IMPORTED_MODULE_26__.bitAndU2),
/* harmony export */   "bitAndU3": () => (/* reexport safe */ _bit_and__WEBPACK_IMPORTED_MODULE_26__.bitAndU3),
/* harmony export */   "bitAndU4": () => (/* reexport safe */ _bit_and__WEBPACK_IMPORTED_MODULE_26__.bitAndU4),
/* harmony export */   "bitNotI": () => (/* reexport safe */ _bit_not__WEBPACK_IMPORTED_MODULE_27__.bitNotI),
/* harmony export */   "bitNotI2": () => (/* reexport safe */ _bit_not__WEBPACK_IMPORTED_MODULE_27__.bitNotI2),
/* harmony export */   "bitNotI3": () => (/* reexport safe */ _bit_not__WEBPACK_IMPORTED_MODULE_27__.bitNotI3),
/* harmony export */   "bitNotI4": () => (/* reexport safe */ _bit_not__WEBPACK_IMPORTED_MODULE_27__.bitNotI4),
/* harmony export */   "bitNotU": () => (/* reexport safe */ _bit_not__WEBPACK_IMPORTED_MODULE_27__.bitNotU),
/* harmony export */   "bitNotU2": () => (/* reexport safe */ _bit_not__WEBPACK_IMPORTED_MODULE_27__.bitNotU2),
/* harmony export */   "bitNotU3": () => (/* reexport safe */ _bit_not__WEBPACK_IMPORTED_MODULE_27__.bitNotU3),
/* harmony export */   "bitNotU4": () => (/* reexport safe */ _bit_not__WEBPACK_IMPORTED_MODULE_27__.bitNotU4),
/* harmony export */   "bitOrI": () => (/* reexport safe */ _bit_or__WEBPACK_IMPORTED_MODULE_28__.bitOrI),
/* harmony export */   "bitOrI2": () => (/* reexport safe */ _bit_or__WEBPACK_IMPORTED_MODULE_28__.bitOrI2),
/* harmony export */   "bitOrI3": () => (/* reexport safe */ _bit_or__WEBPACK_IMPORTED_MODULE_28__.bitOrI3),
/* harmony export */   "bitOrI4": () => (/* reexport safe */ _bit_or__WEBPACK_IMPORTED_MODULE_28__.bitOrI4),
/* harmony export */   "bitOrNI": () => (/* reexport safe */ _bit_or__WEBPACK_IMPORTED_MODULE_28__.bitOrNI),
/* harmony export */   "bitOrNI2": () => (/* reexport safe */ _bit_or__WEBPACK_IMPORTED_MODULE_28__.bitOrNI2),
/* harmony export */   "bitOrNI3": () => (/* reexport safe */ _bit_or__WEBPACK_IMPORTED_MODULE_28__.bitOrNI3),
/* harmony export */   "bitOrNI4": () => (/* reexport safe */ _bit_or__WEBPACK_IMPORTED_MODULE_28__.bitOrNI4),
/* harmony export */   "bitOrNU": () => (/* reexport safe */ _bit_or__WEBPACK_IMPORTED_MODULE_28__.bitOrNU),
/* harmony export */   "bitOrNU2": () => (/* reexport safe */ _bit_or__WEBPACK_IMPORTED_MODULE_28__.bitOrNU2),
/* harmony export */   "bitOrNU3": () => (/* reexport safe */ _bit_or__WEBPACK_IMPORTED_MODULE_28__.bitOrNU3),
/* harmony export */   "bitOrNU4": () => (/* reexport safe */ _bit_or__WEBPACK_IMPORTED_MODULE_28__.bitOrNU4),
/* harmony export */   "bitOrU": () => (/* reexport safe */ _bit_or__WEBPACK_IMPORTED_MODULE_28__.bitOrU),
/* harmony export */   "bitOrU2": () => (/* reexport safe */ _bit_or__WEBPACK_IMPORTED_MODULE_28__.bitOrU2),
/* harmony export */   "bitOrU3": () => (/* reexport safe */ _bit_or__WEBPACK_IMPORTED_MODULE_28__.bitOrU3),
/* harmony export */   "bitOrU4": () => (/* reexport safe */ _bit_or__WEBPACK_IMPORTED_MODULE_28__.bitOrU4),
/* harmony export */   "bitXorI": () => (/* reexport safe */ _bit_xor__WEBPACK_IMPORTED_MODULE_29__.bitXorI),
/* harmony export */   "bitXorI2": () => (/* reexport safe */ _bit_xor__WEBPACK_IMPORTED_MODULE_29__.bitXorI2),
/* harmony export */   "bitXorI3": () => (/* reexport safe */ _bit_xor__WEBPACK_IMPORTED_MODULE_29__.bitXorI3),
/* harmony export */   "bitXorI4": () => (/* reexport safe */ _bit_xor__WEBPACK_IMPORTED_MODULE_29__.bitXorI4),
/* harmony export */   "bitXorNI": () => (/* reexport safe */ _bit_xor__WEBPACK_IMPORTED_MODULE_29__.bitXorNI),
/* harmony export */   "bitXorNI2": () => (/* reexport safe */ _bit_xor__WEBPACK_IMPORTED_MODULE_29__.bitXorNI2),
/* harmony export */   "bitXorNI3": () => (/* reexport safe */ _bit_xor__WEBPACK_IMPORTED_MODULE_29__.bitXorNI3),
/* harmony export */   "bitXorNI4": () => (/* reexport safe */ _bit_xor__WEBPACK_IMPORTED_MODULE_29__.bitXorNI4),
/* harmony export */   "bitXorNU": () => (/* reexport safe */ _bit_xor__WEBPACK_IMPORTED_MODULE_29__.bitXorNU),
/* harmony export */   "bitXorNU2": () => (/* reexport safe */ _bit_xor__WEBPACK_IMPORTED_MODULE_29__.bitXorNU2),
/* harmony export */   "bitXorNU3": () => (/* reexport safe */ _bit_xor__WEBPACK_IMPORTED_MODULE_29__.bitXorNU3),
/* harmony export */   "bitXorNU4": () => (/* reexport safe */ _bit_xor__WEBPACK_IMPORTED_MODULE_29__.bitXorNU4),
/* harmony export */   "bitXorU": () => (/* reexport safe */ _bit_xor__WEBPACK_IMPORTED_MODULE_29__.bitXorU),
/* harmony export */   "bitXorU2": () => (/* reexport safe */ _bit_xor__WEBPACK_IMPORTED_MODULE_29__.bitXorU2),
/* harmony export */   "bitXorU3": () => (/* reexport safe */ _bit_xor__WEBPACK_IMPORTED_MODULE_29__.bitXorU3),
/* harmony export */   "bitXorU4": () => (/* reexport safe */ _bit_xor__WEBPACK_IMPORTED_MODULE_29__.bitXorU4),
/* harmony export */   "intoBuffer": () => (/* reexport safe */ _buffer__WEBPACK_IMPORTED_MODULE_30__.intoBuffer),
/* harmony export */   "intoStridedBuffer": () => (/* reexport safe */ _buffer__WEBPACK_IMPORTED_MODULE_30__.intoStridedBuffer),
/* harmony export */   "mapBuffer": () => (/* reexport safe */ _buffer__WEBPACK_IMPORTED_MODULE_30__.mapBuffer),
/* harmony export */   "mapStridedBuffer": () => (/* reexport safe */ _buffer__WEBPACK_IMPORTED_MODULE_30__.mapStridedBuffer),
/* harmony export */   "cartesian": () => (/* reexport safe */ _cartesian__WEBPACK_IMPORTED_MODULE_31__.cartesian),
/* harmony export */   "cartesian2": () => (/* reexport safe */ _cartesian__WEBPACK_IMPORTED_MODULE_31__.cartesian2),
/* harmony export */   "cartesian3": () => (/* reexport safe */ _cartesian__WEBPACK_IMPORTED_MODULE_31__.cartesian3),
/* harmony export */   "ceil": () => (/* reexport safe */ _ceil__WEBPACK_IMPORTED_MODULE_32__.ceil),
/* harmony export */   "ceil2": () => (/* reexport safe */ _ceil__WEBPACK_IMPORTED_MODULE_32__.ceil2),
/* harmony export */   "ceil3": () => (/* reexport safe */ _ceil__WEBPACK_IMPORTED_MODULE_32__.ceil3),
/* harmony export */   "ceil4": () => (/* reexport safe */ _ceil__WEBPACK_IMPORTED_MODULE_32__.ceil4),
/* harmony export */   "clamp": () => (/* reexport safe */ _clamp__WEBPACK_IMPORTED_MODULE_33__.clamp),
/* harmony export */   "clamp01": () => (/* reexport safe */ _clamp__WEBPACK_IMPORTED_MODULE_33__.clamp01),
/* harmony export */   "clamp01_2": () => (/* reexport safe */ _clamp__WEBPACK_IMPORTED_MODULE_33__.clamp01_2),
/* harmony export */   "clamp01_3": () => (/* reexport safe */ _clamp__WEBPACK_IMPORTED_MODULE_33__.clamp01_3),
/* harmony export */   "clamp01_4": () => (/* reexport safe */ _clamp__WEBPACK_IMPORTED_MODULE_33__.clamp01_4),
/* harmony export */   "clamp11": () => (/* reexport safe */ _clamp__WEBPACK_IMPORTED_MODULE_33__.clamp11),
/* harmony export */   "clamp11_2": () => (/* reexport safe */ _clamp__WEBPACK_IMPORTED_MODULE_33__.clamp11_2),
/* harmony export */   "clamp11_3": () => (/* reexport safe */ _clamp__WEBPACK_IMPORTED_MODULE_33__.clamp11_3),
/* harmony export */   "clamp11_4": () => (/* reexport safe */ _clamp__WEBPACK_IMPORTED_MODULE_33__.clamp11_4),
/* harmony export */   "clamp2": () => (/* reexport safe */ _clamp__WEBPACK_IMPORTED_MODULE_33__.clamp2),
/* harmony export */   "clamp3": () => (/* reexport safe */ _clamp__WEBPACK_IMPORTED_MODULE_33__.clamp3),
/* harmony export */   "clamp4": () => (/* reexport safe */ _clamp__WEBPACK_IMPORTED_MODULE_33__.clamp4),
/* harmony export */   "clampN": () => (/* reexport safe */ _clampn__WEBPACK_IMPORTED_MODULE_34__.clampN),
/* harmony export */   "clampN2": () => (/* reexport safe */ _clampn__WEBPACK_IMPORTED_MODULE_34__.clampN2),
/* harmony export */   "clampN3": () => (/* reexport safe */ _clampn__WEBPACK_IMPORTED_MODULE_34__.clampN3),
/* harmony export */   "clampN4": () => (/* reexport safe */ _clampn__WEBPACK_IMPORTED_MODULE_34__.clampN4),
/* harmony export */   "clockwise2": () => (/* reexport safe */ _clockwise__WEBPACK_IMPORTED_MODULE_35__.clockwise2),
/* harmony export */   "corner2": () => (/* reexport safe */ _clockwise__WEBPACK_IMPORTED_MODULE_35__.corner2),
/* harmony export */   "comparator2": () => (/* reexport safe */ _compare__WEBPACK_IMPORTED_MODULE_36__.comparator2),
/* harmony export */   "comparator3": () => (/* reexport safe */ _compare__WEBPACK_IMPORTED_MODULE_36__.comparator3),
/* harmony export */   "comparator4": () => (/* reexport safe */ _compare__WEBPACK_IMPORTED_MODULE_36__.comparator4),
/* harmony export */   "asBVec": () => (/* reexport safe */ _convert__WEBPACK_IMPORTED_MODULE_37__.asBVec),
/* harmony export */   "asBVec2": () => (/* reexport safe */ _convert__WEBPACK_IMPORTED_MODULE_37__.asBVec2),
/* harmony export */   "asBVec3": () => (/* reexport safe */ _convert__WEBPACK_IMPORTED_MODULE_37__.asBVec3),
/* harmony export */   "asBVec4": () => (/* reexport safe */ _convert__WEBPACK_IMPORTED_MODULE_37__.asBVec4),
/* harmony export */   "asIVec": () => (/* reexport safe */ _convert__WEBPACK_IMPORTED_MODULE_37__.asIVec),
/* harmony export */   "asIVec2": () => (/* reexport safe */ _convert__WEBPACK_IMPORTED_MODULE_37__.asIVec2),
/* harmony export */   "asIVec3": () => (/* reexport safe */ _convert__WEBPACK_IMPORTED_MODULE_37__.asIVec3),
/* harmony export */   "asIVec4": () => (/* reexport safe */ _convert__WEBPACK_IMPORTED_MODULE_37__.asIVec4),
/* harmony export */   "asUVec": () => (/* reexport safe */ _convert__WEBPACK_IMPORTED_MODULE_37__.asUVec),
/* harmony export */   "asUVec2": () => (/* reexport safe */ _convert__WEBPACK_IMPORTED_MODULE_37__.asUVec2),
/* harmony export */   "asUVec3": () => (/* reexport safe */ _convert__WEBPACK_IMPORTED_MODULE_37__.asUVec3),
/* harmony export */   "asUVec4": () => (/* reexport safe */ _convert__WEBPACK_IMPORTED_MODULE_37__.asUVec4),
/* harmony export */   "fromBVec": () => (/* reexport safe */ _convert__WEBPACK_IMPORTED_MODULE_37__.fromBVec),
/* harmony export */   "fromBVec2": () => (/* reexport safe */ _convert__WEBPACK_IMPORTED_MODULE_37__.fromBVec2),
/* harmony export */   "fromBVec3": () => (/* reexport safe */ _convert__WEBPACK_IMPORTED_MODULE_37__.fromBVec3),
/* harmony export */   "fromBVec4": () => (/* reexport safe */ _convert__WEBPACK_IMPORTED_MODULE_37__.fromBVec4),
/* harmony export */   "copy": () => (/* reexport safe */ _copy__WEBPACK_IMPORTED_MODULE_38__.copy),
/* harmony export */   "copyVectors": () => (/* reexport safe */ _copy__WEBPACK_IMPORTED_MODULE_38__.copyVectors),
/* harmony export */   "cos": () => (/* reexport safe */ _cos__WEBPACK_IMPORTED_MODULE_39__.cos),
/* harmony export */   "cos2": () => (/* reexport safe */ _cos__WEBPACK_IMPORTED_MODULE_39__.cos2),
/* harmony export */   "cos3": () => (/* reexport safe */ _cos__WEBPACK_IMPORTED_MODULE_39__.cos3),
/* harmony export */   "cos4": () => (/* reexport safe */ _cos__WEBPACK_IMPORTED_MODULE_39__.cos4),
/* harmony export */   "cosh": () => (/* reexport safe */ _cosh__WEBPACK_IMPORTED_MODULE_40__.cosh),
/* harmony export */   "cosh2": () => (/* reexport safe */ _cosh__WEBPACK_IMPORTED_MODULE_40__.cosh2),
/* harmony export */   "cosh3": () => (/* reexport safe */ _cosh__WEBPACK_IMPORTED_MODULE_40__.cosh3),
/* harmony export */   "cosh4": () => (/* reexport safe */ _cosh__WEBPACK_IMPORTED_MODULE_40__.cosh4),
/* harmony export */   "cross2": () => (/* reexport safe */ _cross__WEBPACK_IMPORTED_MODULE_41__.cross2),
/* harmony export */   "cross3": () => (/* reexport safe */ _cross__WEBPACK_IMPORTED_MODULE_41__.cross3),
/* harmony export */   "crossS2": () => (/* reexport safe */ _crosss__WEBPACK_IMPORTED_MODULE_42__.crossS2),
/* harmony export */   "crossS3": () => (/* reexport safe */ _crosss__WEBPACK_IMPORTED_MODULE_42__.crossS3),
/* harmony export */   "degrees": () => (/* reexport safe */ _degrees__WEBPACK_IMPORTED_MODULE_43__.degrees),
/* harmony export */   "degrees2": () => (/* reexport safe */ _degrees__WEBPACK_IMPORTED_MODULE_43__.degrees2),
/* harmony export */   "degrees3": () => (/* reexport safe */ _degrees__WEBPACK_IMPORTED_MODULE_43__.degrees3),
/* harmony export */   "degrees4": () => (/* reexport safe */ _degrees__WEBPACK_IMPORTED_MODULE_43__.degrees4),
/* harmony export */   "direction": () => (/* reexport safe */ _direction__WEBPACK_IMPORTED_MODULE_44__.direction),
/* harmony export */   "dist": () => (/* reexport safe */ _dist__WEBPACK_IMPORTED_MODULE_45__.dist),
/* harmony export */   "dist2": () => (/* reexport safe */ _dist__WEBPACK_IMPORTED_MODULE_45__.dist2),
/* harmony export */   "dist3": () => (/* reexport safe */ _dist__WEBPACK_IMPORTED_MODULE_45__.dist3),
/* harmony export */   "dist4": () => (/* reexport safe */ _dist__WEBPACK_IMPORTED_MODULE_45__.dist4),
/* harmony export */   "distChebyshev": () => (/* reexport safe */ _dist_chebyshev__WEBPACK_IMPORTED_MODULE_46__.distChebyshev),
/* harmony export */   "distChebyshev2": () => (/* reexport safe */ _dist_chebyshev__WEBPACK_IMPORTED_MODULE_46__.distChebyshev2),
/* harmony export */   "distChebyshev3": () => (/* reexport safe */ _dist_chebyshev__WEBPACK_IMPORTED_MODULE_46__.distChebyshev3),
/* harmony export */   "distChebyshev4": () => (/* reexport safe */ _dist_chebyshev__WEBPACK_IMPORTED_MODULE_46__.distChebyshev4),
/* harmony export */   "distHaversineLatLon": () => (/* reexport safe */ _dist_haversine__WEBPACK_IMPORTED_MODULE_47__.distHaversineLatLon),
/* harmony export */   "distHaversineLonLat": () => (/* reexport safe */ _dist_haversine__WEBPACK_IMPORTED_MODULE_47__.distHaversineLonLat),
/* harmony export */   "distManhattan": () => (/* reexport safe */ _dist_manhattan__WEBPACK_IMPORTED_MODULE_48__.distManhattan),
/* harmony export */   "distManhattan2": () => (/* reexport safe */ _dist_manhattan__WEBPACK_IMPORTED_MODULE_48__.distManhattan2),
/* harmony export */   "distManhattan3": () => (/* reexport safe */ _dist_manhattan__WEBPACK_IMPORTED_MODULE_48__.distManhattan3),
/* harmony export */   "distManhattan4": () => (/* reexport safe */ _dist_manhattan__WEBPACK_IMPORTED_MODULE_48__.distManhattan4),
/* harmony export */   "weightedDistance": () => (/* reexport safe */ _dist_weighted__WEBPACK_IMPORTED_MODULE_49__.weightedDistance),
/* harmony export */   "distSq": () => (/* reexport safe */ _distsq__WEBPACK_IMPORTED_MODULE_50__.distSq),
/* harmony export */   "distSq2": () => (/* reexport safe */ _distsq__WEBPACK_IMPORTED_MODULE_50__.distSq2),
/* harmony export */   "distSq3": () => (/* reexport safe */ _distsq__WEBPACK_IMPORTED_MODULE_50__.distSq3),
/* harmony export */   "distSq4": () => (/* reexport safe */ _distsq__WEBPACK_IMPORTED_MODULE_50__.distSq4),
/* harmony export */   "div": () => (/* reexport safe */ _div__WEBPACK_IMPORTED_MODULE_51__.div),
/* harmony export */   "div2": () => (/* reexport safe */ _div__WEBPACK_IMPORTED_MODULE_51__.div2),
/* harmony export */   "div3": () => (/* reexport safe */ _div__WEBPACK_IMPORTED_MODULE_51__.div3),
/* harmony export */   "div4": () => (/* reexport safe */ _div__WEBPACK_IMPORTED_MODULE_51__.div4),
/* harmony export */   "divI": () => (/* reexport safe */ _divi__WEBPACK_IMPORTED_MODULE_52__.divI),
/* harmony export */   "divI2": () => (/* reexport safe */ _divi__WEBPACK_IMPORTED_MODULE_52__.divI2),
/* harmony export */   "divI3": () => (/* reexport safe */ _divi__WEBPACK_IMPORTED_MODULE_52__.divI3),
/* harmony export */   "divI4": () => (/* reexport safe */ _divi__WEBPACK_IMPORTED_MODULE_52__.divI4),
/* harmony export */   "divNI": () => (/* reexport safe */ _divi__WEBPACK_IMPORTED_MODULE_52__.divNI),
/* harmony export */   "divNI2": () => (/* reexport safe */ _divi__WEBPACK_IMPORTED_MODULE_52__.divNI2),
/* harmony export */   "divNI3": () => (/* reexport safe */ _divi__WEBPACK_IMPORTED_MODULE_52__.divNI3),
/* harmony export */   "divNI4": () => (/* reexport safe */ _divi__WEBPACK_IMPORTED_MODULE_52__.divNI4),
/* harmony export */   "divNU": () => (/* reexport safe */ _divi__WEBPACK_IMPORTED_MODULE_52__.divNU),
/* harmony export */   "divNU2": () => (/* reexport safe */ _divi__WEBPACK_IMPORTED_MODULE_52__.divNU2),
/* harmony export */   "divNU3": () => (/* reexport safe */ _divi__WEBPACK_IMPORTED_MODULE_52__.divNU3),
/* harmony export */   "divNU4": () => (/* reexport safe */ _divi__WEBPACK_IMPORTED_MODULE_52__.divNU4),
/* harmony export */   "divU": () => (/* reexport safe */ _divi__WEBPACK_IMPORTED_MODULE_52__.divU),
/* harmony export */   "divU2": () => (/* reexport safe */ _divi__WEBPACK_IMPORTED_MODULE_52__.divU2),
/* harmony export */   "divU3": () => (/* reexport safe */ _divi__WEBPACK_IMPORTED_MODULE_52__.divU3),
/* harmony export */   "divU4": () => (/* reexport safe */ _divi__WEBPACK_IMPORTED_MODULE_52__.divU4),
/* harmony export */   "divN": () => (/* reexport safe */ _divn__WEBPACK_IMPORTED_MODULE_53__.divN),
/* harmony export */   "divN2": () => (/* reexport safe */ _divn__WEBPACK_IMPORTED_MODULE_53__.divN2),
/* harmony export */   "divN3": () => (/* reexport safe */ _divn__WEBPACK_IMPORTED_MODULE_53__.divN3),
/* harmony export */   "divN4": () => (/* reexport safe */ _divn__WEBPACK_IMPORTED_MODULE_53__.divN4),
/* harmony export */   "divS2": () => (/* reexport safe */ _divs__WEBPACK_IMPORTED_MODULE_54__.divS2),
/* harmony export */   "divS3": () => (/* reexport safe */ _divs__WEBPACK_IMPORTED_MODULE_54__.divS3),
/* harmony export */   "divS4": () => (/* reexport safe */ _divs__WEBPACK_IMPORTED_MODULE_54__.divS4),
/* harmony export */   "divNS2": () => (/* reexport safe */ _divns__WEBPACK_IMPORTED_MODULE_55__.divNS2),
/* harmony export */   "divNS3": () => (/* reexport safe */ _divns__WEBPACK_IMPORTED_MODULE_55__.divNS3),
/* harmony export */   "divNS4": () => (/* reexport safe */ _divns__WEBPACK_IMPORTED_MODULE_55__.divNS4),
/* harmony export */   "dot": () => (/* reexport safe */ _dot__WEBPACK_IMPORTED_MODULE_56__.dot),
/* harmony export */   "dot2": () => (/* reexport safe */ _dot__WEBPACK_IMPORTED_MODULE_56__.dot2),
/* harmony export */   "dot3": () => (/* reexport safe */ _dot__WEBPACK_IMPORTED_MODULE_56__.dot3),
/* harmony export */   "dot4": () => (/* reexport safe */ _dot__WEBPACK_IMPORTED_MODULE_56__.dot4),
/* harmony export */   "dotC4": () => (/* reexport safe */ _dotc__WEBPACK_IMPORTED_MODULE_57__.dotC4),
/* harmony export */   "dotC6": () => (/* reexport safe */ _dotc__WEBPACK_IMPORTED_MODULE_57__.dotC6),
/* harmony export */   "dotC8": () => (/* reexport safe */ _dotc__WEBPACK_IMPORTED_MODULE_57__.dotC8),
/* harmony export */   "dotS2": () => (/* reexport safe */ _dots__WEBPACK_IMPORTED_MODULE_58__.dotS2),
/* harmony export */   "dotS3": () => (/* reexport safe */ _dots__WEBPACK_IMPORTED_MODULE_58__.dotS3),
/* harmony export */   "dotS4": () => (/* reexport safe */ _dots__WEBPACK_IMPORTED_MODULE_58__.dotS4),
/* harmony export */   "empty": () => (/* reexport safe */ _empty__WEBPACK_IMPORTED_MODULE_59__.empty),
/* harmony export */   "eqDelta": () => (/* reexport safe */ _eqdelta__WEBPACK_IMPORTED_MODULE_60__.eqDelta),
/* harmony export */   "eqDelta2": () => (/* reexport safe */ _eqdelta__WEBPACK_IMPORTED_MODULE_60__.eqDelta2),
/* harmony export */   "eqDelta3": () => (/* reexport safe */ _eqdelta__WEBPACK_IMPORTED_MODULE_60__.eqDelta3),
/* harmony export */   "eqDelta4": () => (/* reexport safe */ _eqdelta__WEBPACK_IMPORTED_MODULE_60__.eqDelta4),
/* harmony export */   "eqDeltaArray": () => (/* reexport safe */ _eqdelta__WEBPACK_IMPORTED_MODULE_60__.eqDeltaArray),
/* harmony export */   "eqDeltaS": () => (/* reexport safe */ _eqdelta__WEBPACK_IMPORTED_MODULE_60__.eqDeltaS),
/* harmony export */   "isInArray": () => (/* reexport safe */ _eqdelta__WEBPACK_IMPORTED_MODULE_60__.isInArray),
/* harmony export */   "equals": () => (/* reexport safe */ _equals__WEBPACK_IMPORTED_MODULE_61__.equals),
/* harmony export */   "equals2": () => (/* reexport safe */ _equals__WEBPACK_IMPORTED_MODULE_61__.equals2),
/* harmony export */   "equals3": () => (/* reexport safe */ _equals__WEBPACK_IMPORTED_MODULE_61__.equals3),
/* harmony export */   "equals4": () => (/* reexport safe */ _equals__WEBPACK_IMPORTED_MODULE_61__.equals4),
/* harmony export */   "every": () => (/* reexport safe */ _every__WEBPACK_IMPORTED_MODULE_62__.every),
/* harmony export */   "every2": () => (/* reexport safe */ _every__WEBPACK_IMPORTED_MODULE_62__.every2),
/* harmony export */   "every3": () => (/* reexport safe */ _every__WEBPACK_IMPORTED_MODULE_62__.every3),
/* harmony export */   "every4": () => (/* reexport safe */ _every__WEBPACK_IMPORTED_MODULE_62__.every4),
/* harmony export */   "exp": () => (/* reexport safe */ _exp__WEBPACK_IMPORTED_MODULE_63__.exp),
/* harmony export */   "exp2": () => (/* reexport safe */ _exp__WEBPACK_IMPORTED_MODULE_63__.exp2),
/* harmony export */   "exp3": () => (/* reexport safe */ _exp__WEBPACK_IMPORTED_MODULE_63__.exp3),
/* harmony export */   "exp4": () => (/* reexport safe */ _exp__WEBPACK_IMPORTED_MODULE_63__.exp4),
/* harmony export */   "exp_2": () => (/* reexport safe */ _exp_2__WEBPACK_IMPORTED_MODULE_64__.exp_2),
/* harmony export */   "exp_22": () => (/* reexport safe */ _exp_2__WEBPACK_IMPORTED_MODULE_64__.exp_22),
/* harmony export */   "exp_23": () => (/* reexport safe */ _exp_2__WEBPACK_IMPORTED_MODULE_64__.exp_23),
/* harmony export */   "exp_24": () => (/* reexport safe */ _exp_2__WEBPACK_IMPORTED_MODULE_64__.exp_24),
/* harmony export */   "faceForward": () => (/* reexport safe */ _face_forward__WEBPACK_IMPORTED_MODULE_65__.faceForward),
/* harmony export */   "fill": () => (/* reexport safe */ _fill__WEBPACK_IMPORTED_MODULE_66__.fill),
/* harmony export */   "fit": () => (/* reexport safe */ _fit__WEBPACK_IMPORTED_MODULE_67__.fit),
/* harmony export */   "fit01": () => (/* reexport safe */ _fit__WEBPACK_IMPORTED_MODULE_67__.fit01),
/* harmony export */   "fit01_2": () => (/* reexport safe */ _fit__WEBPACK_IMPORTED_MODULE_67__.fit01_2),
/* harmony export */   "fit01_3": () => (/* reexport safe */ _fit__WEBPACK_IMPORTED_MODULE_67__.fit01_3),
/* harmony export */   "fit01_4": () => (/* reexport safe */ _fit__WEBPACK_IMPORTED_MODULE_67__.fit01_4),
/* harmony export */   "fit11": () => (/* reexport safe */ _fit__WEBPACK_IMPORTED_MODULE_67__.fit11),
/* harmony export */   "fit11_2": () => (/* reexport safe */ _fit__WEBPACK_IMPORTED_MODULE_67__.fit11_2),
/* harmony export */   "fit11_3": () => (/* reexport safe */ _fit__WEBPACK_IMPORTED_MODULE_67__.fit11_3),
/* harmony export */   "fit11_4": () => (/* reexport safe */ _fit__WEBPACK_IMPORTED_MODULE_67__.fit11_4),
/* harmony export */   "fit2": () => (/* reexport safe */ _fit__WEBPACK_IMPORTED_MODULE_67__.fit2),
/* harmony export */   "fit3": () => (/* reexport safe */ _fit__WEBPACK_IMPORTED_MODULE_67__.fit3),
/* harmony export */   "fit4": () => (/* reexport safe */ _fit__WEBPACK_IMPORTED_MODULE_67__.fit4),
/* harmony export */   "floor": () => (/* reexport safe */ _floor__WEBPACK_IMPORTED_MODULE_68__.floor),
/* harmony export */   "floor2": () => (/* reexport safe */ _floor__WEBPACK_IMPORTED_MODULE_68__.floor2),
/* harmony export */   "floor3": () => (/* reexport safe */ _floor__WEBPACK_IMPORTED_MODULE_68__.floor3),
/* harmony export */   "floor4": () => (/* reexport safe */ _floor__WEBPACK_IMPORTED_MODULE_68__.floor4),
/* harmony export */   "fmod": () => (/* reexport safe */ _fmod__WEBPACK_IMPORTED_MODULE_69__.fmod),
/* harmony export */   "fmod2": () => (/* reexport safe */ _fmod__WEBPACK_IMPORTED_MODULE_69__.fmod2),
/* harmony export */   "fmod3": () => (/* reexport safe */ _fmod__WEBPACK_IMPORTED_MODULE_69__.fmod3),
/* harmony export */   "fmod4": () => (/* reexport safe */ _fmod__WEBPACK_IMPORTED_MODULE_69__.fmod4),
/* harmony export */   "fmodN": () => (/* reexport safe */ _fmodn__WEBPACK_IMPORTED_MODULE_70__.fmodN),
/* harmony export */   "fmodN2": () => (/* reexport safe */ _fmodn__WEBPACK_IMPORTED_MODULE_70__.fmodN2),
/* harmony export */   "fmodN3": () => (/* reexport safe */ _fmodn__WEBPACK_IMPORTED_MODULE_70__.fmodN3),
/* harmony export */   "fmodN4": () => (/* reexport safe */ _fmodn__WEBPACK_IMPORTED_MODULE_70__.fmodN4),
/* harmony export */   "fract": () => (/* reexport safe */ _fract__WEBPACK_IMPORTED_MODULE_71__.fract),
/* harmony export */   "fract2": () => (/* reexport safe */ _fract__WEBPACK_IMPORTED_MODULE_71__.fract2),
/* harmony export */   "fract3": () => (/* reexport safe */ _fract__WEBPACK_IMPORTED_MODULE_71__.fract3),
/* harmony export */   "fract4": () => (/* reexport safe */ _fract__WEBPACK_IMPORTED_MODULE_71__.fract4),
/* harmony export */   "gvec": () => (/* reexport safe */ _gvec__WEBPACK_IMPORTED_MODULE_72__.gvec),
/* harmony export */   "hash": () => (/* reexport safe */ _hash__WEBPACK_IMPORTED_MODULE_73__.hash),
/* harmony export */   "heading": () => (/* reexport safe */ _heading__WEBPACK_IMPORTED_MODULE_74__.heading),
/* harmony export */   "headingXY": () => (/* reexport safe */ _heading__WEBPACK_IMPORTED_MODULE_74__.headingXY),
/* harmony export */   "headingXZ": () => (/* reexport safe */ _heading__WEBPACK_IMPORTED_MODULE_74__.headingXZ),
/* harmony export */   "headingYZ": () => (/* reexport safe */ _heading__WEBPACK_IMPORTED_MODULE_74__.headingYZ),
/* harmony export */   "headingSegment": () => (/* reexport safe */ _heading_segment__WEBPACK_IMPORTED_MODULE_75__.headingSegment),
/* harmony export */   "headingSegmentXY": () => (/* reexport safe */ _heading_segment__WEBPACK_IMPORTED_MODULE_75__.headingSegmentXY),
/* harmony export */   "headingSegmentXZ": () => (/* reexport safe */ _heading_segment__WEBPACK_IMPORTED_MODULE_75__.headingSegmentXZ),
/* harmony export */   "headingSegmentYZ": () => (/* reexport safe */ _heading_segment__WEBPACK_IMPORTED_MODULE_75__.headingSegmentYZ),
/* harmony export */   "fromHomogeneous": () => (/* reexport safe */ _homogeneous__WEBPACK_IMPORTED_MODULE_76__.fromHomogeneous),
/* harmony export */   "fromHomogeneous3": () => (/* reexport safe */ _homogeneous__WEBPACK_IMPORTED_MODULE_76__.fromHomogeneous3),
/* harmony export */   "fromHomogeneous4": () => (/* reexport safe */ _homogeneous__WEBPACK_IMPORTED_MODULE_76__.fromHomogeneous4),
/* harmony export */   "invert": () => (/* reexport safe */ _invert__WEBPACK_IMPORTED_MODULE_77__.invert),
/* harmony export */   "invert2": () => (/* reexport safe */ _invert__WEBPACK_IMPORTED_MODULE_77__.invert2),
/* harmony export */   "invert3": () => (/* reexport safe */ _invert__WEBPACK_IMPORTED_MODULE_77__.invert3),
/* harmony export */   "invert4": () => (/* reexport safe */ _invert__WEBPACK_IMPORTED_MODULE_77__.invert4),
/* harmony export */   "invSqrt": () => (/* reexport safe */ _invsqrt__WEBPACK_IMPORTED_MODULE_78__.invSqrt),
/* harmony export */   "invSqrt2": () => (/* reexport safe */ _invsqrt__WEBPACK_IMPORTED_MODULE_78__.invSqrt2),
/* harmony export */   "invSqrt3": () => (/* reexport safe */ _invsqrt__WEBPACK_IMPORTED_MODULE_78__.invSqrt3),
/* harmony export */   "invSqrt4": () => (/* reexport safe */ _invsqrt__WEBPACK_IMPORTED_MODULE_78__.invSqrt4),
/* harmony export */   "isInf": () => (/* reexport safe */ _is_inf__WEBPACK_IMPORTED_MODULE_79__.isInf),
/* harmony export */   "isInf2": () => (/* reexport safe */ _is_inf__WEBPACK_IMPORTED_MODULE_79__.isInf2),
/* harmony export */   "isInf3": () => (/* reexport safe */ _is_inf__WEBPACK_IMPORTED_MODULE_79__.isInf3),
/* harmony export */   "isInf4": () => (/* reexport safe */ _is_inf__WEBPACK_IMPORTED_MODULE_79__.isInf4),
/* harmony export */   "isNaN": () => (/* reexport safe */ _is_nan__WEBPACK_IMPORTED_MODULE_80__.isNaN),
/* harmony export */   "isNaN2": () => (/* reexport safe */ _is_nan__WEBPACK_IMPORTED_MODULE_80__.isNaN2),
/* harmony export */   "isNaN3": () => (/* reexport safe */ _is_nan__WEBPACK_IMPORTED_MODULE_80__.isNaN3),
/* harmony export */   "isNaN4": () => (/* reexport safe */ _is_nan__WEBPACK_IMPORTED_MODULE_80__.isNaN4),
/* harmony export */   "jitter": () => (/* reexport safe */ _jitter__WEBPACK_IMPORTED_MODULE_81__.jitter),
/* harmony export */   "limit": () => (/* reexport safe */ _limit__WEBPACK_IMPORTED_MODULE_82__.limit),
/* harmony export */   "log": () => (/* reexport safe */ _log__WEBPACK_IMPORTED_MODULE_83__.log),
/* harmony export */   "log2": () => (/* reexport safe */ _log__WEBPACK_IMPORTED_MODULE_83__.log2),
/* harmony export */   "log3": () => (/* reexport safe */ _log__WEBPACK_IMPORTED_MODULE_83__.log3),
/* harmony export */   "log4": () => (/* reexport safe */ _log__WEBPACK_IMPORTED_MODULE_83__.log4),
/* harmony export */   "log_2": () => (/* reexport safe */ _log_2__WEBPACK_IMPORTED_MODULE_84__.log_2),
/* harmony export */   "log_22": () => (/* reexport safe */ _log_2__WEBPACK_IMPORTED_MODULE_84__.log_22),
/* harmony export */   "log_23": () => (/* reexport safe */ _log_2__WEBPACK_IMPORTED_MODULE_84__.log_23),
/* harmony export */   "log_24": () => (/* reexport safe */ _log_2__WEBPACK_IMPORTED_MODULE_84__.log_24),
/* harmony export */   "logicAnd": () => (/* reexport safe */ _logic_and__WEBPACK_IMPORTED_MODULE_85__.logicAnd),
/* harmony export */   "logicAnd2": () => (/* reexport safe */ _logic_and__WEBPACK_IMPORTED_MODULE_85__.logicAnd2),
/* harmony export */   "logicAnd3": () => (/* reexport safe */ _logic_and__WEBPACK_IMPORTED_MODULE_85__.logicAnd3),
/* harmony export */   "logicAnd4": () => (/* reexport safe */ _logic_and__WEBPACK_IMPORTED_MODULE_85__.logicAnd4),
/* harmony export */   "logicAndN": () => (/* reexport safe */ _logic_and__WEBPACK_IMPORTED_MODULE_85__.logicAndN),
/* harmony export */   "logicAndN2": () => (/* reexport safe */ _logic_and__WEBPACK_IMPORTED_MODULE_85__.logicAndN2),
/* harmony export */   "logicAndN3": () => (/* reexport safe */ _logic_and__WEBPACK_IMPORTED_MODULE_85__.logicAndN3),
/* harmony export */   "logicAndN4": () => (/* reexport safe */ _logic_and__WEBPACK_IMPORTED_MODULE_85__.logicAndN4),
/* harmony export */   "logicNot": () => (/* reexport safe */ _logic_not__WEBPACK_IMPORTED_MODULE_86__.logicNot),
/* harmony export */   "logicNot2": () => (/* reexport safe */ _logic_not__WEBPACK_IMPORTED_MODULE_86__.logicNot2),
/* harmony export */   "logicNot3": () => (/* reexport safe */ _logic_not__WEBPACK_IMPORTED_MODULE_86__.logicNot3),
/* harmony export */   "logicNot4": () => (/* reexport safe */ _logic_not__WEBPACK_IMPORTED_MODULE_86__.logicNot4),
/* harmony export */   "logicOr": () => (/* reexport safe */ _logic_or__WEBPACK_IMPORTED_MODULE_87__.logicOr),
/* harmony export */   "logicOr2": () => (/* reexport safe */ _logic_or__WEBPACK_IMPORTED_MODULE_87__.logicOr2),
/* harmony export */   "logicOr3": () => (/* reexport safe */ _logic_or__WEBPACK_IMPORTED_MODULE_87__.logicOr3),
/* harmony export */   "logicOr4": () => (/* reexport safe */ _logic_or__WEBPACK_IMPORTED_MODULE_87__.logicOr4),
/* harmony export */   "logicOrN": () => (/* reexport safe */ _logic_or__WEBPACK_IMPORTED_MODULE_87__.logicOrN),
/* harmony export */   "logicOrN2": () => (/* reexport safe */ _logic_or__WEBPACK_IMPORTED_MODULE_87__.logicOrN2),
/* harmony export */   "logicOrN3": () => (/* reexport safe */ _logic_or__WEBPACK_IMPORTED_MODULE_87__.logicOrN3),
/* harmony export */   "logicOrN4": () => (/* reexport safe */ _logic_or__WEBPACK_IMPORTED_MODULE_87__.logicOrN4),
/* harmony export */   "lshiftI": () => (/* reexport safe */ _lshift__WEBPACK_IMPORTED_MODULE_88__.lshiftI),
/* harmony export */   "lshiftI2": () => (/* reexport safe */ _lshift__WEBPACK_IMPORTED_MODULE_88__.lshiftI2),
/* harmony export */   "lshiftI3": () => (/* reexport safe */ _lshift__WEBPACK_IMPORTED_MODULE_88__.lshiftI3),
/* harmony export */   "lshiftI4": () => (/* reexport safe */ _lshift__WEBPACK_IMPORTED_MODULE_88__.lshiftI4),
/* harmony export */   "lshiftNI": () => (/* reexport safe */ _lshift__WEBPACK_IMPORTED_MODULE_88__.lshiftNI),
/* harmony export */   "lshiftNI2": () => (/* reexport safe */ _lshift__WEBPACK_IMPORTED_MODULE_88__.lshiftNI2),
/* harmony export */   "lshiftNI3": () => (/* reexport safe */ _lshift__WEBPACK_IMPORTED_MODULE_88__.lshiftNI3),
/* harmony export */   "lshiftNI4": () => (/* reexport safe */ _lshift__WEBPACK_IMPORTED_MODULE_88__.lshiftNI4),
/* harmony export */   "lshiftNU": () => (/* reexport safe */ _lshift__WEBPACK_IMPORTED_MODULE_88__.lshiftNU),
/* harmony export */   "lshiftNU2": () => (/* reexport safe */ _lshift__WEBPACK_IMPORTED_MODULE_88__.lshiftNU2),
/* harmony export */   "lshiftNU3": () => (/* reexport safe */ _lshift__WEBPACK_IMPORTED_MODULE_88__.lshiftNU3),
/* harmony export */   "lshiftNU4": () => (/* reexport safe */ _lshift__WEBPACK_IMPORTED_MODULE_88__.lshiftNU4),
/* harmony export */   "lshiftU": () => (/* reexport safe */ _lshift__WEBPACK_IMPORTED_MODULE_88__.lshiftU),
/* harmony export */   "lshiftU2": () => (/* reexport safe */ _lshift__WEBPACK_IMPORTED_MODULE_88__.lshiftU2),
/* harmony export */   "lshiftU3": () => (/* reexport safe */ _lshift__WEBPACK_IMPORTED_MODULE_88__.lshiftU3),
/* harmony export */   "lshiftU4": () => (/* reexport safe */ _lshift__WEBPACK_IMPORTED_MODULE_88__.lshiftU4),
/* harmony export */   "madd": () => (/* reexport safe */ _madd__WEBPACK_IMPORTED_MODULE_89__.madd),
/* harmony export */   "madd2": () => (/* reexport safe */ _madd__WEBPACK_IMPORTED_MODULE_89__.madd2),
/* harmony export */   "madd3": () => (/* reexport safe */ _madd__WEBPACK_IMPORTED_MODULE_89__.madd3),
/* harmony export */   "madd4": () => (/* reexport safe */ _madd__WEBPACK_IMPORTED_MODULE_89__.madd4),
/* harmony export */   "maddN": () => (/* reexport safe */ _maddn__WEBPACK_IMPORTED_MODULE_90__.maddN),
/* harmony export */   "maddN2": () => (/* reexport safe */ _maddn__WEBPACK_IMPORTED_MODULE_90__.maddN2),
/* harmony export */   "maddN3": () => (/* reexport safe */ _maddn__WEBPACK_IMPORTED_MODULE_90__.maddN3),
/* harmony export */   "maddN4": () => (/* reexport safe */ _maddn__WEBPACK_IMPORTED_MODULE_90__.maddN4),
/* harmony export */   "maddS2": () => (/* reexport safe */ _madds__WEBPACK_IMPORTED_MODULE_91__.maddS2),
/* harmony export */   "maddS3": () => (/* reexport safe */ _madds__WEBPACK_IMPORTED_MODULE_91__.maddS3),
/* harmony export */   "maddS4": () => (/* reexport safe */ _madds__WEBPACK_IMPORTED_MODULE_91__.maddS4),
/* harmony export */   "maddNS2": () => (/* reexport safe */ _maddns__WEBPACK_IMPORTED_MODULE_92__.maddNS2),
/* harmony export */   "maddNS3": () => (/* reexport safe */ _maddns__WEBPACK_IMPORTED_MODULE_92__.maddNS3),
/* harmony export */   "maddNS4": () => (/* reexport safe */ _maddns__WEBPACK_IMPORTED_MODULE_92__.maddNS4),
/* harmony export */   "mag": () => (/* reexport safe */ _mag__WEBPACK_IMPORTED_MODULE_93__.mag),
/* harmony export */   "magS2": () => (/* reexport safe */ _mags__WEBPACK_IMPORTED_MODULE_94__.magS2),
/* harmony export */   "magS3": () => (/* reexport safe */ _mags__WEBPACK_IMPORTED_MODULE_94__.magS3),
/* harmony export */   "magS4": () => (/* reexport safe */ _mags__WEBPACK_IMPORTED_MODULE_94__.magS4),
/* harmony export */   "magSq": () => (/* reexport safe */ _magsq__WEBPACK_IMPORTED_MODULE_95__.magSq),
/* harmony export */   "magSq2": () => (/* reexport safe */ _magsq__WEBPACK_IMPORTED_MODULE_95__.magSq2),
/* harmony export */   "magSq3": () => (/* reexport safe */ _magsq__WEBPACK_IMPORTED_MODULE_95__.magSq3),
/* harmony export */   "magSq4": () => (/* reexport safe */ _magsq__WEBPACK_IMPORTED_MODULE_95__.magSq4),
/* harmony export */   "magSqS2": () => (/* reexport safe */ _magsqs__WEBPACK_IMPORTED_MODULE_96__.magSqS2),
/* harmony export */   "magSqS3": () => (/* reexport safe */ _magsqs__WEBPACK_IMPORTED_MODULE_96__.magSqS3),
/* harmony export */   "magSqS4": () => (/* reexport safe */ _magsqs__WEBPACK_IMPORTED_MODULE_96__.magSqS4),
/* harmony export */   "major": () => (/* reexport safe */ _major__WEBPACK_IMPORTED_MODULE_97__.major),
/* harmony export */   "major2": () => (/* reexport safe */ _major__WEBPACK_IMPORTED_MODULE_97__.major2),
/* harmony export */   "major3": () => (/* reexport safe */ _major__WEBPACK_IMPORTED_MODULE_97__.major3),
/* harmony export */   "major4": () => (/* reexport safe */ _major__WEBPACK_IMPORTED_MODULE_97__.major4),
/* harmony export */   "mapV": () => (/* reexport safe */ _map__WEBPACK_IMPORTED_MODULE_98__.mapV),
/* harmony export */   "mapVN": () => (/* reexport safe */ _map__WEBPACK_IMPORTED_MODULE_98__.mapVN),
/* harmony export */   "mapVV": () => (/* reexport safe */ _map__WEBPACK_IMPORTED_MODULE_98__.mapVV),
/* harmony export */   "mapVVN": () => (/* reexport safe */ _map__WEBPACK_IMPORTED_MODULE_98__.mapVVN),
/* harmony export */   "mapVVV": () => (/* reexport safe */ _map__WEBPACK_IMPORTED_MODULE_98__.mapVVV),
/* harmony export */   "mapVectors": () => (/* reexport safe */ _map_vectors__WEBPACK_IMPORTED_MODULE_99__.mapVectors),
/* harmony export */   "max": () => (/* reexport safe */ _max__WEBPACK_IMPORTED_MODULE_100__.max),
/* harmony export */   "max2": () => (/* reexport safe */ _max__WEBPACK_IMPORTED_MODULE_100__.max2),
/* harmony export */   "max3": () => (/* reexport safe */ _max__WEBPACK_IMPORTED_MODULE_100__.max3),
/* harmony export */   "max4": () => (/* reexport safe */ _max__WEBPACK_IMPORTED_MODULE_100__.max4),
/* harmony export */   "median": () => (/* reexport safe */ _median__WEBPACK_IMPORTED_MODULE_101__.median),
/* harmony export */   "min": () => (/* reexport safe */ _min__WEBPACK_IMPORTED_MODULE_102__.min),
/* harmony export */   "min2": () => (/* reexport safe */ _min__WEBPACK_IMPORTED_MODULE_102__.min2),
/* harmony export */   "min3": () => (/* reexport safe */ _min__WEBPACK_IMPORTED_MODULE_102__.min3),
/* harmony export */   "min4": () => (/* reexport safe */ _min__WEBPACK_IMPORTED_MODULE_102__.min4),
/* harmony export */   "minor": () => (/* reexport safe */ _minor__WEBPACK_IMPORTED_MODULE_103__.minor),
/* harmony export */   "minor2": () => (/* reexport safe */ _minor__WEBPACK_IMPORTED_MODULE_103__.minor2),
/* harmony export */   "minor3": () => (/* reexport safe */ _minor__WEBPACK_IMPORTED_MODULE_103__.minor3),
/* harmony export */   "minor4": () => (/* reexport safe */ _minor__WEBPACK_IMPORTED_MODULE_103__.minor4),
/* harmony export */   "mixBilinear": () => (/* reexport safe */ _mix_bilinear__WEBPACK_IMPORTED_MODULE_104__.mixBilinear),
/* harmony export */   "mixBilinear2": () => (/* reexport safe */ _mix_bilinear__WEBPACK_IMPORTED_MODULE_104__.mixBilinear2),
/* harmony export */   "mixBilinear3": () => (/* reexport safe */ _mix_bilinear__WEBPACK_IMPORTED_MODULE_104__.mixBilinear3),
/* harmony export */   "mixBilinear4": () => (/* reexport safe */ _mix_bilinear__WEBPACK_IMPORTED_MODULE_104__.mixBilinear4),
/* harmony export */   "mixCubic": () => (/* reexport safe */ _mix_cubic__WEBPACK_IMPORTED_MODULE_105__.mixCubic),
/* harmony export */   "mixCubicHermite": () => (/* reexport safe */ _mix_hermite__WEBPACK_IMPORTED_MODULE_106__.mixCubicHermite),
/* harmony export */   "mixHermiteCardinal": () => (/* reexport safe */ _mix_hermite__WEBPACK_IMPORTED_MODULE_106__.mixHermiteCardinal),
/* harmony export */   "mixHermiteDiff3": () => (/* reexport safe */ _mix_hermite__WEBPACK_IMPORTED_MODULE_106__.mixHermiteDiff3),
/* harmony export */   "tangentCardinal": () => (/* reexport safe */ _mix_hermite__WEBPACK_IMPORTED_MODULE_106__.tangentCardinal),
/* harmony export */   "tangentDiff3": () => (/* reexport safe */ _mix_hermite__WEBPACK_IMPORTED_MODULE_106__.tangentDiff3),
/* harmony export */   "mixQuadratic": () => (/* reexport safe */ _mix_quadratic__WEBPACK_IMPORTED_MODULE_107__.mixQuadratic),
/* harmony export */   "mix": () => (/* reexport safe */ _mix__WEBPACK_IMPORTED_MODULE_108__.mix),
/* harmony export */   "mix2": () => (/* reexport safe */ _mix__WEBPACK_IMPORTED_MODULE_108__.mix2),
/* harmony export */   "mix3": () => (/* reexport safe */ _mix__WEBPACK_IMPORTED_MODULE_108__.mix3),
/* harmony export */   "mix4": () => (/* reexport safe */ _mix__WEBPACK_IMPORTED_MODULE_108__.mix4),
/* harmony export */   "mixN": () => (/* reexport safe */ _mixn__WEBPACK_IMPORTED_MODULE_109__.mixN),
/* harmony export */   "mixN2": () => (/* reexport safe */ _mixn__WEBPACK_IMPORTED_MODULE_109__.mixN2),
/* harmony export */   "mixN3": () => (/* reexport safe */ _mixn__WEBPACK_IMPORTED_MODULE_109__.mixN3),
/* harmony export */   "mixN4": () => (/* reexport safe */ _mixn__WEBPACK_IMPORTED_MODULE_109__.mixN4),
/* harmony export */   "mixS2": () => (/* reexport safe */ _mixs__WEBPACK_IMPORTED_MODULE_110__.mixS2),
/* harmony export */   "mixS3": () => (/* reexport safe */ _mixs__WEBPACK_IMPORTED_MODULE_110__.mixS3),
/* harmony export */   "mixS4": () => (/* reexport safe */ _mixs__WEBPACK_IMPORTED_MODULE_110__.mixS4),
/* harmony export */   "mixNS2": () => (/* reexport safe */ _mixns__WEBPACK_IMPORTED_MODULE_111__.mixNS2),
/* harmony export */   "mixNS3": () => (/* reexport safe */ _mixns__WEBPACK_IMPORTED_MODULE_111__.mixNS3),
/* harmony export */   "mixNS4": () => (/* reexport safe */ _mixns__WEBPACK_IMPORTED_MODULE_111__.mixNS4),
/* harmony export */   "mod": () => (/* reexport safe */ _mod__WEBPACK_IMPORTED_MODULE_112__.mod),
/* harmony export */   "mod2": () => (/* reexport safe */ _mod__WEBPACK_IMPORTED_MODULE_112__.mod2),
/* harmony export */   "mod3": () => (/* reexport safe */ _mod__WEBPACK_IMPORTED_MODULE_112__.mod3),
/* harmony export */   "mod4": () => (/* reexport safe */ _mod__WEBPACK_IMPORTED_MODULE_112__.mod4),
/* harmony export */   "modN": () => (/* reexport safe */ _modn__WEBPACK_IMPORTED_MODULE_113__.modN),
/* harmony export */   "modN2": () => (/* reexport safe */ _modn__WEBPACK_IMPORTED_MODULE_113__.modN2),
/* harmony export */   "modN3": () => (/* reexport safe */ _modn__WEBPACK_IMPORTED_MODULE_113__.modN3),
/* harmony export */   "modN4": () => (/* reexport safe */ _modn__WEBPACK_IMPORTED_MODULE_113__.modN4),
/* harmony export */   "msub": () => (/* reexport safe */ _msub__WEBPACK_IMPORTED_MODULE_114__.msub),
/* harmony export */   "msub2": () => (/* reexport safe */ _msub__WEBPACK_IMPORTED_MODULE_114__.msub2),
/* harmony export */   "msub3": () => (/* reexport safe */ _msub__WEBPACK_IMPORTED_MODULE_114__.msub3),
/* harmony export */   "msub4": () => (/* reexport safe */ _msub__WEBPACK_IMPORTED_MODULE_114__.msub4),
/* harmony export */   "msubN": () => (/* reexport safe */ _msubn__WEBPACK_IMPORTED_MODULE_115__.msubN),
/* harmony export */   "msubN2": () => (/* reexport safe */ _msubn__WEBPACK_IMPORTED_MODULE_115__.msubN2),
/* harmony export */   "msubN3": () => (/* reexport safe */ _msubn__WEBPACK_IMPORTED_MODULE_115__.msubN3),
/* harmony export */   "msubN4": () => (/* reexport safe */ _msubn__WEBPACK_IMPORTED_MODULE_115__.msubN4),
/* harmony export */   "msubS2": () => (/* reexport safe */ _msubs__WEBPACK_IMPORTED_MODULE_116__.msubS2),
/* harmony export */   "msubS3": () => (/* reexport safe */ _msubs__WEBPACK_IMPORTED_MODULE_116__.msubS3),
/* harmony export */   "msubS4": () => (/* reexport safe */ _msubs__WEBPACK_IMPORTED_MODULE_116__.msubS4),
/* harmony export */   "msubNS2": () => (/* reexport safe */ _msubns__WEBPACK_IMPORTED_MODULE_117__.msubNS2),
/* harmony export */   "msubNS3": () => (/* reexport safe */ _msubns__WEBPACK_IMPORTED_MODULE_117__.msubNS3),
/* harmony export */   "msubNS4": () => (/* reexport safe */ _msubns__WEBPACK_IMPORTED_MODULE_117__.msubNS4),
/* harmony export */   "mul": () => (/* reexport safe */ _mul__WEBPACK_IMPORTED_MODULE_118__.mul),
/* harmony export */   "mul2": () => (/* reexport safe */ _mul__WEBPACK_IMPORTED_MODULE_118__.mul2),
/* harmony export */   "mul3": () => (/* reexport safe */ _mul__WEBPACK_IMPORTED_MODULE_118__.mul3),
/* harmony export */   "mul4": () => (/* reexport safe */ _mul__WEBPACK_IMPORTED_MODULE_118__.mul4),
/* harmony export */   "mulI": () => (/* reexport safe */ _muli__WEBPACK_IMPORTED_MODULE_119__.mulI),
/* harmony export */   "mulI2": () => (/* reexport safe */ _muli__WEBPACK_IMPORTED_MODULE_119__.mulI2),
/* harmony export */   "mulI3": () => (/* reexport safe */ _muli__WEBPACK_IMPORTED_MODULE_119__.mulI3),
/* harmony export */   "mulI4": () => (/* reexport safe */ _muli__WEBPACK_IMPORTED_MODULE_119__.mulI4),
/* harmony export */   "mulNI": () => (/* reexport safe */ _muli__WEBPACK_IMPORTED_MODULE_119__.mulNI),
/* harmony export */   "mulNI2": () => (/* reexport safe */ _muli__WEBPACK_IMPORTED_MODULE_119__.mulNI2),
/* harmony export */   "mulNI3": () => (/* reexport safe */ _muli__WEBPACK_IMPORTED_MODULE_119__.mulNI3),
/* harmony export */   "mulNI4": () => (/* reexport safe */ _muli__WEBPACK_IMPORTED_MODULE_119__.mulNI4),
/* harmony export */   "mulNU": () => (/* reexport safe */ _muli__WEBPACK_IMPORTED_MODULE_119__.mulNU),
/* harmony export */   "mulNU2": () => (/* reexport safe */ _muli__WEBPACK_IMPORTED_MODULE_119__.mulNU2),
/* harmony export */   "mulNU3": () => (/* reexport safe */ _muli__WEBPACK_IMPORTED_MODULE_119__.mulNU3),
/* harmony export */   "mulNU4": () => (/* reexport safe */ _muli__WEBPACK_IMPORTED_MODULE_119__.mulNU4),
/* harmony export */   "mulU": () => (/* reexport safe */ _muli__WEBPACK_IMPORTED_MODULE_119__.mulU),
/* harmony export */   "mulU2": () => (/* reexport safe */ _muli__WEBPACK_IMPORTED_MODULE_119__.mulU2),
/* harmony export */   "mulU3": () => (/* reexport safe */ _muli__WEBPACK_IMPORTED_MODULE_119__.mulU3),
/* harmony export */   "mulU4": () => (/* reexport safe */ _muli__WEBPACK_IMPORTED_MODULE_119__.mulU4),
/* harmony export */   "mulN": () => (/* reexport safe */ _muln__WEBPACK_IMPORTED_MODULE_120__.mulN),
/* harmony export */   "mulN2": () => (/* reexport safe */ _muln__WEBPACK_IMPORTED_MODULE_120__.mulN2),
/* harmony export */   "mulN3": () => (/* reexport safe */ _muln__WEBPACK_IMPORTED_MODULE_120__.mulN3),
/* harmony export */   "mulN4": () => (/* reexport safe */ _muln__WEBPACK_IMPORTED_MODULE_120__.mulN4),
/* harmony export */   "mulS2": () => (/* reexport safe */ _muls__WEBPACK_IMPORTED_MODULE_121__.mulS2),
/* harmony export */   "mulS3": () => (/* reexport safe */ _muls__WEBPACK_IMPORTED_MODULE_121__.mulS3),
/* harmony export */   "mulS4": () => (/* reexport safe */ _muls__WEBPACK_IMPORTED_MODULE_121__.mulS4),
/* harmony export */   "mulNS2": () => (/* reexport safe */ _mulns__WEBPACK_IMPORTED_MODULE_122__.mulNS2),
/* harmony export */   "mulNS3": () => (/* reexport safe */ _mulns__WEBPACK_IMPORTED_MODULE_122__.mulNS3),
/* harmony export */   "mulNS4": () => (/* reexport safe */ _mulns__WEBPACK_IMPORTED_MODULE_122__.mulNS4),
/* harmony export */   "neg": () => (/* reexport safe */ _neg__WEBPACK_IMPORTED_MODULE_123__.neg),
/* harmony export */   "normalCCW": () => (/* reexport safe */ _normal__WEBPACK_IMPORTED_MODULE_124__.normalCCW),
/* harmony export */   "normalCW": () => (/* reexport safe */ _normal__WEBPACK_IMPORTED_MODULE_124__.normalCW),
/* harmony export */   "normalize": () => (/* reexport safe */ _normalize__WEBPACK_IMPORTED_MODULE_125__.normalize),
/* harmony export */   "normalizeS2": () => (/* reexport safe */ _normalizes__WEBPACK_IMPORTED_MODULE_126__.normalizeS2),
/* harmony export */   "normalizeS3": () => (/* reexport safe */ _normalizes__WEBPACK_IMPORTED_MODULE_126__.normalizeS3),
/* harmony export */   "normalizeS4": () => (/* reexport safe */ _normalizes__WEBPACK_IMPORTED_MODULE_126__.normalizeS4),
/* harmony export */   "not": () => (/* reexport safe */ _not__WEBPACK_IMPORTED_MODULE_127__.not),
/* harmony export */   "not2": () => (/* reexport safe */ _not__WEBPACK_IMPORTED_MODULE_127__.not2),
/* harmony export */   "not3": () => (/* reexport safe */ _not__WEBPACK_IMPORTED_MODULE_127__.not3),
/* harmony export */   "not4": () => (/* reexport safe */ _not__WEBPACK_IMPORTED_MODULE_127__.not4),
/* harmony export */   "orthoNormal3": () => (/* reexport safe */ _ortho_normal__WEBPACK_IMPORTED_MODULE_128__.orthoNormal3),
/* harmony export */   "perpendicularCCW": () => (/* reexport safe */ _perpendicular__WEBPACK_IMPORTED_MODULE_129__.perpendicularCCW),
/* harmony export */   "perpendicularCW": () => (/* reexport safe */ _perpendicular__WEBPACK_IMPORTED_MODULE_129__.perpendicularCW),
/* harmony export */   "pointOnRay": () => (/* reexport safe */ _point_on_ray__WEBPACK_IMPORTED_MODULE_130__.pointOnRay),
/* harmony export */   "pointOnRay2": () => (/* reexport safe */ _point_on_ray__WEBPACK_IMPORTED_MODULE_130__.pointOnRay2),
/* harmony export */   "pointOnRay3": () => (/* reexport safe */ _point_on_ray__WEBPACK_IMPORTED_MODULE_130__.pointOnRay3),
/* harmony export */   "polar": () => (/* reexport safe */ _polar__WEBPACK_IMPORTED_MODULE_131__.polar),
/* harmony export */   "polar2": () => (/* reexport safe */ _polar__WEBPACK_IMPORTED_MODULE_131__.polar2),
/* harmony export */   "polar3": () => (/* reexport safe */ _polar__WEBPACK_IMPORTED_MODULE_131__.polar3),
/* harmony export */   "pow": () => (/* reexport safe */ _pow__WEBPACK_IMPORTED_MODULE_132__.pow),
/* harmony export */   "pow2": () => (/* reexport safe */ _pow__WEBPACK_IMPORTED_MODULE_132__.pow2),
/* harmony export */   "pow3": () => (/* reexport safe */ _pow__WEBPACK_IMPORTED_MODULE_132__.pow3),
/* harmony export */   "pow4": () => (/* reexport safe */ _pow__WEBPACK_IMPORTED_MODULE_132__.pow4),
/* harmony export */   "powN": () => (/* reexport safe */ _pown__WEBPACK_IMPORTED_MODULE_133__.powN),
/* harmony export */   "powN2": () => (/* reexport safe */ _pown__WEBPACK_IMPORTED_MODULE_133__.powN2),
/* harmony export */   "powN3": () => (/* reexport safe */ _pown__WEBPACK_IMPORTED_MODULE_133__.powN3),
/* harmony export */   "powN4": () => (/* reexport safe */ _pown__WEBPACK_IMPORTED_MODULE_133__.powN4),
/* harmony export */   "project": () => (/* reexport safe */ _project__WEBPACK_IMPORTED_MODULE_134__.project),
/* harmony export */   "radians": () => (/* reexport safe */ _radians__WEBPACK_IMPORTED_MODULE_135__.radians),
/* harmony export */   "radians2": () => (/* reexport safe */ _radians__WEBPACK_IMPORTED_MODULE_135__.radians2),
/* harmony export */   "radians3": () => (/* reexport safe */ _radians__WEBPACK_IMPORTED_MODULE_135__.radians3),
/* harmony export */   "radians4": () => (/* reexport safe */ _radians__WEBPACK_IMPORTED_MODULE_135__.radians4),
/* harmony export */   "randMinMax": () => (/* reexport safe */ _random__WEBPACK_IMPORTED_MODULE_136__.randMinMax),
/* harmony export */   "randMinMax2": () => (/* reexport safe */ _random__WEBPACK_IMPORTED_MODULE_136__.randMinMax2),
/* harmony export */   "randMinMax3": () => (/* reexport safe */ _random__WEBPACK_IMPORTED_MODULE_136__.randMinMax3),
/* harmony export */   "randMinMax4": () => (/* reexport safe */ _random__WEBPACK_IMPORTED_MODULE_136__.randMinMax4),
/* harmony export */   "randNorm": () => (/* reexport safe */ _random__WEBPACK_IMPORTED_MODULE_136__.randNorm),
/* harmony export */   "random": () => (/* reexport safe */ _random__WEBPACK_IMPORTED_MODULE_136__.random),
/* harmony export */   "random2": () => (/* reexport safe */ _random__WEBPACK_IMPORTED_MODULE_136__.random2),
/* harmony export */   "random3": () => (/* reexport safe */ _random__WEBPACK_IMPORTED_MODULE_136__.random3),
/* harmony export */   "random4": () => (/* reexport safe */ _random__WEBPACK_IMPORTED_MODULE_136__.random4),
/* harmony export */   "randMinMaxS2": () => (/* reexport safe */ _randoms__WEBPACK_IMPORTED_MODULE_137__.randMinMaxS2),
/* harmony export */   "randMinMaxS3": () => (/* reexport safe */ _randoms__WEBPACK_IMPORTED_MODULE_137__.randMinMaxS3),
/* harmony export */   "randMinMaxS4": () => (/* reexport safe */ _randoms__WEBPACK_IMPORTED_MODULE_137__.randMinMaxS4),
/* harmony export */   "randNormS2": () => (/* reexport safe */ _randoms__WEBPACK_IMPORTED_MODULE_137__.randNormS2),
/* harmony export */   "randNormS3": () => (/* reexport safe */ _randoms__WEBPACK_IMPORTED_MODULE_137__.randNormS3),
/* harmony export */   "randNormS4": () => (/* reexport safe */ _randoms__WEBPACK_IMPORTED_MODULE_137__.randNormS4),
/* harmony export */   "randomS2": () => (/* reexport safe */ _randoms__WEBPACK_IMPORTED_MODULE_137__.randomS2),
/* harmony export */   "randomS3": () => (/* reexport safe */ _randoms__WEBPACK_IMPORTED_MODULE_137__.randomS3),
/* harmony export */   "randomS4": () => (/* reexport safe */ _randoms__WEBPACK_IMPORTED_MODULE_137__.randomS4),
/* harmony export */   "reflect": () => (/* reexport safe */ _reflect__WEBPACK_IMPORTED_MODULE_138__.reflect),
/* harmony export */   "refract": () => (/* reexport safe */ _refract__WEBPACK_IMPORTED_MODULE_139__.refract),
/* harmony export */   "rotateAroundAxis3": () => (/* reexport safe */ _rotate_around_axis__WEBPACK_IMPORTED_MODULE_140__.rotateAroundAxis3),
/* harmony export */   "rotateAroundPoint2": () => (/* reexport safe */ _rotate_around_point__WEBPACK_IMPORTED_MODULE_141__.rotateAroundPoint2),
/* harmony export */   "rotate": () => (/* reexport safe */ _rotate__WEBPACK_IMPORTED_MODULE_142__.rotate),
/* harmony export */   "rotateX": () => (/* reexport safe */ _rotate__WEBPACK_IMPORTED_MODULE_142__.rotateX),
/* harmony export */   "rotateY": () => (/* reexport safe */ _rotate__WEBPACK_IMPORTED_MODULE_142__.rotateY),
/* harmony export */   "rotateZ": () => (/* reexport safe */ _rotate__WEBPACK_IMPORTED_MODULE_142__.rotateZ),
/* harmony export */   "rotateS2": () => (/* reexport safe */ _rotates__WEBPACK_IMPORTED_MODULE_143__.rotateS2),
/* harmony export */   "rotateXS3": () => (/* reexport safe */ _rotates__WEBPACK_IMPORTED_MODULE_143__.rotateXS3),
/* harmony export */   "rotateYS3": () => (/* reexport safe */ _rotates__WEBPACK_IMPORTED_MODULE_143__.rotateYS3),
/* harmony export */   "rotateZS3": () => (/* reexport safe */ _rotates__WEBPACK_IMPORTED_MODULE_143__.rotateZS3),
/* harmony export */   "round": () => (/* reexport safe */ _round__WEBPACK_IMPORTED_MODULE_144__.round),
/* harmony export */   "round2": () => (/* reexport safe */ _round__WEBPACK_IMPORTED_MODULE_144__.round2),
/* harmony export */   "round3": () => (/* reexport safe */ _round__WEBPACK_IMPORTED_MODULE_144__.round3),
/* harmony export */   "round4": () => (/* reexport safe */ _round__WEBPACK_IMPORTED_MODULE_144__.round4),
/* harmony export */   "roundN": () => (/* reexport safe */ _round__WEBPACK_IMPORTED_MODULE_144__.roundN),
/* harmony export */   "roundN2": () => (/* reexport safe */ _round__WEBPACK_IMPORTED_MODULE_144__.roundN2),
/* harmony export */   "roundN3": () => (/* reexport safe */ _round__WEBPACK_IMPORTED_MODULE_144__.roundN3),
/* harmony export */   "roundN4": () => (/* reexport safe */ _round__WEBPACK_IMPORTED_MODULE_144__.roundN4),
/* harmony export */   "rshiftI": () => (/* reexport safe */ _rshift__WEBPACK_IMPORTED_MODULE_145__.rshiftI),
/* harmony export */   "rshiftI2": () => (/* reexport safe */ _rshift__WEBPACK_IMPORTED_MODULE_145__.rshiftI2),
/* harmony export */   "rshiftI3": () => (/* reexport safe */ _rshift__WEBPACK_IMPORTED_MODULE_145__.rshiftI3),
/* harmony export */   "rshiftI4": () => (/* reexport safe */ _rshift__WEBPACK_IMPORTED_MODULE_145__.rshiftI4),
/* harmony export */   "rshiftNI": () => (/* reexport safe */ _rshift__WEBPACK_IMPORTED_MODULE_145__.rshiftNI),
/* harmony export */   "rshiftNI2": () => (/* reexport safe */ _rshift__WEBPACK_IMPORTED_MODULE_145__.rshiftNI2),
/* harmony export */   "rshiftNI3": () => (/* reexport safe */ _rshift__WEBPACK_IMPORTED_MODULE_145__.rshiftNI3),
/* harmony export */   "rshiftNI4": () => (/* reexport safe */ _rshift__WEBPACK_IMPORTED_MODULE_145__.rshiftNI4),
/* harmony export */   "rshiftNU": () => (/* reexport safe */ _rshift__WEBPACK_IMPORTED_MODULE_145__.rshiftNU),
/* harmony export */   "rshiftNU2": () => (/* reexport safe */ _rshift__WEBPACK_IMPORTED_MODULE_145__.rshiftNU2),
/* harmony export */   "rshiftNU3": () => (/* reexport safe */ _rshift__WEBPACK_IMPORTED_MODULE_145__.rshiftNU3),
/* harmony export */   "rshiftNU4": () => (/* reexport safe */ _rshift__WEBPACK_IMPORTED_MODULE_145__.rshiftNU4),
/* harmony export */   "rshiftU": () => (/* reexport safe */ _rshift__WEBPACK_IMPORTED_MODULE_145__.rshiftU),
/* harmony export */   "rshiftU2": () => (/* reexport safe */ _rshift__WEBPACK_IMPORTED_MODULE_145__.rshiftU2),
/* harmony export */   "rshiftU3": () => (/* reexport safe */ _rshift__WEBPACK_IMPORTED_MODULE_145__.rshiftU3),
/* harmony export */   "rshiftU4": () => (/* reexport safe */ _rshift__WEBPACK_IMPORTED_MODULE_145__.rshiftU4),
/* harmony export */   "safeDiv": () => (/* reexport safe */ _safe_div__WEBPACK_IMPORTED_MODULE_146__.safeDiv),
/* harmony export */   "safeDiv2": () => (/* reexport safe */ _safe_div__WEBPACK_IMPORTED_MODULE_146__.safeDiv2),
/* harmony export */   "safeDiv3": () => (/* reexport safe */ _safe_div__WEBPACK_IMPORTED_MODULE_146__.safeDiv3),
/* harmony export */   "safeDiv4": () => (/* reexport safe */ _safe_div__WEBPACK_IMPORTED_MODULE_146__.safeDiv4),
/* harmony export */   "set": () => (/* reexport safe */ _set__WEBPACK_IMPORTED_MODULE_147__.set),
/* harmony export */   "set2": () => (/* reexport safe */ _set__WEBPACK_IMPORTED_MODULE_147__.set2),
/* harmony export */   "set3": () => (/* reexport safe */ _set__WEBPACK_IMPORTED_MODULE_147__.set3),
/* harmony export */   "set4": () => (/* reexport safe */ _set__WEBPACK_IMPORTED_MODULE_147__.set4),
/* harmony export */   "setC": () => (/* reexport safe */ _setc__WEBPACK_IMPORTED_MODULE_148__.setC),
/* harmony export */   "setC2": () => (/* reexport safe */ _setc__WEBPACK_IMPORTED_MODULE_148__.setC2),
/* harmony export */   "setC3": () => (/* reexport safe */ _setc__WEBPACK_IMPORTED_MODULE_148__.setC3),
/* harmony export */   "setC4": () => (/* reexport safe */ _setc__WEBPACK_IMPORTED_MODULE_148__.setC4),
/* harmony export */   "setC6": () => (/* reexport safe */ _setc__WEBPACK_IMPORTED_MODULE_148__.setC6),
/* harmony export */   "one": () => (/* reexport safe */ _setn__WEBPACK_IMPORTED_MODULE_149__.one),
/* harmony export */   "ones": () => (/* reexport safe */ _setn__WEBPACK_IMPORTED_MODULE_149__.ones),
/* harmony export */   "setN": () => (/* reexport safe */ _setn__WEBPACK_IMPORTED_MODULE_149__.setN),
/* harmony export */   "setN2": () => (/* reexport safe */ _setn__WEBPACK_IMPORTED_MODULE_149__.setN2),
/* harmony export */   "setN3": () => (/* reexport safe */ _setn__WEBPACK_IMPORTED_MODULE_149__.setN3),
/* harmony export */   "setN4": () => (/* reexport safe */ _setn__WEBPACK_IMPORTED_MODULE_149__.setN4),
/* harmony export */   "zero": () => (/* reexport safe */ _setn__WEBPACK_IMPORTED_MODULE_149__.zero),
/* harmony export */   "zeroes": () => (/* reexport safe */ _setn__WEBPACK_IMPORTED_MODULE_149__.zeroes),
/* harmony export */   "setS": () => (/* reexport safe */ _sets__WEBPACK_IMPORTED_MODULE_150__.setS),
/* harmony export */   "setS2": () => (/* reexport safe */ _sets__WEBPACK_IMPORTED_MODULE_150__.setS2),
/* harmony export */   "setS3": () => (/* reexport safe */ _sets__WEBPACK_IMPORTED_MODULE_150__.setS3),
/* harmony export */   "setS4": () => (/* reexport safe */ _sets__WEBPACK_IMPORTED_MODULE_150__.setS4),
/* harmony export */   "setCS2": () => (/* reexport safe */ _setcs__WEBPACK_IMPORTED_MODULE_151__.setCS2),
/* harmony export */   "setCS3": () => (/* reexport safe */ _setcs__WEBPACK_IMPORTED_MODULE_151__.setCS3),
/* harmony export */   "setCS4": () => (/* reexport safe */ _setcs__WEBPACK_IMPORTED_MODULE_151__.setCS4),
/* harmony export */   "setNS2": () => (/* reexport safe */ _setns__WEBPACK_IMPORTED_MODULE_152__.setNS2),
/* harmony export */   "setNS3": () => (/* reexport safe */ _setns__WEBPACK_IMPORTED_MODULE_152__.setNS3),
/* harmony export */   "setNS4": () => (/* reexport safe */ _setns__WEBPACK_IMPORTED_MODULE_152__.setNS4),
/* harmony export */   "setVN3": () => (/* reexport safe */ _setvn__WEBPACK_IMPORTED_MODULE_153__.setVN3),
/* harmony export */   "setVN4": () => (/* reexport safe */ _setvn__WEBPACK_IMPORTED_MODULE_153__.setVN4),
/* harmony export */   "setVV16": () => (/* reexport safe */ _setvv__WEBPACK_IMPORTED_MODULE_154__.setVV16),
/* harmony export */   "setVV4": () => (/* reexport safe */ _setvv__WEBPACK_IMPORTED_MODULE_154__.setVV4),
/* harmony export */   "setVV6": () => (/* reexport safe */ _setvv__WEBPACK_IMPORTED_MODULE_154__.setVV6),
/* harmony export */   "setVV9": () => (/* reexport safe */ _setvv__WEBPACK_IMPORTED_MODULE_154__.setVV9),
/* harmony export */   "sign": () => (/* reexport safe */ _sign__WEBPACK_IMPORTED_MODULE_155__.sign),
/* harmony export */   "sign2": () => (/* reexport safe */ _sign__WEBPACK_IMPORTED_MODULE_155__.sign2),
/* harmony export */   "sign3": () => (/* reexport safe */ _sign__WEBPACK_IMPORTED_MODULE_155__.sign3),
/* harmony export */   "sign4": () => (/* reexport safe */ _sign__WEBPACK_IMPORTED_MODULE_155__.sign4),
/* harmony export */   "signedArea2": () => (/* reexport safe */ _signed_area__WEBPACK_IMPORTED_MODULE_156__.signedArea2),
/* harmony export */   "signedAreaC2": () => (/* reexport safe */ _signed_area__WEBPACK_IMPORTED_MODULE_156__.signedAreaC2),
/* harmony export */   "signedVolume": () => (/* reexport safe */ _signed_volume__WEBPACK_IMPORTED_MODULE_157__.signedVolume),
/* harmony export */   "sin": () => (/* reexport safe */ _sin__WEBPACK_IMPORTED_MODULE_158__.sin),
/* harmony export */   "sin2": () => (/* reexport safe */ _sin__WEBPACK_IMPORTED_MODULE_158__.sin2),
/* harmony export */   "sin3": () => (/* reexport safe */ _sin__WEBPACK_IMPORTED_MODULE_158__.sin3),
/* harmony export */   "sin4": () => (/* reexport safe */ _sin__WEBPACK_IMPORTED_MODULE_158__.sin4),
/* harmony export */   "sinh": () => (/* reexport safe */ _sinh__WEBPACK_IMPORTED_MODULE_159__.sinh),
/* harmony export */   "sinh2": () => (/* reexport safe */ _sinh__WEBPACK_IMPORTED_MODULE_159__.sinh2),
/* harmony export */   "sinh3": () => (/* reexport safe */ _sinh__WEBPACK_IMPORTED_MODULE_159__.sinh3),
/* harmony export */   "sinh4": () => (/* reexport safe */ _sinh__WEBPACK_IMPORTED_MODULE_159__.sinh4),
/* harmony export */   "softMax": () => (/* reexport safe */ _softmax__WEBPACK_IMPORTED_MODULE_160__.softMax),
/* harmony export */   "some": () => (/* reexport safe */ _some__WEBPACK_IMPORTED_MODULE_161__.some),
/* harmony export */   "some2": () => (/* reexport safe */ _some__WEBPACK_IMPORTED_MODULE_161__.some2),
/* harmony export */   "some3": () => (/* reexport safe */ _some__WEBPACK_IMPORTED_MODULE_161__.some3),
/* harmony export */   "some4": () => (/* reexport safe */ _some__WEBPACK_IMPORTED_MODULE_161__.some4),
/* harmony export */   "sqrt": () => (/* reexport safe */ _sqrt__WEBPACK_IMPORTED_MODULE_162__.sqrt),
/* harmony export */   "sqrt2": () => (/* reexport safe */ _sqrt__WEBPACK_IMPORTED_MODULE_162__.sqrt2),
/* harmony export */   "sqrt3": () => (/* reexport safe */ _sqrt__WEBPACK_IMPORTED_MODULE_162__.sqrt3),
/* harmony export */   "sqrt4": () => (/* reexport safe */ _sqrt__WEBPACK_IMPORTED_MODULE_162__.sqrt4),
/* harmony export */   "step": () => (/* reexport safe */ _step__WEBPACK_IMPORTED_MODULE_163__.step),
/* harmony export */   "step2": () => (/* reexport safe */ _step__WEBPACK_IMPORTED_MODULE_163__.step2),
/* harmony export */   "step3": () => (/* reexport safe */ _step__WEBPACK_IMPORTED_MODULE_163__.step3),
/* harmony export */   "step4": () => (/* reexport safe */ _step__WEBPACK_IMPORTED_MODULE_163__.step4),
/* harmony export */   "smoothStep": () => (/* reexport safe */ _smoothstep__WEBPACK_IMPORTED_MODULE_164__.smoothStep),
/* harmony export */   "smoothStep2": () => (/* reexport safe */ _smoothstep__WEBPACK_IMPORTED_MODULE_164__.smoothStep2),
/* harmony export */   "smoothStep3": () => (/* reexport safe */ _smoothstep__WEBPACK_IMPORTED_MODULE_164__.smoothStep3),
/* harmony export */   "smoothStep4": () => (/* reexport safe */ _smoothstep__WEBPACK_IMPORTED_MODULE_164__.smoothStep4),
/* harmony export */   "sub": () => (/* reexport safe */ _sub__WEBPACK_IMPORTED_MODULE_165__.sub),
/* harmony export */   "sub2": () => (/* reexport safe */ _sub__WEBPACK_IMPORTED_MODULE_165__.sub2),
/* harmony export */   "sub3": () => (/* reexport safe */ _sub__WEBPACK_IMPORTED_MODULE_165__.sub3),
/* harmony export */   "sub4": () => (/* reexport safe */ _sub__WEBPACK_IMPORTED_MODULE_165__.sub4),
/* harmony export */   "subI": () => (/* reexport safe */ _subi__WEBPACK_IMPORTED_MODULE_166__.subI),
/* harmony export */   "subI2": () => (/* reexport safe */ _subi__WEBPACK_IMPORTED_MODULE_166__.subI2),
/* harmony export */   "subI3": () => (/* reexport safe */ _subi__WEBPACK_IMPORTED_MODULE_166__.subI3),
/* harmony export */   "subI4": () => (/* reexport safe */ _subi__WEBPACK_IMPORTED_MODULE_166__.subI4),
/* harmony export */   "subNI": () => (/* reexport safe */ _subi__WEBPACK_IMPORTED_MODULE_166__.subNI),
/* harmony export */   "subNI2": () => (/* reexport safe */ _subi__WEBPACK_IMPORTED_MODULE_166__.subNI2),
/* harmony export */   "subNI3": () => (/* reexport safe */ _subi__WEBPACK_IMPORTED_MODULE_166__.subNI3),
/* harmony export */   "subNI4": () => (/* reexport safe */ _subi__WEBPACK_IMPORTED_MODULE_166__.subNI4),
/* harmony export */   "subNU": () => (/* reexport safe */ _subi__WEBPACK_IMPORTED_MODULE_166__.subNU),
/* harmony export */   "subNU2": () => (/* reexport safe */ _subi__WEBPACK_IMPORTED_MODULE_166__.subNU2),
/* harmony export */   "subNU3": () => (/* reexport safe */ _subi__WEBPACK_IMPORTED_MODULE_166__.subNU3),
/* harmony export */   "subNU4": () => (/* reexport safe */ _subi__WEBPACK_IMPORTED_MODULE_166__.subNU4),
/* harmony export */   "subU": () => (/* reexport safe */ _subi__WEBPACK_IMPORTED_MODULE_166__.subU),
/* harmony export */   "subU2": () => (/* reexport safe */ _subi__WEBPACK_IMPORTED_MODULE_166__.subU2),
/* harmony export */   "subU3": () => (/* reexport safe */ _subi__WEBPACK_IMPORTED_MODULE_166__.subU3),
/* harmony export */   "subU4": () => (/* reexport safe */ _subi__WEBPACK_IMPORTED_MODULE_166__.subU4),
/* harmony export */   "subm": () => (/* reexport safe */ _subm__WEBPACK_IMPORTED_MODULE_167__.subm),
/* harmony export */   "subm2": () => (/* reexport safe */ _subm__WEBPACK_IMPORTED_MODULE_167__.subm2),
/* harmony export */   "subm3": () => (/* reexport safe */ _subm__WEBPACK_IMPORTED_MODULE_167__.subm3),
/* harmony export */   "subm4": () => (/* reexport safe */ _subm__WEBPACK_IMPORTED_MODULE_167__.subm4),
/* harmony export */   "submN": () => (/* reexport safe */ _submn__WEBPACK_IMPORTED_MODULE_168__.submN),
/* harmony export */   "submN2": () => (/* reexport safe */ _submn__WEBPACK_IMPORTED_MODULE_168__.submN2),
/* harmony export */   "submN3": () => (/* reexport safe */ _submn__WEBPACK_IMPORTED_MODULE_168__.submN3),
/* harmony export */   "submN4": () => (/* reexport safe */ _submn__WEBPACK_IMPORTED_MODULE_168__.submN4),
/* harmony export */   "submS2": () => (/* reexport safe */ _subms__WEBPACK_IMPORTED_MODULE_169__.submS2),
/* harmony export */   "submS3": () => (/* reexport safe */ _subms__WEBPACK_IMPORTED_MODULE_169__.submS3),
/* harmony export */   "submS4": () => (/* reexport safe */ _subms__WEBPACK_IMPORTED_MODULE_169__.submS4),
/* harmony export */   "submNS2": () => (/* reexport safe */ _submns__WEBPACK_IMPORTED_MODULE_170__.submNS2),
/* harmony export */   "submNS3": () => (/* reexport safe */ _submns__WEBPACK_IMPORTED_MODULE_170__.submNS3),
/* harmony export */   "submNS4": () => (/* reexport safe */ _submns__WEBPACK_IMPORTED_MODULE_170__.submNS4),
/* harmony export */   "subN": () => (/* reexport safe */ _subn__WEBPACK_IMPORTED_MODULE_171__.subN),
/* harmony export */   "subN2": () => (/* reexport safe */ _subn__WEBPACK_IMPORTED_MODULE_171__.subN2),
/* harmony export */   "subN3": () => (/* reexport safe */ _subn__WEBPACK_IMPORTED_MODULE_171__.subN3),
/* harmony export */   "subN4": () => (/* reexport safe */ _subn__WEBPACK_IMPORTED_MODULE_171__.subN4),
/* harmony export */   "subS2": () => (/* reexport safe */ _subs__WEBPACK_IMPORTED_MODULE_172__.subS2),
/* harmony export */   "subS3": () => (/* reexport safe */ _subs__WEBPACK_IMPORTED_MODULE_172__.subS3),
/* harmony export */   "subS4": () => (/* reexport safe */ _subs__WEBPACK_IMPORTED_MODULE_172__.subS4),
/* harmony export */   "subNS2": () => (/* reexport safe */ _subns__WEBPACK_IMPORTED_MODULE_173__.subNS2),
/* harmony export */   "subNS3": () => (/* reexport safe */ _subns__WEBPACK_IMPORTED_MODULE_173__.subNS3),
/* harmony export */   "subNS4": () => (/* reexport safe */ _subns__WEBPACK_IMPORTED_MODULE_173__.subNS4),
/* harmony export */   "sum": () => (/* reexport safe */ _sum__WEBPACK_IMPORTED_MODULE_174__.sum),
/* harmony export */   "sum2": () => (/* reexport safe */ _sum__WEBPACK_IMPORTED_MODULE_174__.sum2),
/* harmony export */   "sum3": () => (/* reexport safe */ _sum__WEBPACK_IMPORTED_MODULE_174__.sum3),
/* harmony export */   "sum4": () => (/* reexport safe */ _sum__WEBPACK_IMPORTED_MODULE_174__.sum4),
/* harmony export */   "setSwizzle1": () => (/* reexport safe */ _swizzle__WEBPACK_IMPORTED_MODULE_175__.setSwizzle1),
/* harmony export */   "setSwizzle2": () => (/* reexport safe */ _swizzle__WEBPACK_IMPORTED_MODULE_175__.setSwizzle2),
/* harmony export */   "setSwizzle3": () => (/* reexport safe */ _swizzle__WEBPACK_IMPORTED_MODULE_175__.setSwizzle3),
/* harmony export */   "setSwizzle4": () => (/* reexport safe */ _swizzle__WEBPACK_IMPORTED_MODULE_175__.setSwizzle4),
/* harmony export */   "swapXY": () => (/* reexport safe */ _swizzle__WEBPACK_IMPORTED_MODULE_175__.swapXY),
/* harmony export */   "swapXZ": () => (/* reexport safe */ _swizzle__WEBPACK_IMPORTED_MODULE_175__.swapXZ),
/* harmony export */   "swapYZ": () => (/* reexport safe */ _swizzle__WEBPACK_IMPORTED_MODULE_175__.swapYZ),
/* harmony export */   "swizzle2": () => (/* reexport safe */ _swizzle__WEBPACK_IMPORTED_MODULE_175__.swizzle2),
/* harmony export */   "swizzle3": () => (/* reexport safe */ _swizzle__WEBPACK_IMPORTED_MODULE_175__.swizzle3),
/* harmony export */   "swizzle4": () => (/* reexport safe */ _swizzle__WEBPACK_IMPORTED_MODULE_175__.swizzle4),
/* harmony export */   "tan": () => (/* reexport safe */ _tan__WEBPACK_IMPORTED_MODULE_176__.tan),
/* harmony export */   "tan2": () => (/* reexport safe */ _tan__WEBPACK_IMPORTED_MODULE_176__.tan2),
/* harmony export */   "tan3": () => (/* reexport safe */ _tan__WEBPACK_IMPORTED_MODULE_176__.tan3),
/* harmony export */   "tan4": () => (/* reexport safe */ _tan__WEBPACK_IMPORTED_MODULE_176__.tan4),
/* harmony export */   "tanh": () => (/* reexport safe */ _tanh__WEBPACK_IMPORTED_MODULE_177__.tanh),
/* harmony export */   "tanh2": () => (/* reexport safe */ _tanh__WEBPACK_IMPORTED_MODULE_177__.tanh2),
/* harmony export */   "tanh3": () => (/* reexport safe */ _tanh__WEBPACK_IMPORTED_MODULE_177__.tanh3),
/* harmony export */   "tanh4": () => (/* reexport safe */ _tanh__WEBPACK_IMPORTED_MODULE_177__.tanh4),
/* harmony export */   "trunc": () => (/* reexport safe */ _trunc__WEBPACK_IMPORTED_MODULE_178__.trunc),
/* harmony export */   "trunc2": () => (/* reexport safe */ _trunc__WEBPACK_IMPORTED_MODULE_178__.trunc2),
/* harmony export */   "trunc3": () => (/* reexport safe */ _trunc__WEBPACK_IMPORTED_MODULE_178__.trunc3),
/* harmony export */   "trunc4": () => (/* reexport safe */ _trunc__WEBPACK_IMPORTED_MODULE_178__.trunc4),
/* harmony export */   "oneHot": () => (/* reexport safe */ _vec_of__WEBPACK_IMPORTED_MODULE_179__.oneHot),
/* harmony export */   "vecOf": () => (/* reexport safe */ _vec_of__WEBPACK_IMPORTED_MODULE_179__.vecOf),
/* harmony export */   "wrap": () => (/* reexport safe */ _wrap__WEBPACK_IMPORTED_MODULE_180__.wrap),
/* harmony export */   "wrap2": () => (/* reexport safe */ _wrap__WEBPACK_IMPORTED_MODULE_180__.wrap2),
/* harmony export */   "wrap3": () => (/* reexport safe */ _wrap__WEBPACK_IMPORTED_MODULE_180__.wrap3),
/* harmony export */   "wrap4": () => (/* reexport safe */ _wrap__WEBPACK_IMPORTED_MODULE_180__.wrap4),
/* harmony export */   "eq": () => (/* reexport safe */ _eq__WEBPACK_IMPORTED_MODULE_181__.eq),
/* harmony export */   "eq2": () => (/* reexport safe */ _eq__WEBPACK_IMPORTED_MODULE_181__.eq2),
/* harmony export */   "eq3": () => (/* reexport safe */ _eq__WEBPACK_IMPORTED_MODULE_181__.eq3),
/* harmony export */   "eq4": () => (/* reexport safe */ _eq__WEBPACK_IMPORTED_MODULE_181__.eq4),
/* harmony export */   "neq": () => (/* reexport safe */ _neq__WEBPACK_IMPORTED_MODULE_182__.neq),
/* harmony export */   "neq2": () => (/* reexport safe */ _neq__WEBPACK_IMPORTED_MODULE_182__.neq2),
/* harmony export */   "neq3": () => (/* reexport safe */ _neq__WEBPACK_IMPORTED_MODULE_182__.neq3),
/* harmony export */   "neq4": () => (/* reexport safe */ _neq__WEBPACK_IMPORTED_MODULE_182__.neq4),
/* harmony export */   "gt": () => (/* reexport safe */ _gt__WEBPACK_IMPORTED_MODULE_183__.gt),
/* harmony export */   "gt2": () => (/* reexport safe */ _gt__WEBPACK_IMPORTED_MODULE_183__.gt2),
/* harmony export */   "gt3": () => (/* reexport safe */ _gt__WEBPACK_IMPORTED_MODULE_183__.gt3),
/* harmony export */   "gt4": () => (/* reexport safe */ _gt__WEBPACK_IMPORTED_MODULE_183__.gt4),
/* harmony export */   "gte": () => (/* reexport safe */ _gte__WEBPACK_IMPORTED_MODULE_184__.gte),
/* harmony export */   "gte2": () => (/* reexport safe */ _gte__WEBPACK_IMPORTED_MODULE_184__.gte2),
/* harmony export */   "gte3": () => (/* reexport safe */ _gte__WEBPACK_IMPORTED_MODULE_184__.gte3),
/* harmony export */   "gte4": () => (/* reexport safe */ _gte__WEBPACK_IMPORTED_MODULE_184__.gte4),
/* harmony export */   "lt": () => (/* reexport safe */ _lt__WEBPACK_IMPORTED_MODULE_185__.lt),
/* harmony export */   "lt2": () => (/* reexport safe */ _lt__WEBPACK_IMPORTED_MODULE_185__.lt2),
/* harmony export */   "lt3": () => (/* reexport safe */ _lt__WEBPACK_IMPORTED_MODULE_185__.lt3),
/* harmony export */   "lt4": () => (/* reexport safe */ _lt__WEBPACK_IMPORTED_MODULE_185__.lt4),
/* harmony export */   "lte": () => (/* reexport safe */ _lte__WEBPACK_IMPORTED_MODULE_186__.lte),
/* harmony export */   "lte2": () => (/* reexport safe */ _lte__WEBPACK_IMPORTED_MODULE_186__.lte2),
/* harmony export */   "lte3": () => (/* reexport safe */ _lte__WEBPACK_IMPORTED_MODULE_186__.lte3),
/* harmony export */   "lte4": () => (/* reexport safe */ _lte__WEBPACK_IMPORTED_MODULE_186__.lte4)
/* harmony export */ });
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ "./node_modules/@thi.ng/vectors/api.js");
/* harmony import */ var _internal_accessors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/accessors */ "./node_modules/@thi.ng/vectors/internal/accessors.js");
/* harmony import */ var _internal_avec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/avec */ "./node_modules/@thi.ng/vectors/internal/avec.js");
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");
/* harmony import */ var _internal_vec_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/vec-utils */ "./node_modules/@thi.ng/vectors/internal/vec-utils.js");
/* harmony import */ var _internal_vop__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal/vop */ "./node_modules/@thi.ng/vectors/internal/vop.js");
/* harmony import */ var _vec2__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./vec2 */ "./node_modules/@thi.ng/vectors/vec2.js");
/* harmony import */ var _vec3__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./vec3 */ "./node_modules/@thi.ng/vectors/vec3.js");
/* harmony import */ var _vec4__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./vec4 */ "./node_modules/@thi.ng/vectors/vec4.js");
/* harmony import */ var _abs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./abs */ "./node_modules/@thi.ng/vectors/abs.js");
/* harmony import */ var _acos__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./acos */ "./node_modules/@thi.ng/vectors/acos.js");
/* harmony import */ var _addw__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./addw */ "./node_modules/@thi.ng/vectors/addw.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./add */ "./node_modules/@thi.ng/vectors/add.js");
/* harmony import */ var _addi__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./addi */ "./node_modules/@thi.ng/vectors/addi.js");
/* harmony import */ var _addm__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./addm */ "./node_modules/@thi.ng/vectors/addm.js");
/* harmony import */ var _addmn__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./addmn */ "./node_modules/@thi.ng/vectors/addmn.js");
/* harmony import */ var _addms__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./addms */ "./node_modules/@thi.ng/vectors/addms.js");
/* harmony import */ var _addmns__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./addmns */ "./node_modules/@thi.ng/vectors/addmns.js");
/* harmony import */ var _addn__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./addn */ "./node_modules/@thi.ng/vectors/addn.js");
/* harmony import */ var _adds__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./adds */ "./node_modules/@thi.ng/vectors/adds.js");
/* harmony import */ var _addns__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./addns */ "./node_modules/@thi.ng/vectors/addns.js");
/* harmony import */ var _angle_between__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./angle-between */ "./node_modules/@thi.ng/vectors/angle-between.js");
/* harmony import */ var _asin__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./asin */ "./node_modules/@thi.ng/vectors/asin.js");
/* harmony import */ var _atan__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./atan */ "./node_modules/@thi.ng/vectors/atan.js");
/* harmony import */ var _bisect__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./bisect */ "./node_modules/@thi.ng/vectors/bisect.js");
/* harmony import */ var _bit_and__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./bit-and */ "./node_modules/@thi.ng/vectors/bit-and.js");
/* harmony import */ var _bit_not__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./bit-not */ "./node_modules/@thi.ng/vectors/bit-not.js");
/* harmony import */ var _bit_or__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./bit-or */ "./node_modules/@thi.ng/vectors/bit-or.js");
/* harmony import */ var _bit_xor__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./bit-xor */ "./node_modules/@thi.ng/vectors/bit-xor.js");
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./buffer */ "./node_modules/@thi.ng/vectors/buffer.js");
/* harmony import */ var _cartesian__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./cartesian */ "./node_modules/@thi.ng/vectors/cartesian.js");
/* harmony import */ var _ceil__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./ceil */ "./node_modules/@thi.ng/vectors/ceil.js");
/* harmony import */ var _clamp__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./clamp */ "./node_modules/@thi.ng/vectors/clamp.js");
/* harmony import */ var _clampn__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./clampn */ "./node_modules/@thi.ng/vectors/clampn.js");
/* harmony import */ var _clockwise__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./clockwise */ "./node_modules/@thi.ng/vectors/clockwise.js");
/* harmony import */ var _compare__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./compare */ "./node_modules/@thi.ng/vectors/compare.js");
/* harmony import */ var _convert__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./convert */ "./node_modules/@thi.ng/vectors/convert.js");
/* harmony import */ var _copy__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./copy */ "./node_modules/@thi.ng/vectors/copy.js");
/* harmony import */ var _cos__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./cos */ "./node_modules/@thi.ng/vectors/cos.js");
/* harmony import */ var _cosh__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./cosh */ "./node_modules/@thi.ng/vectors/cosh.js");
/* harmony import */ var _cross__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./cross */ "./node_modules/@thi.ng/vectors/cross.js");
/* harmony import */ var _crosss__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./crosss */ "./node_modules/@thi.ng/vectors/crosss.js");
/* harmony import */ var _degrees__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./degrees */ "./node_modules/@thi.ng/vectors/degrees.js");
/* harmony import */ var _direction__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./direction */ "./node_modules/@thi.ng/vectors/direction.js");
/* harmony import */ var _dist__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./dist */ "./node_modules/@thi.ng/vectors/dist.js");
/* harmony import */ var _dist_chebyshev__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./dist-chebyshev */ "./node_modules/@thi.ng/vectors/dist-chebyshev.js");
/* harmony import */ var _dist_haversine__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./dist-haversine */ "./node_modules/@thi.ng/vectors/dist-haversine.js");
/* harmony import */ var _dist_manhattan__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./dist-manhattan */ "./node_modules/@thi.ng/vectors/dist-manhattan.js");
/* harmony import */ var _dist_weighted__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./dist-weighted */ "./node_modules/@thi.ng/vectors/dist-weighted.js");
/* harmony import */ var _distsq__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./distsq */ "./node_modules/@thi.ng/vectors/distsq.js");
/* harmony import */ var _div__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./div */ "./node_modules/@thi.ng/vectors/div.js");
/* harmony import */ var _divi__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./divi */ "./node_modules/@thi.ng/vectors/divi.js");
/* harmony import */ var _divn__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./divn */ "./node_modules/@thi.ng/vectors/divn.js");
/* harmony import */ var _divs__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./divs */ "./node_modules/@thi.ng/vectors/divs.js");
/* harmony import */ var _divns__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./divns */ "./node_modules/@thi.ng/vectors/divns.js");
/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./dot */ "./node_modules/@thi.ng/vectors/dot.js");
/* harmony import */ var _dotc__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./dotc */ "./node_modules/@thi.ng/vectors/dotc.js");
/* harmony import */ var _dots__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./dots */ "./node_modules/@thi.ng/vectors/dots.js");
/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./empty */ "./node_modules/@thi.ng/vectors/empty.js");
/* harmony import */ var _eqdelta__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./eqdelta */ "./node_modules/@thi.ng/vectors/eqdelta.js");
/* harmony import */ var _equals__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./equals */ "./node_modules/@thi.ng/vectors/equals.js");
/* harmony import */ var _every__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./every */ "./node_modules/@thi.ng/vectors/every.js");
/* harmony import */ var _exp__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./exp */ "./node_modules/@thi.ng/vectors/exp.js");
/* harmony import */ var _exp_2__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./exp_2 */ "./node_modules/@thi.ng/vectors/exp_2.js");
/* harmony import */ var _face_forward__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./face-forward */ "./node_modules/@thi.ng/vectors/face-forward.js");
/* harmony import */ var _fill__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./fill */ "./node_modules/@thi.ng/vectors/fill.js");
/* harmony import */ var _fit__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./fit */ "./node_modules/@thi.ng/vectors/fit.js");
/* harmony import */ var _floor__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./floor */ "./node_modules/@thi.ng/vectors/floor.js");
/* harmony import */ var _fmod__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./fmod */ "./node_modules/@thi.ng/vectors/fmod.js");
/* harmony import */ var _fmodn__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./fmodn */ "./node_modules/@thi.ng/vectors/fmodn.js");
/* harmony import */ var _fract__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./fract */ "./node_modules/@thi.ng/vectors/fract.js");
/* harmony import */ var _gvec__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./gvec */ "./node_modules/@thi.ng/vectors/gvec.js");
/* harmony import */ var _hash__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./hash */ "./node_modules/@thi.ng/vectors/hash.js");
/* harmony import */ var _heading__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./heading */ "./node_modules/@thi.ng/vectors/heading.js");
/* harmony import */ var _heading_segment__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./heading-segment */ "./node_modules/@thi.ng/vectors/heading-segment.js");
/* harmony import */ var _homogeneous__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./homogeneous */ "./node_modules/@thi.ng/vectors/homogeneous.js");
/* harmony import */ var _invert__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./invert */ "./node_modules/@thi.ng/vectors/invert.js");
/* harmony import */ var _invsqrt__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./invsqrt */ "./node_modules/@thi.ng/vectors/invsqrt.js");
/* harmony import */ var _is_inf__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./is-inf */ "./node_modules/@thi.ng/vectors/is-inf.js");
/* harmony import */ var _is_nan__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./is-nan */ "./node_modules/@thi.ng/vectors/is-nan.js");
/* harmony import */ var _jitter__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./jitter */ "./node_modules/@thi.ng/vectors/jitter.js");
/* harmony import */ var _limit__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./limit */ "./node_modules/@thi.ng/vectors/limit.js");
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./log */ "./node_modules/@thi.ng/vectors/log.js");
/* harmony import */ var _log_2__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./log_2 */ "./node_modules/@thi.ng/vectors/log_2.js");
/* harmony import */ var _logic_and__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./logic-and */ "./node_modules/@thi.ng/vectors/logic-and.js");
/* harmony import */ var _logic_not__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./logic-not */ "./node_modules/@thi.ng/vectors/logic-not.js");
/* harmony import */ var _logic_or__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./logic-or */ "./node_modules/@thi.ng/vectors/logic-or.js");
/* harmony import */ var _lshift__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./lshift */ "./node_modules/@thi.ng/vectors/lshift.js");
/* harmony import */ var _madd__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./madd */ "./node_modules/@thi.ng/vectors/madd.js");
/* harmony import */ var _maddn__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./maddn */ "./node_modules/@thi.ng/vectors/maddn.js");
/* harmony import */ var _madds__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./madds */ "./node_modules/@thi.ng/vectors/madds.js");
/* harmony import */ var _maddns__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./maddns */ "./node_modules/@thi.ng/vectors/maddns.js");
/* harmony import */ var _mag__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./mag */ "./node_modules/@thi.ng/vectors/mag.js");
/* harmony import */ var _mags__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./mags */ "./node_modules/@thi.ng/vectors/mags.js");
/* harmony import */ var _magsq__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./magsq */ "./node_modules/@thi.ng/vectors/magsq.js");
/* harmony import */ var _magsqs__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ./magsqs */ "./node_modules/@thi.ng/vectors/magsqs.js");
/* harmony import */ var _major__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ./major */ "./node_modules/@thi.ng/vectors/major.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ./map */ "./node_modules/@thi.ng/vectors/map.js");
/* harmony import */ var _map_vectors__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ./map-vectors */ "./node_modules/@thi.ng/vectors/map-vectors.js");
/* harmony import */ var _max__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ./max */ "./node_modules/@thi.ng/vectors/max.js");
/* harmony import */ var _median__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(/*! ./median */ "./node_modules/@thi.ng/vectors/median.js");
/* harmony import */ var _min__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(/*! ./min */ "./node_modules/@thi.ng/vectors/min.js");
/* harmony import */ var _minor__WEBPACK_IMPORTED_MODULE_103__ = __webpack_require__(/*! ./minor */ "./node_modules/@thi.ng/vectors/minor.js");
/* harmony import */ var _mix_bilinear__WEBPACK_IMPORTED_MODULE_104__ = __webpack_require__(/*! ./mix-bilinear */ "./node_modules/@thi.ng/vectors/mix-bilinear.js");
/* harmony import */ var _mix_cubic__WEBPACK_IMPORTED_MODULE_105__ = __webpack_require__(/*! ./mix-cubic */ "./node_modules/@thi.ng/vectors/mix-cubic.js");
/* harmony import */ var _mix_hermite__WEBPACK_IMPORTED_MODULE_106__ = __webpack_require__(/*! ./mix-hermite */ "./node_modules/@thi.ng/vectors/mix-hermite.js");
/* harmony import */ var _mix_quadratic__WEBPACK_IMPORTED_MODULE_107__ = __webpack_require__(/*! ./mix-quadratic */ "./node_modules/@thi.ng/vectors/mix-quadratic.js");
/* harmony import */ var _mix__WEBPACK_IMPORTED_MODULE_108__ = __webpack_require__(/*! ./mix */ "./node_modules/@thi.ng/vectors/mix.js");
/* harmony import */ var _mixn__WEBPACK_IMPORTED_MODULE_109__ = __webpack_require__(/*! ./mixn */ "./node_modules/@thi.ng/vectors/mixn.js");
/* harmony import */ var _mixs__WEBPACK_IMPORTED_MODULE_110__ = __webpack_require__(/*! ./mixs */ "./node_modules/@thi.ng/vectors/mixs.js");
/* harmony import */ var _mixns__WEBPACK_IMPORTED_MODULE_111__ = __webpack_require__(/*! ./mixns */ "./node_modules/@thi.ng/vectors/mixns.js");
/* harmony import */ var _mod__WEBPACK_IMPORTED_MODULE_112__ = __webpack_require__(/*! ./mod */ "./node_modules/@thi.ng/vectors/mod.js");
/* harmony import */ var _modn__WEBPACK_IMPORTED_MODULE_113__ = __webpack_require__(/*! ./modn */ "./node_modules/@thi.ng/vectors/modn.js");
/* harmony import */ var _msub__WEBPACK_IMPORTED_MODULE_114__ = __webpack_require__(/*! ./msub */ "./node_modules/@thi.ng/vectors/msub.js");
/* harmony import */ var _msubn__WEBPACK_IMPORTED_MODULE_115__ = __webpack_require__(/*! ./msubn */ "./node_modules/@thi.ng/vectors/msubn.js");
/* harmony import */ var _msubs__WEBPACK_IMPORTED_MODULE_116__ = __webpack_require__(/*! ./msubs */ "./node_modules/@thi.ng/vectors/msubs.js");
/* harmony import */ var _msubns__WEBPACK_IMPORTED_MODULE_117__ = __webpack_require__(/*! ./msubns */ "./node_modules/@thi.ng/vectors/msubns.js");
/* harmony import */ var _mul__WEBPACK_IMPORTED_MODULE_118__ = __webpack_require__(/*! ./mul */ "./node_modules/@thi.ng/vectors/mul.js");
/* harmony import */ var _muli__WEBPACK_IMPORTED_MODULE_119__ = __webpack_require__(/*! ./muli */ "./node_modules/@thi.ng/vectors/muli.js");
/* harmony import */ var _muln__WEBPACK_IMPORTED_MODULE_120__ = __webpack_require__(/*! ./muln */ "./node_modules/@thi.ng/vectors/muln.js");
/* harmony import */ var _muls__WEBPACK_IMPORTED_MODULE_121__ = __webpack_require__(/*! ./muls */ "./node_modules/@thi.ng/vectors/muls.js");
/* harmony import */ var _mulns__WEBPACK_IMPORTED_MODULE_122__ = __webpack_require__(/*! ./mulns */ "./node_modules/@thi.ng/vectors/mulns.js");
/* harmony import */ var _neg__WEBPACK_IMPORTED_MODULE_123__ = __webpack_require__(/*! ./neg */ "./node_modules/@thi.ng/vectors/neg.js");
/* harmony import */ var _normal__WEBPACK_IMPORTED_MODULE_124__ = __webpack_require__(/*! ./normal */ "./node_modules/@thi.ng/vectors/normal.js");
/* harmony import */ var _normalize__WEBPACK_IMPORTED_MODULE_125__ = __webpack_require__(/*! ./normalize */ "./node_modules/@thi.ng/vectors/normalize.js");
/* harmony import */ var _normalizes__WEBPACK_IMPORTED_MODULE_126__ = __webpack_require__(/*! ./normalizes */ "./node_modules/@thi.ng/vectors/normalizes.js");
/* harmony import */ var _not__WEBPACK_IMPORTED_MODULE_127__ = __webpack_require__(/*! ./not */ "./node_modules/@thi.ng/vectors/not.js");
/* harmony import */ var _ortho_normal__WEBPACK_IMPORTED_MODULE_128__ = __webpack_require__(/*! ./ortho-normal */ "./node_modules/@thi.ng/vectors/ortho-normal.js");
/* harmony import */ var _perpendicular__WEBPACK_IMPORTED_MODULE_129__ = __webpack_require__(/*! ./perpendicular */ "./node_modules/@thi.ng/vectors/perpendicular.js");
/* harmony import */ var _point_on_ray__WEBPACK_IMPORTED_MODULE_130__ = __webpack_require__(/*! ./point-on-ray */ "./node_modules/@thi.ng/vectors/point-on-ray.js");
/* harmony import */ var _polar__WEBPACK_IMPORTED_MODULE_131__ = __webpack_require__(/*! ./polar */ "./node_modules/@thi.ng/vectors/polar.js");
/* harmony import */ var _pow__WEBPACK_IMPORTED_MODULE_132__ = __webpack_require__(/*! ./pow */ "./node_modules/@thi.ng/vectors/pow.js");
/* harmony import */ var _pown__WEBPACK_IMPORTED_MODULE_133__ = __webpack_require__(/*! ./pown */ "./node_modules/@thi.ng/vectors/pown.js");
/* harmony import */ var _project__WEBPACK_IMPORTED_MODULE_134__ = __webpack_require__(/*! ./project */ "./node_modules/@thi.ng/vectors/project.js");
/* harmony import */ var _radians__WEBPACK_IMPORTED_MODULE_135__ = __webpack_require__(/*! ./radians */ "./node_modules/@thi.ng/vectors/radians.js");
/* harmony import */ var _random__WEBPACK_IMPORTED_MODULE_136__ = __webpack_require__(/*! ./random */ "./node_modules/@thi.ng/vectors/random.js");
/* harmony import */ var _randoms__WEBPACK_IMPORTED_MODULE_137__ = __webpack_require__(/*! ./randoms */ "./node_modules/@thi.ng/vectors/randoms.js");
/* harmony import */ var _reflect__WEBPACK_IMPORTED_MODULE_138__ = __webpack_require__(/*! ./reflect */ "./node_modules/@thi.ng/vectors/reflect.js");
/* harmony import */ var _refract__WEBPACK_IMPORTED_MODULE_139__ = __webpack_require__(/*! ./refract */ "./node_modules/@thi.ng/vectors/refract.js");
/* harmony import */ var _rotate_around_axis__WEBPACK_IMPORTED_MODULE_140__ = __webpack_require__(/*! ./rotate-around-axis */ "./node_modules/@thi.ng/vectors/rotate-around-axis.js");
/* harmony import */ var _rotate_around_point__WEBPACK_IMPORTED_MODULE_141__ = __webpack_require__(/*! ./rotate-around-point */ "./node_modules/@thi.ng/vectors/rotate-around-point.js");
/* harmony import */ var _rotate__WEBPACK_IMPORTED_MODULE_142__ = __webpack_require__(/*! ./rotate */ "./node_modules/@thi.ng/vectors/rotate.js");
/* harmony import */ var _rotates__WEBPACK_IMPORTED_MODULE_143__ = __webpack_require__(/*! ./rotates */ "./node_modules/@thi.ng/vectors/rotates.js");
/* harmony import */ var _round__WEBPACK_IMPORTED_MODULE_144__ = __webpack_require__(/*! ./round */ "./node_modules/@thi.ng/vectors/round.js");
/* harmony import */ var _rshift__WEBPACK_IMPORTED_MODULE_145__ = __webpack_require__(/*! ./rshift */ "./node_modules/@thi.ng/vectors/rshift.js");
/* harmony import */ var _safe_div__WEBPACK_IMPORTED_MODULE_146__ = __webpack_require__(/*! ./safe-div */ "./node_modules/@thi.ng/vectors/safe-div.js");
/* harmony import */ var _set__WEBPACK_IMPORTED_MODULE_147__ = __webpack_require__(/*! ./set */ "./node_modules/@thi.ng/vectors/set.js");
/* harmony import */ var _setc__WEBPACK_IMPORTED_MODULE_148__ = __webpack_require__(/*! ./setc */ "./node_modules/@thi.ng/vectors/setc.js");
/* harmony import */ var _setn__WEBPACK_IMPORTED_MODULE_149__ = __webpack_require__(/*! ./setn */ "./node_modules/@thi.ng/vectors/setn.js");
/* harmony import */ var _sets__WEBPACK_IMPORTED_MODULE_150__ = __webpack_require__(/*! ./sets */ "./node_modules/@thi.ng/vectors/sets.js");
/* harmony import */ var _setcs__WEBPACK_IMPORTED_MODULE_151__ = __webpack_require__(/*! ./setcs */ "./node_modules/@thi.ng/vectors/setcs.js");
/* harmony import */ var _setns__WEBPACK_IMPORTED_MODULE_152__ = __webpack_require__(/*! ./setns */ "./node_modules/@thi.ng/vectors/setns.js");
/* harmony import */ var _setvn__WEBPACK_IMPORTED_MODULE_153__ = __webpack_require__(/*! ./setvn */ "./node_modules/@thi.ng/vectors/setvn.js");
/* harmony import */ var _setvv__WEBPACK_IMPORTED_MODULE_154__ = __webpack_require__(/*! ./setvv */ "./node_modules/@thi.ng/vectors/setvv.js");
/* harmony import */ var _sign__WEBPACK_IMPORTED_MODULE_155__ = __webpack_require__(/*! ./sign */ "./node_modules/@thi.ng/vectors/sign.js");
/* harmony import */ var _signed_area__WEBPACK_IMPORTED_MODULE_156__ = __webpack_require__(/*! ./signed-area */ "./node_modules/@thi.ng/vectors/signed-area.js");
/* harmony import */ var _signed_volume__WEBPACK_IMPORTED_MODULE_157__ = __webpack_require__(/*! ./signed-volume */ "./node_modules/@thi.ng/vectors/signed-volume.js");
/* harmony import */ var _sin__WEBPACK_IMPORTED_MODULE_158__ = __webpack_require__(/*! ./sin */ "./node_modules/@thi.ng/vectors/sin.js");
/* harmony import */ var _sinh__WEBPACK_IMPORTED_MODULE_159__ = __webpack_require__(/*! ./sinh */ "./node_modules/@thi.ng/vectors/sinh.js");
/* harmony import */ var _softmax__WEBPACK_IMPORTED_MODULE_160__ = __webpack_require__(/*! ./softmax */ "./node_modules/@thi.ng/vectors/softmax.js");
/* harmony import */ var _some__WEBPACK_IMPORTED_MODULE_161__ = __webpack_require__(/*! ./some */ "./node_modules/@thi.ng/vectors/some.js");
/* harmony import */ var _sqrt__WEBPACK_IMPORTED_MODULE_162__ = __webpack_require__(/*! ./sqrt */ "./node_modules/@thi.ng/vectors/sqrt.js");
/* harmony import */ var _step__WEBPACK_IMPORTED_MODULE_163__ = __webpack_require__(/*! ./step */ "./node_modules/@thi.ng/vectors/step.js");
/* harmony import */ var _smoothstep__WEBPACK_IMPORTED_MODULE_164__ = __webpack_require__(/*! ./smoothstep */ "./node_modules/@thi.ng/vectors/smoothstep.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_165__ = __webpack_require__(/*! ./sub */ "./node_modules/@thi.ng/vectors/sub.js");
/* harmony import */ var _subi__WEBPACK_IMPORTED_MODULE_166__ = __webpack_require__(/*! ./subi */ "./node_modules/@thi.ng/vectors/subi.js");
/* harmony import */ var _subm__WEBPACK_IMPORTED_MODULE_167__ = __webpack_require__(/*! ./subm */ "./node_modules/@thi.ng/vectors/subm.js");
/* harmony import */ var _submn__WEBPACK_IMPORTED_MODULE_168__ = __webpack_require__(/*! ./submn */ "./node_modules/@thi.ng/vectors/submn.js");
/* harmony import */ var _subms__WEBPACK_IMPORTED_MODULE_169__ = __webpack_require__(/*! ./subms */ "./node_modules/@thi.ng/vectors/subms.js");
/* harmony import */ var _submns__WEBPACK_IMPORTED_MODULE_170__ = __webpack_require__(/*! ./submns */ "./node_modules/@thi.ng/vectors/submns.js");
/* harmony import */ var _subn__WEBPACK_IMPORTED_MODULE_171__ = __webpack_require__(/*! ./subn */ "./node_modules/@thi.ng/vectors/subn.js");
/* harmony import */ var _subs__WEBPACK_IMPORTED_MODULE_172__ = __webpack_require__(/*! ./subs */ "./node_modules/@thi.ng/vectors/subs.js");
/* harmony import */ var _subns__WEBPACK_IMPORTED_MODULE_173__ = __webpack_require__(/*! ./subns */ "./node_modules/@thi.ng/vectors/subns.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_174__ = __webpack_require__(/*! ./sum */ "./node_modules/@thi.ng/vectors/sum.js");
/* harmony import */ var _swizzle__WEBPACK_IMPORTED_MODULE_175__ = __webpack_require__(/*! ./swizzle */ "./node_modules/@thi.ng/vectors/swizzle.js");
/* harmony import */ var _tan__WEBPACK_IMPORTED_MODULE_176__ = __webpack_require__(/*! ./tan */ "./node_modules/@thi.ng/vectors/tan.js");
/* harmony import */ var _tanh__WEBPACK_IMPORTED_MODULE_177__ = __webpack_require__(/*! ./tanh */ "./node_modules/@thi.ng/vectors/tanh.js");
/* harmony import */ var _trunc__WEBPACK_IMPORTED_MODULE_178__ = __webpack_require__(/*! ./trunc */ "./node_modules/@thi.ng/vectors/trunc.js");
/* harmony import */ var _vec_of__WEBPACK_IMPORTED_MODULE_179__ = __webpack_require__(/*! ./vec-of */ "./node_modules/@thi.ng/vectors/vec-of.js");
/* harmony import */ var _wrap__WEBPACK_IMPORTED_MODULE_180__ = __webpack_require__(/*! ./wrap */ "./node_modules/@thi.ng/vectors/wrap.js");
/* harmony import */ var _eq__WEBPACK_IMPORTED_MODULE_181__ = __webpack_require__(/*! ./eq */ "./node_modules/@thi.ng/vectors/eq.js");
/* harmony import */ var _neq__WEBPACK_IMPORTED_MODULE_182__ = __webpack_require__(/*! ./neq */ "./node_modules/@thi.ng/vectors/neq.js");
/* harmony import */ var _gt__WEBPACK_IMPORTED_MODULE_183__ = __webpack_require__(/*! ./gt */ "./node_modules/@thi.ng/vectors/gt.js");
/* harmony import */ var _gte__WEBPACK_IMPORTED_MODULE_184__ = __webpack_require__(/*! ./gte */ "./node_modules/@thi.ng/vectors/gte.js");
/* harmony import */ var _lt__WEBPACK_IMPORTED_MODULE_185__ = __webpack_require__(/*! ./lt */ "./node_modules/@thi.ng/vectors/lt.js");
/* harmony import */ var _lte__WEBPACK_IMPORTED_MODULE_186__ = __webpack_require__(/*! ./lte */ "./node_modules/@thi.ng/vectors/lte.js");





























































































































































































/***/ }),

/***/ "./node_modules/@thi.ng/vectors/internal/accessors.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/internal/accessors.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "declareIndex": () => (/* binding */ declareIndex),
/* harmony export */   "declareIndices": () => (/* binding */ declareIndices)
/* harmony export */ });
/** @internal */
const declareIndex = (proto, id, idx, strided = true, defNumeric = true) => {
    const get = idx > 0
        ? strided
            ? function () {
                return this.buf[this.offset + idx * this.stride];
            }
            : function () {
                return this.buf[this.offset + idx];
            }
        : function () {
            return this.buf[this.offset];
        };
    const set = idx > 0
        ? strided
            ? function (n) {
                this.buf[this.offset + idx * this.stride] = n;
            }
            : function (n) {
                this.buf[this.offset + idx] = n;
            }
        : function (n) {
            this.buf[this.offset] = n;
        };
    defNumeric &&
        Object.defineProperty(proto, idx, {
            get,
            set,
            enumerable: true,
        });
    Object.defineProperty(proto, id, {
        get,
        set,
        enumerable: true,
    });
};
/** @internal */
const declareIndices = (proto, props, strided, defNumeric) => props.forEach((id, i) => declareIndex(proto, id, i, strided, defNumeric));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/internal/avec.js":
/*!*******************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/internal/avec.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AVec": () => (/* binding */ AVec)
/* harmony export */ });
class AVec {
    constructor(buf, offset = 0, stride = 1) {
        this.buf = buf;
        this.offset = offset;
        this.stride = stride;
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/internal/codegen.js":
/*!**********************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/internal/codegen.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ARGS_V": () => (/* binding */ ARGS_V),
/* harmony export */   "ARGS_VV": () => (/* binding */ ARGS_VV),
/* harmony export */   "ARGS_VVV": () => (/* binding */ ARGS_VVV),
/* harmony export */   "ARGS_VN": () => (/* binding */ ARGS_VN),
/* harmony export */   "ARGS_VNV": () => (/* binding */ ARGS_VNV),
/* harmony export */   "ARGS_VVN": () => (/* binding */ ARGS_VVN),
/* harmony export */   "SARGS_V": () => (/* binding */ SARGS_V),
/* harmony export */   "SARGS_VV": () => (/* binding */ SARGS_VV),
/* harmony export */   "SARGS_VVV": () => (/* binding */ SARGS_VVV),
/* harmony export */   "DEFAULT_OUT": () => (/* binding */ DEFAULT_OUT),
/* harmony export */   "NEW_OUT": () => (/* binding */ NEW_OUT),
/* harmony export */   "defaultOut": () => (/* binding */ defaultOut),
/* harmony export */   "compile": () => (/* binding */ compile),
/* harmony export */   "compileHOF": () => (/* binding */ compileHOF),
/* harmony export */   "compileG": () => (/* binding */ compileG),
/* harmony export */   "compileGHOF": () => (/* binding */ compileGHOF),
/* harmony export */   "defOp": () => (/* binding */ defOp),
/* harmony export */   "defFnOp": () => (/* binding */ defFnOp),
/* harmony export */   "defHofOp": () => (/* binding */ defHofOp),
/* harmony export */   "defOpS": () => (/* binding */ defOpS),
/* harmony export */   "defHofOpS": () => (/* binding */ defHofOpS),
/* harmony export */   "defMathOp": () => (/* binding */ defMathOp),
/* harmony export */   "defMathOpN": () => (/* binding */ defMathOpN),
/* harmony export */   "defBitOp": () => (/* binding */ defBitOp),
/* harmony export */   "defBitOpN": () => (/* binding */ defBitOpN)
/* harmony export */ });
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/xform/map.js");
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/iter/range.js");
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/transduce.js");
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/func/comp.js");
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/xform/take.js");
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/xform/map-indexed.js");
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/rfn/str.js");
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/iter/zip.js");
/* harmony import */ var _templates__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");
/* harmony import */ var _vop__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./vop */ "./node_modules/@thi.ng/vectors/internal/vop.js");



/** @internal */
const ARGS_V = "o,a";
/** @internal */
const ARGS_VV = "o,a,b";
/** @internal */
const ARGS_VVV = "o,a,b,c";
/** @internal */
const ARGS_VN = "o,a,n";
/** @internal */
const ARGS_VNV = "o,a,n,b";
/** @internal */
const ARGS_VVN = "o,a,b,n";
/** @internal */
const SARGS_V = "io=0,ia=0,so=1,sa=1";
/** @internal */
const SARGS_VV = "io=0,ia=0,ib=0,so=1,sa=1,sb=1";
/** @internal */
const SARGS_VVV = "io=0,ia=0,ib=0,ic=0,so=1,sa=1,sb=1,sc=1";
/** @internal */
const DEFAULT_OUT = "!o&&(o=a);";
/** @internal */
const NEW_OUT = "!o&&(o=[]);";
/**
 * HOF array index lookup gen to provide optimized versions of:
 *
 * @example
 * ```ts
 * lookup("a")(0) // a[ia]
 * lookup("a")(1) // a[ia * sa]
 * lookup("a")(2) // a[ia + 2 * sa]
 * ```
 *
 * @param sym -
 */
const lookup = (sym) => (i) => i > 1
    ? `${sym}[i${sym}+${i}*s${sym}]`
    : i == 1
        ? `${sym}[i${sym}+s${sym}]`
        : `${sym}[i${sym}]`;
/**
 * Infinite iterator of strided index lookups for `sym`.
 *
 * @param sym -
 */
const indicesStrided = (sym) => (0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_0__.map)(lookup(sym), (0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_1__.range)());
/**
 * Infinite iterator of simple (non-strided) index lookups for `sym`.
 *
 * @param sym -
 */
const indices = (sym) => (0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_0__.map)((i) => `${sym}[${i}]`, (0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_1__.range)());
/**
 * Code generator for loop-unrolled vector operations. Takes a vector
 * size `dim`, a code template function `tpl` and an array of symbol
 * names participating in the template. For each symbol, creates
 * iterator of index lookups (e.g. `a[0]` or `a[ia+k*sa]`), forms them
 * into tuples and passes them to template to generate code and joins
 * generated result with `opJoin` separator (default:
 * `""`).
 *
 * If the optional `ret` arg is not `null` (default `"a"`), appends a
 * `return` statement to the result array, using `ret` as return value.
 * Returns array of source code lines.
 *
 * The optional `pre` and `post` strings can be used to wrap the
 * generated code. `post` will be injected **before** the generated
 * return statement (if not suppressed).
 *
 * @param dim -
 * @param tpl -
 * @param syms -
 * @param ret -
 * @param opJoin -
 * @param pre -
 * @param post -
 * @param strided -
 */
const assemble = (dim, tpl, syms, ret = "a", opJoin = "", pre = "", post = "", strided = false) => [
    pre,
    (0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_2__.transduce)((0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_3__.comp)((0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_4__.take)(dim), (0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_5__.mapIndexed)((i, x) => tpl(x, i))), (0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_6__.str)(opJoin), (_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_7__.zip.apply(null, syms.split(",").map(strided ? indicesStrided : indices)))),
    post,
    ret !== "" ? `return ${ret};` : "",
];
const assembleG = (tpl, syms, ret = "a", pre, post, strided = false) => [
    pre,
    "for(let i=a.length;--i>=0;) {",
    tpl(syms
        .split(",")
        .map(strided ? (x) => `${x}[i${x}+i*s${x}]` : (x) => `${x}[i]`)),
    "}",
    post,
    ret !== null ? `return ${ret};` : "",
];
/** @internal */
const defaultOut = (o, args) => `!${o} && (${o}=${args.split(",")[1]});`;
/** @internal */
const compile = (dim, tpl, args, syms = args, ret = "a", opJoin, pre, post, strided = false) => (new Function(args, assemble(dim, tpl, syms, ret, opJoin, pre, post, strided).join("")));
/** @internal */
const compileHOF = (dim, fns, tpl, hofArgs, args, syms = args, ret = "a", opJoin = "", pre, post, strided = false) => {
    return new Function(hofArgs, `return (${args})=>{${assemble(dim, tpl, syms, ret, opJoin, pre, post, strided).join("")}}`)(...fns);
};
/** @internal */
const compileG = (tpl, args, syms = args, ret = "a", pre, post, strided = false) => (new Function(args, assembleG(tpl, syms, ret, pre, post, strided).join("")));
/** @internal */
const compileGHOF = (fns, tpl, hofArgs, args, syms = args, ret = "a", pre, post, strided = false) => (new Function(hofArgs, `return (${args})=>{${assembleG(tpl, syms, ret, pre, post, strided).join("")}}`)(...fns));
const defOp = (tpl, args = ARGS_VV, syms, ret = "o", dispatch = 1, pre) => {
    syms = syms || args;
    pre = pre != null ? pre : defaultOut(ret, args);
    const fn = (0,_vop__WEBPACK_IMPORTED_MODULE_8__.vop)(dispatch);
    const $ = (dim) => fn.add(dim, compile(dim, tpl, args, syms, ret, "", pre));
    fn.default(compileG(tpl, args, syms, ret, pre));
    return [fn, $(2), $(3), $(4)];
};
const defFnOp = (op) => defOp((0,_templates__WEBPACK_IMPORTED_MODULE_9__.FN)(op), ARGS_V);
const defHofOp = (op, tpl, args = ARGS_V, syms, ret = "o", dispatch = 1, pre) => {
    const _tpl = tpl || (0,_templates__WEBPACK_IMPORTED_MODULE_9__.FN)("op");
    syms = syms || args;
    pre = pre != null ? pre : defaultOut(ret, args);
    const $ = (dim) => compileHOF(dim, [op], _tpl, "op", args, syms, ret, "", pre);
    const fn = (0,_vop__WEBPACK_IMPORTED_MODULE_8__.vop)(dispatch);
    fn.default(compileGHOF([op], _tpl, "op", args, syms, ret, pre));
    return [fn, $(2), $(3), $(4)];
};
const defOpS = (tpl, args = `${ARGS_VV},${SARGS_VV}`, syms = ARGS_VV, ret = "o", pre, sizes = [2, 3, 4]) => sizes.map((dim) => compile(dim, tpl, args, syms, ret, "", pre != null ? pre : defaultOut(ret, args), "", true));
const defHofOpS = (op, tpl, args = `${ARGS_VV},${SARGS_VV}`, syms = ARGS_VV, ret = "o", pre, sizes = [2, 3, 4]) => sizes.map((dim) => compileHOF(dim, [op], tpl, "op", args, syms, ret, "", pre != null ? pre : defaultOut(ret, args), "", true));
const defMathOp = (op) => defOp((0,_templates__WEBPACK_IMPORTED_MODULE_9__.MATH)(op));
const defMathOpN = (op) => defOp((0,_templates__WEBPACK_IMPORTED_MODULE_9__.MATH_N)(op), ARGS_VN);
const defBitOp = (op, signed = false) => defOp((signed ? _templates__WEBPACK_IMPORTED_MODULE_9__.SIGNED : _templates__WEBPACK_IMPORTED_MODULE_9__.UNSIGNED)(op));
const defBitOpN = (op, signed = false) => defOp((signed ? _templates__WEBPACK_IMPORTED_MODULE_9__.SIGNED_N : _templates__WEBPACK_IMPORTED_MODULE_9__.UNSIGNED_N)(op), ARGS_VN);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/internal/templates.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/internal/templates.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MATH": () => (/* binding */ MATH),
/* harmony export */   "MATH_N": () => (/* binding */ MATH_N),
/* harmony export */   "MATH2": () => (/* binding */ MATH2),
/* harmony export */   "MATH2_N": () => (/* binding */ MATH2_N),
/* harmony export */   "MATH2A_N": () => (/* binding */ MATH2A_N),
/* harmony export */   "SIGNED": () => (/* binding */ SIGNED),
/* harmony export */   "UNSIGNED": () => (/* binding */ UNSIGNED),
/* harmony export */   "SIGNED_N": () => (/* binding */ SIGNED_N),
/* harmony export */   "UNSIGNED_N": () => (/* binding */ UNSIGNED_N),
/* harmony export */   "FN": () => (/* binding */ FN),
/* harmony export */   "FN2": () => (/* binding */ FN2),
/* harmony export */   "FN3": () => (/* binding */ FN3),
/* harmony export */   "FN5": () => (/* binding */ FN5),
/* harmony export */   "FN_N": () => (/* binding */ FN_N),
/* harmony export */   "DOT": () => (/* binding */ DOT),
/* harmony export */   "DOT_G": () => (/* binding */ DOT_G),
/* harmony export */   "SET": () => (/* binding */ SET),
/* harmony export */   "SET_N": () => (/* binding */ SET_N),
/* harmony export */   "MIX": () => (/* binding */ MIX),
/* harmony export */   "MIX_N": () => (/* binding */ MIX_N)
/* harmony export */ });
/** @internal */
// prettier-ignore
const MATH = (op) => ([o, a, b]) => `${o}=${a}${op}${b};`;
/** @internal */
// prettier-ignore
const MATH_N = (op) => ([o, a]) => `${o}=${a}${op}n;`;
/** @internal */
// prettier-ignore
const MATH2 = (op1, op2) => ([o, a, b, c]) => `${o}=(${a}${op1}${b})${op2}${c};`;
/** @internal */
// prettier-ignore
const MATH2_N = (op1, op2) => ([o, a, b]) => `${o}=(${a}${op1}${b})${op2}n;`;
/** @internal */
// prettier-ignore
const MATH2A_N = (op1, op2) => ([o, a, b]) => `${o}=(${a}${op1}n)${op2}${b};`;
/** @internal */
// prettier-ignore
const SIGNED = (op) => ([o, a, b]) => `${o}=(${a}${op}${b})|0;`;
/** @internal */
// prettier-ignore
const UNSIGNED = (op) => ([o, a, b]) => `${o}=(${a}${op}${b})>>>0;`;
/** @internal */
// prettier-ignore
const SIGNED_N = (op) => ([o, a]) => `${o}=(${a}${op}n)|0;`;
/** @internal */
// prettier-ignore
const UNSIGNED_N = (op) => ([o, a]) => `${o}=(${a}${op}n)>>>0;`;
/** @internal */
// prettier-ignore
const FN = (op = "op") => ([o, a]) => `${o}=${op}(${a});`;
/** @internal */
// prettier-ignore
const FN2 = (op = "op") => ([o, a, b]) => `${o}=${op}(${a},${b});`;
/** @internal */
// prettier-ignore
const FN3 = (op = "op") => ([o, a, b, c]) => `${o}=${op}(${a},${b},${c});`;
/** @internal */
// prettier-ignore
const FN5 = (op = "op") => ([o, a, b, c, d, e]) => `${o}=${op}(${a},${b},${c},${d},${e});`;
/** @internal */
// prettier-ignore
const FN_N = (op = "op") => ([o, a]) => `${o}=${op}(${a},n);`;
/** @internal */
const DOT = ([a, b]) => `${a}*${b}`;
/** @internal */
const DOT_G = ([a, b]) => `s+=${a}*${b};`;
/** @internal */
const SET = ([o, a]) => `${o}=${a};`;
/** @internal */
const SET_N = ([a]) => `${a}=n;`;
/** @internal */
const MIX = ([o, a, b, c]) => `${o}=${a}+(${b}-${a})*${c};`;
/** @internal */
const MIX_N = ([o, a, b]) => `${o}=${a}+(${b}-${a})*n;`;


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/internal/vec-utils.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/internal/vec-utils.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "vecIterator": () => (/* binding */ vecIterator),
/* harmony export */   "stridedValues": () => (/* binding */ stridedValues)
/* harmony export */ });
function* vecIterator(ctor, buf, num, start, cstride, estride) {
    while (num-- > 0) {
        yield new ctor(buf, start, cstride);
        start += estride;
    }
}
function* stridedValues(buf, num, start, stride) {
    while (num-- > 0) {
        yield buf[start];
        start += stride;
    }
}


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/internal/vop.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/internal/vop.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "vop": () => (/* binding */ vop)
/* harmony export */ });
/* harmony import */ var _thi_ng_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/errors */ "./node_modules/@thi.ng/errors/unsupported.js");

/**
 * Specialized / optimized version of {@link @thi.ng/defmulti# | @thi.ng/defmulti} for
 * vector operations. Uses simplified logic to dispatch on length
 * (vector size) of `dispatch` argument.
 *
 * @param dispatch - arg index
 */
const vop = (dispatch = 0) => {
    const impls = new Array(5);
    let fallback;
    const fn = (...args) => {
        const g = impls[args[dispatch].length] || fallback;
        return g
            ? g(...args)
            : (0,_thi_ng_errors__WEBPACK_IMPORTED_MODULE_0__.unsupported)(`no impl for vec size ${args[dispatch].length}`);
    };
    fn.add = (dim, fn) => (impls[dim] = fn);
    fn.default = (fn) => (fallback = fn);
    fn.impl = (dim) => impls[dim] || fallback;
    // fn.impls = impls;
    return fn;
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/invert.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/invert.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "invert": () => (/* binding */ invert),
/* harmony export */   "invert2": () => (/* binding */ invert2),
/* harmony export */   "invert3": () => (/* binding */ invert3),
/* harmony export */   "invert4": () => (/* binding */ invert4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [invert, invert2, invert3, invert4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)(([o, a]) => `${o}=1/${a};`);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/invsqrt.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/invsqrt.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "invSqrt": () => (/* binding */ invSqrt),
/* harmony export */   "invSqrt2": () => (/* binding */ invSqrt2),
/* harmony export */   "invSqrt3": () => (/* binding */ invSqrt3),
/* harmony export */   "invSqrt4": () => (/* binding */ invSqrt4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [invSqrt, invSqrt2, invSqrt3, invSqrt4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)(([o, a]) => `${o}=1/Math.sqrt(${a});`);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/is-inf.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/is-inf.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isInf": () => (/* binding */ isInf),
/* harmony export */   "isInf2": () => (/* binding */ isInf2),
/* harmony export */   "isInf3": () => (/* binding */ isInf3),
/* harmony export */   "isInf4": () => (/* binding */ isInf4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [isInf, isInf2, isInf3, isInf4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("!isFinite");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/is-nan.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/is-nan.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNaN": () => (/* binding */ isNaN),
/* harmony export */   "isNaN2": () => (/* binding */ isNaN2),
/* harmony export */   "isNaN3": () => (/* binding */ isNaN3),
/* harmony export */   "isNaN4": () => (/* binding */ isNaN4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [isNaN, isNaN2, isNaN3, isNaN4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("isNaN");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/jitter.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/jitter.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "jitter": () => (/* binding */ jitter)
/* harmony export */ });
/* harmony import */ var _thi_ng_random__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/random */ "./node_modules/@thi.ng/random/system.js");
/* harmony import */ var _add__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add */ "./node_modules/@thi.ng/vectors/add.js");
/* harmony import */ var _random__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./random */ "./node_modules/@thi.ng/vectors/random.js");



const jitter = (out, a, n = 1, rnd = _thi_ng_random__WEBPACK_IMPORTED_MODULE_0__.SYSTEM) => (0,_add__WEBPACK_IMPORTED_MODULE_1__.add)(out, a, (0,_random__WEBPACK_IMPORTED_MODULE_2__.randNorm)(new Array(a.length), n, rnd));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/limit.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/limit.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "limit": () => (/* binding */ limit)
/* harmony export */ });
/* harmony import */ var _mag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mag */ "./node_modules/@thi.ng/vectors/mag.js");
/* harmony import */ var _muln__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./muln */ "./node_modules/@thi.ng/vectors/muln.js");
/* harmony import */ var _set__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./set */ "./node_modules/@thi.ng/vectors/set.js");



const limit = (out, v, n) => {
    !out && (out = v);
    const m = (0,_mag__WEBPACK_IMPORTED_MODULE_0__.mag)(v);
    return m > n ? (0,_muln__WEBPACK_IMPORTED_MODULE_1__.mulN)(out, v, n / m) : out !== v ? (0,_set__WEBPACK_IMPORTED_MODULE_2__.set)(out, v) : out;
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/log.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/log.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "log": () => (/* binding */ log),
/* harmony export */   "log2": () => (/* binding */ log2),
/* harmony export */   "log3": () => (/* binding */ log3),
/* harmony export */   "log4": () => (/* binding */ log4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [log, log2, log3, log4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("Math.log");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/log_2.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/log_2.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "log_2": () => (/* binding */ log_2),
/* harmony export */   "log_22": () => (/* binding */ log_22),
/* harmony export */   "log_23": () => (/* binding */ log_23),
/* harmony export */   "log_24": () => (/* binding */ log_24)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

/**
 * Componentwise Math.log2
 */
const [log_2, log_22, log_23, log_24] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("Math.log2");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/logic-and.js":
/*!***************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/logic-and.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logicAnd": () => (/* binding */ logicAnd),
/* harmony export */   "logicAnd2": () => (/* binding */ logicAnd2),
/* harmony export */   "logicAnd3": () => (/* binding */ logicAnd3),
/* harmony export */   "logicAnd4": () => (/* binding */ logicAnd4),
/* harmony export */   "logicAndN": () => (/* binding */ logicAndN),
/* harmony export */   "logicAndN2": () => (/* binding */ logicAndN2),
/* harmony export */   "logicAndN3": () => (/* binding */ logicAndN3),
/* harmony export */   "logicAndN4": () => (/* binding */ logicAndN4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [logicAnd, logicAnd2, logicAnd3, logicAnd4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH)("&&"));
const [logicAndN, logicAndN2, logicAndN3, logicAndN4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH_N)("&&"), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VN);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/logic-not.js":
/*!***************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/logic-not.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logicNot": () => (/* binding */ logicNot),
/* harmony export */   "logicNot2": () => (/* binding */ logicNot2),
/* harmony export */   "logicNot3": () => (/* binding */ logicNot3),
/* harmony export */   "logicNot4": () => (/* binding */ logicNot4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [logicNot, logicNot2, logicNot3, logicNot4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("!");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/logic-or.js":
/*!**************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/logic-or.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logicOr": () => (/* binding */ logicOr),
/* harmony export */   "logicOr2": () => (/* binding */ logicOr2),
/* harmony export */   "logicOr3": () => (/* binding */ logicOr3),
/* harmony export */   "logicOr4": () => (/* binding */ logicOr4),
/* harmony export */   "logicOrN": () => (/* binding */ logicOrN),
/* harmony export */   "logicOrN2": () => (/* binding */ logicOrN2),
/* harmony export */   "logicOrN3": () => (/* binding */ logicOrN3),
/* harmony export */   "logicOrN4": () => (/* binding */ logicOrN4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [logicOr, logicOr2, logicOr3, logicOr4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH)("||"));
const [logicOrN, logicOrN2, logicOrN3, logicOrN4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH_N)("||"), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VN);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/lshift.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/lshift.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lshiftI": () => (/* binding */ lshiftI),
/* harmony export */   "lshiftI2": () => (/* binding */ lshiftI2),
/* harmony export */   "lshiftI3": () => (/* binding */ lshiftI3),
/* harmony export */   "lshiftI4": () => (/* binding */ lshiftI4),
/* harmony export */   "lshiftU": () => (/* binding */ lshiftU),
/* harmony export */   "lshiftU2": () => (/* binding */ lshiftU2),
/* harmony export */   "lshiftU3": () => (/* binding */ lshiftU3),
/* harmony export */   "lshiftU4": () => (/* binding */ lshiftU4),
/* harmony export */   "lshiftNI": () => (/* binding */ lshiftNI),
/* harmony export */   "lshiftNI2": () => (/* binding */ lshiftNI2),
/* harmony export */   "lshiftNI3": () => (/* binding */ lshiftNI3),
/* harmony export */   "lshiftNI4": () => (/* binding */ lshiftNI4),
/* harmony export */   "lshiftNU": () => (/* binding */ lshiftNU),
/* harmony export */   "lshiftNU2": () => (/* binding */ lshiftNU2),
/* harmony export */   "lshiftNU3": () => (/* binding */ lshiftNU3),
/* harmony export */   "lshiftNU4": () => (/* binding */ lshiftNU4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [lshiftI, lshiftI2, lshiftI3, lshiftI4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOp)("<<", true);
const [lshiftU, lshiftU2, lshiftU3, lshiftU4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOp)("<<");
// prettier-ignore
const [lshiftNI, lshiftNI2, lshiftNI3, lshiftNI4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOpN)("<<", true);
const [lshiftNU, lshiftNU2, lshiftNU3, lshiftNU4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOpN)("<<");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/lt.js":
/*!********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/lt.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lt": () => (/* binding */ lt),
/* harmony export */   "lt2": () => (/* binding */ lt2),
/* harmony export */   "lt3": () => (/* binding */ lt3),
/* harmony export */   "lt4": () => (/* binding */ lt4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [lt, lt2, lt3, lt4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH)("<"));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/lte.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/lte.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lte": () => (/* binding */ lte),
/* harmony export */   "lte2": () => (/* binding */ lte2),
/* harmony export */   "lte3": () => (/* binding */ lte3),
/* harmony export */   "lte4": () => (/* binding */ lte4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [lte, lte2, lte3, lte4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH)("<="));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/madd.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/madd.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "madd": () => (/* binding */ madd),
/* harmony export */   "madd2": () => (/* binding */ madd2),
/* harmony export */   "madd3": () => (/* binding */ madd3),
/* harmony export */   "madd4": () => (/* binding */ madd4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


/**
 * Returns `out = a * b + c`.
 *
 * - {@link addm}
 * - {@link maddN}
 *
 * @param out -
 * @param a -
 * @param b -
 * @param c -
 */
const [madd, madd2, madd3, madd4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH2)("*", "+"), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/maddn.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/maddn.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maddN": () => (/* binding */ maddN),
/* harmony export */   "maddN2": () => (/* binding */ maddN2),
/* harmony export */   "maddN3": () => (/* binding */ maddN3),
/* harmony export */   "maddN4": () => (/* binding */ maddN4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


/**
 * Returns `out = a * n + b`.
 *
 * @param out - vec
 * @param a - vec
 * @param n - scalar
 * @param b - vec
 */
const [maddN, maddN2, maddN3, maddN4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH2A_N)("*", "+"), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VNV, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VV);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/maddns.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/maddns.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maddNS2": () => (/* binding */ maddNS2),
/* harmony export */   "maddNS3": () => (/* binding */ maddNS3),
/* harmony export */   "maddNS4": () => (/* binding */ maddNS4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [maddNS2, maddNS3, maddNS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOpS)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH2A_N)("*", "+"), `${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VNV},${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.SARGS_VV}`);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/madds.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/madds.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "maddS2": () => (/* binding */ maddS2),
/* harmony export */   "maddS3": () => (/* binding */ maddS3),
/* harmony export */   "maddS4": () => (/* binding */ maddS4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [maddS2, maddS3, maddS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOpS)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH2)("*", "+"), `${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV},${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.SARGS_VVV}`, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/mag.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/mag.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mag": () => (/* binding */ mag)
/* harmony export */ });
/* harmony import */ var _magsq__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./magsq */ "./node_modules/@thi.ng/vectors/magsq.js");

const mag = (v) => Math.sqrt((0,_magsq__WEBPACK_IMPORTED_MODULE_0__.magSq)(v));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/mags.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/mags.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "magS2": () => (/* binding */ magS2),
/* harmony export */   "magS3": () => (/* binding */ magS3),
/* harmony export */   "magS4": () => (/* binding */ magS4)
/* harmony export */ });
/* harmony import */ var _dots__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dots */ "./node_modules/@thi.ng/vectors/dots.js");

const magS2 = (a, ia, sa) => Math.sqrt((0,_dots__WEBPACK_IMPORTED_MODULE_0__.dotS2)(a, a, ia, ia, sa, sa));
const magS3 = (a, ia, sa) => Math.sqrt((0,_dots__WEBPACK_IMPORTED_MODULE_0__.dotS3)(a, a, ia, ia, sa, sa));
const magS4 = (a, ia, sa) => Math.sqrt((0,_dots__WEBPACK_IMPORTED_MODULE_0__.dotS4)(a, a, ia, ia, sa, sa));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/magsq.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/magsq.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "magSq": () => (/* binding */ magSq),
/* harmony export */   "magSq2": () => (/* binding */ magSq2),
/* harmony export */   "magSq3": () => (/* binding */ magSq3),
/* harmony export */   "magSq4": () => (/* binding */ magSq4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_vop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/vop */ "./node_modules/@thi.ng/vectors/internal/vop.js");


const $ = (dim) => magSq.add(dim, (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.compile)(dim, ([a]) => `${a}*${a}`, "a", "a", "", "+", "return ", ";"));
const magSq = (0,_internal_vop__WEBPACK_IMPORTED_MODULE_1__.vop)();
magSq.default((0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.compileG)(([a]) => `sum+=${a}*${a};`, "a", undefined, "sum", "let sum=0;"));
const magSq2 = $(2);
const magSq3 = $(3);
const magSq4 = $(4);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/magsqs.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/magsqs.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "magSqS2": () => (/* binding */ magSqS2),
/* harmony export */   "magSqS3": () => (/* binding */ magSqS3),
/* harmony export */   "magSqS4": () => (/* binding */ magSqS4)
/* harmony export */ });
/* harmony import */ var _dots__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dots */ "./node_modules/@thi.ng/vectors/dots.js");

const magSqS2 = (a, ia, sa) => (0,_dots__WEBPACK_IMPORTED_MODULE_0__.dotS2)(a, a, ia, ia, sa, sa);
const magSqS3 = (a, ia, sa) => (0,_dots__WEBPACK_IMPORTED_MODULE_0__.dotS3)(a, a, ia, ia, sa, sa);
const magSqS4 = (a, ia, sa) => (0,_dots__WEBPACK_IMPORTED_MODULE_0__.dotS4)(a, a, ia, ia, sa, sa);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/major.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/major.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "major": () => (/* binding */ major),
/* harmony export */   "major2": () => (/* binding */ major2),
/* harmony export */   "major3": () => (/* binding */ major3),
/* harmony export */   "major4": () => (/* binding */ major4)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/interval.js");
/* harmony import */ var _internal_vop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/vop */ "./node_modules/@thi.ng/vectors/internal/vop.js");


const abs = Math.abs;
/**
 * Returns index of major component/axis in `v`, i.e. where `|v[i]|` is
 * the largest.
 *
 * @param v -
 */
const major = (0,_internal_vop__WEBPACK_IMPORTED_MODULE_0__.vop)();
major.default((a) => {
    let id = -1;
    let max = -Infinity;
    for (let i = a.length; --i >= 0;) {
        const x = abs(a[i]);
        if (x > max) {
            max = x;
            id = i;
        }
    }
    return id;
});
const major2 = major.add(2, (a) => (0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.max2id)(abs(a[0]), abs(a[1])));
const major3 = major.add(3, (a) => (0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.max3id)(abs(a[0]), abs(a[1]), abs(a[2])));
const major4 = major.add(4, (a) => (0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.max4id)(abs(a[0]), abs(a[1]), abs(a[2]), abs(a[3])));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/map-vectors.js":
/*!*****************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/map-vectors.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mapVectors": () => (/* binding */ mapVectors)
/* harmony export */ });
/* harmony import */ var _thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @thi.ng/checks */ "./node_modules/@thi.ng/checks/is-number.js");

function mapVectors(fn, out, a, b, c) {
    const num = a.length;
    !out && (out = new Array(num));
    if (c !== undefined) {
        if ((0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isNumber)(c)) {
            for (let i = 0; i < num; i++) {
                out[i] = fn(out[i] || [], a[i], b[i], c);
            }
        }
        else {
            for (let i = 0; i < num; i++) {
                out[i] = fn(out[i] || [], a[i], b[i], c[i]);
            }
        }
    }
    else {
        if ((0,_thi_ng_checks__WEBPACK_IMPORTED_MODULE_0__.isNumber)(b)) {
            for (let i = 0; i < num; i++) {
                out[i] = fn(out[i] || [], a[i], b);
            }
        }
        else {
            for (let i = 0; i < num; i++) {
                out[i] = fn(out[i] || [], a[i], b[i]);
            }
        }
    }
    return out;
}


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/map.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/map.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mapVV": () => (/* binding */ mapVV),
/* harmony export */   "mapV": () => (/* binding */ mapV),
/* harmony export */   "mapVN": () => (/* binding */ mapVN),
/* harmony export */   "mapVVV": () => (/* binding */ mapVVV),
/* harmony export */   "mapVVN": () => (/* binding */ mapVVN)
/* harmony export */ });
/**
 * Vec2/3/4 view based buffer transformation for {@link VecOpVV} type
 * ops and supporting arbitrary component and element layouts of all
 * input and output buffers.
 *
 * @remarks
 * The given pre-initialized vectors MUST be separate instances, are
 * used as sliding cursors / views of their respective backing buffers
 * and will be modified as part of the transformation process (though
 * the input buffers themselves are treated as immutable, unless `out`
 * is configured to use one of the input buffers).
 *
 * In each iteration `op` is called via `op(out, a, b)`, followed by
 * cursor updates to process the next vector view. No bounds checking is
 * performed.
 *
 * This function returns `out`'s backing buffer.
 *
 * @example
 * ```ts
 * // each input buffer contains 2 2D vectors, but using
 * // different strided data layouts
 * mapVV(
 *   // transformation function
 *   add,
 *   // init output buffer view
 *   new Vec2(),
 *   // wrap 1st input buffer & configure offset & component stride
 *   new Vec2([1,0,2,0,0,0,0,0,3,0,4,0,0,0,0,0], 0, 2),
 *   // wrap 2nd input buffer
 *   new Vec2([0,10,0,0,20,0,0,30,0,0,40], 1, 3),
 *   2, // num vectors
 *   2, // output element stride
 *   8, // input #1 element stride
 *   6  // input #2 element stride
 * );
 * // [ 11, 22, 33, 44 ]
 * ```
 *
 * Alternatively, `Vec2/3/4.iterator()` combined with transducers can be
 * used to achieve the same (and more flexible) transformations, but
 * will incur more intermediate object allocations. `mapV*()` functions
 * only use (and mutate) the provided vector instances and do not
 * allocate any further objects.
 *
 * ```ts
 * // output buffer
 * const out = new Array(4);
 *
 * tx.run(
 *   tx.map(([o, a, b]) => add(o, a, b)),
 *   tx.zip(
 *      Vec2.iterator(out, 2),
 *      Vec2.iterator([1,0,2,0,0,0,0,0,3,0,4,0,0,0,0,0], 2, 0, 2, 8),
 *      Vec2.iterator([0,10,0,0,20,0,0,30,0,0,40], 2, 1, 3, 6),
 *   )
 * );
 *
 * out
 * // [ 11, 22, 33, 44 ]
 * ```
 *
 * @param op -
 * @param out -
 * @param a -
 * @param b -
 * @param num -
 * @param so -
 * @param sa -
 * @param sb -
 */
const mapVV = (op, out, a, b, num, so = out.length * out.stride, sa = a.length * a.stride, sb = b.length * b.stride) => {
    while (num-- > 0) {
        op(out, a, b);
        out.offset += so;
        a.offset += sa;
        b.offset += sb;
    }
    return out.buf;
};
/**
 * Like {@link mapVV}, but for {@link VecOpV} type ops and hence only using
 * single input.
 *
 * @example
 * ```ts
 * // 4x 2D vectors in SOA layout
 * // i.e. [x1, x2, x3, x4, y1, y2, y3, y4]
 * buf = [1, 3, 5, 7, 2, 4, 6, 8];
 *
 * // use `swapXY` to swizzle each vector and use AOS for output
 * res = mapV(swapXY, new Vec2(), new Vec2(buf, 0, 4), 4, 2, 1);
 * // [ 2, 1, 4, 3, 6, 5, 8, 7 ]
 *
 * // unpack result for demonstration purposes
 * [...Vec2.iterator(res, 4)].map(v => [...v]);
 * // [ [ 2, 1 ], [ 4, 3 ], [ 6, 5 ], [ 8, 7 ] ]
 * ```
 *
 * @param op -
 * @param out -
 * @param a -
 * @param num -
 * @param so -
 * @param sa -
 */
const mapV = (op, out, a, num, so = out.length * out.stride, sa = a.length * a.stride) => {
    while (num-- > 0) {
        op(out, a);
        out.offset += so;
        a.offset += sa;
    }
    return out.buf;
};
/**
 * Like {@link mapVV}, but for {@link VecOpVN} type ops and hence using
 * a single vector input buffer `a` and a scalar `n`.
 *
 * @param op -
 * @param out -
 * @param a -
 * @param n -
 * @param num -
 * @param so -
 * @param sa -
 */
const mapVN = (op, out, a, n, num, so = out.length * out.stride, sa = a.length * a.stride) => {
    while (num-- > 0) {
        op(out, a, n);
        out.offset += so;
        a.offset += sa;
    }
    return out.buf;
};
/**
 * Like {@link mapVV}, but for {@link VecOpVVV} type ops and hence using
 * three vector input buffers `a`, `b`, `c`.
 *
 * @param op -
 * @param out -
 * @param a -
 * @param b -
 * @param c -
 * @param num -
 * @param so -
 * @param sa -
 * @param sb -
 * @param sc -
 */
const mapVVV = (op, out, a, b, c, num, so = out.length * out.stride, sa = a.length * a.stride, sb = b.length * b.stride, sc = c.length * c.stride) => {
    while (num-- > 0) {
        op(out, a, b, c);
        out.offset += so;
        a.offset += sa;
        b.offset += sb;
        c.offset += sc;
    }
    return out.buf;
};
/**
 * Like {@link mapVV}, but for {@link VecOpVVN} type ops and hence using
 * two vector input buffers `a`, `b` and a scalar `n`.
 *
 * @param op -
 * @param out -
 * @param a -
 * @param b -
 * @param n -
 * @param num -
 * @param so -
 * @param sa -
 * @param sb -
 */
const mapVVN = (op, out, a, b, n, num, so = out.length * out.stride, sa = a.length * a.stride, sb = b.length * b.stride) => {
    while (num-- > 0) {
        op(out, a, b, n);
        out.offset += so;
        a.offset += sa;
        b.offset += sb;
    }
    return out.buf;
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/max.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/max.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "max": () => (/* binding */ max),
/* harmony export */   "max2": () => (/* binding */ max2),
/* harmony export */   "max3": () => (/* binding */ max3),
/* harmony export */   "max4": () => (/* binding */ max4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [max, max2, max3, max4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.FN2)("Math.max"));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/median.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/median.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "median": () => (/* binding */ median)
/* harmony export */ });
/**
 * Takes an array of vectors (of uniform dimensions) and computes the
 * componentwise medians (in accordance to the Manhattan-distance formulation of
 * the k-medians problem). Writes result to `out` (or a new vector).
 *
 * @example
 * ```ts
 * median([], [[3, 10, 400], [4, 30, 100], [1, 40, 200], [2, 20, 300]])
 * // [ 3, 30, 300 ]
 * ```
 *
 * @param out
 * @param src
 */
const median = (out, src) => {
    out = out || [];
    const m = src.length >> 1;
    for (let i = src[0].length; --i >= 0;) {
        out[i] = src.map((x) => x[i]).sort((a, b) => a - b)[m];
    }
    return out;
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/min.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/min.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "min": () => (/* binding */ min),
/* harmony export */   "min2": () => (/* binding */ min2),
/* harmony export */   "min3": () => (/* binding */ min3),
/* harmony export */   "min4": () => (/* binding */ min4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [min, min2, min3, min4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.FN2)("Math.min"));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/minor.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/minor.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "minor": () => (/* binding */ minor),
/* harmony export */   "minor2": () => (/* binding */ minor2),
/* harmony export */   "minor3": () => (/* binding */ minor3),
/* harmony export */   "minor4": () => (/* binding */ minor4)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/interval.js");
/* harmony import */ var _internal_vop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/vop */ "./node_modules/@thi.ng/vectors/internal/vop.js");


const abs = Math.abs;
/**
 * Returns index of minor component/axis in `v`, i.e. where `|v[i]|` is
 * the smallest.
 *
 * @param v -
 */
const minor = (0,_internal_vop__WEBPACK_IMPORTED_MODULE_0__.vop)();
minor.default((a) => {
    let id = -1;
    let min = Infinity;
    for (let i = a.length; --i >= 0;) {
        const x = abs(a[i]);
        if (x < min) {
            min = x;
            id = i;
        }
    }
    return id;
});
const minor2 = minor.add(2, (a) => (0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.min2id)(abs(a[0]), abs(a[1])));
const minor3 = minor.add(3, (a) => (0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.min3id)(abs(a[0]), abs(a[1]), abs(a[2])));
const minor4 = minor.add(4, (a) => (0,_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.min4id)(abs(a[0]), abs(a[1]), abs(a[2]), abs(a[3])));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/mix-bilinear.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/mix-bilinear.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mixBilinear": () => (/* binding */ mixBilinear),
/* harmony export */   "mixBilinear2": () => (/* binding */ mixBilinear2),
/* harmony export */   "mixBilinear3": () => (/* binding */ mixBilinear3),
/* harmony export */   "mixBilinear4": () => (/* binding */ mixBilinear4)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/mix.js");
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");


const [mixBilinear, mixBilinear2, mixBilinear3, mixBilinear4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.mixBilinear, ([o, a, b, c, d]) => `${o}=op(${a},${b},${c},${d},u,v);`, "o,a,b,c,d,u,v");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/mix-cubic.js":
/*!***************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/mix-cubic.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mixCubic": () => (/* binding */ mixCubic)
/* harmony export */ });
/* harmony import */ var _addw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addw */ "./node_modules/@thi.ng/vectors/addw.js");

/**
 * Vector version of {@link @thi.ng/math#mixCubic}.
 *
 * @param out - result
 * @param a -
 * @param b -
 * @param c -
 * @param d -
 * @param t - interpolation coeff [0..1]
 */
const mixCubic = (out, a, b, c, d, t) => {
    const s = 1 - t;
    const s2 = s * s;
    const t2 = t * t;
    return (0,_addw__WEBPACK_IMPORTED_MODULE_0__.addW4)(out, a, b, c, d, s2 * s, 3 * s2 * t, 3 * t2 * s, t2 * t);
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/mix-hermite.js":
/*!*****************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/mix-hermite.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mixCubicHermite": () => (/* binding */ mixCubicHermite),
/* harmony export */   "mixHermiteCardinal": () => (/* binding */ mixHermiteCardinal),
/* harmony export */   "mixHermiteDiff3": () => (/* binding */ mixHermiteDiff3),
/* harmony export */   "tangentCardinal": () => (/* binding */ tangentCardinal),
/* harmony export */   "tangentDiff3": () => (/* binding */ tangentDiff3)
/* harmony export */ });
/* harmony import */ var _addmn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./addmn */ "./node_modules/@thi.ng/vectors/addmn.js");
/* harmony import */ var _addw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addw */ "./node_modules/@thi.ng/vectors/addw.js");
/* harmony import */ var _submn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./submn */ "./node_modules/@thi.ng/vectors/submn.js");



/**
 * Vector version of {@link @thi.ng/math#mixCubicHermite}.
 *
 * @param out - result
 * @param a -
 * @param ta - tangent A
 * @param b -
 * @param tb - tangent B
 * @param t - interpolation coeff [0..1]
 */
const mixCubicHermite = (out, a, ta, b, tb, t) => {
    const s = t - 1;
    const t2 = t * t;
    const s2 = s * s;
    return (0,_addw__WEBPACK_IMPORTED_MODULE_0__.addW4)(out, a, ta, b, tb, (1 + 2 * t) * s2, t * s2, t2 * (3 - 2 * t), t2 * s);
};
/**
 * Convenience version of {@link mixCubicHermite}, using 4 input points
 * and {@link tangentCardinal} to compute the tangents for points `b`
 * and `c` (with optional `scale`, default 0.5). Interpolated result
 * point is that of `b` and `c`, with `a` and `d` only being used for
 * tangent calculations.
 *
 * If `out` is null, stores result in `b`.
 *
 * @param out - result
 * @param a -
 * @param b -
 * @param c -
 * @param d -
 * @param t - interpolation coeff [0..1]
 * @param scale - tangent tightness / scale
 */
const mixHermiteCardinal = (out, a, b, c, d, t, scale = 0.5) => mixCubicHermite(out, b, tangentCardinal([], a, c, scale), c, tangentCardinal([], b, d, scale), t);
/**
 * Convenience version of {@link mixCubicHermite}, using 4 input points
 * and {@link tangentDiff3} to compute the tangents for points `b` and
 * `c`. Interpolated result point is that of `b` and `c`, with `a` and
 * `d` only being used for tangent calculations.
 *
 * If `out` is null, stores result in `b`.
 *
 * @param out - result
 * @param a -
 * @param b -
 * @param c -
 * @param d -
 * @param t - interpolation coeff [0..1]
 */
const mixHermiteDiff3 = (out, a, b, c, d, t) => mixCubicHermite(out, b, tangentDiff3([], a, b, c), c, tangentDiff3([], b, c, d), t);
/**
 * Vector version of {@link @thi.ng/math#tangentCardinal}.
 *
 * @param out -
 * @param prev -
 * @param next -
 * @param scale -
 * @param ta -
 * @param tc -
 */
const tangentCardinal = (out, prev, next, scale = 0.5, ta = 0, tc = 2) => (0,_submn__WEBPACK_IMPORTED_MODULE_1__.submN)(out, next, prev, scale / (tc - ta));
/**
 * Vector version of {@link @thi.ng/math#tangentDiff3}.
 *
 * @param out - result
 * @param prev -
 * @param curr -
 * @param next -
 * @param ta -
 * @param tb -
 * @param tc -
 */
const tangentDiff3 = (out, prev, curr, next, ta = 0, tb = 1, tc = 2) => (0,_addmn__WEBPACK_IMPORTED_MODULE_2__.addmN)(out, (0,_submn__WEBPACK_IMPORTED_MODULE_1__.submN)(out, curr, prev, 1 / (tb - ta)), (0,_submn__WEBPACK_IMPORTED_MODULE_1__.submN)([], next, curr, 1 / (tc - tb)), 0.5);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/mix-quadratic.js":
/*!*******************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/mix-quadratic.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mixQuadratic": () => (/* binding */ mixQuadratic)
/* harmony export */ });
/* harmony import */ var _addw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addw */ "./node_modules/@thi.ng/vectors/addw.js");

/**
 * Vector version of {@link @thi.ng/math#mixQuadratic}.
 *
 * @param out - result
 * @param a -
 * @param b -
 * @param c -
 * @param t - interpolation coeff [0..1]
 */
const mixQuadratic = (out, a, b, c, t) => {
    const s = 1 - t;
    return (0,_addw__WEBPACK_IMPORTED_MODULE_0__.addW3)(out, a, b, c, s * s, 2 * s * t, t * t);
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/mix.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/mix.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mix": () => (/* binding */ mix),
/* harmony export */   "mix2": () => (/* binding */ mix2),
/* harmony export */   "mix3": () => (/* binding */ mix3),
/* harmony export */   "mix4": () => (/* binding */ mix4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [mix, mix2, mix3, mix4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)(_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MIX, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/mixn.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/mixn.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mixN": () => (/* binding */ mixN),
/* harmony export */   "mixN2": () => (/* binding */ mixN2),
/* harmony export */   "mixN3": () => (/* binding */ mixN3),
/* harmony export */   "mixN4": () => (/* binding */ mixN4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [mixN, mixN2, mixN3, mixN4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)(_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MIX_N, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVN);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/mixns.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/mixns.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mixNS2": () => (/* binding */ mixNS2),
/* harmony export */   "mixNS3": () => (/* binding */ mixNS3),
/* harmony export */   "mixNS4": () => (/* binding */ mixNS4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [mixNS2, mixNS3, mixNS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOpS)(_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MIX_N, `${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVN},${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.SARGS_VV}`);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/mixs.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/mixs.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mixS2": () => (/* binding */ mixS2),
/* harmony export */   "mixS3": () => (/* binding */ mixS3),
/* harmony export */   "mixS4": () => (/* binding */ mixS4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [mixS2, mixS3, mixS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOpS)(_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MIX, `${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV},${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.SARGS_VVV}`, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/mod.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/mod.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mod": () => (/* binding */ mod),
/* harmony export */   "mod2": () => (/* binding */ mod2),
/* harmony export */   "mod3": () => (/* binding */ mod3),
/* harmony export */   "mod4": () => (/* binding */ mod4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [mod, mod2, mod3, mod4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defMathOp)("%");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/modn.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/modn.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "modN": () => (/* binding */ modN),
/* harmony export */   "modN2": () => (/* binding */ modN2),
/* harmony export */   "modN3": () => (/* binding */ modN3),
/* harmony export */   "modN4": () => (/* binding */ modN4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [modN, modN2, modN3, modN4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defMathOpN)("%");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/msub.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/msub.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "msub": () => (/* binding */ msub),
/* harmony export */   "msub2": () => (/* binding */ msub2),
/* harmony export */   "msub3": () => (/* binding */ msub3),
/* harmony export */   "msub4": () => (/* binding */ msub4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


/**
 * Returns `out = a * b + c`.
 *
 * - {@link addm}
 * - {@link maddN}
 *
 * @param out -
 * @param a -
 * @param b -
 * @param c -
 */
const [msub, msub2, msub3, msub4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH2)("*", "-"), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/msubn.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/msubn.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "msubN": () => (/* binding */ msubN),
/* harmony export */   "msubN2": () => (/* binding */ msubN2),
/* harmony export */   "msubN3": () => (/* binding */ msubN3),
/* harmony export */   "msubN4": () => (/* binding */ msubN4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


/**
 * Returns `out = a * n + b`.
 *
 * @param out - vec
 * @param a - vec
 * @param n - scalar
 * @param b - vec
 */
const [msubN, msubN2, msubN3, msubN4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH2A_N)("*", "-"), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VNV, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VV);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/msubns.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/msubns.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "msubNS2": () => (/* binding */ msubNS2),
/* harmony export */   "msubNS3": () => (/* binding */ msubNS3),
/* harmony export */   "msubNS4": () => (/* binding */ msubNS4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [msubNS2, msubNS3, msubNS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOpS)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH2A_N)("*", "-"), `${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VNV},${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.SARGS_VV}`);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/msubs.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/msubs.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "msubS2": () => (/* binding */ msubS2),
/* harmony export */   "msubS3": () => (/* binding */ msubS3),
/* harmony export */   "msubS4": () => (/* binding */ msubS4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [msubS2, msubS3, msubS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOpS)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH2)("*", "-"), `${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV},${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.SARGS_VVV}`, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/mul.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/mul.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mul": () => (/* binding */ mul),
/* harmony export */   "mul2": () => (/* binding */ mul2),
/* harmony export */   "mul3": () => (/* binding */ mul3),
/* harmony export */   "mul4": () => (/* binding */ mul4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [mul, mul2, mul3, mul4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defMathOp)("*");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/muli.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/muli.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mulI": () => (/* binding */ mulI),
/* harmony export */   "mulI2": () => (/* binding */ mulI2),
/* harmony export */   "mulI3": () => (/* binding */ mulI3),
/* harmony export */   "mulI4": () => (/* binding */ mulI4),
/* harmony export */   "mulU": () => (/* binding */ mulU),
/* harmony export */   "mulU2": () => (/* binding */ mulU2),
/* harmony export */   "mulU3": () => (/* binding */ mulU3),
/* harmony export */   "mulU4": () => (/* binding */ mulU4),
/* harmony export */   "mulNI": () => (/* binding */ mulNI),
/* harmony export */   "mulNI2": () => (/* binding */ mulNI2),
/* harmony export */   "mulNI3": () => (/* binding */ mulNI3),
/* harmony export */   "mulNI4": () => (/* binding */ mulNI4),
/* harmony export */   "mulNU": () => (/* binding */ mulNU),
/* harmony export */   "mulNU2": () => (/* binding */ mulNU2),
/* harmony export */   "mulNU3": () => (/* binding */ mulNU3),
/* harmony export */   "mulNU4": () => (/* binding */ mulNU4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [mulI, mulI2, mulI3, mulI4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOp)("*", true);
const [mulU, mulU2, mulU3, mulU4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOp)("*");
const [mulNI, mulNI2, mulNI3, mulNI4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOpN)("*", true);
const [mulNU, mulNU2, mulNU3, mulNU4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOpN)("*");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/muln.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/muln.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mulN": () => (/* binding */ mulN),
/* harmony export */   "mulN2": () => (/* binding */ mulN2),
/* harmony export */   "mulN3": () => (/* binding */ mulN3),
/* harmony export */   "mulN4": () => (/* binding */ mulN4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [mulN, mulN2, mulN3, mulN4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defMathOpN)("*");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/mulns.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/mulns.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mulNS2": () => (/* binding */ mulNS2),
/* harmony export */   "mulNS3": () => (/* binding */ mulNS3),
/* harmony export */   "mulNS4": () => (/* binding */ mulNS4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [mulNS2, mulNS3, mulNS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOpS)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH_N)("*"), `${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VN},${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.SARGS_V}`, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_V);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/muls.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/muls.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mulS2": () => (/* binding */ mulS2),
/* harmony export */   "mulS3": () => (/* binding */ mulS3),
/* harmony export */   "mulS4": () => (/* binding */ mulS4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [mulS2, mulS3, mulS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOpS)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH)("*"));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/neg.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/neg.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "neg": () => (/* binding */ neg)
/* harmony export */ });
/* harmony import */ var _muln__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./muln */ "./node_modules/@thi.ng/vectors/muln.js");

const neg = (out, v) => (0,_muln__WEBPACK_IMPORTED_MODULE_0__.mulN)(out, v, -1);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/neq.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/neq.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "neq": () => (/* binding */ neq),
/* harmony export */   "neq2": () => (/* binding */ neq2),
/* harmony export */   "neq3": () => (/* binding */ neq3),
/* harmony export */   "neq4": () => (/* binding */ neq4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [neq, neq2, neq3, neq4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH)("!=="));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/normal.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/normal.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "normalCCW": () => (/* binding */ normalCCW),
/* harmony export */   "normalCW": () => (/* binding */ normalCW)
/* harmony export */ });
/* harmony import */ var _direction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./direction */ "./node_modules/@thi.ng/vectors/direction.js");
/* harmony import */ var _perpendicular__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./perpendicular */ "./node_modules/@thi.ng/vectors/perpendicular.js");


/**
 * Computes 2D normal by rotating direction vector `a` -> `b`, 90 deg
 * counterclockwise, normalized to length `n` (default: 1). If `out` is
 * null, creates new vector.
 *
 * @param out -
 * @param a -
 * @param b -
 * @param n -
 */
const normalCCW = (out, a, b, n = 1) => (0,_perpendicular__WEBPACK_IMPORTED_MODULE_0__.perpendicularCCW)(null, (0,_direction__WEBPACK_IMPORTED_MODULE_1__.direction)(out || [], a, b, n));
/**
 * Computes 2D normal by rotating direction vector `a` -> `b`, 90 deg
 * clockwise, normalized to length `n` (default: 1). If `out` is null,
 * creates new vector.
 *
 * @param out -
 * @param a -
 * @param b -
 * @param n -
 */
const normalCW = (out, a, b, n = 1) => (0,_perpendicular__WEBPACK_IMPORTED_MODULE_0__.perpendicularCW)(null, (0,_direction__WEBPACK_IMPORTED_MODULE_1__.direction)(out || [], a, b, n));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/normalize.js":
/*!***************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/normalize.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "normalize": () => (/* binding */ normalize)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/api.js");
/* harmony import */ var _mag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mag */ "./node_modules/@thi.ng/vectors/mag.js");
/* harmony import */ var _muln__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./muln */ "./node_modules/@thi.ng/vectors/muln.js");
/* harmony import */ var _set__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./set */ "./node_modules/@thi.ng/vectors/set.js");




/**
 * Normalizes vector to given (optional) length (default: 1). If `out`
 * is null, modifies `v` in place.
 *
 * @param out -
 * @param v -
 * @param n -
 */
const normalize = (out, v, n = 1) => {
    !out && (out = v);
    const m = (0,_mag__WEBPACK_IMPORTED_MODULE_0__.mag)(v);
    return m >= _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.EPS ? (0,_muln__WEBPACK_IMPORTED_MODULE_2__.mulN)(out, v, n / m) : out !== v ? (0,_set__WEBPACK_IMPORTED_MODULE_3__.set)(out, v) : out;
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/normalizes.js":
/*!****************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/normalizes.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "normalizeS2": () => (/* binding */ normalizeS2),
/* harmony export */   "normalizeS3": () => (/* binding */ normalizeS3),
/* harmony export */   "normalizeS4": () => (/* binding */ normalizeS4)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/api.js");
/* harmony import */ var _mags__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mags */ "./node_modules/@thi.ng/vectors/mags.js");
/* harmony import */ var _mulns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mulns */ "./node_modules/@thi.ng/vectors/mulns.js");
/* harmony import */ var _sets__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sets */ "./node_modules/@thi.ng/vectors/sets.js");




/**
 * Normalizes vector to given (optional) length (default: 1). If `out`
 * is null, modifies `v` in place.
 *
 * @param out -
 * @param v -
 * @param n -
 */
const normalizeS2 = (out, v, n = 1, io = 0, ia = 0, so = 1, sa = 1) => {
    !out && (out = v);
    const m = (0,_mags__WEBPACK_IMPORTED_MODULE_0__.magS2)(v, ia, sa);
    return m >= _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.EPS
        ? (0,_mulns__WEBPACK_IMPORTED_MODULE_2__.mulNS2)(out, v, n / m, io, ia, so, sa)
        : out !== v
            ? (0,_sets__WEBPACK_IMPORTED_MODULE_3__.setS2)(out, v, io, ia, so, sa)
            : out;
};
/**
 * Normalizes vector to given (optional) length (default: 1). If `out`
 * is null, modifies `v` in place.
 *
 * @param out -
 * @param v -
 * @param n -
 */
const normalizeS3 = (out, v, n = 1, io = 0, ia = 0, so = 1, sa = 1) => {
    !out && (out = v);
    const m = (0,_mags__WEBPACK_IMPORTED_MODULE_0__.magS3)(v, ia, sa);
    return m >= _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.EPS
        ? (0,_mulns__WEBPACK_IMPORTED_MODULE_2__.mulNS3)(out, v, n / m, io, ia, so, sa)
        : out !== v
            ? (0,_sets__WEBPACK_IMPORTED_MODULE_3__.setS3)(out, v, io, ia, so, sa)
            : out;
};
/**
 * Normalizes vector to given (optional) length (default: 1). If `out`
 * is null, modifies `v` in place.
 *
 * @param out -
 * @param v -
 * @param n -
 */
const normalizeS4 = (out, v, n = 1, io = 0, ia = 0, so = 1, sa = 1) => {
    !out && (out = v);
    const m = (0,_mags__WEBPACK_IMPORTED_MODULE_0__.magS4)(v, ia, sa);
    return m >= _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.EPS
        ? (0,_mulns__WEBPACK_IMPORTED_MODULE_2__.mulNS4)(out, v, n / m, io, ia, so, sa)
        : out !== v
            ? (0,_sets__WEBPACK_IMPORTED_MODULE_3__.setS4)(out, v, io, ia, so, sa)
            : out;
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/not.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/not.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "not": () => (/* binding */ not),
/* harmony export */   "not2": () => (/* binding */ not2),
/* harmony export */   "not3": () => (/* binding */ not3),
/* harmony export */   "not4": () => (/* binding */ not4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [not, not2, not3, not4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)(([o, a]) => `${o}=!${a};`, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_V, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_V, "o", 1, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.NEW_OUT);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/ortho-normal.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/ortho-normal.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "orthoNormal3": () => (/* binding */ orthoNormal3)
/* harmony export */ });
/* harmony import */ var _cross__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cross */ "./node_modules/@thi.ng/vectors/cross.js");
/* harmony import */ var _normalize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./normalize */ "./node_modules/@thi.ng/vectors/normalize.js");
/* harmony import */ var _sub__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sub */ "./node_modules/@thi.ng/vectors/sub.js");



/**
 * Produces a vector which is perpendicular/normal to the plane spanned
 * by given 3 input vectors. If `normalize` is true (default), the
 * result vector will be normalized.
 *
 * @example
 * ```ts
 * orthoNormal3([], [0, 0, 0], [1, 0, 0], [0, 1, 0])
 * // [0, 0, 1]
 * ```
 *
 * @param out -
 * @param a -
 * @param b -
 * @param c -
 * @param normalize -
 */
const orthoNormal3 = (out, a, b, c, doNormalize = true) => {
    out = (0,_cross__WEBPACK_IMPORTED_MODULE_0__.cross3)(null, (0,_sub__WEBPACK_IMPORTED_MODULE_1__.sub3)(out || a, b, a), (0,_sub__WEBPACK_IMPORTED_MODULE_1__.sub3)([], c, a));
    return doNormalize ? (0,_normalize__WEBPACK_IMPORTED_MODULE_2__.normalize)(out, out) : out;
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/perpendicular.js":
/*!*******************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/perpendicular.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "perpendicularCCW": () => (/* binding */ perpendicularCCW),
/* harmony export */   "perpendicularCW": () => (/* binding */ perpendicularCW)
/* harmony export */ });
/* harmony import */ var _setc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setc */ "./node_modules/@thi.ng/vectors/setc.js");

/**
 * 2D only. Produces a perpendicular vector to `v`, i.e. `[-y,x]`.
 * Assumes positive Y-up.
 *
 * @param out -
 * @param v -
 */
const perpendicularCCW = (out, a) => (0,_setc__WEBPACK_IMPORTED_MODULE_0__.setC2)(out || a, -a[1], a[0]);
/**
 * 2D only. Produces a clockwise perpendicular vector to `v`, i.e.
 * `[y,-x]`. Assumes positive Y-up.
 *
 * @param out -
 * @param v -
 */
const perpendicularCW = (out, a) => (0,_setc__WEBPACK_IMPORTED_MODULE_0__.setC2)(out || a, a[1], -a[0]);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/point-on-ray.js":
/*!******************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/point-on-ray.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pointOnRay": () => (/* binding */ pointOnRay),
/* harmony export */   "pointOnRay2": () => (/* binding */ pointOnRay2),
/* harmony export */   "pointOnRay3": () => (/* binding */ pointOnRay3)
/* harmony export */ });
/* harmony import */ var _maddn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./maddn */ "./node_modules/@thi.ng/vectors/maddn.js");

/**
 * Calculates the nD point laying on ray at given distance. `rayDir` MUST be
 * normalized.
 *
 * @param out -
 * @param rayOrigin -
 * @param rayDir -
 * @param dist -
 */
const pointOnRay = (out, rayOrigin, rayDir, dist) => (0,_maddn__WEBPACK_IMPORTED_MODULE_0__.maddN)(out, rayDir, dist, rayOrigin);
/**
 * 2D version of {@link pointOnRay}.
 *
 * @param out -
 * @param rayOrigin -
 * @param rayDir -
 * @param dist -
 */
const pointOnRay2 = (out, rayOrigin, rayDir, dist) => (0,_maddn__WEBPACK_IMPORTED_MODULE_0__.maddN2)(out, rayDir, dist, rayOrigin);
/**
 * 3D version of {@link pointOnRay}.
 *
 * @param out -
 * @param rayOrigin -
 * @param rayDir -
 * @param dist -
 */
const pointOnRay3 = (out, rayOrigin, rayDir, dist) => (0,_maddn__WEBPACK_IMPORTED_MODULE_0__.maddN3)(out, rayDir, dist, rayOrigin);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/polar.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/polar.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "polar": () => (/* binding */ polar),
/* harmony export */   "polar2": () => (/* binding */ polar2),
/* harmony export */   "polar3": () => (/* binding */ polar3)
/* harmony export */ });
/* harmony import */ var _internal_vop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/vop */ "./node_modules/@thi.ng/vectors/internal/vop.js");
/* harmony import */ var _mag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mag */ "./node_modules/@thi.ng/vectors/mag.js");
/* harmony import */ var _setc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./setc */ "./node_modules/@thi.ng/vectors/setc.js");



const sqrt = Math.sqrt;
const asin = Math.asin;
const atan2 = Math.atan2;
/**
 * Converts cartesian vector `v` to polar coordinates. See {@link cartesian}
 * for reverse operation. If `out` is null, modifies `v` in place.
 *
 * @param out -
 * @param v -
 */
const polar = (0,_internal_vop__WEBPACK_IMPORTED_MODULE_0__.vop)(1);
/**
 * Converts 2D cartesian vector `v` to polar coordinates, i.e. `[r,θ]`
 * (angle in radians). See {@link cartesian} for reverse operation. If `out`
 * is null, modifies `v` in place.
 *
 * @param out -
 * @param v -
 */
const polar2 = polar.add(2, (out, a) => (0,_setc__WEBPACK_IMPORTED_MODULE_1__.setC2)(out || a, (0,_mag__WEBPACK_IMPORTED_MODULE_2__.mag)(a), atan2(a[1], a[0])));
/**
 * Converts 3D cartesian vector `v` to spherical coordinates, i.e.
 * `[r,θ,ϕ]` (angles in radians). See {@link cartesian} for reverse
 * operation. If `out` is null, modifies `v` in place.
 *
 * @param out -
 * @param v -
 */
const polar3 = polar.add(3, (out, a) => {
    const x = a[0];
    const y = a[1];
    const z = a[2];
    const r = sqrt(x * x + y * y + z * z);
    return (0,_setc__WEBPACK_IMPORTED_MODULE_1__.setC3)(out || a, r, asin(z / r), atan2(y, x));
});


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/pow.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/pow.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pow": () => (/* binding */ pow),
/* harmony export */   "pow2": () => (/* binding */ pow2),
/* harmony export */   "pow3": () => (/* binding */ pow3),
/* harmony export */   "pow4": () => (/* binding */ pow4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [pow, pow2, pow3, pow4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.FN2)("Math.pow"));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/pown.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/pown.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "powN": () => (/* binding */ powN),
/* harmony export */   "powN2": () => (/* binding */ powN2),
/* harmony export */   "powN3": () => (/* binding */ powN3),
/* harmony export */   "powN4": () => (/* binding */ powN4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [powN, powN2, powN3, powN4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.FN_N)("Math.pow"), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VN);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/project.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/project.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "project": () => (/* binding */ project)
/* harmony export */ });
/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dot */ "./node_modules/@thi.ng/vectors/dot.js");
/* harmony import */ var _magsq__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./magsq */ "./node_modules/@thi.ng/vectors/magsq.js");
/* harmony import */ var _muln__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./muln */ "./node_modules/@thi.ng/vectors/muln.js");



/**
 * Returns vector projection of `v` onto `dir`.
 *
 * {@link https://en.wikipedia.org/wiki/Vector_projection}
 *
 * @param v -
 * @param dir -
 */
const project = (out, v, dir) => (0,_muln__WEBPACK_IMPORTED_MODULE_0__.mulN)(out || v, dir, (0,_dot__WEBPACK_IMPORTED_MODULE_1__.dot)(v, dir) / (0,_magsq__WEBPACK_IMPORTED_MODULE_2__.magSq)(dir));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/radians.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/radians.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "radians": () => (/* binding */ radians),
/* harmony export */   "radians2": () => (/* binding */ radians2),
/* harmony export */   "radians3": () => (/* binding */ radians3),
/* harmony export */   "radians4": () => (/* binding */ radians4)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/angle.js");
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");



const [radians, radians2, radians3, radians4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.rad, (0,_internal_templates__WEBPACK_IMPORTED_MODULE_2__.FN)("op"));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/random.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/random.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "random": () => (/* binding */ random),
/* harmony export */   "random2": () => (/* binding */ random2),
/* harmony export */   "random3": () => (/* binding */ random3),
/* harmony export */   "random4": () => (/* binding */ random4),
/* harmony export */   "randNorm": () => (/* binding */ randNorm),
/* harmony export */   "randMinMax": () => (/* binding */ randMinMax),
/* harmony export */   "randMinMax2": () => (/* binding */ randMinMax2),
/* harmony export */   "randMinMax3": () => (/* binding */ randMinMax3),
/* harmony export */   "randMinMax4": () => (/* binding */ randMinMax4)
/* harmony export */ });
/* harmony import */ var _thi_ng_random__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/random */ "./node_modules/@thi.ng/random/system.js");
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _normalize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./normalize */ "./node_modules/@thi.ng/vectors/normalize.js");



/**
 * Sets `v` to random vector, with each component in interval `[n..m)`.
 * If no `rnd` instance is given, uses {@link @thi.ng/random#SYSTEM},
 * i.e. `Math.random`.
 * Creates new vector if `v` is null.
 *
 * @param v -
 * @param n - default -1
 * @param m - default 1
 * @param rnd -
 */
const [random, random2, random3, random4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_random__WEBPACK_IMPORTED_MODULE_1__.SYSTEM, ([a]) => `${a}=rnd.minmax(n,m);`, "a,n=-1,m=1,rnd=op", "a", "a", 0, "!a && (a=[]);");
/**
 * Sets `v` to random vector, normalized to length `n` (default: 1). If
 * no `rnd` instance is given, uses {@link @thi.ng/random#SYSTEM}, i.e.
 * `Math.random`.
 *
 * @param v -
 * @param n -
 * @param rnd -
 */
const randNorm = (v, n = 1, rnd = _thi_ng_random__WEBPACK_IMPORTED_MODULE_1__.SYSTEM) => (0,_normalize__WEBPACK_IMPORTED_MODULE_2__.normalize)((v = random(v, -1, 1, rnd)), v, n);
/**
 * Sets `out` to random vector with each component in the semi-open
 * interval defined by [min,max).
 *
 * @param out -
 * @param min -
 * @param max -
 * @param rnd -
 */
const [randMinMax, randMinMax2, randMinMax3, randMinMax4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_random__WEBPACK_IMPORTED_MODULE_1__.SYSTEM, ([o, a, b]) => `${o}=rnd.minmax(${a},${b});`, "o,a,b,rnd=op", "o,a,b");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/randoms.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/randoms.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "randomS2": () => (/* binding */ randomS2),
/* harmony export */   "randomS3": () => (/* binding */ randomS3),
/* harmony export */   "randomS4": () => (/* binding */ randomS4),
/* harmony export */   "randNormS2": () => (/* binding */ randNormS2),
/* harmony export */   "randNormS3": () => (/* binding */ randNormS3),
/* harmony export */   "randNormS4": () => (/* binding */ randNormS4),
/* harmony export */   "randMinMaxS2": () => (/* binding */ randMinMaxS2),
/* harmony export */   "randMinMaxS3": () => (/* binding */ randMinMaxS3),
/* harmony export */   "randMinMaxS4": () => (/* binding */ randMinMaxS4)
/* harmony export */ });
/* harmony import */ var _thi_ng_random__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/random */ "./node_modules/@thi.ng/random/system.js");
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _normalizes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./normalizes */ "./node_modules/@thi.ng/vectors/normalizes.js");



/**
 * Randomizes `v` with each component in interval `[n..m)`. If no `rnd`
 * instance is given, uses {@link @thi.ng/random#SYSTEM}, i.e.
 * `Math.random`.
 *
 * @param v -
 * @param n - default -1
 * @param m - default 1
 * @param rnd -
 * @param ia -
 * @param sa -
 */
const [randomS2, randomS3, randomS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOpS)(_thi_ng_random__WEBPACK_IMPORTED_MODULE_1__.SYSTEM, ([a]) => `${a}=rnd.minmax(n,m);`, "a,n=-1,m=1,rnd=op,ia=0,sa=1", "a", "a", "!a && (a=[]);");
const $norm = (normalize, random) => (a, n = 1, rnd, ia = 0, sa = 1) => normalize((a = random(a, -1, 1, rnd, ia, sa)), a, n, ia, ia, sa, sa);
/**
 * Sets `v` to random vector, normalized to length `n` (default: 1). If
 * no `rnd` instance is given, uses {@link @thi.ng/random#SYSTEM}, i.e.
 * `Math.random`.
 *
 * @param v -
 * @param n -
 * @param rnd -
 */
const randNormS2 = $norm(_normalizes__WEBPACK_IMPORTED_MODULE_2__.normalizeS2, randomS2);
const randNormS3 = $norm(_normalizes__WEBPACK_IMPORTED_MODULE_2__.normalizeS3, randomS3);
const randNormS4 = $norm(_normalizes__WEBPACK_IMPORTED_MODULE_2__.normalizeS4, randomS4);
/**
 * Sets `out` to random vector with each component in the semi-open
 * interval defined by [min,max).
 *
 * @param out -
 * @param min -
 * @param max -
 * @param rnd -
 */
const [randMinMaxS2, randMinMaxS3, randMinMaxS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOpS)(_thi_ng_random__WEBPACK_IMPORTED_MODULE_1__.SYSTEM, ([o, a, b]) => `${o}=rnd.minmax(${a},${b});`, `o,a,b,rnd=op,${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.SARGS_VV}`, "o,a,b");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/reflect.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/reflect.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reflect": () => (/* binding */ reflect)
/* harmony export */ });
/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dot */ "./node_modules/@thi.ng/vectors/dot.js");
/* harmony import */ var _maddn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./maddn */ "./node_modules/@thi.ng/vectors/maddn.js");


const reflect = (out, a, b) => (0,_maddn__WEBPACK_IMPORTED_MODULE_0__.maddN)(out || a, b, -2 * (0,_dot__WEBPACK_IMPORTED_MODULE_1__.dot)(a, b), a);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/refract.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/refract.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "refract": () => (/* binding */ refract)
/* harmony export */ });
/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dot */ "./node_modules/@thi.ng/vectors/dot.js");
/* harmony import */ var _maddn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./maddn */ "./node_modules/@thi.ng/vectors/maddn.js");
/* harmony import */ var _muln__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./muln */ "./node_modules/@thi.ng/vectors/muln.js");
/* harmony import */ var _setn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./setn */ "./node_modules/@thi.ng/vectors/setn.js");




const refract = (out, a, n, eta) => {
    !out && (out = a);
    const d = (0,_dot__WEBPACK_IMPORTED_MODULE_0__.dot)(a, n);
    const k = 1 - eta * eta * (1 - d * d);
    return k < 0
        ? (0,_setn__WEBPACK_IMPORTED_MODULE_1__.zero)(out)
        : (0,_maddn__WEBPACK_IMPORTED_MODULE_2__.maddN)(out, n, -(eta * d + Math.sqrt(k)), (0,_muln__WEBPACK_IMPORTED_MODULE_3__.mulN)(out, a, eta));
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/rotate-around-axis.js":
/*!************************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/rotate-around-axis.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rotateAroundAxis3": () => (/* binding */ rotateAroundAxis3)
/* harmony export */ });
/* harmony import */ var _setc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setc */ "./node_modules/@thi.ng/vectors/setc.js");

const rotateAroundAxis3 = (out, v, axis, theta) => {
    const x = v[0];
    const y = v[1];
    const z = v[2];
    const ax = axis[0];
    const ay = axis[1];
    const az = axis[2];
    const ux = ax * x;
    const uy = ax * y;
    const uz = ax * z;
    const vx = ay * x;
    const vy = ay * y;
    const vz = ay * z;
    const wx = az * x;
    const wy = az * y;
    const wz = az * z;
    const uvw = ux + vy + wz;
    const s = Math.sin(theta);
    const c = Math.cos(theta);
    return (0,_setc__WEBPACK_IMPORTED_MODULE_0__.setC3)(out || v, ax * uvw +
        (x * (ay * ay + az * az) - ax * (vy + wz)) * c +
        (-wy + vz) * s, ay * uvw +
        (y * (ax * ax + az * az) - ay * (ux + wz)) * c +
        (wx - uz) * s, az * uvw +
        (z * (ax * ax + ay * ay) - az * (ux + vy)) * c +
        (-vx + uy) * s);
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/rotate-around-point.js":
/*!*************************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/rotate-around-point.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rotateAroundPoint2": () => (/* binding */ rotateAroundPoint2)
/* harmony export */ });
/* harmony import */ var _setc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setc */ "./node_modules/@thi.ng/vectors/setc.js");

const rotateAroundPoint2 = (out, v, p, theta) => {
    const x = v[0] - p[0];
    const y = v[1] - p[1];
    const s = Math.sin(theta);
    const c = Math.cos(theta);
    return (0,_setc__WEBPACK_IMPORTED_MODULE_0__.setC2)(out || v, x * c - y * s + p[0], x * s + y * c + p[1]);
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/rotate.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/rotate.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rotateX": () => (/* binding */ rotateX),
/* harmony export */   "rotateY": () => (/* binding */ rotateY),
/* harmony export */   "rotateZ": () => (/* binding */ rotateZ),
/* harmony export */   "rotate": () => (/* binding */ rotate)
/* harmony export */ });
/* harmony import */ var _set__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./set */ "./node_modules/@thi.ng/vectors/set.js");

const _rotate = (u, v) => (out, a, theta) => {
    out ? out !== a && (0,_set__WEBPACK_IMPORTED_MODULE_0__.set)(out, a) : (out = a);
    const s = Math.sin(theta);
    const c = Math.cos(theta);
    const x = a[u];
    const y = a[v];
    out[u] = x * c - y * s;
    out[v] = x * s + y * c;
    return out;
};
const rotateX = _rotate(1, 2);
const rotateY = _rotate(2, 0);
const rotateZ = _rotate(0, 1);
/**
 * Alias for {@link rotateZ} (e.g. for 2D use cases)
 */
const rotate = rotateZ;


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/rotates.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/rotates.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rotateS2": () => (/* binding */ rotateS2),
/* harmony export */   "rotateXS3": () => (/* binding */ rotateXS3),
/* harmony export */   "rotateYS3": () => (/* binding */ rotateYS3),
/* harmony export */   "rotateZS3": () => (/* binding */ rotateZS3)
/* harmony export */ });
/* harmony import */ var _sets__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sets */ "./node_modules/@thi.ng/vectors/sets.js");

const _rotate = (set, u, v) => (out, a, theta, io = 0, ia = 0, so = 1, sa = 1) => {
    out ? out !== a && set(out, a, io, ia, so, sa) : (out = a);
    const s = Math.sin(theta);
    const c = Math.cos(theta);
    const x = a[ia + u * sa];
    const y = a[ia + v * sa];
    out[io + u * so] = x * c - y * s;
    out[io + v * so] = x * s + y * c;
    return out;
};
const rotateS2 = _rotate(_sets__WEBPACK_IMPORTED_MODULE_0__.setS2, 0, 1);
const rotateXS3 = _rotate(_sets__WEBPACK_IMPORTED_MODULE_0__.setS3, 1, 2);
const rotateYS3 = _rotate(_sets__WEBPACK_IMPORTED_MODULE_0__.setS3, 2, 0);
const rotateZS3 = _rotate(_sets__WEBPACK_IMPORTED_MODULE_0__.setS3, 0, 1);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/round.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/round.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "round": () => (/* binding */ round),
/* harmony export */   "round2": () => (/* binding */ round2),
/* harmony export */   "round3": () => (/* binding */ round3),
/* harmony export */   "round4": () => (/* binding */ round4),
/* harmony export */   "roundN": () => (/* binding */ roundN),
/* harmony export */   "roundN2": () => (/* binding */ roundN2),
/* harmony export */   "roundN3": () => (/* binding */ roundN3),
/* harmony export */   "roundN4": () => (/* binding */ roundN4)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/prec.js");
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");



/**
 * Rounds components of the first input to multiples of the 2nd input vector.
 *
 * @remarks
 * Unitl v4.8.0 errorneously defined what should have been {@link roundN}. Now
 * correctly using 2 input vectors.
 */
const [round, round2, round3, round4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.roundTo, (0,_internal_templates__WEBPACK_IMPORTED_MODULE_2__.FN2)("op"), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VV);
/**
 * Similar to {@link round}, but only uses a single scalar to round all vector
 * components.
 */
const [roundN, roundN2, roundN3, roundN4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.roundTo, (0,_internal_templates__WEBPACK_IMPORTED_MODULE_2__.FN_N)("op"), "o,a,n=1", "o,a");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/rshift.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/rshift.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rshiftI": () => (/* binding */ rshiftI),
/* harmony export */   "rshiftI2": () => (/* binding */ rshiftI2),
/* harmony export */   "rshiftI3": () => (/* binding */ rshiftI3),
/* harmony export */   "rshiftI4": () => (/* binding */ rshiftI4),
/* harmony export */   "rshiftU": () => (/* binding */ rshiftU),
/* harmony export */   "rshiftU2": () => (/* binding */ rshiftU2),
/* harmony export */   "rshiftU3": () => (/* binding */ rshiftU3),
/* harmony export */   "rshiftU4": () => (/* binding */ rshiftU4),
/* harmony export */   "rshiftNI": () => (/* binding */ rshiftNI),
/* harmony export */   "rshiftNI2": () => (/* binding */ rshiftNI2),
/* harmony export */   "rshiftNI3": () => (/* binding */ rshiftNI3),
/* harmony export */   "rshiftNI4": () => (/* binding */ rshiftNI4),
/* harmony export */   "rshiftNU": () => (/* binding */ rshiftNU),
/* harmony export */   "rshiftNU2": () => (/* binding */ rshiftNU2),
/* harmony export */   "rshiftNU3": () => (/* binding */ rshiftNU3),
/* harmony export */   "rshiftNU4": () => (/* binding */ rshiftNU4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [rshiftI, rshiftI2, rshiftI3, rshiftI4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOp)(">>", true);
const [rshiftU, rshiftU2, rshiftU3, rshiftU4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOp)(">>>");
// prettier-ignore
const [rshiftNI, rshiftNI2, rshiftNI3, rshiftNI4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOpN)(">>", true);
const [rshiftNU, rshiftNU2, rshiftNU3, rshiftNU4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOpN)(">>>");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/safe-div.js":
/*!**************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/safe-div.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "safeDiv": () => (/* binding */ safeDiv),
/* harmony export */   "safeDiv2": () => (/* binding */ safeDiv2),
/* harmony export */   "safeDiv3": () => (/* binding */ safeDiv3),
/* harmony export */   "safeDiv4": () => (/* binding */ safeDiv4)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/safe-div.js");
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");



/**
 * Componentwise application of {@link @thi.ng/math#safeDiv}.
 *
 * @param out -
 * @param a -
 * @param b -
 */
const [safeDiv, safeDiv2, safeDiv3, safeDiv4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.safeDiv, (0,_internal_templates__WEBPACK_IMPORTED_MODULE_2__.FN2)("op"), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VV);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/set.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/set.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "set": () => (/* binding */ set),
/* harmony export */   "set2": () => (/* binding */ set2),
/* harmony export */   "set3": () => (/* binding */ set3),
/* harmony export */   "set4": () => (/* binding */ set4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [set, set2, set3, set4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)(_internal_templates__WEBPACK_IMPORTED_MODULE_1__.SET, "o,a", undefined, "o", 1, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.NEW_OUT);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/setc.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/setc.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setC2": () => (/* binding */ setC2),
/* harmony export */   "setC3": () => (/* binding */ setC3),
/* harmony export */   "setC4": () => (/* binding */ setC4),
/* harmony export */   "setC6": () => (/* binding */ setC6),
/* harmony export */   "setC": () => (/* binding */ setC)
/* harmony export */ });
const setC2 = (out, x, y) => (!out && (out = []), (out[0] = x), (out[1] = y), out);
const setC3 = (out, x, y, z) => (!out && (out = []), (out[0] = x), (out[1] = y), (out[2] = z), out);
const setC4 = (out, x, y, z, w) => (!out && (out = []),
    (out[0] = x),
    (out[1] = y),
    (out[2] = z),
    (out[3] = w),
    out);
const setC6 = (out, a, b, c, d, e, f) => (!out && (out = []),
    (out[0] = a),
    (out[1] = b),
    (out[2] = c),
    (out[3] = d),
    (out[4] = e),
    (out[5] = f),
    out);
const setC = (out, ...xs) => {
    !out && (out = []);
    for (let i = 0, n = xs.length; i < n; i++) {
        out[i] = xs[i];
    }
    return out;
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/setcs.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/setcs.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setCS2": () => (/* binding */ setCS2),
/* harmony export */   "setCS3": () => (/* binding */ setCS3),
/* harmony export */   "setCS4": () => (/* binding */ setCS4)
/* harmony export */ });
const setCS2 = (out, x, y, io = 0, so = 1) => (!out && (out = []), (out[io] = x), (out[io + so] = y), out);
const setCS3 = (out, x, y, z, io = 0, so = 1) => (!out && (out = []),
    (out[io] = x),
    (out[io + so] = y),
    (out[io + 2 * so] = z),
    out);
const setCS4 = (out, x, y, z, w, io = 0, so = 1) => (!out && (out = []),
    (out[io] = x),
    (out[io + so] = y),
    (out[io + 2 * so] = z),
    (out[io + 3 * so] = w),
    out);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/setn.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/setn.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setN": () => (/* binding */ setN),
/* harmony export */   "setN2": () => (/* binding */ setN2),
/* harmony export */   "setN3": () => (/* binding */ setN3),
/* harmony export */   "setN4": () => (/* binding */ setN4),
/* harmony export */   "zero": () => (/* binding */ zero),
/* harmony export */   "one": () => (/* binding */ one),
/* harmony export */   "zeroes": () => (/* binding */ zeroes),
/* harmony export */   "ones": () => (/* binding */ ones)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [setN, setN2, setN3, setN4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)(_internal_templates__WEBPACK_IMPORTED_MODULE_1__.SET_N, "a,n", "a", "a", 0, "");
const zero = (a) => setN(a, 0);
const one = (a) => setN(a, 1);
const zeroes = (n) => new Array(n).fill(0);
const ones = (n) => new Array(n).fill(1);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/setns.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/setns.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setNS2": () => (/* binding */ setNS2),
/* harmony export */   "setNS3": () => (/* binding */ setNS3),
/* harmony export */   "setNS4": () => (/* binding */ setNS4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [setNS2, setNS3, setNS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOpS)(_internal_templates__WEBPACK_IMPORTED_MODULE_1__.SET_N, "o,n,io=0,so=1", "o", "o", "");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/sets.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/sets.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setS2": () => (/* binding */ setS2),
/* harmony export */   "setS3": () => (/* binding */ setS3),
/* harmony export */   "setS4": () => (/* binding */ setS4),
/* harmony export */   "setS": () => (/* binding */ setS)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [setS2, setS3, setS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOpS)(_internal_templates__WEBPACK_IMPORTED_MODULE_1__.SET, `o,a,${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.SARGS_V}`, "o,a", "o", _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.NEW_OUT);
const setS = (out, a, n, io = 0, ia = 0, so = 1, sa = 1) => {
    for (let i = 0; i < n; i++) {
        out[io + i * so] = a[ia + i * sa];
    }
    return out;
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/setvn.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/setvn.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setVN3": () => (/* binding */ setVN3),
/* harmony export */   "setVN4": () => (/* binding */ setVN4)
/* harmony export */ });
/* harmony import */ var _setc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setc */ "./node_modules/@thi.ng/vectors/setc.js");

/**
 * Sets `out` to `[a.x, a.y, n]`
 *
 * @param out -
 * @param a -
 * @param n -
 */
const setVN3 = (out, a, n) => (0,_setc__WEBPACK_IMPORTED_MODULE_0__.setC3)(out, a[0], a[1], n);
/**
 * Sets `out` to `[a.x, a.y, a.z, n]`
 *
 * @param out -
 * @param a -
 * @param n -
 */
const setVN4 = (out, a, n) => (0,_setc__WEBPACK_IMPORTED_MODULE_0__.setC4)(out, a[0], a[1], a[2], n);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/setvv.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/setvv.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setVV4": () => (/* binding */ setVV4),
/* harmony export */   "setVV6": () => (/* binding */ setVV6),
/* harmony export */   "setVV9": () => (/* binding */ setVV9),
/* harmony export */   "setVV16": () => (/* binding */ setVV16)
/* harmony export */ });
/* harmony import */ var _setc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setc */ "./node_modules/@thi.ng/vectors/setc.js");

/**
 * Sets `out` to `[a.x, a.y, b.x, b.y]`
 *
 * @param out -
 * @param a -
 * @param b -
 */
const setVV4 = (out, a, b) => (0,_setc__WEBPACK_IMPORTED_MODULE_0__.setC4)(out, a[0], a[1], b[0], b[1]);
/**
 * Sets `out` to `[a.x, a.y, b.x, b.y, c.x, c.y]`
 *
 * @param out -
 * @param a -
 * @param b -
 * @param c -
 */
const setVV6 = (out, a, b, c) => (0,_setc__WEBPACK_IMPORTED_MODULE_0__.setC6)(out, a[0], a[1], b[0], b[1], c[0], c[1]);
/**
 * Sets `out` to:
 * `[a.x, a.y, a.z, b.x, b.y, b.z, c.x, c.y, c.z]`
 *
 * @param out -
 * @param a -
 * @param b -
 * @param c -
 */
const setVV9 = (out, a, b, c) => (0,_setc__WEBPACK_IMPORTED_MODULE_0__.setC)(out, a[0], a[1], a[2], b[0], b[1], b[2], c[0], c[1], c[2]);
/**
 * Sets `out` to concatenation of `a`, `b`, `c`, `d`:
 *
 * @example
 * ```ts
 * [a.x, a.y, a.z, a.w, b.x, b.y, b.z, b.w,
 *  c.x, c.y, c.z, c.w, d.x, d.y, d.z, d.w]
 * ```
 *
 * @param out -
 * @param a -
 * @param b -
 * @param c -
 */
const setVV16 = (out, a, b, c, d) => (0,_setc__WEBPACK_IMPORTED_MODULE_0__.setC)(out, a[0], a[1], a[2], a[3], b[0], b[1], b[2], b[3], c[0], c[1], c[2], c[3], d[0], d[1], d[2], d[3]);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/sign.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/sign.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sign": () => (/* binding */ sign),
/* harmony export */   "sign2": () => (/* binding */ sign2),
/* harmony export */   "sign3": () => (/* binding */ sign3),
/* harmony export */   "sign4": () => (/* binding */ sign4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [sign, sign2, sign3, sign4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("Math.sign");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/signed-area.js":
/*!*****************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/signed-area.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "signedArea2": () => (/* binding */ signedArea2),
/* harmony export */   "signedAreaC2": () => (/* binding */ signedAreaC2)
/* harmony export */ });
/**
 * Returns 2x the signed area of the 2D triangle defined by the given points.
 *
 * @remarks
 * This is a useful classifier for many geometry processing tasks. In addition
 * to the triangle area, the result can also be interpreted as follows:
 *
 * - `> 0`: points are ordered counterclockwise
 * - `< 0`: points are ordered clockwise
 * - `0`: points are co-linear
 *
 * Functionally same as: `cross2(sub2([], b, a), sub2([], c, a))`
 *
 * - {@link corner2}
 * - {@link clockwise2}
 * - {@link cross2}
 *
 * @param a -
 * @param b -
 * @param c -
 */
const signedArea2 = (a, b, c) => {
    const ax = a[0];
    const ay = a[1];
    return (b[0] - ax) * (c[1] - ay) - (c[0] - ax) * (b[1] - ay);
};
/**
 * Same as {@link signedArea2}, but expects individual vector component args,
 * instead of vectors.
 *
 * @param ax -
 * @param ay -
 * @param bx -
 * @param by -
 * @param cx -
 * @param cy -
 */
const signedAreaC2 = (ax, ay, bx, by, cx, cy) => (bx - ax) * (cy - ay) - (cx - ax) * (by - ay);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/signed-volume.js":
/*!*******************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/signed-volume.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "signedVolume": () => (/* binding */ signedVolume)
/* harmony export */ });
/**
 * Returns 6x the signed volume of the tetrahedron defined by given 3D points.
 *
 * @remarks
 * Returns positive or negative value if `d` lies below/above the plane defined
 * by a,b,c respectively (where "below" is defined such that a,b,c are
 * counterclockwise if viewed from above). Returns zero if all points are
 * coplanar.
 *
 * Based on code by Jonathan R. Shewchuk
 * http://www.cs.cmu.edu/afs/cs/project/quake/public/code/predicates.c
 *
 * @param a
 * @param b
 * @param c
 * @param d
 */
const signedVolume = (a, b, c, [dx, dy, dz]) => {
    const ady = a[1] - dy;
    const bdy = b[1] - dy;
    const cdy = c[1] - dy;
    const adz = a[2] - dz;
    const bdz = b[2] - dz;
    const cdz = c[2] - dz;
    return ((a[0] - dx) * (bdy * cdz - bdz * cdy) +
        (b[0] - dx) * (cdy * adz - cdz * ady) +
        (c[0] - dx) * (ady * bdz - adz * bdy));
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/sin.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/sin.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sin": () => (/* binding */ sin),
/* harmony export */   "sin2": () => (/* binding */ sin2),
/* harmony export */   "sin3": () => (/* binding */ sin3),
/* harmony export */   "sin4": () => (/* binding */ sin4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [sin, sin2, sin3, sin4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("Math.sin");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/sinh.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/sinh.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sinh": () => (/* binding */ sinh),
/* harmony export */   "sinh2": () => (/* binding */ sinh2),
/* harmony export */   "sinh3": () => (/* binding */ sinh3),
/* harmony export */   "sinh4": () => (/* binding */ sinh4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [sinh, sinh2, sinh3, sinh4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("Math.sinh");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/smoothstep.js":
/*!****************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/smoothstep.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "smoothStep": () => (/* binding */ smoothStep),
/* harmony export */   "smoothStep2": () => (/* binding */ smoothStep2),
/* harmony export */   "smoothStep3": () => (/* binding */ smoothStep3),
/* harmony export */   "smoothStep4": () => (/* binding */ smoothStep4)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/step.js");
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");



/**
 * Like GLSL `smoothstep()`
 *
 * @param out -
 * @param e1 -
 * @param e2 -
 * @param v -
 */
const [smoothStep, smoothStep2, smoothStep3, smoothStep4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.smoothStep, (0,_internal_templates__WEBPACK_IMPORTED_MODULE_2__.FN3)(), "o,e1,e2,a", undefined, "o", 3, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_OUT);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/softmax.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/softmax.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "softMax": () => (/* binding */ softMax)
/* harmony export */ });
/* harmony import */ var _divn__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./divn */ "./node_modules/@thi.ng/vectors/divn.js");
/* harmony import */ var _exp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./exp */ "./node_modules/@thi.ng/vectors/exp.js");
/* harmony import */ var _sum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sum */ "./node_modules/@thi.ng/vectors/sum.js");



/**
 * Computes softmax (aka normalized exp) of input vector `src` and writes
 * results to `out` (or if null, back into `src`).
 *
 * @remarks
 * Computes elementwise: `s[i] = exp(src[i]) / sum(exp(src))`. The result
 * vector's elements will sum to 1.0.
 *
 * This function is often used as the last activation function in a neural
 * network to normalize the output to a probability distribution over predicted
 * output classes.
 *
 * References:
 * - https://en.wikipedia.org/wiki/Softmax_function
 * - https://victorzhou.com/blog/softmax/
 *
 * @param out
 * @param src
 */
const softMax = (out, src) => {
    const e = (0,_exp__WEBPACK_IMPORTED_MODULE_0__.exp)([], src);
    return (0,_divn__WEBPACK_IMPORTED_MODULE_1__.divN)(out || src, e, (0,_sum__WEBPACK_IMPORTED_MODULE_2__.sum)(e));
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/some.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/some.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "some": () => (/* binding */ some),
/* harmony export */   "some2": () => (/* binding */ some2),
/* harmony export */   "some3": () => (/* binding */ some3),
/* harmony export */   "some4": () => (/* binding */ some4)
/* harmony export */ });
/* harmony import */ var _internal_vop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/vop */ "./node_modules/@thi.ng/vectors/internal/vop.js");

/**
 * Returns returns true if at least one vector component in `v` is
 * truthy.
 *
 * @param v -
 */
const some = (0,_internal_vop__WEBPACK_IMPORTED_MODULE_0__.vop)();
some.default((v) => {
    for (let i = v.length; --i >= 0;) {
        if (v[i])
            return true;
    }
    return false;
});
const some2 = some.add(2, (a) => a[0] || a[1]);
const some3 = some.add(3, (a) => a[0] || a[1] || a[2]);
const some4 = some.add(4, (a) => a[0] || a[1] || a[2] || a[3]);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/sqrt.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/sqrt.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sqrt": () => (/* binding */ sqrt),
/* harmony export */   "sqrt2": () => (/* binding */ sqrt2),
/* harmony export */   "sqrt3": () => (/* binding */ sqrt3),
/* harmony export */   "sqrt4": () => (/* binding */ sqrt4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [sqrt, sqrt2, sqrt3, sqrt4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("Math.sqrt");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/step.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/step.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "step": () => (/* binding */ step),
/* harmony export */   "step2": () => (/* binding */ step2),
/* harmony export */   "step3": () => (/* binding */ step3),
/* harmony export */   "step4": () => (/* binding */ step4)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/step.js");
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");



/**
 * Like GLSL `step()`
 *
 * @param out -
 * @param e -
 * @param v -
 */
const [step, step2, step3, step4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.step, (0,_internal_templates__WEBPACK_IMPORTED_MODULE_2__.FN2)("op"), "o,e,a", undefined, "o", 2, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_OUT);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/sub.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/sub.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sub": () => (/* binding */ sub),
/* harmony export */   "sub2": () => (/* binding */ sub2),
/* harmony export */   "sub3": () => (/* binding */ sub3),
/* harmony export */   "sub4": () => (/* binding */ sub4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [sub, sub2, sub3, sub4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defMathOp)("-");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/subi.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/subi.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "subI": () => (/* binding */ subI),
/* harmony export */   "subI2": () => (/* binding */ subI2),
/* harmony export */   "subI3": () => (/* binding */ subI3),
/* harmony export */   "subI4": () => (/* binding */ subI4),
/* harmony export */   "subU": () => (/* binding */ subU),
/* harmony export */   "subU2": () => (/* binding */ subU2),
/* harmony export */   "subU3": () => (/* binding */ subU3),
/* harmony export */   "subU4": () => (/* binding */ subU4),
/* harmony export */   "subNI": () => (/* binding */ subNI),
/* harmony export */   "subNI2": () => (/* binding */ subNI2),
/* harmony export */   "subNI3": () => (/* binding */ subNI3),
/* harmony export */   "subNI4": () => (/* binding */ subNI4),
/* harmony export */   "subNU": () => (/* binding */ subNU),
/* harmony export */   "subNU2": () => (/* binding */ subNU2),
/* harmony export */   "subNU3": () => (/* binding */ subNU3),
/* harmony export */   "subNU4": () => (/* binding */ subNU4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [subI, subI2, subI3, subI4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOp)("-", true);
const [subU, subU2, subU3, subU4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOp)("-");
const [subNI, subNI2, subNI3, subNI4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOpN)("-", true);
const [subNU, subNU2, subNU3, subNU4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defBitOpN)("-");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/subm.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/subm.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "subm": () => (/* binding */ subm),
/* harmony export */   "subm2": () => (/* binding */ subm2),
/* harmony export */   "subm3": () => (/* binding */ subm3),
/* harmony export */   "subm4": () => (/* binding */ subm4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


/**
 * Returns `out = (a - b) * c`.
 *
 * - {@link madd}
 * - {@link addm}
 */
const [subm, subm2, subm3, subm4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH2)("-", "*"), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/submn.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/submn.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "submN": () => (/* binding */ submN),
/* harmony export */   "submN2": () => (/* binding */ submN2),
/* harmony export */   "submN3": () => (/* binding */ submN3),
/* harmony export */   "submN4": () => (/* binding */ submN4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


/**
 * Returns `out = (a - b) * n`.
 */
const [submN, submN2, submN3, submN4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOp)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH2_N)("-", "*"), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVN);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/submns.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/submns.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "submNS2": () => (/* binding */ submNS2),
/* harmony export */   "submNS3": () => (/* binding */ submNS3),
/* harmony export */   "submNS4": () => (/* binding */ submNS4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [submNS2, submNS3, submNS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOpS)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH2_N)("-", "*"), `${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVN},${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.SARGS_VV}`);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/subms.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/subms.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "submS2": () => (/* binding */ submS2),
/* harmony export */   "submS3": () => (/* binding */ submS3),
/* harmony export */   "submS4": () => (/* binding */ submS4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [submS2, submS3, submS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOpS)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH2)("-", "*"), `${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV},${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.SARGS_VVV}`, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/subn.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/subn.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "subN": () => (/* binding */ subN),
/* harmony export */   "subN2": () => (/* binding */ subN2),
/* harmony export */   "subN3": () => (/* binding */ subN3),
/* harmony export */   "subN4": () => (/* binding */ subN4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [subN, subN2, subN3, subN4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defMathOpN)("-");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/subns.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/subns.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "subNS2": () => (/* binding */ subNS2),
/* harmony export */   "subNS3": () => (/* binding */ subNS3),
/* harmony export */   "subNS4": () => (/* binding */ subNS4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [subNS2, subNS3, subNS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOpS)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH_N)("-"), `${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VN},${_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.SARGS_V}`, _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_V);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/subs.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/subs.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "subS2": () => (/* binding */ subS2),
/* harmony export */   "subS3": () => (/* binding */ subS3),
/* harmony export */   "subS4": () => (/* binding */ subS4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");


const [subS2, subS3, subS4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defOpS)((0,_internal_templates__WEBPACK_IMPORTED_MODULE_1__.MATH)("-"));


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/sum.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/sum.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "sum": () => (/* binding */ sum),
/* harmony export */   "sum2": () => (/* binding */ sum2),
/* harmony export */   "sum3": () => (/* binding */ sum3),
/* harmony export */   "sum4": () => (/* binding */ sum4)
/* harmony export */ });
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/reduce.js");
/* harmony import */ var _thi_ng_transducers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/rfn/add.js");
/* harmony import */ var _internal_vop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/vop */ "./node_modules/@thi.ng/vectors/internal/vop.js");


/**
 * Returns component sum of vector `v`.
 *
 * @param v -
 */
const sum = (0,_internal_vop__WEBPACK_IMPORTED_MODULE_0__.vop)();
sum.default((v) => (0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_1__.reduce)((0,_thi_ng_transducers__WEBPACK_IMPORTED_MODULE_2__.add)(), v));
const sum2 = sum.add(2, (a) => a[0] + a[1]);
const sum3 = sum.add(3, (a) => a[0] + a[1] + a[2]);
const sum4 = sum.add(4, (a) => a[0] + a[1] + a[2] + a[3]);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/swizzle.js":
/*!*************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/swizzle.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "swizzle2": () => (/* binding */ swizzle2),
/* harmony export */   "swizzle3": () => (/* binding */ swizzle3),
/* harmony export */   "swizzle4": () => (/* binding */ swizzle4),
/* harmony export */   "swapXY": () => (/* binding */ swapXY),
/* harmony export */   "swapXZ": () => (/* binding */ swapXZ),
/* harmony export */   "swapYZ": () => (/* binding */ swapYZ),
/* harmony export */   "setSwizzle1": () => (/* binding */ setSwizzle1),
/* harmony export */   "setSwizzle2": () => (/* binding */ setSwizzle2),
/* harmony export */   "setSwizzle3": () => (/* binding */ setSwizzle3),
/* harmony export */   "setSwizzle4": () => (/* binding */ setSwizzle4)
/* harmony export */ });
/* harmony import */ var _setc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setc */ "./node_modules/@thi.ng/vectors/setc.js");

/**
 * Places a re-ordered 2D version of vector `a` into `out`. The given
 * coord indices must be valid for `a`. No bounds checking.
 *
 * @param out -
 * @param a -
 * @param x - new x coord index
 * @param y - new y coord index
 */
const swizzle2 = (out, a, x, y) => (0,_setc__WEBPACK_IMPORTED_MODULE_0__.setC2)(out || a, a[x] || 0, a[y] || 0);
/**
 * Places a re-ordered 3D version of vector `a` into `out`. The given
 * coord indices must be valid for `a`. No bounds checking.
 *
 * @param out -
 * @param a -
 * @param x - new x coord index
 * @param y - new y coord index
 * @param z - new z coord index
 */
const swizzle3 = (out, a, x, y, z) => (0,_setc__WEBPACK_IMPORTED_MODULE_0__.setC3)(out || a, a[x] || 0, a[y] || 0, a[z] || 0);
/**
 * Places a re-ordered 4D version of vector `a` into `out`. The given
 * coord indices must be valid for `a`. No bounds checking.
 *
 * @param out -
 * @param a -
 * @param x - new x coord index
 * @param y - new y coord index
 * @param z - new z coord index
 * @param w - new w coord index
 */
const swizzle4 = (out, a, x, y, z, w) => (0,_setc__WEBPACK_IMPORTED_MODULE_0__.setC4)(out || a, a[x] || 0, a[y] || 0, a[z] || 0, a[w] || 0);
const swapXY = (out, v) => swizzle3(out, v, 1, 0, 2);
const swapXZ = (out, v) => swizzle3(out, v, 2, 1, 0);
const swapYZ = (out, v) => swizzle3(out, v, 0, 2, 1);
/**
 * Sets `out[a] = n`, returns `out`.
 *
 * @param out -
 * @param n -
 * @param a -
 */
const setSwizzle1 = (out, n, a) => ((out[a] = n), out);
/**
 * Sets `out[a] = v.x, out[b] = v.y`, returns `out`.
 *
 * @param out -
 * @param v -
 * @param a -
 * @param b -
 */
const setSwizzle2 = (out, v, a, b) => (((out[a] = v[0]), (out[b] = v[1])), out);
/**
 * Sets `out[a] = v.x, out[b] = v.y, out[c] = v.z`, returns `out`.
 *
 * @param out -
 * @param v -
 * @param a -
 * @param b -
 * @param c -
 */
const setSwizzle3 = (out, v, a, b, c) => (((out[a] = v[0]), (out[b] = v[1]), (out[c] = v[2])), out);
/**
 * Sets `out[a] = v.x, out[b] = v.y, out[c] = v.z, out[d]=v.w`, returns `out`.
 *
 * @param out -
 * @param v -
 * @param a -
 * @param b -
 * @param c -
 * @param d -
 */
const setSwizzle4 = (out, v, a, b, c, d) => (((out[a] = v[0]), (out[b] = v[1]), (out[c] = v[2]), (out[d] = v[3])), out);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/tan.js":
/*!*********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/tan.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tan": () => (/* binding */ tan),
/* harmony export */   "tan2": () => (/* binding */ tan2),
/* harmony export */   "tan3": () => (/* binding */ tan3),
/* harmony export */   "tan4": () => (/* binding */ tan4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [tan, tan2, tan3, tan4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("Math.tan");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/tanh.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/tanh.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tanh": () => (/* binding */ tanh),
/* harmony export */   "tanh2": () => (/* binding */ tanh2),
/* harmony export */   "tanh3": () => (/* binding */ tanh3),
/* harmony export */   "tanh4": () => (/* binding */ tanh4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [tanh, tanh2, tanh3, tanh4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("Math.tanh");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/trunc.js":
/*!***********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/trunc.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "trunc": () => (/* binding */ trunc),
/* harmony export */   "trunc2": () => (/* binding */ trunc2),
/* harmony export */   "trunc3": () => (/* binding */ trunc3),
/* harmony export */   "trunc4": () => (/* binding */ trunc4)
/* harmony export */ });
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");

const [trunc, trunc2, trunc3, trunc4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defFnOp)("Math.trunc");


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/vec-of.js":
/*!************************************************!*\
  !*** ./node_modules/@thi.ng/vectors/vec-of.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "vecOf": () => (/* binding */ vecOf),
/* harmony export */   "oneHot": () => (/* binding */ oneHot)
/* harmony export */ });
/**
 * Returns new vector of `size` with all components set to `n` (default: 0).
 *
 * @param size -
 * @param n -
 */
const vecOf = (size, n = 0) => new Array(size).fill(n);
/**
 * Returns new one-hot vector of given `size` with `hot` element index (in
 * `[0..size)` range).
 *
 * @remarks
 * Reference: https://en.wikipedia.org/wiki/One-hot
 *
 * @param size -
 * @param hot -
 */
const oneHot = (size, hot) => {
    const res = vecOf(size);
    res[hot] = 1;
    return res;
};


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/vec2.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/vec2.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Vec2": () => (/* binding */ Vec2),
/* harmony export */   "vec2": () => (/* binding */ vec2),
/* harmony export */   "vec2n": () => (/* binding */ vec2n),
/* harmony export */   "asVec2": () => (/* binding */ asVec2)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/api.js");
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./api */ "./node_modules/@thi.ng/vectors/api.js");
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buffer */ "./node_modules/@thi.ng/vectors/buffer.js");
/* harmony import */ var _eqdelta__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./eqdelta */ "./node_modules/@thi.ng/vectors/eqdelta.js");
/* harmony import */ var _hash__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hash */ "./node_modules/@thi.ng/vectors/hash.js");
/* harmony import */ var _internal_accessors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./internal/accessors */ "./node_modules/@thi.ng/vectors/internal/accessors.js");
/* harmony import */ var _internal_avec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/avec */ "./node_modules/@thi.ng/vectors/internal/avec.js");
/* harmony import */ var _internal_vec_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/vec-utils */ "./node_modules/@thi.ng/vectors/internal/vec-utils.js");
/* harmony import */ var _sets__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sets */ "./node_modules/@thi.ng/vectors/sets.js");









class Vec2 extends _internal_avec__WEBPACK_IMPORTED_MODULE_0__.AVec {
    constructor(buf, offset = 0, stride = 1) {
        super(buf || [0, 0], offset, stride);
    }
    /**
     * Returns array of memory mapped {@link Vec2} instances using given
     * backing array and stride settings: The `cstride` is the step size
     * between individual XY vector components. `estride` is the step
     * size between successive vectors. This arrangement allows for
     * different storage approaches, incl. SOA, AOS, striped /
     * interleaved etc.
     *
     * @param buf - backing array
     * @param num - num vectors
     * @param start -  start index
     * @param cstride - component stride
     * @param estride - element stride
     */
    static mapBuffer(buf, num = buf.length >> 1, start = 0, cstride = 1, estride = 2) {
        return (0,_buffer__WEBPACK_IMPORTED_MODULE_1__.mapStridedBuffer)(Vec2, buf, num, start, cstride, estride);
    }
    /**
     * Merges given `src` iterable of {@link Vec2}s into single array `buf`.
     * Vectors will be arranged according to given component and element
     * strides, starting at `start` index. It's the user's
     * responsibility to ensure the target buffer has sufficient
     * capacity to hold the input vectors. See `Vec2.mapBuffer` for the
     * inverse operation. Returns `buf`.
     *
     * @param buf -
     * @param src -
     * @param start -
     * @param cstride -
     * @param estride -
     */
    static intoBuffer(buf, src, start = 0, cstride = 1, estride = 2) {
        return (0,_buffer__WEBPACK_IMPORTED_MODULE_1__.intoStridedBuffer)(_sets__WEBPACK_IMPORTED_MODULE_2__.setS2, buf, src, start, cstride, estride);
    }
    static iterator(buf, num, start = 0, cstride = 1, estride = 2) {
        return (0,_internal_vec_utils__WEBPACK_IMPORTED_MODULE_3__.vecIterator)(Vec2, buf, num, start, cstride, estride);
    }
    [Symbol.iterator]() {
        return (0,_internal_vec_utils__WEBPACK_IMPORTED_MODULE_3__.stridedValues)(this.buf, 2, this.offset, this.stride);
    }
    get length() {
        return 2;
    }
    copy() {
        return new Vec2([this.x, this.y]);
    }
    copyView() {
        return new Vec2(this.buf, this.offset, this.stride);
    }
    empty() {
        return new Vec2();
    }
    eqDelta(v, eps = _thi_ng_math__WEBPACK_IMPORTED_MODULE_4__.EPS) {
        return (0,_eqdelta__WEBPACK_IMPORTED_MODULE_5__.eqDelta2)(this, v, eps);
    }
    hash() {
        return (0,_hash__WEBPACK_IMPORTED_MODULE_6__.hash)(this);
    }
    toJSON() {
        return [this.x, this.y];
    }
    toString() {
        return `[${this.x}, ${this.y}]`;
    }
}
Vec2.X_AXIS = new Vec2(_api__WEBPACK_IMPORTED_MODULE_7__.X2);
Vec2.Y_AXIS = new Vec2(_api__WEBPACK_IMPORTED_MODULE_7__.Y2);
Vec2.MIN = new Vec2(_api__WEBPACK_IMPORTED_MODULE_7__.MIN2);
Vec2.MAX = new Vec2(_api__WEBPACK_IMPORTED_MODULE_7__.MAX2);
Vec2.ZERO = new Vec2(_api__WEBPACK_IMPORTED_MODULE_7__.ZERO2);
Vec2.ONE = new Vec2(_api__WEBPACK_IMPORTED_MODULE_7__.ONE2);
(0,_internal_accessors__WEBPACK_IMPORTED_MODULE_8__.declareIndices)(Vec2.prototype, ["x", "y"]);
const vec2 = (x = 0, y = 0) => new Vec2([x, y]);
const vec2n = (n) => new Vec2([n, n]);
const asVec2 = (x) => x instanceof Vec2
    ? x
    : new Vec2(x.length >= 2 ? x : [x[0] || 0, x[1] || 0]);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/vec3.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/vec3.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Vec3": () => (/* binding */ Vec3),
/* harmony export */   "vec3": () => (/* binding */ vec3),
/* harmony export */   "vec3n": () => (/* binding */ vec3n),
/* harmony export */   "asVec3": () => (/* binding */ asVec3)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/api.js");
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./api */ "./node_modules/@thi.ng/vectors/api.js");
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buffer */ "./node_modules/@thi.ng/vectors/buffer.js");
/* harmony import */ var _eqdelta__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./eqdelta */ "./node_modules/@thi.ng/vectors/eqdelta.js");
/* harmony import */ var _hash__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hash */ "./node_modules/@thi.ng/vectors/hash.js");
/* harmony import */ var _internal_accessors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./internal/accessors */ "./node_modules/@thi.ng/vectors/internal/accessors.js");
/* harmony import */ var _internal_avec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/avec */ "./node_modules/@thi.ng/vectors/internal/avec.js");
/* harmony import */ var _internal_vec_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/vec-utils */ "./node_modules/@thi.ng/vectors/internal/vec-utils.js");
/* harmony import */ var _sets__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sets */ "./node_modules/@thi.ng/vectors/sets.js");









class Vec3 extends _internal_avec__WEBPACK_IMPORTED_MODULE_0__.AVec {
    constructor(buf, offset = 0, stride = 1) {
        super(buf || [0, 0, 0], offset, stride);
    }
    /**
     * Returns array of memory mapped {@link Vec3} instances using given
     * backing array and stride settings: The `cstride` is the step size
     * between individual XYZ vector components. `estride` is the step
     * size between successive vectors. This arrangement allows for
     * different storage approaches, incl. SOA, AOS, striped /
     * interleaved etc.
     *
     * @param buf - backing array
     * @param num - num vectors
     * @param start -  start index
     * @param cstride - component stride
     * @param estride - element stride
     */
    static mapBuffer(buf, num = (buf.length / 3) | 0, start = 0, cstride = 1, estride = 3) {
        return (0,_buffer__WEBPACK_IMPORTED_MODULE_1__.mapStridedBuffer)(Vec3, buf, num, start, cstride, estride);
    }
    /**
     * Merges given `src` iterable of {@link Vec3}s into single array `buf`.
     * Vectors will be arranged according to given component and element
     * strides, starting at `start` index. It's the user's
     * responsibility to ensure the target buffer has sufficient
     * capacity to hold the input vectors. See `Vec3.mapBuffer` for the
     * inverse operation. Returns `buf`.
     *
     * @param buf -
     * @param src -
     * @param start -
     * @param cstride -
     * @param estride -
     */
    static intoBuffer(buf, src, start = 0, cstride = 1, estride = 3) {
        return (0,_buffer__WEBPACK_IMPORTED_MODULE_1__.intoStridedBuffer)(_sets__WEBPACK_IMPORTED_MODULE_2__.setS3, buf, src, start, cstride, estride);
    }
    static iterator(buf, num, start = 0, cstride = 1, estride = 3) {
        return (0,_internal_vec_utils__WEBPACK_IMPORTED_MODULE_3__.vecIterator)(Vec3, buf, num, start, cstride, estride);
    }
    [Symbol.iterator]() {
        return (0,_internal_vec_utils__WEBPACK_IMPORTED_MODULE_3__.stridedValues)(this.buf, 3, this.offset, this.stride);
    }
    get length() {
        return 3;
    }
    copy() {
        return new Vec3([this.x, this.y, this.z]);
    }
    copyView() {
        return new Vec3(this.buf, this.offset, this.stride);
    }
    empty() {
        return new Vec3();
    }
    eqDelta(v, eps = _thi_ng_math__WEBPACK_IMPORTED_MODULE_4__.EPS) {
        return (0,_eqdelta__WEBPACK_IMPORTED_MODULE_5__.eqDelta3)(this, v, eps);
    }
    hash() {
        return (0,_hash__WEBPACK_IMPORTED_MODULE_6__.hash)(this);
    }
    toJSON() {
        return [this.x, this.y, this.z];
    }
    toString() {
        return `[${this.x}, ${this.y}, ${this.z}]`;
    }
}
Vec3.X_AXIS = new Vec3(_api__WEBPACK_IMPORTED_MODULE_7__.X3);
Vec3.Y_AXIS = new Vec3(_api__WEBPACK_IMPORTED_MODULE_7__.Y3);
Vec3.Z_AXIS = new Vec3(_api__WEBPACK_IMPORTED_MODULE_7__.Z3);
Vec3.MIN = new Vec3(_api__WEBPACK_IMPORTED_MODULE_7__.MIN3);
Vec3.MAX = new Vec3(_api__WEBPACK_IMPORTED_MODULE_7__.MAX3);
Vec3.ZERO = new Vec3(_api__WEBPACK_IMPORTED_MODULE_7__.ZERO3);
Vec3.ONE = new Vec3(_api__WEBPACK_IMPORTED_MODULE_7__.ONE3);
(0,_internal_accessors__WEBPACK_IMPORTED_MODULE_8__.declareIndices)(Vec3.prototype, ["x", "y", "z"]);
const vec3 = (x = 0, y = 0, z = 0) => new Vec3([x, y, z]);
const vec3n = (n) => new Vec3([n, n, n]);
const asVec3 = (x) => x instanceof Vec3
    ? x
    : new Vec3(x.length >= 3
        ? x
        : [x[0] || 0, x[1] || 0, x[2] || 0]);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/vec4.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/vec4.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Vec4": () => (/* binding */ Vec4),
/* harmony export */   "vec4": () => (/* binding */ vec4),
/* harmony export */   "vec4n": () => (/* binding */ vec4n),
/* harmony export */   "asVec4": () => (/* binding */ asVec4)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/api.js");
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./api */ "./node_modules/@thi.ng/vectors/api.js");
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buffer */ "./node_modules/@thi.ng/vectors/buffer.js");
/* harmony import */ var _eqdelta__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./eqdelta */ "./node_modules/@thi.ng/vectors/eqdelta.js");
/* harmony import */ var _hash__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hash */ "./node_modules/@thi.ng/vectors/hash.js");
/* harmony import */ var _internal_accessors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./internal/accessors */ "./node_modules/@thi.ng/vectors/internal/accessors.js");
/* harmony import */ var _internal_avec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/avec */ "./node_modules/@thi.ng/vectors/internal/avec.js");
/* harmony import */ var _internal_vec_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/vec-utils */ "./node_modules/@thi.ng/vectors/internal/vec-utils.js");
/* harmony import */ var _sets__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sets */ "./node_modules/@thi.ng/vectors/sets.js");









class Vec4 extends _internal_avec__WEBPACK_IMPORTED_MODULE_0__.AVec {
    constructor(buf, offset = 0, stride = 1) {
        super(buf || [0, 0, 0, 0], offset, stride);
    }
    /**
     * Returns array of memory mapped {@link Vec4} instances using given
     * backing array and stride settings: The `cstride` is the step size
     * between individual XYZ vector components. `estride` is the step
     * size between successive vectors. This arrangement allows for
     * different storage approaches, incl. SOA, AOS, striped /
     * interleaved etc.
     *
     * @param buf - backing array
     * @param num - num vectors
     * @param start -  start index
     * @param cstride - component stride
     * @param estride - element stride
     */
    static mapBuffer(buf, num = buf.length >> 2, start = 0, cstride = 1, estride = 4) {
        return (0,_buffer__WEBPACK_IMPORTED_MODULE_1__.mapStridedBuffer)(Vec4, buf, num, start, cstride, estride);
    }
    /**
     * Merges given `src` iterable of {@link Vec4}s into single array `buf`.
     * Vectors will be arranged according to given component and element
     * strides, starting at `start` index. It's the user's
     * responsibility to ensure the target buffer has sufficient
     * capacity to hold the input vectors. See `Vec4.mapBuffer` for the
     * inverse operation. Returns `buf`.
     *
     * @param buf -
     * @param src -
     * @param start -
     * @param cstride -
     * @param estride -
     */
    static intoBuffer(buf, src, start = 0, cstride = 1, estride = 4) {
        return (0,_buffer__WEBPACK_IMPORTED_MODULE_1__.intoStridedBuffer)(_sets__WEBPACK_IMPORTED_MODULE_2__.setS4, buf, src, start, cstride, estride);
    }
    static *iterator(buf, num, start = 0, cstride = 1, estride = 4) {
        return (0,_internal_vec_utils__WEBPACK_IMPORTED_MODULE_3__.vecIterator)(Vec4, buf, num, start, cstride, estride);
    }
    [Symbol.iterator]() {
        return (0,_internal_vec_utils__WEBPACK_IMPORTED_MODULE_3__.stridedValues)(this.buf, 4, this.offset, this.stride);
    }
    get length() {
        return 4;
    }
    copy() {
        return new Vec4([this.x, this.y, this.z, this.w]);
    }
    copyView() {
        return new Vec4(this.buf, this.offset, this.stride);
    }
    empty() {
        return new Vec4();
    }
    eqDelta(v, eps = _thi_ng_math__WEBPACK_IMPORTED_MODULE_4__.EPS) {
        return (0,_eqdelta__WEBPACK_IMPORTED_MODULE_5__.eqDelta4)(this, v, eps);
    }
    hash() {
        return (0,_hash__WEBPACK_IMPORTED_MODULE_6__.hash)(this);
    }
    toJSON() {
        return [this.x, this.y, this.z, this.w];
    }
    toString() {
        return `[${this.x}, ${this.y}, ${this.z}, ${this.w}]`;
    }
}
Vec4.X_AXIS = new Vec4(_api__WEBPACK_IMPORTED_MODULE_7__.X4);
Vec4.Y_AXIS = new Vec4(_api__WEBPACK_IMPORTED_MODULE_7__.Y4);
Vec4.Z_AXIS = new Vec4(_api__WEBPACK_IMPORTED_MODULE_7__.Z4);
Vec4.MIN = new Vec4(_api__WEBPACK_IMPORTED_MODULE_7__.MIN4);
Vec4.MAX = new Vec4(_api__WEBPACK_IMPORTED_MODULE_7__.MAX4);
Vec4.ZERO = new Vec4(_api__WEBPACK_IMPORTED_MODULE_7__.ZERO4);
Vec4.ONE = new Vec4(_api__WEBPACK_IMPORTED_MODULE_7__.ONE4);
(0,_internal_accessors__WEBPACK_IMPORTED_MODULE_8__.declareIndices)(Vec4.prototype, ["x", "y", "z", "w"]);
const vec4 = (x = 0, y = 0, z = 0, w = 0) => new Vec4([x, y, z, w]);
const vec4n = (n) => new Vec4([n, n, n, n]);
const asVec4 = (x) => x instanceof Vec4
    ? x
    : new Vec4(x.length >= 4
        ? x
        : [x[0] || 0, x[1] || 0, x[2] || 0, x[3] || 0]);


/***/ }),

/***/ "./node_modules/@thi.ng/vectors/wrap.js":
/*!**********************************************!*\
  !*** ./node_modules/@thi.ng/vectors/wrap.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "wrap": () => (/* binding */ wrap),
/* harmony export */   "wrap2": () => (/* binding */ wrap2),
/* harmony export */   "wrap3": () => (/* binding */ wrap3),
/* harmony export */   "wrap4": () => (/* binding */ wrap4)
/* harmony export */ });
/* harmony import */ var _thi_ng_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @thi.ng/math */ "./node_modules/@thi.ng/math/interval.js");
/* harmony import */ var _internal_codegen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/codegen */ "./node_modules/@thi.ng/vectors/internal/codegen.js");
/* harmony import */ var _internal_templates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/templates */ "./node_modules/@thi.ng/vectors/internal/templates.js");



const [wrap, wrap2, wrap3, wrap4] = (0,_internal_codegen__WEBPACK_IMPORTED_MODULE_0__.defHofOp)(_thi_ng_math__WEBPACK_IMPORTED_MODULE_1__.wrap, (0,_internal_templates__WEBPACK_IMPORTED_MODULE_2__.FN3)(), _internal_codegen__WEBPACK_IMPORTED_MODULE_0__.ARGS_VVV);


/***/ }),

/***/ "./node_modules/katex/dist/katex.js":
/*!******************************************!*\
  !*** ./node_modules/katex/dist/katex.js ***!
  \******************************************/
/***/ (function(module) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})((typeof self !== 'undefined' ? self : this), function() {
return /******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __nested_webpack_require_514__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__nested_webpack_require_514__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__nested_webpack_require_514__.o(definition, key) && !__nested_webpack_require_514__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__nested_webpack_require_514__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};

// EXPORTS
__nested_webpack_require_514__.d(__webpack_exports__, {
  "default": function() { return /* binding */ katex_webpack; }
});

;// CONCATENATED MODULE: ./src/ParseError.js


/**
 * This is the ParseError class, which is the main error thrown by KaTeX
 * functions when something has gone wrong. This is used to distinguish internal
 * errors from errors in the expression that the user provided.
 *
 * If possible, a caller should provide a Token or ParseNode with information
 * about where in the source string the problem occurred.
 */
var ParseError = // Error position based on passed-in Token or ParseNode.
function ParseError(message, // The error message
token) {
  this.position = void 0;
  var error = "KaTeX parse error: " + message;
  var start;
  var loc = token && token.loc;

  if (loc && loc.start <= loc.end) {
    // If we have the input and a position, make the error a bit fancier
    // Get the input
    var input = loc.lexer.input; // Prepend some information

    start = loc.start;
    var end = loc.end;

    if (start === input.length) {
      error += " at end of input: ";
    } else {
      error += " at position " + (start + 1) + ": ";
    } // Underline token in question using combining underscores


    var underlined = input.slice(start, end).replace(/[^]/g, "$&\u0332"); // Extract some context from the input and add it to the error

    var left;

    if (start > 15) {
      left = "…" + input.slice(start - 15, start);
    } else {
      left = input.slice(0, start);
    }

    var right;

    if (end + 15 < input.length) {
      right = input.slice(end, end + 15) + "…";
    } else {
      right = input.slice(end);
    }

    error += left + underlined + right;
  } // Some hackery to make ParseError a prototype of Error
  // See http://stackoverflow.com/a/8460753


  var self = new Error(error);
  self.name = "ParseError"; // $FlowFixMe

  self.__proto__ = ParseError.prototype; // $FlowFixMe

  self.position = start;
  return self;
}; // $FlowFixMe More hackery


ParseError.prototype.__proto__ = Error.prototype;
/* harmony default export */ var src_ParseError = (ParseError);
;// CONCATENATED MODULE: ./src/utils.js
/**
 * This file contains a list of utility functions which are useful in other
 * files.
 */

/**
 * Return whether an element is contained in a list
 */
var contains = function contains(list, elem) {
  return list.indexOf(elem) !== -1;
};
/**
 * Provide a default value if a setting is undefined
 * NOTE: Couldn't use `T` as the output type due to facebook/flow#5022.
 */


var deflt = function deflt(setting, defaultIfUndefined) {
  return setting === undefined ? defaultIfUndefined : setting;
}; // hyphenate and escape adapted from Facebook's React under Apache 2 license


var uppercase = /([A-Z])/g;

var hyphenate = function hyphenate(str) {
  return str.replace(uppercase, "-$1").toLowerCase();
};

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;"
};
var ESCAPE_REGEX = /[&><"']/g;
/**
 * Escapes text to prevent scripting attacks.
 */

function utils_escape(text) {
  return String(text).replace(ESCAPE_REGEX, function (match) {
    return ESCAPE_LOOKUP[match];
  });
}
/**
 * Sometimes we want to pull out the innermost element of a group. In most
 * cases, this will just be the group itself, but when ordgroups and colors have
 * a single element, we want to pull that out.
 */


var getBaseElem = function getBaseElem(group) {
  if (group.type === "ordgroup") {
    if (group.body.length === 1) {
      return getBaseElem(group.body[0]);
    } else {
      return group;
    }
  } else if (group.type === "color") {
    if (group.body.length === 1) {
      return getBaseElem(group.body[0]);
    } else {
      return group;
    }
  } else if (group.type === "font") {
    return getBaseElem(group.body);
  } else {
    return group;
  }
};
/**
 * TeXbook algorithms often reference "character boxes", which are simply groups
 * with a single character in them. To decide if something is a character box,
 * we find its innermost group, and see if it is a single character.
 */


var isCharacterBox = function isCharacterBox(group) {
  var baseElem = getBaseElem(group); // These are all they types of groups which hold single characters

  return baseElem.type === "mathord" || baseElem.type === "textord" || baseElem.type === "atom";
};

var assert = function assert(value) {
  if (!value) {
    throw new Error('Expected non-null, but got ' + String(value));
  }

  return value;
};
/**
 * Return the protocol of a URL, or "_relative" if the URL does not specify a
 * protocol (and thus is relative).
 */

var protocolFromUrl = function protocolFromUrl(url) {
  var protocol = /^\s*([^\\/#]*?)(?::|&#0*58|&#x0*3a)/i.exec(url);
  return protocol != null ? protocol[1] : "_relative";
};
/* harmony default export */ var utils = ({
  contains: contains,
  deflt: deflt,
  escape: utils_escape,
  hyphenate: hyphenate,
  getBaseElem: getBaseElem,
  isCharacterBox: isCharacterBox,
  protocolFromUrl: protocolFromUrl
});
;// CONCATENATED MODULE: ./src/Settings.js
/* eslint no-console:0 */

/**
 * This is a module for storing settings passed into KaTeX. It correctly handles
 * default settings.
 */




/**
 * The main Settings object
 *
 * The current options stored are:
 *  - displayMode: Whether the expression should be typeset as inline math
 *                 (false, the default), meaning that the math starts in
 *                 \textstyle and is placed in an inline-block); or as display
 *                 math (true), meaning that the math starts in \displaystyle
 *                 and is placed in a block with vertical margin.
 */
var Settings = /*#__PURE__*/function () {
  function Settings(options) {
    this.displayMode = void 0;
    this.output = void 0;
    this.leqno = void 0;
    this.fleqn = void 0;
    this.throwOnError = void 0;
    this.errorColor = void 0;
    this.macros = void 0;
    this.minRuleThickness = void 0;
    this.colorIsTextColor = void 0;
    this.strict = void 0;
    this.trust = void 0;
    this.maxSize = void 0;
    this.maxExpand = void 0;
    this.globalGroup = void 0;
    // allow null options
    options = options || {};
    this.displayMode = utils.deflt(options.displayMode, false);
    this.output = utils.deflt(options.output, "htmlAndMathml");
    this.leqno = utils.deflt(options.leqno, false);
    this.fleqn = utils.deflt(options.fleqn, false);
    this.throwOnError = utils.deflt(options.throwOnError, true);
    this.errorColor = utils.deflt(options.errorColor, "#cc0000");
    this.macros = options.macros || {};
    this.minRuleThickness = Math.max(0, utils.deflt(options.minRuleThickness, 0));
    this.colorIsTextColor = utils.deflt(options.colorIsTextColor, false);
    this.strict = utils.deflt(options.strict, "warn");
    this.trust = utils.deflt(options.trust, false);
    this.maxSize = Math.max(0, utils.deflt(options.maxSize, Infinity));
    this.maxExpand = Math.max(0, utils.deflt(options.maxExpand, 1000));
    this.globalGroup = utils.deflt(options.globalGroup, false);
  }
  /**
   * Report nonstrict (non-LaTeX-compatible) input.
   * Can safely not be called if `this.strict` is false in JavaScript.
   */


  var _proto = Settings.prototype;

  _proto.reportNonstrict = function reportNonstrict(errorCode, errorMsg, token) {
    var strict = this.strict;

    if (typeof strict === "function") {
      // Allow return value of strict function to be boolean or string
      // (or null/undefined, meaning no further processing).
      strict = strict(errorCode, errorMsg, token);
    }

    if (!strict || strict === "ignore") {
      return;
    } else if (strict === true || strict === "error") {
      throw new src_ParseError("LaTeX-incompatible input and strict mode is set to 'error': " + (errorMsg + " [" + errorCode + "]"), token);
    } else if (strict === "warn") {
      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
    } else {
      // won't happen in type-safe code
      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
    }
  }
  /**
   * Check whether to apply strict (LaTeX-adhering) behavior for unusual
   * input (like `\\`).  Unlike `nonstrict`, will not throw an error;
   * instead, "error" translates to a return value of `true`, while "ignore"
   * translates to a return value of `false`.  May still print a warning:
   * "warn" prints a warning and returns `false`.
   * This is for the second category of `errorCode`s listed in the README.
   */
  ;

  _proto.useStrictBehavior = function useStrictBehavior(errorCode, errorMsg, token) {
    var strict = this.strict;

    if (typeof strict === "function") {
      // Allow return value of strict function to be boolean or string
      // (or null/undefined, meaning no further processing).
      // But catch any exceptions thrown by function, treating them
      // like "error".
      try {
        strict = strict(errorCode, errorMsg, token);
      } catch (error) {
        strict = "error";
      }
    }

    if (!strict || strict === "ignore") {
      return false;
    } else if (strict === true || strict === "error") {
      return true;
    } else if (strict === "warn") {
      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to 'warn': " + (errorMsg + " [" + errorCode + "]"));
      return false;
    } else {
      // won't happen in type-safe code
      typeof console !== "undefined" && console.warn("LaTeX-incompatible input and strict mode is set to " + ("unrecognized '" + strict + "': " + errorMsg + " [" + errorCode + "]"));
      return false;
    }
  }
  /**
   * Check whether to test potentially dangerous input, and return
   * `true` (trusted) or `false` (untrusted).  The sole argument `context`
   * should be an object with `command` field specifying the relevant LaTeX
   * command (as a string starting with `\`), and any other arguments, etc.
   * If `context` has a `url` field, a `protocol` field will automatically
   * get added by this function (changing the specified object).
   */
  ;

  _proto.isTrusted = function isTrusted(context) {
    if (context.url && !context.protocol) {
      context.protocol = utils.protocolFromUrl(context.url);
    }

    var trust = typeof this.trust === "function" ? this.trust(context) : this.trust;
    return Boolean(trust);
  };

  return Settings;
}();


;// CONCATENATED MODULE: ./src/Style.js
/**
 * This file contains information and classes for the various kinds of styles
 * used in TeX. It provides a generic `Style` class, which holds information
 * about a specific style. It then provides instances of all the different kinds
 * of styles possible, and provides functions to move between them and get
 * information about them.
 */

/**
 * The main style class. Contains a unique id for the style, a size (which is
 * the same for cramped and uncramped version of a style), and a cramped flag.
 */
var Style = /*#__PURE__*/function () {
  function Style(id, size, cramped) {
    this.id = void 0;
    this.size = void 0;
    this.cramped = void 0;
    this.id = id;
    this.size = size;
    this.cramped = cramped;
  }
  /**
   * Get the style of a superscript given a base in the current style.
   */


  var _proto = Style.prototype;

  _proto.sup = function sup() {
    return styles[_sup[this.id]];
  }
  /**
   * Get the style of a subscript given a base in the current style.
   */
  ;

  _proto.sub = function sub() {
    return styles[_sub[this.id]];
  }
  /**
   * Get the style of a fraction numerator given the fraction in the current
   * style.
   */
  ;

  _proto.fracNum = function fracNum() {
    return styles[_fracNum[this.id]];
  }
  /**
   * Get the style of a fraction denominator given the fraction in the current
   * style.
   */
  ;

  _proto.fracDen = function fracDen() {
    return styles[_fracDen[this.id]];
  }
  /**
   * Get the cramped version of a style (in particular, cramping a cramped style
   * doesn't change the style).
   */
  ;

  _proto.cramp = function cramp() {
    return styles[_cramp[this.id]];
  }
  /**
   * Get a text or display version of this style.
   */
  ;

  _proto.text = function text() {
    return styles[_text[this.id]];
  }
  /**
   * Return true if this style is tightly spaced (scriptstyle/scriptscriptstyle)
   */
  ;

  _proto.isTight = function isTight() {
    return this.size >= 2;
  };

  return Style;
}(); // Export an interface for type checking, but don't expose the implementation.
// This way, no more styles can be generated.


// IDs of the different styles
var D = 0;
var Dc = 1;
var T = 2;
var Tc = 3;
var S = 4;
var Sc = 5;
var SS = 6;
var SSc = 7; // Instances of the different styles

var styles = [new Style(D, 0, false), new Style(Dc, 0, true), new Style(T, 1, false), new Style(Tc, 1, true), new Style(S, 2, false), new Style(Sc, 2, true), new Style(SS, 3, false), new Style(SSc, 3, true)]; // Lookup tables for switching from one style to another

var _sup = [S, Sc, S, Sc, SS, SSc, SS, SSc];
var _sub = [Sc, Sc, Sc, Sc, SSc, SSc, SSc, SSc];
var _fracNum = [T, Tc, S, Sc, SS, SSc, SS, SSc];
var _fracDen = [Tc, Tc, Sc, Sc, SSc, SSc, SSc, SSc];
var _cramp = [Dc, Dc, Tc, Tc, Sc, Sc, SSc, SSc];
var _text = [D, Dc, T, Tc, T, Tc, T, Tc]; // We only export some of the styles.

/* harmony default export */ var src_Style = ({
  DISPLAY: styles[D],
  TEXT: styles[T],
  SCRIPT: styles[S],
  SCRIPTSCRIPT: styles[SS]
});
;// CONCATENATED MODULE: ./src/unicodeScripts.js
/*
 * This file defines the Unicode scripts and script families that we
 * support. To add new scripts or families, just add a new entry to the
 * scriptData array below. Adding scripts to the scriptData array allows
 * characters from that script to appear in \text{} environments.
 */

/**
 * Each script or script family has a name and an array of blocks.
 * Each block is an array of two numbers which specify the start and
 * end points (inclusive) of a block of Unicode codepoints.
 */

/**
 * Unicode block data for the families of scripts we support in \text{}.
 * Scripts only need to appear here if they do not have font metrics.
 */
var scriptData = [{
  // Latin characters beyond the Latin-1 characters we have metrics for.
  // Needed for Czech, Hungarian and Turkish text, for example.
  name: 'latin',
  blocks: [[0x0100, 0x024f], // Latin Extended-A and Latin Extended-B
  [0x0300, 0x036f] // Combining Diacritical marks
  ]
}, {
  // The Cyrillic script used by Russian and related languages.
  // A Cyrillic subset used to be supported as explicitly defined
  // symbols in symbols.js
  name: 'cyrillic',
  blocks: [[0x0400, 0x04ff]]
}, {
  // Armenian
  name: 'armenian',
  blocks: [[0x0530, 0x058F]]
}, {
  // The Brahmic scripts of South and Southeast Asia
  // Devanagari (0900–097F)
  // Bengali (0980–09FF)
  // Gurmukhi (0A00–0A7F)
  // Gujarati (0A80–0AFF)
  // Oriya (0B00–0B7F)
  // Tamil (0B80–0BFF)
  // Telugu (0C00–0C7F)
  // Kannada (0C80–0CFF)
  // Malayalam (0D00–0D7F)
  // Sinhala (0D80–0DFF)
  // Thai (0E00–0E7F)
  // Lao (0E80–0EFF)
  // Tibetan (0F00–0FFF)
  // Myanmar (1000–109F)
  name: 'brahmic',
  blocks: [[0x0900, 0x109F]]
}, {
  name: 'georgian',
  blocks: [[0x10A0, 0x10ff]]
}, {
  // Chinese and Japanese.
  // The "k" in cjk is for Korean, but we've separated Korean out
  name: "cjk",
  blocks: [[0x3000, 0x30FF], // CJK symbols and punctuation, Hiragana, Katakana
  [0x4E00, 0x9FAF], // CJK ideograms
  [0xFF00, 0xFF60] // Fullwidth punctuation
  // TODO: add halfwidth Katakana and Romanji glyphs
  ]
}, {
  // Korean
  name: 'hangul',
  blocks: [[0xAC00, 0xD7AF]]
}];
/**
 * Given a codepoint, return the name of the script or script family
 * it is from, or null if it is not part of a known block
 */

function scriptFromCodepoint(codepoint) {
  for (var i = 0; i < scriptData.length; i++) {
    var script = scriptData[i];

    for (var _i = 0; _i < script.blocks.length; _i++) {
      var block = script.blocks[_i];

      if (codepoint >= block[0] && codepoint <= block[1]) {
        return script.name;
      }
    }
  }

  return null;
}
/**
 * A flattened version of all the supported blocks in a single array.
 * This is an optimization to make supportedCodepoint() fast.
 */

var allBlocks = [];
scriptData.forEach(function (s) {
  return s.blocks.forEach(function (b) {
    return allBlocks.push.apply(allBlocks, b);
  });
});
/**
 * Given a codepoint, return true if it falls within one of the
 * scripts or script families defined above and false otherwise.
 *
 * Micro benchmarks shows that this is faster than
 * /[\u3000-\u30FF\u4E00-\u9FAF\uFF00-\uFF60\uAC00-\uD7AF\u0900-\u109F]/.test()
 * in Firefox, Chrome and Node.
 */

function supportedCodepoint(codepoint) {
  for (var i = 0; i < allBlocks.length; i += 2) {
    if (codepoint >= allBlocks[i] && codepoint <= allBlocks[i + 1]) {
      return true;
    }
  }

  return false;
}
;// CONCATENATED MODULE: ./src/svgGeometry.js
/**
 * This file provides support to domTree.js and delimiter.js.
 * It's a storehouse of path geometry for SVG images.
 */
// In all paths below, the viewBox-to-em scale is 1000:1.
var hLinePad = 80; // padding above a sqrt viniculum. Prevents image cropping.
// The viniculum of a \sqrt can be made thicker by a KaTeX rendering option.
// Think of variable extraViniculum as two detours in the SVG path.
// The detour begins at the lower left of the area labeled extraViniculum below.
// The detour proceeds one extraViniculum distance up and slightly to the right,
// displacing the radiused corner between surd and viniculum. The radius is
// traversed as usual, then the detour resumes. It goes right, to the end of
// the very long viniculumn, then down one extraViniculum distance,
// after which it resumes regular path geometry for the radical.

/*                                                  viniculum
                                                   /
         /▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒←extraViniculum
        / █████████████████████←0.04em (40 unit) std viniculum thickness
       / /
      / /
     / /\
    / / surd
*/

var sqrtMain = function sqrtMain(extraViniculum, hLinePad) {
  // sqrtMain path geometry is from glyph U221A in the font KaTeX Main
  return "M95," + (622 + extraViniculum + hLinePad) + "\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl" + extraViniculum / 2.075 + " -" + extraViniculum + "\nc5.3,-9.3,12,-14,20,-14\nH400000v" + (40 + extraViniculum) + "H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM" + (834 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "h-400000z";
};

var sqrtSize1 = function sqrtSize1(extraViniculum, hLinePad) {
  // size1 is from glyph U221A in the font KaTeX_Size1-Regular
  return "M263," + (601 + extraViniculum + hLinePad) + "c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl" + extraViniculum / 2.084 + " -" + extraViniculum + "\nc4.7,-7.3,11,-11,19,-11\nH40000v" + (40 + extraViniculum) + "H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM" + (1001 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "h-400000z";
};

var sqrtSize2 = function sqrtSize2(extraViniculum, hLinePad) {
  // size2 is from glyph U221A in the font KaTeX_Size2-Regular
  return "M983 " + (10 + extraViniculum + hLinePad) + "\nl" + extraViniculum / 3.13 + " -" + extraViniculum + "\nc4,-6.7,10,-10,18,-10 H400000v" + (40 + extraViniculum) + "\nH1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7\ns-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744\nc-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30\nc26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722\nc56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5\nc53.7,-170.3,84.5,-266.8,92.5,-289.5z\nM" + (1001 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "h-400000z";
};

var sqrtSize3 = function sqrtSize3(extraViniculum, hLinePad) {
  // size3 is from glyph U221A in the font KaTeX_Size3-Regular
  return "M424," + (2398 + extraViniculum + hLinePad) + "\nc-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514\nc0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20\ns-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121\ns209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081\nl" + extraViniculum / 4.223 + " -" + extraViniculum + "c4,-6.7,10,-10,18,-10 H400000\nv" + (40 + extraViniculum) + "H1014.6\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185\nc-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2z M" + (1001 + extraViniculum) + " " + hLinePad + "\nh400000v" + (40 + extraViniculum) + "h-400000z";
};

var sqrtSize4 = function sqrtSize4(extraViniculum, hLinePad) {
  // size4 is from glyph U221A in the font KaTeX_Size4-Regular
  return "M473," + (2713 + extraViniculum + hLinePad) + "\nc339.3,-1799.3,509.3,-2700,510,-2702 l" + extraViniculum / 5.298 + " -" + extraViniculum + "\nc3.3,-7.3,9.3,-11,18,-11 H400000v" + (40 + extraViniculum) + "H1017.7\ns-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200\nc0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26\ns76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,\n606zM" + (1001 + extraViniculum) + " " + hLinePad + "h400000v" + (40 + extraViniculum) + "H1017.7z";
};

var phasePath = function phasePath(y) {
  var x = y / 2; // x coordinate at top of angle

  return "M400000 " + y + " H0 L" + x + " 0 l65 45 L145 " + (y - 80) + " H400000z";
};

var sqrtTall = function sqrtTall(extraViniculum, hLinePad, viewBoxHeight) {
  // sqrtTall is from glyph U23B7 in the font KaTeX_Size4-Regular
  // One path edge has a variable length. It runs vertically from the viniculumn
  // to a point near (14 units) the bottom of the surd. The viniculum
  // is normally 40 units thick. So the length of the line in question is:
  var vertSegment = viewBoxHeight - 54 - hLinePad - extraViniculum;
  return "M702 " + (extraViniculum + hLinePad) + "H400000" + (40 + extraViniculum) + "\nH742v" + vertSegment + "l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1\nh-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170\nc-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667\n219 661 l218 661zM702 " + hLinePad + "H400000v" + (40 + extraViniculum) + "H742z";
};

var sqrtPath = function sqrtPath(size, extraViniculum, viewBoxHeight) {
  extraViniculum = 1000 * extraViniculum; // Convert from document ems to viewBox.

  var path = "";

  switch (size) {
    case "sqrtMain":
      path = sqrtMain(extraViniculum, hLinePad);
      break;

    case "sqrtSize1":
      path = sqrtSize1(extraViniculum, hLinePad);
      break;

    case "sqrtSize2":
      path = sqrtSize2(extraViniculum, hLinePad);
      break;

    case "sqrtSize3":
      path = sqrtSize3(extraViniculum, hLinePad);
      break;

    case "sqrtSize4":
      path = sqrtSize4(extraViniculum, hLinePad);
      break;

    case "sqrtTall":
      path = sqrtTall(extraViniculum, hLinePad, viewBoxHeight);
  }

  return path;
};
var innerPath = function innerPath(name, height) {
  // The inner part of stretchy tall delimiters
  switch (name) {
    case "\u239C":
      return "M291 0 H417 V" + height + " H291z M291 0 H417 V" + height + " H291z";

    case "\u2223":
      return "M145 0 H188 V" + height + " H145z M145 0 H188 V" + height + " H145z";

    case "\u2225":
      return "M145 0 H188 V" + height + " H145z M145 0 H188 V" + height + " H145z" + ("M367 0 H410 V" + height + " H367z M367 0 H410 V" + height + " H367z");

    case "\u239F":
      return "M457 0 H583 V" + height + " H457z M457 0 H583 V" + height + " H457z";

    case "\u23A2":
      return "M319 0 H403 V" + height + " H319z M319 0 H403 V" + height + " H319z";

    case "\u23A5":
      return "M263 0 H347 V" + height + " H263z M263 0 H347 V" + height + " H263z";

    case "\u23AA":
      return "M384 0 H504 V" + height + " H384z M384 0 H504 V" + height + " H384z";

    case "\u23D0":
      return "M312 0 H355 V" + height + " H312z M312 0 H355 V" + height + " H312z";

    case "\u2016":
      return "M257 0 H300 V" + height + " H257z M257 0 H300 V" + height + " H257z" + ("M478 0 H521 V" + height + " H478z M478 0 H521 V" + height + " H478z");

    default:
      return "";
  }
};
var path = {
  // The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main
  doubleleftarrow: "M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z",
  // doublerightarrow is from glyph U+21D2 in font KaTeX Main
  doublerightarrow: "M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z",
  // leftarrow is from glyph U+2190 in font KaTeX Main
  leftarrow: "M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z",
  // overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular
  leftbrace: "M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z",
  leftbraceunder: "M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z",
  // overgroup is from the MnSymbol package (public domain)
  leftgroup: "M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z",
  leftgroupunder: "M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z",
  // Harpoons are from glyph U+21BD in font KaTeX Main
  leftharpoon: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z",
  leftharpoonplus: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z",
  leftharpoondown: "M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z",
  leftharpoondownplus: "M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z",
  // hook is from glyph U+21A9 in font KaTeX Main
  lefthook: "M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z",
  leftlinesegment: "M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z",
  leftmapsto: "M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z",
  // tofrom is from glyph U+21C4 in font KaTeX AMS Regular
  leftToFrom: "M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z",
  longequal: "M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z",
  midbrace: "M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z",
  midbraceunder: "M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z",
  oiintSize1: "M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z",
  oiintSize2: "M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z",
  oiiintSize1: "M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z",
  oiiintSize2: "M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z",
  rightarrow: "M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z",
  rightbrace: "M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z",
  rightbraceunder: "M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z",
  rightgroup: "M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z",
  rightgroupunder: "M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z",
  rightharpoon: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z",
  rightharpoonplus: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z",
  rightharpoondown: "M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z",
  rightharpoondownplus: "M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z",
  righthook: "M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z",
  rightlinesegment: "M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z",
  rightToFrom: "M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z",
  // twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular
  twoheadleftarrow: "M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z",
  twoheadrightarrow: "M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z",
  // tilde1 is a modified version of a glyph from the MnSymbol package
  tilde1: "M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z",
  // ditto tilde2, tilde3, & tilde4
  tilde2: "M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z",
  tilde3: "M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z",
  tilde4: "M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z",
  // vec is from glyph U+20D7 in font KaTeX Main
  vec: "M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z",
  // widehat1 is a modified version of a glyph from the MnSymbol package
  widehat1: "M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z",
  // ditto widehat2, widehat3, & widehat4
  widehat2: "M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
  widehat3: "M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
  widehat4: "M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",
  // widecheck paths are all inverted versions of widehat
  widecheck1: "M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z",
  widecheck2: "M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
  widecheck3: "M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
  widecheck4: "M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",
  // The next ten paths support reaction arrows from the mhchem package.
  // Arrows for \ce{<-->} are offset from xAxis by 0.22ex, per mhchem in LaTeX
  // baraboveleftarrow is mostly from from glyph U+2190 in font KaTeX Main
  baraboveleftarrow: "M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z",
  // rightarrowabovebar is mostly from glyph U+2192, KaTeX Main
  rightarrowabovebar: "M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z",
  // The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.
  // Ref from mhchem.sty: \rlap{\raisebox{-.22ex}{$\kern0.5em
  baraboveshortleftharpoon: "M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z",
  rightharpoonaboveshortbar: "M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z",
  shortbaraboveleftharpoon: "M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z",
  shortrightharpoonabovebar: "M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z"
};
;// CONCATENATED MODULE: ./src/tree.js


/**
 * This node represents a document fragment, which contains elements, but when
 * placed into the DOM doesn't have any representation itself. It only contains
 * children and doesn't have any DOM node properties.
 */
var DocumentFragment = /*#__PURE__*/function () {
  // HtmlDomNode
  // Never used; needed for satisfying interface.
  function DocumentFragment(children) {
    this.children = void 0;
    this.classes = void 0;
    this.height = void 0;
    this.depth = void 0;
    this.maxFontSize = void 0;
    this.style = void 0;
    this.children = children;
    this.classes = [];
    this.height = 0;
    this.depth = 0;
    this.maxFontSize = 0;
    this.style = {};
  }

  var _proto = DocumentFragment.prototype;

  _proto.hasClass = function hasClass(className) {
    return utils.contains(this.classes, className);
  }
  /** Convert the fragment into a node. */
  ;

  _proto.toNode = function toNode() {
    var frag = document.createDocumentFragment();

    for (var i = 0; i < this.children.length; i++) {
      frag.appendChild(this.children[i].toNode());
    }

    return frag;
  }
  /** Convert the fragment into HTML markup. */
  ;

  _proto.toMarkup = function toMarkup() {
    var markup = ""; // Simply concatenate the markup for the children together.

    for (var i = 0; i < this.children.length; i++) {
      markup += this.children[i].toMarkup();
    }

    return markup;
  }
  /**
   * Converts the math node into a string, similar to innerText. Applies to
   * MathDomNode's only.
   */
  ;

  _proto.toText = function toText() {
    // To avoid this, we would subclass documentFragment separately for
    // MathML, but polyfills for subclassing is expensive per PR 1469.
    // $FlowFixMe: Only works for ChildType = MathDomNode.
    var toText = function toText(child) {
      return child.toText();
    };

    return this.children.map(toText).join("");
  };

  return DocumentFragment;
}();
;// CONCATENATED MODULE: ./src/domTree.js
/**
 * These objects store the data about the DOM nodes we create, as well as some
 * extra data. They can then be transformed into real DOM nodes with the
 * `toNode` function or HTML markup using `toMarkup`. They are useful for both
 * storing extra properties on the nodes, as well as providing a way to easily
 * work with the DOM.
 *
 * Similar functions for working with MathML nodes exist in mathMLTree.js.
 *
 * TODO: refactor `span` and `anchor` into common superclass when
 * target environments support class inheritance
 */





/**
 * Create an HTML className based on a list of classes. In addition to joining
 * with spaces, we also remove empty classes.
 */
var createClass = function createClass(classes) {
  return classes.filter(function (cls) {
    return cls;
  }).join(" ");
};

var initNode = function initNode(classes, options, style) {
  this.classes = classes || [];
  this.attributes = {};
  this.height = 0;
  this.depth = 0;
  this.maxFontSize = 0;
  this.style = style || {};

  if (options) {
    if (options.style.isTight()) {
      this.classes.push("mtight");
    }

    var color = options.getColor();

    if (color) {
      this.style.color = color;
    }
  }
};
/**
 * Convert into an HTML node
 */


var _toNode = function toNode(tagName) {
  var node = document.createElement(tagName); // Apply the class

  node.className = createClass(this.classes); // Apply inline styles

  for (var style in this.style) {
    if (this.style.hasOwnProperty(style)) {
      // $FlowFixMe Flow doesn't seem to understand span.style's type.
      node.style[style] = this.style[style];
    }
  } // Apply attributes


  for (var attr in this.attributes) {
    if (this.attributes.hasOwnProperty(attr)) {
      node.setAttribute(attr, this.attributes[attr]);
    }
  } // Append the children, also as HTML nodes


  for (var i = 0; i < this.children.length; i++) {
    node.appendChild(this.children[i].toNode());
  }

  return node;
};
/**
 * Convert into an HTML markup string
 */


var _toMarkup = function toMarkup(tagName) {
  var markup = "<" + tagName; // Add the class

  if (this.classes.length) {
    markup += " class=\"" + utils.escape(createClass(this.classes)) + "\"";
  }

  var styles = ""; // Add the styles, after hyphenation

  for (var style in this.style) {
    if (this.style.hasOwnProperty(style)) {
      styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
    }
  }

  if (styles) {
    markup += " style=\"" + utils.escape(styles) + "\"";
  } // Add the attributes


  for (var attr in this.attributes) {
    if (this.attributes.hasOwnProperty(attr)) {
      markup += " " + attr + "=\"" + utils.escape(this.attributes[attr]) + "\"";
    }
  }

  markup += ">"; // Add the markup of the children, also as markup

  for (var i = 0; i < this.children.length; i++) {
    markup += this.children[i].toMarkup();
  }

  markup += "</" + tagName + ">";
  return markup;
}; // Making the type below exact with all optional fields doesn't work due to
// - https://github.com/facebook/flow/issues/4582
// - https://github.com/facebook/flow/issues/5688
// However, since *all* fields are optional, $Shape<> works as suggested in 5688
// above.
// This type does not include all CSS properties. Additional properties should
// be added as needed.


/**
 * This node represents a span node, with a className, a list of children, and
 * an inline style. It also contains information about its height, depth, and
 * maxFontSize.
 *
 * Represents two types with different uses: SvgSpan to wrap an SVG and DomSpan
 * otherwise. This typesafety is important when HTML builders access a span's
 * children.
 */
var Span = /*#__PURE__*/function () {
  function Span(classes, children, options, style) {
    this.children = void 0;
    this.attributes = void 0;
    this.classes = void 0;
    this.height = void 0;
    this.depth = void 0;
    this.width = void 0;
    this.maxFontSize = void 0;
    this.style = void 0;
    initNode.call(this, classes, options, style);
    this.children = children || [];
  }
  /**
   * Sets an arbitrary attribute on the span. Warning: use this wisely. Not
   * all browsers support attributes the same, and having too many custom
   * attributes is probably bad.
   */


  var _proto = Span.prototype;

  _proto.setAttribute = function setAttribute(attribute, value) {
    this.attributes[attribute] = value;
  };

  _proto.hasClass = function hasClass(className) {
    return utils.contains(this.classes, className);
  };

  _proto.toNode = function toNode() {
    return _toNode.call(this, "span");
  };

  _proto.toMarkup = function toMarkup() {
    return _toMarkup.call(this, "span");
  };

  return Span;
}();
/**
 * This node represents an anchor (<a>) element with a hyperlink.  See `span`
 * for further details.
 */

var Anchor = /*#__PURE__*/function () {
  function Anchor(href, classes, children, options) {
    this.children = void 0;
    this.attributes = void 0;
    this.classes = void 0;
    this.height = void 0;
    this.depth = void 0;
    this.maxFontSize = void 0;
    this.style = void 0;
    initNode.call(this, classes, options);
    this.children = children || [];
    this.setAttribute('href', href);
  }

  var _proto2 = Anchor.prototype;

  _proto2.setAttribute = function setAttribute(attribute, value) {
    this.attributes[attribute] = value;
  };

  _proto2.hasClass = function hasClass(className) {
    return utils.contains(this.classes, className);
  };

  _proto2.toNode = function toNode() {
    return _toNode.call(this, "a");
  };

  _proto2.toMarkup = function toMarkup() {
    return _toMarkup.call(this, "a");
  };

  return Anchor;
}();
/**
 * This node represents an image embed (<img>) element.
 */

var Img = /*#__PURE__*/function () {
  function Img(src, alt, style) {
    this.src = void 0;
    this.alt = void 0;
    this.classes = void 0;
    this.height = void 0;
    this.depth = void 0;
    this.maxFontSize = void 0;
    this.style = void 0;
    this.alt = alt;
    this.src = src;
    this.classes = ["mord"];
    this.style = style;
  }

  var _proto3 = Img.prototype;

  _proto3.hasClass = function hasClass(className) {
    return utils.contains(this.classes, className);
  };

  _proto3.toNode = function toNode() {
    var node = document.createElement("img");
    node.src = this.src;
    node.alt = this.alt;
    node.className = "mord"; // Apply inline styles

    for (var style in this.style) {
      if (this.style.hasOwnProperty(style)) {
        // $FlowFixMe
        node.style[style] = this.style[style];
      }
    }

    return node;
  };

  _proto3.toMarkup = function toMarkup() {
    var markup = "<img  src='" + this.src + " 'alt='" + this.alt + "' "; // Add the styles, after hyphenation

    var styles = "";

    for (var style in this.style) {
      if (this.style.hasOwnProperty(style)) {
        styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
      }
    }

    if (styles) {
      markup += " style=\"" + utils.escape(styles) + "\"";
    }

    markup += "'/>";
    return markup;
  };

  return Img;
}();
var iCombinations = {
  'î': "\u0131\u0302",
  'ï': "\u0131\u0308",
  'í': "\u0131\u0301",
  // 'ī': '\u0131\u0304', // enable when we add Extended Latin
  'ì': "\u0131\u0300"
};
/**
 * A symbol node contains information about a single symbol. It either renders
 * to a single text node, or a span with a single text node in it, depending on
 * whether it has CSS classes, styles, or needs italic correction.
 */

var SymbolNode = /*#__PURE__*/function () {
  function SymbolNode(text, height, depth, italic, skew, width, classes, style) {
    this.text = void 0;
    this.height = void 0;
    this.depth = void 0;
    this.italic = void 0;
    this.skew = void 0;
    this.width = void 0;
    this.maxFontSize = void 0;
    this.classes = void 0;
    this.style = void 0;
    this.text = text;
    this.height = height || 0;
    this.depth = depth || 0;
    this.italic = italic || 0;
    this.skew = skew || 0;
    this.width = width || 0;
    this.classes = classes || [];
    this.style = style || {};
    this.maxFontSize = 0; // Mark text from non-Latin scripts with specific classes so that we
    // can specify which fonts to use.  This allows us to render these
    // characters with a serif font in situations where the browser would
    // either default to a sans serif or render a placeholder character.
    // We use CSS class names like cjk_fallback, hangul_fallback and
    // brahmic_fallback. See ./unicodeScripts.js for the set of possible
    // script names

    var script = scriptFromCodepoint(this.text.charCodeAt(0));

    if (script) {
      this.classes.push(script + "_fallback");
    }

    if (/[îïíì]/.test(this.text)) {
      // add ī when we add Extended Latin
      this.text = iCombinations[this.text];
    }
  }

  var _proto4 = SymbolNode.prototype;

  _proto4.hasClass = function hasClass(className) {
    return utils.contains(this.classes, className);
  }
  /**
   * Creates a text node or span from a symbol node. Note that a span is only
   * created if it is needed.
   */
  ;

  _proto4.toNode = function toNode() {
    var node = document.createTextNode(this.text);
    var span = null;

    if (this.italic > 0) {
      span = document.createElement("span");
      span.style.marginRight = this.italic + "em";
    }

    if (this.classes.length > 0) {
      span = span || document.createElement("span");
      span.className = createClass(this.classes);
    }

    for (var style in this.style) {
      if (this.style.hasOwnProperty(style)) {
        span = span || document.createElement("span"); // $FlowFixMe Flow doesn't seem to understand span.style's type.

        span.style[style] = this.style[style];
      }
    }

    if (span) {
      span.appendChild(node);
      return span;
    } else {
      return node;
    }
  }
  /**
   * Creates markup for a symbol node.
   */
  ;

  _proto4.toMarkup = function toMarkup() {
    // TODO(alpert): More duplication than I'd like from
    // span.prototype.toMarkup and symbolNode.prototype.toNode...
    var needsSpan = false;
    var markup = "<span";

    if (this.classes.length) {
      needsSpan = true;
      markup += " class=\"";
      markup += utils.escape(createClass(this.classes));
      markup += "\"";
    }

    var styles = "";

    if (this.italic > 0) {
      styles += "margin-right:" + this.italic + "em;";
    }

    for (var style in this.style) {
      if (this.style.hasOwnProperty(style)) {
        styles += utils.hyphenate(style) + ":" + this.style[style] + ";";
      }
    }

    if (styles) {
      needsSpan = true;
      markup += " style=\"" + utils.escape(styles) + "\"";
    }

    var escaped = utils.escape(this.text);

    if (needsSpan) {
      markup += ">";
      markup += escaped;
      markup += "</span>";
      return markup;
    } else {
      return escaped;
    }
  };

  return SymbolNode;
}();
/**
 * SVG nodes are used to render stretchy wide elements.
 */

var SvgNode = /*#__PURE__*/function () {
  function SvgNode(children, attributes) {
    this.children = void 0;
    this.attributes = void 0;
    this.children = children || [];
    this.attributes = attributes || {};
  }

  var _proto5 = SvgNode.prototype;

  _proto5.toNode = function toNode() {
    var svgNS = "http://www.w3.org/2000/svg";
    var node = document.createElementNS(svgNS, "svg"); // Apply attributes

    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        node.setAttribute(attr, this.attributes[attr]);
      }
    }

    for (var i = 0; i < this.children.length; i++) {
      node.appendChild(this.children[i].toNode());
    }

    return node;
  };

  _proto5.toMarkup = function toMarkup() {
    var markup = "<svg xmlns=\"http://www.w3.org/2000/svg\""; // Apply attributes

    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        markup += " " + attr + "='" + this.attributes[attr] + "'";
      }
    }

    markup += ">";

    for (var i = 0; i < this.children.length; i++) {
      markup += this.children[i].toMarkup();
    }

    markup += "</svg>";
    return markup;
  };

  return SvgNode;
}();
var PathNode = /*#__PURE__*/function () {
  function PathNode(pathName, alternate) {
    this.pathName = void 0;
    this.alternate = void 0;
    this.pathName = pathName;
    this.alternate = alternate; // Used only for \sqrt, \phase, & tall delims
  }

  var _proto6 = PathNode.prototype;

  _proto6.toNode = function toNode() {
    var svgNS = "http://www.w3.org/2000/svg";
    var node = document.createElementNS(svgNS, "path");

    if (this.alternate) {
      node.setAttribute("d", this.alternate);
    } else {
      node.setAttribute("d", path[this.pathName]);
    }

    return node;
  };

  _proto6.toMarkup = function toMarkup() {
    if (this.alternate) {
      return "<path d='" + this.alternate + "'/>";
    } else {
      return "<path d='" + path[this.pathName] + "'/>";
    }
  };

  return PathNode;
}();
var LineNode = /*#__PURE__*/function () {
  function LineNode(attributes) {
    this.attributes = void 0;
    this.attributes = attributes || {};
  }

  var _proto7 = LineNode.prototype;

  _proto7.toNode = function toNode() {
    var svgNS = "http://www.w3.org/2000/svg";
    var node = document.createElementNS(svgNS, "line"); // Apply attributes

    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        node.setAttribute(attr, this.attributes[attr]);
      }
    }

    return node;
  };

  _proto7.toMarkup = function toMarkup() {
    var markup = "<line";

    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        markup += " " + attr + "='" + this.attributes[attr] + "'";
      }
    }

    markup += "/>";
    return markup;
  };

  return LineNode;
}();
function assertSymbolDomNode(group) {
  if (group instanceof SymbolNode) {
    return group;
  } else {
    throw new Error("Expected symbolNode but got " + String(group) + ".");
  }
}
function assertSpan(group) {
  if (group instanceof Span) {
    return group;
  } else {
    throw new Error("Expected span<HtmlDomNode> but got " + String(group) + ".");
  }
}
;// CONCATENATED MODULE: ./src/fontMetricsData.js
// This file is GENERATED by buildMetrics.sh. DO NOT MODIFY.
/* harmony default export */ var fontMetricsData = ({
  "AMS-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "65": [0, 0.68889, 0, 0, 0.72222],
    "66": [0, 0.68889, 0, 0, 0.66667],
    "67": [0, 0.68889, 0, 0, 0.72222],
    "68": [0, 0.68889, 0, 0, 0.72222],
    "69": [0, 0.68889, 0, 0, 0.66667],
    "70": [0, 0.68889, 0, 0, 0.61111],
    "71": [0, 0.68889, 0, 0, 0.77778],
    "72": [0, 0.68889, 0, 0, 0.77778],
    "73": [0, 0.68889, 0, 0, 0.38889],
    "74": [0.16667, 0.68889, 0, 0, 0.5],
    "75": [0, 0.68889, 0, 0, 0.77778],
    "76": [0, 0.68889, 0, 0, 0.66667],
    "77": [0, 0.68889, 0, 0, 0.94445],
    "78": [0, 0.68889, 0, 0, 0.72222],
    "79": [0.16667, 0.68889, 0, 0, 0.77778],
    "80": [0, 0.68889, 0, 0, 0.61111],
    "81": [0.16667, 0.68889, 0, 0, 0.77778],
    "82": [0, 0.68889, 0, 0, 0.72222],
    "83": [0, 0.68889, 0, 0, 0.55556],
    "84": [0, 0.68889, 0, 0, 0.66667],
    "85": [0, 0.68889, 0, 0, 0.72222],
    "86": [0, 0.68889, 0, 0, 0.72222],
    "87": [0, 0.68889, 0, 0, 1.0],
    "88": [0, 0.68889, 0, 0, 0.72222],
    "89": [0, 0.68889, 0, 0, 0.72222],
    "90": [0, 0.68889, 0, 0, 0.66667],
    "107": [0, 0.68889, 0, 0, 0.55556],
    "160": [0, 0, 0, 0, 0.25],
    "165": [0, 0.675, 0.025, 0, 0.75],
    "174": [0.15559, 0.69224, 0, 0, 0.94666],
    "240": [0, 0.68889, 0, 0, 0.55556],
    "295": [0, 0.68889, 0, 0, 0.54028],
    "710": [0, 0.825, 0, 0, 2.33334],
    "732": [0, 0.9, 0, 0, 2.33334],
    "770": [0, 0.825, 0, 0, 2.33334],
    "771": [0, 0.9, 0, 0, 2.33334],
    "989": [0.08167, 0.58167, 0, 0, 0.77778],
    "1008": [0, 0.43056, 0.04028, 0, 0.66667],
    "8245": [0, 0.54986, 0, 0, 0.275],
    "8463": [0, 0.68889, 0, 0, 0.54028],
    "8487": [0, 0.68889, 0, 0, 0.72222],
    "8498": [0, 0.68889, 0, 0, 0.55556],
    "8502": [0, 0.68889, 0, 0, 0.66667],
    "8503": [0, 0.68889, 0, 0, 0.44445],
    "8504": [0, 0.68889, 0, 0, 0.66667],
    "8513": [0, 0.68889, 0, 0, 0.63889],
    "8592": [-0.03598, 0.46402, 0, 0, 0.5],
    "8594": [-0.03598, 0.46402, 0, 0, 0.5],
    "8602": [-0.13313, 0.36687, 0, 0, 1.0],
    "8603": [-0.13313, 0.36687, 0, 0, 1.0],
    "8606": [0.01354, 0.52239, 0, 0, 1.0],
    "8608": [0.01354, 0.52239, 0, 0, 1.0],
    "8610": [0.01354, 0.52239, 0, 0, 1.11111],
    "8611": [0.01354, 0.52239, 0, 0, 1.11111],
    "8619": [0, 0.54986, 0, 0, 1.0],
    "8620": [0, 0.54986, 0, 0, 1.0],
    "8621": [-0.13313, 0.37788, 0, 0, 1.38889],
    "8622": [-0.13313, 0.36687, 0, 0, 1.0],
    "8624": [0, 0.69224, 0, 0, 0.5],
    "8625": [0, 0.69224, 0, 0, 0.5],
    "8630": [0, 0.43056, 0, 0, 1.0],
    "8631": [0, 0.43056, 0, 0, 1.0],
    "8634": [0.08198, 0.58198, 0, 0, 0.77778],
    "8635": [0.08198, 0.58198, 0, 0, 0.77778],
    "8638": [0.19444, 0.69224, 0, 0, 0.41667],
    "8639": [0.19444, 0.69224, 0, 0, 0.41667],
    "8642": [0.19444, 0.69224, 0, 0, 0.41667],
    "8643": [0.19444, 0.69224, 0, 0, 0.41667],
    "8644": [0.1808, 0.675, 0, 0, 1.0],
    "8646": [0.1808, 0.675, 0, 0, 1.0],
    "8647": [0.1808, 0.675, 0, 0, 1.0],
    "8648": [0.19444, 0.69224, 0, 0, 0.83334],
    "8649": [0.1808, 0.675, 0, 0, 1.0],
    "8650": [0.19444, 0.69224, 0, 0, 0.83334],
    "8651": [0.01354, 0.52239, 0, 0, 1.0],
    "8652": [0.01354, 0.52239, 0, 0, 1.0],
    "8653": [-0.13313, 0.36687, 0, 0, 1.0],
    "8654": [-0.13313, 0.36687, 0, 0, 1.0],
    "8655": [-0.13313, 0.36687, 0, 0, 1.0],
    "8666": [0.13667, 0.63667, 0, 0, 1.0],
    "8667": [0.13667, 0.63667, 0, 0, 1.0],
    "8669": [-0.13313, 0.37788, 0, 0, 1.0],
    "8672": [-0.064, 0.437, 0, 0, 1.334],
    "8674": [-0.064, 0.437, 0, 0, 1.334],
    "8705": [0, 0.825, 0, 0, 0.5],
    "8708": [0, 0.68889, 0, 0, 0.55556],
    "8709": [0.08167, 0.58167, 0, 0, 0.77778],
    "8717": [0, 0.43056, 0, 0, 0.42917],
    "8722": [-0.03598, 0.46402, 0, 0, 0.5],
    "8724": [0.08198, 0.69224, 0, 0, 0.77778],
    "8726": [0.08167, 0.58167, 0, 0, 0.77778],
    "8733": [0, 0.69224, 0, 0, 0.77778],
    "8736": [0, 0.69224, 0, 0, 0.72222],
    "8737": [0, 0.69224, 0, 0, 0.72222],
    "8738": [0.03517, 0.52239, 0, 0, 0.72222],
    "8739": [0.08167, 0.58167, 0, 0, 0.22222],
    "8740": [0.25142, 0.74111, 0, 0, 0.27778],
    "8741": [0.08167, 0.58167, 0, 0, 0.38889],
    "8742": [0.25142, 0.74111, 0, 0, 0.5],
    "8756": [0, 0.69224, 0, 0, 0.66667],
    "8757": [0, 0.69224, 0, 0, 0.66667],
    "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
    "8765": [-0.13313, 0.37788, 0, 0, 0.77778],
    "8769": [-0.13313, 0.36687, 0, 0, 0.77778],
    "8770": [-0.03625, 0.46375, 0, 0, 0.77778],
    "8774": [0.30274, 0.79383, 0, 0, 0.77778],
    "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
    "8778": [0.08167, 0.58167, 0, 0, 0.77778],
    "8782": [0.06062, 0.54986, 0, 0, 0.77778],
    "8783": [0.06062, 0.54986, 0, 0, 0.77778],
    "8785": [0.08198, 0.58198, 0, 0, 0.77778],
    "8786": [0.08198, 0.58198, 0, 0, 0.77778],
    "8787": [0.08198, 0.58198, 0, 0, 0.77778],
    "8790": [0, 0.69224, 0, 0, 0.77778],
    "8791": [0.22958, 0.72958, 0, 0, 0.77778],
    "8796": [0.08198, 0.91667, 0, 0, 0.77778],
    "8806": [0.25583, 0.75583, 0, 0, 0.77778],
    "8807": [0.25583, 0.75583, 0, 0, 0.77778],
    "8808": [0.25142, 0.75726, 0, 0, 0.77778],
    "8809": [0.25142, 0.75726, 0, 0, 0.77778],
    "8812": [0.25583, 0.75583, 0, 0, 0.5],
    "8814": [0.20576, 0.70576, 0, 0, 0.77778],
    "8815": [0.20576, 0.70576, 0, 0, 0.77778],
    "8816": [0.30274, 0.79383, 0, 0, 0.77778],
    "8817": [0.30274, 0.79383, 0, 0, 0.77778],
    "8818": [0.22958, 0.72958, 0, 0, 0.77778],
    "8819": [0.22958, 0.72958, 0, 0, 0.77778],
    "8822": [0.1808, 0.675, 0, 0, 0.77778],
    "8823": [0.1808, 0.675, 0, 0, 0.77778],
    "8828": [0.13667, 0.63667, 0, 0, 0.77778],
    "8829": [0.13667, 0.63667, 0, 0, 0.77778],
    "8830": [0.22958, 0.72958, 0, 0, 0.77778],
    "8831": [0.22958, 0.72958, 0, 0, 0.77778],
    "8832": [0.20576, 0.70576, 0, 0, 0.77778],
    "8833": [0.20576, 0.70576, 0, 0, 0.77778],
    "8840": [0.30274, 0.79383, 0, 0, 0.77778],
    "8841": [0.30274, 0.79383, 0, 0, 0.77778],
    "8842": [0.13597, 0.63597, 0, 0, 0.77778],
    "8843": [0.13597, 0.63597, 0, 0, 0.77778],
    "8847": [0.03517, 0.54986, 0, 0, 0.77778],
    "8848": [0.03517, 0.54986, 0, 0, 0.77778],
    "8858": [0.08198, 0.58198, 0, 0, 0.77778],
    "8859": [0.08198, 0.58198, 0, 0, 0.77778],
    "8861": [0.08198, 0.58198, 0, 0, 0.77778],
    "8862": [0, 0.675, 0, 0, 0.77778],
    "8863": [0, 0.675, 0, 0, 0.77778],
    "8864": [0, 0.675, 0, 0, 0.77778],
    "8865": [0, 0.675, 0, 0, 0.77778],
    "8872": [0, 0.69224, 0, 0, 0.61111],
    "8873": [0, 0.69224, 0, 0, 0.72222],
    "8874": [0, 0.69224, 0, 0, 0.88889],
    "8876": [0, 0.68889, 0, 0, 0.61111],
    "8877": [0, 0.68889, 0, 0, 0.61111],
    "8878": [0, 0.68889, 0, 0, 0.72222],
    "8879": [0, 0.68889, 0, 0, 0.72222],
    "8882": [0.03517, 0.54986, 0, 0, 0.77778],
    "8883": [0.03517, 0.54986, 0, 0, 0.77778],
    "8884": [0.13667, 0.63667, 0, 0, 0.77778],
    "8885": [0.13667, 0.63667, 0, 0, 0.77778],
    "8888": [0, 0.54986, 0, 0, 1.11111],
    "8890": [0.19444, 0.43056, 0, 0, 0.55556],
    "8891": [0.19444, 0.69224, 0, 0, 0.61111],
    "8892": [0.19444, 0.69224, 0, 0, 0.61111],
    "8901": [0, 0.54986, 0, 0, 0.27778],
    "8903": [0.08167, 0.58167, 0, 0, 0.77778],
    "8905": [0.08167, 0.58167, 0, 0, 0.77778],
    "8906": [0.08167, 0.58167, 0, 0, 0.77778],
    "8907": [0, 0.69224, 0, 0, 0.77778],
    "8908": [0, 0.69224, 0, 0, 0.77778],
    "8909": [-0.03598, 0.46402, 0, 0, 0.77778],
    "8910": [0, 0.54986, 0, 0, 0.76042],
    "8911": [0, 0.54986, 0, 0, 0.76042],
    "8912": [0.03517, 0.54986, 0, 0, 0.77778],
    "8913": [0.03517, 0.54986, 0, 0, 0.77778],
    "8914": [0, 0.54986, 0, 0, 0.66667],
    "8915": [0, 0.54986, 0, 0, 0.66667],
    "8916": [0, 0.69224, 0, 0, 0.66667],
    "8918": [0.0391, 0.5391, 0, 0, 0.77778],
    "8919": [0.0391, 0.5391, 0, 0, 0.77778],
    "8920": [0.03517, 0.54986, 0, 0, 1.33334],
    "8921": [0.03517, 0.54986, 0, 0, 1.33334],
    "8922": [0.38569, 0.88569, 0, 0, 0.77778],
    "8923": [0.38569, 0.88569, 0, 0, 0.77778],
    "8926": [0.13667, 0.63667, 0, 0, 0.77778],
    "8927": [0.13667, 0.63667, 0, 0, 0.77778],
    "8928": [0.30274, 0.79383, 0, 0, 0.77778],
    "8929": [0.30274, 0.79383, 0, 0, 0.77778],
    "8934": [0.23222, 0.74111, 0, 0, 0.77778],
    "8935": [0.23222, 0.74111, 0, 0, 0.77778],
    "8936": [0.23222, 0.74111, 0, 0, 0.77778],
    "8937": [0.23222, 0.74111, 0, 0, 0.77778],
    "8938": [0.20576, 0.70576, 0, 0, 0.77778],
    "8939": [0.20576, 0.70576, 0, 0, 0.77778],
    "8940": [0.30274, 0.79383, 0, 0, 0.77778],
    "8941": [0.30274, 0.79383, 0, 0, 0.77778],
    "8994": [0.19444, 0.69224, 0, 0, 0.77778],
    "8995": [0.19444, 0.69224, 0, 0, 0.77778],
    "9416": [0.15559, 0.69224, 0, 0, 0.90222],
    "9484": [0, 0.69224, 0, 0, 0.5],
    "9488": [0, 0.69224, 0, 0, 0.5],
    "9492": [0, 0.37788, 0, 0, 0.5],
    "9496": [0, 0.37788, 0, 0, 0.5],
    "9585": [0.19444, 0.68889, 0, 0, 0.88889],
    "9586": [0.19444, 0.74111, 0, 0, 0.88889],
    "9632": [0, 0.675, 0, 0, 0.77778],
    "9633": [0, 0.675, 0, 0, 0.77778],
    "9650": [0, 0.54986, 0, 0, 0.72222],
    "9651": [0, 0.54986, 0, 0, 0.72222],
    "9654": [0.03517, 0.54986, 0, 0, 0.77778],
    "9660": [0, 0.54986, 0, 0, 0.72222],
    "9661": [0, 0.54986, 0, 0, 0.72222],
    "9664": [0.03517, 0.54986, 0, 0, 0.77778],
    "9674": [0.11111, 0.69224, 0, 0, 0.66667],
    "9733": [0.19444, 0.69224, 0, 0, 0.94445],
    "10003": [0, 0.69224, 0, 0, 0.83334],
    "10016": [0, 0.69224, 0, 0, 0.83334],
    "10731": [0.11111, 0.69224, 0, 0, 0.66667],
    "10846": [0.19444, 0.75583, 0, 0, 0.61111],
    "10877": [0.13667, 0.63667, 0, 0, 0.77778],
    "10878": [0.13667, 0.63667, 0, 0, 0.77778],
    "10885": [0.25583, 0.75583, 0, 0, 0.77778],
    "10886": [0.25583, 0.75583, 0, 0, 0.77778],
    "10887": [0.13597, 0.63597, 0, 0, 0.77778],
    "10888": [0.13597, 0.63597, 0, 0, 0.77778],
    "10889": [0.26167, 0.75726, 0, 0, 0.77778],
    "10890": [0.26167, 0.75726, 0, 0, 0.77778],
    "10891": [0.48256, 0.98256, 0, 0, 0.77778],
    "10892": [0.48256, 0.98256, 0, 0, 0.77778],
    "10901": [0.13667, 0.63667, 0, 0, 0.77778],
    "10902": [0.13667, 0.63667, 0, 0, 0.77778],
    "10933": [0.25142, 0.75726, 0, 0, 0.77778],
    "10934": [0.25142, 0.75726, 0, 0, 0.77778],
    "10935": [0.26167, 0.75726, 0, 0, 0.77778],
    "10936": [0.26167, 0.75726, 0, 0, 0.77778],
    "10937": [0.26167, 0.75726, 0, 0, 0.77778],
    "10938": [0.26167, 0.75726, 0, 0, 0.77778],
    "10949": [0.25583, 0.75583, 0, 0, 0.77778],
    "10950": [0.25583, 0.75583, 0, 0, 0.77778],
    "10955": [0.28481, 0.79383, 0, 0, 0.77778],
    "10956": [0.28481, 0.79383, 0, 0, 0.77778],
    "57350": [0.08167, 0.58167, 0, 0, 0.22222],
    "57351": [0.08167, 0.58167, 0, 0, 0.38889],
    "57352": [0.08167, 0.58167, 0, 0, 0.77778],
    "57353": [0, 0.43056, 0.04028, 0, 0.66667],
    "57356": [0.25142, 0.75726, 0, 0, 0.77778],
    "57357": [0.25142, 0.75726, 0, 0, 0.77778],
    "57358": [0.41951, 0.91951, 0, 0, 0.77778],
    "57359": [0.30274, 0.79383, 0, 0, 0.77778],
    "57360": [0.30274, 0.79383, 0, 0, 0.77778],
    "57361": [0.41951, 0.91951, 0, 0, 0.77778],
    "57366": [0.25142, 0.75726, 0, 0, 0.77778],
    "57367": [0.25142, 0.75726, 0, 0, 0.77778],
    "57368": [0.25142, 0.75726, 0, 0, 0.77778],
    "57369": [0.25142, 0.75726, 0, 0, 0.77778],
    "57370": [0.13597, 0.63597, 0, 0, 0.77778],
    "57371": [0.13597, 0.63597, 0, 0, 0.77778]
  },
  "Caligraphic-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "65": [0, 0.68333, 0, 0.19445, 0.79847],
    "66": [0, 0.68333, 0.03041, 0.13889, 0.65681],
    "67": [0, 0.68333, 0.05834, 0.13889, 0.52653],
    "68": [0, 0.68333, 0.02778, 0.08334, 0.77139],
    "69": [0, 0.68333, 0.08944, 0.11111, 0.52778],
    "70": [0, 0.68333, 0.09931, 0.11111, 0.71875],
    "71": [0.09722, 0.68333, 0.0593, 0.11111, 0.59487],
    "72": [0, 0.68333, 0.00965, 0.11111, 0.84452],
    "73": [0, 0.68333, 0.07382, 0, 0.54452],
    "74": [0.09722, 0.68333, 0.18472, 0.16667, 0.67778],
    "75": [0, 0.68333, 0.01445, 0.05556, 0.76195],
    "76": [0, 0.68333, 0, 0.13889, 0.68972],
    "77": [0, 0.68333, 0, 0.13889, 1.2009],
    "78": [0, 0.68333, 0.14736, 0.08334, 0.82049],
    "79": [0, 0.68333, 0.02778, 0.11111, 0.79611],
    "80": [0, 0.68333, 0.08222, 0.08334, 0.69556],
    "81": [0.09722, 0.68333, 0, 0.11111, 0.81667],
    "82": [0, 0.68333, 0, 0.08334, 0.8475],
    "83": [0, 0.68333, 0.075, 0.13889, 0.60556],
    "84": [0, 0.68333, 0.25417, 0, 0.54464],
    "85": [0, 0.68333, 0.09931, 0.08334, 0.62583],
    "86": [0, 0.68333, 0.08222, 0, 0.61278],
    "87": [0, 0.68333, 0.08222, 0.08334, 0.98778],
    "88": [0, 0.68333, 0.14643, 0.13889, 0.7133],
    "89": [0.09722, 0.68333, 0.08222, 0.08334, 0.66834],
    "90": [0, 0.68333, 0.07944, 0.13889, 0.72473],
    "160": [0, 0, 0, 0, 0.25]
  },
  "Fraktur-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69141, 0, 0, 0.29574],
    "34": [0, 0.69141, 0, 0, 0.21471],
    "38": [0, 0.69141, 0, 0, 0.73786],
    "39": [0, 0.69141, 0, 0, 0.21201],
    "40": [0.24982, 0.74947, 0, 0, 0.38865],
    "41": [0.24982, 0.74947, 0, 0, 0.38865],
    "42": [0, 0.62119, 0, 0, 0.27764],
    "43": [0.08319, 0.58283, 0, 0, 0.75623],
    "44": [0, 0.10803, 0, 0, 0.27764],
    "45": [0.08319, 0.58283, 0, 0, 0.75623],
    "46": [0, 0.10803, 0, 0, 0.27764],
    "47": [0.24982, 0.74947, 0, 0, 0.50181],
    "48": [0, 0.47534, 0, 0, 0.50181],
    "49": [0, 0.47534, 0, 0, 0.50181],
    "50": [0, 0.47534, 0, 0, 0.50181],
    "51": [0.18906, 0.47534, 0, 0, 0.50181],
    "52": [0.18906, 0.47534, 0, 0, 0.50181],
    "53": [0.18906, 0.47534, 0, 0, 0.50181],
    "54": [0, 0.69141, 0, 0, 0.50181],
    "55": [0.18906, 0.47534, 0, 0, 0.50181],
    "56": [0, 0.69141, 0, 0, 0.50181],
    "57": [0.18906, 0.47534, 0, 0, 0.50181],
    "58": [0, 0.47534, 0, 0, 0.21606],
    "59": [0.12604, 0.47534, 0, 0, 0.21606],
    "61": [-0.13099, 0.36866, 0, 0, 0.75623],
    "63": [0, 0.69141, 0, 0, 0.36245],
    "65": [0, 0.69141, 0, 0, 0.7176],
    "66": [0, 0.69141, 0, 0, 0.88397],
    "67": [0, 0.69141, 0, 0, 0.61254],
    "68": [0, 0.69141, 0, 0, 0.83158],
    "69": [0, 0.69141, 0, 0, 0.66278],
    "70": [0.12604, 0.69141, 0, 0, 0.61119],
    "71": [0, 0.69141, 0, 0, 0.78539],
    "72": [0.06302, 0.69141, 0, 0, 0.7203],
    "73": [0, 0.69141, 0, 0, 0.55448],
    "74": [0.12604, 0.69141, 0, 0, 0.55231],
    "75": [0, 0.69141, 0, 0, 0.66845],
    "76": [0, 0.69141, 0, 0, 0.66602],
    "77": [0, 0.69141, 0, 0, 1.04953],
    "78": [0, 0.69141, 0, 0, 0.83212],
    "79": [0, 0.69141, 0, 0, 0.82699],
    "80": [0.18906, 0.69141, 0, 0, 0.82753],
    "81": [0.03781, 0.69141, 0, 0, 0.82699],
    "82": [0, 0.69141, 0, 0, 0.82807],
    "83": [0, 0.69141, 0, 0, 0.82861],
    "84": [0, 0.69141, 0, 0, 0.66899],
    "85": [0, 0.69141, 0, 0, 0.64576],
    "86": [0, 0.69141, 0, 0, 0.83131],
    "87": [0, 0.69141, 0, 0, 1.04602],
    "88": [0, 0.69141, 0, 0, 0.71922],
    "89": [0.18906, 0.69141, 0, 0, 0.83293],
    "90": [0.12604, 0.69141, 0, 0, 0.60201],
    "91": [0.24982, 0.74947, 0, 0, 0.27764],
    "93": [0.24982, 0.74947, 0, 0, 0.27764],
    "94": [0, 0.69141, 0, 0, 0.49965],
    "97": [0, 0.47534, 0, 0, 0.50046],
    "98": [0, 0.69141, 0, 0, 0.51315],
    "99": [0, 0.47534, 0, 0, 0.38946],
    "100": [0, 0.62119, 0, 0, 0.49857],
    "101": [0, 0.47534, 0, 0, 0.40053],
    "102": [0.18906, 0.69141, 0, 0, 0.32626],
    "103": [0.18906, 0.47534, 0, 0, 0.5037],
    "104": [0.18906, 0.69141, 0, 0, 0.52126],
    "105": [0, 0.69141, 0, 0, 0.27899],
    "106": [0, 0.69141, 0, 0, 0.28088],
    "107": [0, 0.69141, 0, 0, 0.38946],
    "108": [0, 0.69141, 0, 0, 0.27953],
    "109": [0, 0.47534, 0, 0, 0.76676],
    "110": [0, 0.47534, 0, 0, 0.52666],
    "111": [0, 0.47534, 0, 0, 0.48885],
    "112": [0.18906, 0.52396, 0, 0, 0.50046],
    "113": [0.18906, 0.47534, 0, 0, 0.48912],
    "114": [0, 0.47534, 0, 0, 0.38919],
    "115": [0, 0.47534, 0, 0, 0.44266],
    "116": [0, 0.62119, 0, 0, 0.33301],
    "117": [0, 0.47534, 0, 0, 0.5172],
    "118": [0, 0.52396, 0, 0, 0.5118],
    "119": [0, 0.52396, 0, 0, 0.77351],
    "120": [0.18906, 0.47534, 0, 0, 0.38865],
    "121": [0.18906, 0.47534, 0, 0, 0.49884],
    "122": [0.18906, 0.47534, 0, 0, 0.39054],
    "160": [0, 0, 0, 0, 0.25],
    "8216": [0, 0.69141, 0, 0, 0.21471],
    "8217": [0, 0.69141, 0, 0, 0.21471],
    "58112": [0, 0.62119, 0, 0, 0.49749],
    "58113": [0, 0.62119, 0, 0, 0.4983],
    "58114": [0.18906, 0.69141, 0, 0, 0.33328],
    "58115": [0.18906, 0.69141, 0, 0, 0.32923],
    "58116": [0.18906, 0.47534, 0, 0, 0.50343],
    "58117": [0, 0.69141, 0, 0, 0.33301],
    "58118": [0, 0.62119, 0, 0, 0.33409],
    "58119": [0, 0.47534, 0, 0, 0.50073]
  },
  "Main-Bold": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0, 0, 0.35],
    "34": [0, 0.69444, 0, 0, 0.60278],
    "35": [0.19444, 0.69444, 0, 0, 0.95833],
    "36": [0.05556, 0.75, 0, 0, 0.575],
    "37": [0.05556, 0.75, 0, 0, 0.95833],
    "38": [0, 0.69444, 0, 0, 0.89444],
    "39": [0, 0.69444, 0, 0, 0.31944],
    "40": [0.25, 0.75, 0, 0, 0.44722],
    "41": [0.25, 0.75, 0, 0, 0.44722],
    "42": [0, 0.75, 0, 0, 0.575],
    "43": [0.13333, 0.63333, 0, 0, 0.89444],
    "44": [0.19444, 0.15556, 0, 0, 0.31944],
    "45": [0, 0.44444, 0, 0, 0.38333],
    "46": [0, 0.15556, 0, 0, 0.31944],
    "47": [0.25, 0.75, 0, 0, 0.575],
    "48": [0, 0.64444, 0, 0, 0.575],
    "49": [0, 0.64444, 0, 0, 0.575],
    "50": [0, 0.64444, 0, 0, 0.575],
    "51": [0, 0.64444, 0, 0, 0.575],
    "52": [0, 0.64444, 0, 0, 0.575],
    "53": [0, 0.64444, 0, 0, 0.575],
    "54": [0, 0.64444, 0, 0, 0.575],
    "55": [0, 0.64444, 0, 0, 0.575],
    "56": [0, 0.64444, 0, 0, 0.575],
    "57": [0, 0.64444, 0, 0, 0.575],
    "58": [0, 0.44444, 0, 0, 0.31944],
    "59": [0.19444, 0.44444, 0, 0, 0.31944],
    "60": [0.08556, 0.58556, 0, 0, 0.89444],
    "61": [-0.10889, 0.39111, 0, 0, 0.89444],
    "62": [0.08556, 0.58556, 0, 0, 0.89444],
    "63": [0, 0.69444, 0, 0, 0.54305],
    "64": [0, 0.69444, 0, 0, 0.89444],
    "65": [0, 0.68611, 0, 0, 0.86944],
    "66": [0, 0.68611, 0, 0, 0.81805],
    "67": [0, 0.68611, 0, 0, 0.83055],
    "68": [0, 0.68611, 0, 0, 0.88194],
    "69": [0, 0.68611, 0, 0, 0.75555],
    "70": [0, 0.68611, 0, 0, 0.72361],
    "71": [0, 0.68611, 0, 0, 0.90416],
    "72": [0, 0.68611, 0, 0, 0.9],
    "73": [0, 0.68611, 0, 0, 0.43611],
    "74": [0, 0.68611, 0, 0, 0.59444],
    "75": [0, 0.68611, 0, 0, 0.90138],
    "76": [0, 0.68611, 0, 0, 0.69166],
    "77": [0, 0.68611, 0, 0, 1.09166],
    "78": [0, 0.68611, 0, 0, 0.9],
    "79": [0, 0.68611, 0, 0, 0.86388],
    "80": [0, 0.68611, 0, 0, 0.78611],
    "81": [0.19444, 0.68611, 0, 0, 0.86388],
    "82": [0, 0.68611, 0, 0, 0.8625],
    "83": [0, 0.68611, 0, 0, 0.63889],
    "84": [0, 0.68611, 0, 0, 0.8],
    "85": [0, 0.68611, 0, 0, 0.88472],
    "86": [0, 0.68611, 0.01597, 0, 0.86944],
    "87": [0, 0.68611, 0.01597, 0, 1.18888],
    "88": [0, 0.68611, 0, 0, 0.86944],
    "89": [0, 0.68611, 0.02875, 0, 0.86944],
    "90": [0, 0.68611, 0, 0, 0.70277],
    "91": [0.25, 0.75, 0, 0, 0.31944],
    "92": [0.25, 0.75, 0, 0, 0.575],
    "93": [0.25, 0.75, 0, 0, 0.31944],
    "94": [0, 0.69444, 0, 0, 0.575],
    "95": [0.31, 0.13444, 0.03194, 0, 0.575],
    "97": [0, 0.44444, 0, 0, 0.55902],
    "98": [0, 0.69444, 0, 0, 0.63889],
    "99": [0, 0.44444, 0, 0, 0.51111],
    "100": [0, 0.69444, 0, 0, 0.63889],
    "101": [0, 0.44444, 0, 0, 0.52708],
    "102": [0, 0.69444, 0.10903, 0, 0.35139],
    "103": [0.19444, 0.44444, 0.01597, 0, 0.575],
    "104": [0, 0.69444, 0, 0, 0.63889],
    "105": [0, 0.69444, 0, 0, 0.31944],
    "106": [0.19444, 0.69444, 0, 0, 0.35139],
    "107": [0, 0.69444, 0, 0, 0.60694],
    "108": [0, 0.69444, 0, 0, 0.31944],
    "109": [0, 0.44444, 0, 0, 0.95833],
    "110": [0, 0.44444, 0, 0, 0.63889],
    "111": [0, 0.44444, 0, 0, 0.575],
    "112": [0.19444, 0.44444, 0, 0, 0.63889],
    "113": [0.19444, 0.44444, 0, 0, 0.60694],
    "114": [0, 0.44444, 0, 0, 0.47361],
    "115": [0, 0.44444, 0, 0, 0.45361],
    "116": [0, 0.63492, 0, 0, 0.44722],
    "117": [0, 0.44444, 0, 0, 0.63889],
    "118": [0, 0.44444, 0.01597, 0, 0.60694],
    "119": [0, 0.44444, 0.01597, 0, 0.83055],
    "120": [0, 0.44444, 0, 0, 0.60694],
    "121": [0.19444, 0.44444, 0.01597, 0, 0.60694],
    "122": [0, 0.44444, 0, 0, 0.51111],
    "123": [0.25, 0.75, 0, 0, 0.575],
    "124": [0.25, 0.75, 0, 0, 0.31944],
    "125": [0.25, 0.75, 0, 0, 0.575],
    "126": [0.35, 0.34444, 0, 0, 0.575],
    "160": [0, 0, 0, 0, 0.25],
    "163": [0, 0.69444, 0, 0, 0.86853],
    "168": [0, 0.69444, 0, 0, 0.575],
    "172": [0, 0.44444, 0, 0, 0.76666],
    "176": [0, 0.69444, 0, 0, 0.86944],
    "177": [0.13333, 0.63333, 0, 0, 0.89444],
    "184": [0.17014, 0, 0, 0, 0.51111],
    "198": [0, 0.68611, 0, 0, 1.04166],
    "215": [0.13333, 0.63333, 0, 0, 0.89444],
    "216": [0.04861, 0.73472, 0, 0, 0.89444],
    "223": [0, 0.69444, 0, 0, 0.59722],
    "230": [0, 0.44444, 0, 0, 0.83055],
    "247": [0.13333, 0.63333, 0, 0, 0.89444],
    "248": [0.09722, 0.54167, 0, 0, 0.575],
    "305": [0, 0.44444, 0, 0, 0.31944],
    "338": [0, 0.68611, 0, 0, 1.16944],
    "339": [0, 0.44444, 0, 0, 0.89444],
    "567": [0.19444, 0.44444, 0, 0, 0.35139],
    "710": [0, 0.69444, 0, 0, 0.575],
    "711": [0, 0.63194, 0, 0, 0.575],
    "713": [0, 0.59611, 0, 0, 0.575],
    "714": [0, 0.69444, 0, 0, 0.575],
    "715": [0, 0.69444, 0, 0, 0.575],
    "728": [0, 0.69444, 0, 0, 0.575],
    "729": [0, 0.69444, 0, 0, 0.31944],
    "730": [0, 0.69444, 0, 0, 0.86944],
    "732": [0, 0.69444, 0, 0, 0.575],
    "733": [0, 0.69444, 0, 0, 0.575],
    "915": [0, 0.68611, 0, 0, 0.69166],
    "916": [0, 0.68611, 0, 0, 0.95833],
    "920": [0, 0.68611, 0, 0, 0.89444],
    "923": [0, 0.68611, 0, 0, 0.80555],
    "926": [0, 0.68611, 0, 0, 0.76666],
    "928": [0, 0.68611, 0, 0, 0.9],
    "931": [0, 0.68611, 0, 0, 0.83055],
    "933": [0, 0.68611, 0, 0, 0.89444],
    "934": [0, 0.68611, 0, 0, 0.83055],
    "936": [0, 0.68611, 0, 0, 0.89444],
    "937": [0, 0.68611, 0, 0, 0.83055],
    "8211": [0, 0.44444, 0.03194, 0, 0.575],
    "8212": [0, 0.44444, 0.03194, 0, 1.14999],
    "8216": [0, 0.69444, 0, 0, 0.31944],
    "8217": [0, 0.69444, 0, 0, 0.31944],
    "8220": [0, 0.69444, 0, 0, 0.60278],
    "8221": [0, 0.69444, 0, 0, 0.60278],
    "8224": [0.19444, 0.69444, 0, 0, 0.51111],
    "8225": [0.19444, 0.69444, 0, 0, 0.51111],
    "8242": [0, 0.55556, 0, 0, 0.34444],
    "8407": [0, 0.72444, 0.15486, 0, 0.575],
    "8463": [0, 0.69444, 0, 0, 0.66759],
    "8465": [0, 0.69444, 0, 0, 0.83055],
    "8467": [0, 0.69444, 0, 0, 0.47361],
    "8472": [0.19444, 0.44444, 0, 0, 0.74027],
    "8476": [0, 0.69444, 0, 0, 0.83055],
    "8501": [0, 0.69444, 0, 0, 0.70277],
    "8592": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8593": [0.19444, 0.69444, 0, 0, 0.575],
    "8594": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8595": [0.19444, 0.69444, 0, 0, 0.575],
    "8596": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8597": [0.25, 0.75, 0, 0, 0.575],
    "8598": [0.19444, 0.69444, 0, 0, 1.14999],
    "8599": [0.19444, 0.69444, 0, 0, 1.14999],
    "8600": [0.19444, 0.69444, 0, 0, 1.14999],
    "8601": [0.19444, 0.69444, 0, 0, 1.14999],
    "8636": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8637": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8640": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8641": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8656": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8657": [0.19444, 0.69444, 0, 0, 0.70277],
    "8658": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8659": [0.19444, 0.69444, 0, 0, 0.70277],
    "8660": [-0.10889, 0.39111, 0, 0, 1.14999],
    "8661": [0.25, 0.75, 0, 0, 0.70277],
    "8704": [0, 0.69444, 0, 0, 0.63889],
    "8706": [0, 0.69444, 0.06389, 0, 0.62847],
    "8707": [0, 0.69444, 0, 0, 0.63889],
    "8709": [0.05556, 0.75, 0, 0, 0.575],
    "8711": [0, 0.68611, 0, 0, 0.95833],
    "8712": [0.08556, 0.58556, 0, 0, 0.76666],
    "8715": [0.08556, 0.58556, 0, 0, 0.76666],
    "8722": [0.13333, 0.63333, 0, 0, 0.89444],
    "8723": [0.13333, 0.63333, 0, 0, 0.89444],
    "8725": [0.25, 0.75, 0, 0, 0.575],
    "8726": [0.25, 0.75, 0, 0, 0.575],
    "8727": [-0.02778, 0.47222, 0, 0, 0.575],
    "8728": [-0.02639, 0.47361, 0, 0, 0.575],
    "8729": [-0.02639, 0.47361, 0, 0, 0.575],
    "8730": [0.18, 0.82, 0, 0, 0.95833],
    "8733": [0, 0.44444, 0, 0, 0.89444],
    "8734": [0, 0.44444, 0, 0, 1.14999],
    "8736": [0, 0.69224, 0, 0, 0.72222],
    "8739": [0.25, 0.75, 0, 0, 0.31944],
    "8741": [0.25, 0.75, 0, 0, 0.575],
    "8743": [0, 0.55556, 0, 0, 0.76666],
    "8744": [0, 0.55556, 0, 0, 0.76666],
    "8745": [0, 0.55556, 0, 0, 0.76666],
    "8746": [0, 0.55556, 0, 0, 0.76666],
    "8747": [0.19444, 0.69444, 0.12778, 0, 0.56875],
    "8764": [-0.10889, 0.39111, 0, 0, 0.89444],
    "8768": [0.19444, 0.69444, 0, 0, 0.31944],
    "8771": [0.00222, 0.50222, 0, 0, 0.89444],
    "8776": [0.02444, 0.52444, 0, 0, 0.89444],
    "8781": [0.00222, 0.50222, 0, 0, 0.89444],
    "8801": [0.00222, 0.50222, 0, 0, 0.89444],
    "8804": [0.19667, 0.69667, 0, 0, 0.89444],
    "8805": [0.19667, 0.69667, 0, 0, 0.89444],
    "8810": [0.08556, 0.58556, 0, 0, 1.14999],
    "8811": [0.08556, 0.58556, 0, 0, 1.14999],
    "8826": [0.08556, 0.58556, 0, 0, 0.89444],
    "8827": [0.08556, 0.58556, 0, 0, 0.89444],
    "8834": [0.08556, 0.58556, 0, 0, 0.89444],
    "8835": [0.08556, 0.58556, 0, 0, 0.89444],
    "8838": [0.19667, 0.69667, 0, 0, 0.89444],
    "8839": [0.19667, 0.69667, 0, 0, 0.89444],
    "8846": [0, 0.55556, 0, 0, 0.76666],
    "8849": [0.19667, 0.69667, 0, 0, 0.89444],
    "8850": [0.19667, 0.69667, 0, 0, 0.89444],
    "8851": [0, 0.55556, 0, 0, 0.76666],
    "8852": [0, 0.55556, 0, 0, 0.76666],
    "8853": [0.13333, 0.63333, 0, 0, 0.89444],
    "8854": [0.13333, 0.63333, 0, 0, 0.89444],
    "8855": [0.13333, 0.63333, 0, 0, 0.89444],
    "8856": [0.13333, 0.63333, 0, 0, 0.89444],
    "8857": [0.13333, 0.63333, 0, 0, 0.89444],
    "8866": [0, 0.69444, 0, 0, 0.70277],
    "8867": [0, 0.69444, 0, 0, 0.70277],
    "8868": [0, 0.69444, 0, 0, 0.89444],
    "8869": [0, 0.69444, 0, 0, 0.89444],
    "8900": [-0.02639, 0.47361, 0, 0, 0.575],
    "8901": [-0.02639, 0.47361, 0, 0, 0.31944],
    "8902": [-0.02778, 0.47222, 0, 0, 0.575],
    "8968": [0.25, 0.75, 0, 0, 0.51111],
    "8969": [0.25, 0.75, 0, 0, 0.51111],
    "8970": [0.25, 0.75, 0, 0, 0.51111],
    "8971": [0.25, 0.75, 0, 0, 0.51111],
    "8994": [-0.13889, 0.36111, 0, 0, 1.14999],
    "8995": [-0.13889, 0.36111, 0, 0, 1.14999],
    "9651": [0.19444, 0.69444, 0, 0, 1.02222],
    "9657": [-0.02778, 0.47222, 0, 0, 0.575],
    "9661": [0.19444, 0.69444, 0, 0, 1.02222],
    "9667": [-0.02778, 0.47222, 0, 0, 0.575],
    "9711": [0.19444, 0.69444, 0, 0, 1.14999],
    "9824": [0.12963, 0.69444, 0, 0, 0.89444],
    "9825": [0.12963, 0.69444, 0, 0, 0.89444],
    "9826": [0.12963, 0.69444, 0, 0, 0.89444],
    "9827": [0.12963, 0.69444, 0, 0, 0.89444],
    "9837": [0, 0.75, 0, 0, 0.44722],
    "9838": [0.19444, 0.69444, 0, 0, 0.44722],
    "9839": [0.19444, 0.69444, 0, 0, 0.44722],
    "10216": [0.25, 0.75, 0, 0, 0.44722],
    "10217": [0.25, 0.75, 0, 0, 0.44722],
    "10815": [0, 0.68611, 0, 0, 0.9],
    "10927": [0.19667, 0.69667, 0, 0, 0.89444],
    "10928": [0.19667, 0.69667, 0, 0, 0.89444],
    "57376": [0.19444, 0.69444, 0, 0, 0]
  },
  "Main-BoldItalic": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0.11417, 0, 0.38611],
    "34": [0, 0.69444, 0.07939, 0, 0.62055],
    "35": [0.19444, 0.69444, 0.06833, 0, 0.94444],
    "37": [0.05556, 0.75, 0.12861, 0, 0.94444],
    "38": [0, 0.69444, 0.08528, 0, 0.88555],
    "39": [0, 0.69444, 0.12945, 0, 0.35555],
    "40": [0.25, 0.75, 0.15806, 0, 0.47333],
    "41": [0.25, 0.75, 0.03306, 0, 0.47333],
    "42": [0, 0.75, 0.14333, 0, 0.59111],
    "43": [0.10333, 0.60333, 0.03306, 0, 0.88555],
    "44": [0.19444, 0.14722, 0, 0, 0.35555],
    "45": [0, 0.44444, 0.02611, 0, 0.41444],
    "46": [0, 0.14722, 0, 0, 0.35555],
    "47": [0.25, 0.75, 0.15806, 0, 0.59111],
    "48": [0, 0.64444, 0.13167, 0, 0.59111],
    "49": [0, 0.64444, 0.13167, 0, 0.59111],
    "50": [0, 0.64444, 0.13167, 0, 0.59111],
    "51": [0, 0.64444, 0.13167, 0, 0.59111],
    "52": [0.19444, 0.64444, 0.13167, 0, 0.59111],
    "53": [0, 0.64444, 0.13167, 0, 0.59111],
    "54": [0, 0.64444, 0.13167, 0, 0.59111],
    "55": [0.19444, 0.64444, 0.13167, 0, 0.59111],
    "56": [0, 0.64444, 0.13167, 0, 0.59111],
    "57": [0, 0.64444, 0.13167, 0, 0.59111],
    "58": [0, 0.44444, 0.06695, 0, 0.35555],
    "59": [0.19444, 0.44444, 0.06695, 0, 0.35555],
    "61": [-0.10889, 0.39111, 0.06833, 0, 0.88555],
    "63": [0, 0.69444, 0.11472, 0, 0.59111],
    "64": [0, 0.69444, 0.09208, 0, 0.88555],
    "65": [0, 0.68611, 0, 0, 0.86555],
    "66": [0, 0.68611, 0.0992, 0, 0.81666],
    "67": [0, 0.68611, 0.14208, 0, 0.82666],
    "68": [0, 0.68611, 0.09062, 0, 0.87555],
    "69": [0, 0.68611, 0.11431, 0, 0.75666],
    "70": [0, 0.68611, 0.12903, 0, 0.72722],
    "71": [0, 0.68611, 0.07347, 0, 0.89527],
    "72": [0, 0.68611, 0.17208, 0, 0.8961],
    "73": [0, 0.68611, 0.15681, 0, 0.47166],
    "74": [0, 0.68611, 0.145, 0, 0.61055],
    "75": [0, 0.68611, 0.14208, 0, 0.89499],
    "76": [0, 0.68611, 0, 0, 0.69777],
    "77": [0, 0.68611, 0.17208, 0, 1.07277],
    "78": [0, 0.68611, 0.17208, 0, 0.8961],
    "79": [0, 0.68611, 0.09062, 0, 0.85499],
    "80": [0, 0.68611, 0.0992, 0, 0.78721],
    "81": [0.19444, 0.68611, 0.09062, 0, 0.85499],
    "82": [0, 0.68611, 0.02559, 0, 0.85944],
    "83": [0, 0.68611, 0.11264, 0, 0.64999],
    "84": [0, 0.68611, 0.12903, 0, 0.7961],
    "85": [0, 0.68611, 0.17208, 0, 0.88083],
    "86": [0, 0.68611, 0.18625, 0, 0.86555],
    "87": [0, 0.68611, 0.18625, 0, 1.15999],
    "88": [0, 0.68611, 0.15681, 0, 0.86555],
    "89": [0, 0.68611, 0.19803, 0, 0.86555],
    "90": [0, 0.68611, 0.14208, 0, 0.70888],
    "91": [0.25, 0.75, 0.1875, 0, 0.35611],
    "93": [0.25, 0.75, 0.09972, 0, 0.35611],
    "94": [0, 0.69444, 0.06709, 0, 0.59111],
    "95": [0.31, 0.13444, 0.09811, 0, 0.59111],
    "97": [0, 0.44444, 0.09426, 0, 0.59111],
    "98": [0, 0.69444, 0.07861, 0, 0.53222],
    "99": [0, 0.44444, 0.05222, 0, 0.53222],
    "100": [0, 0.69444, 0.10861, 0, 0.59111],
    "101": [0, 0.44444, 0.085, 0, 0.53222],
    "102": [0.19444, 0.69444, 0.21778, 0, 0.4],
    "103": [0.19444, 0.44444, 0.105, 0, 0.53222],
    "104": [0, 0.69444, 0.09426, 0, 0.59111],
    "105": [0, 0.69326, 0.11387, 0, 0.35555],
    "106": [0.19444, 0.69326, 0.1672, 0, 0.35555],
    "107": [0, 0.69444, 0.11111, 0, 0.53222],
    "108": [0, 0.69444, 0.10861, 0, 0.29666],
    "109": [0, 0.44444, 0.09426, 0, 0.94444],
    "110": [0, 0.44444, 0.09426, 0, 0.64999],
    "111": [0, 0.44444, 0.07861, 0, 0.59111],
    "112": [0.19444, 0.44444, 0.07861, 0, 0.59111],
    "113": [0.19444, 0.44444, 0.105, 0, 0.53222],
    "114": [0, 0.44444, 0.11111, 0, 0.50167],
    "115": [0, 0.44444, 0.08167, 0, 0.48694],
    "116": [0, 0.63492, 0.09639, 0, 0.385],
    "117": [0, 0.44444, 0.09426, 0, 0.62055],
    "118": [0, 0.44444, 0.11111, 0, 0.53222],
    "119": [0, 0.44444, 0.11111, 0, 0.76777],
    "120": [0, 0.44444, 0.12583, 0, 0.56055],
    "121": [0.19444, 0.44444, 0.105, 0, 0.56166],
    "122": [0, 0.44444, 0.13889, 0, 0.49055],
    "126": [0.35, 0.34444, 0.11472, 0, 0.59111],
    "160": [0, 0, 0, 0, 0.25],
    "168": [0, 0.69444, 0.11473, 0, 0.59111],
    "176": [0, 0.69444, 0, 0, 0.94888],
    "184": [0.17014, 0, 0, 0, 0.53222],
    "198": [0, 0.68611, 0.11431, 0, 1.02277],
    "216": [0.04861, 0.73472, 0.09062, 0, 0.88555],
    "223": [0.19444, 0.69444, 0.09736, 0, 0.665],
    "230": [0, 0.44444, 0.085, 0, 0.82666],
    "248": [0.09722, 0.54167, 0.09458, 0, 0.59111],
    "305": [0, 0.44444, 0.09426, 0, 0.35555],
    "338": [0, 0.68611, 0.11431, 0, 1.14054],
    "339": [0, 0.44444, 0.085, 0, 0.82666],
    "567": [0.19444, 0.44444, 0.04611, 0, 0.385],
    "710": [0, 0.69444, 0.06709, 0, 0.59111],
    "711": [0, 0.63194, 0.08271, 0, 0.59111],
    "713": [0, 0.59444, 0.10444, 0, 0.59111],
    "714": [0, 0.69444, 0.08528, 0, 0.59111],
    "715": [0, 0.69444, 0, 0, 0.59111],
    "728": [0, 0.69444, 0.10333, 0, 0.59111],
    "729": [0, 0.69444, 0.12945, 0, 0.35555],
    "730": [0, 0.69444, 0, 0, 0.94888],
    "732": [0, 0.69444, 0.11472, 0, 0.59111],
    "733": [0, 0.69444, 0.11472, 0, 0.59111],
    "915": [0, 0.68611, 0.12903, 0, 0.69777],
    "916": [0, 0.68611, 0, 0, 0.94444],
    "920": [0, 0.68611, 0.09062, 0, 0.88555],
    "923": [0, 0.68611, 0, 0, 0.80666],
    "926": [0, 0.68611, 0.15092, 0, 0.76777],
    "928": [0, 0.68611, 0.17208, 0, 0.8961],
    "931": [0, 0.68611, 0.11431, 0, 0.82666],
    "933": [0, 0.68611, 0.10778, 0, 0.88555],
    "934": [0, 0.68611, 0.05632, 0, 0.82666],
    "936": [0, 0.68611, 0.10778, 0, 0.88555],
    "937": [0, 0.68611, 0.0992, 0, 0.82666],
    "8211": [0, 0.44444, 0.09811, 0, 0.59111],
    "8212": [0, 0.44444, 0.09811, 0, 1.18221],
    "8216": [0, 0.69444, 0.12945, 0, 0.35555],
    "8217": [0, 0.69444, 0.12945, 0, 0.35555],
    "8220": [0, 0.69444, 0.16772, 0, 0.62055],
    "8221": [0, 0.69444, 0.07939, 0, 0.62055]
  },
  "Main-Italic": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0.12417, 0, 0.30667],
    "34": [0, 0.69444, 0.06961, 0, 0.51444],
    "35": [0.19444, 0.69444, 0.06616, 0, 0.81777],
    "37": [0.05556, 0.75, 0.13639, 0, 0.81777],
    "38": [0, 0.69444, 0.09694, 0, 0.76666],
    "39": [0, 0.69444, 0.12417, 0, 0.30667],
    "40": [0.25, 0.75, 0.16194, 0, 0.40889],
    "41": [0.25, 0.75, 0.03694, 0, 0.40889],
    "42": [0, 0.75, 0.14917, 0, 0.51111],
    "43": [0.05667, 0.56167, 0.03694, 0, 0.76666],
    "44": [0.19444, 0.10556, 0, 0, 0.30667],
    "45": [0, 0.43056, 0.02826, 0, 0.35778],
    "46": [0, 0.10556, 0, 0, 0.30667],
    "47": [0.25, 0.75, 0.16194, 0, 0.51111],
    "48": [0, 0.64444, 0.13556, 0, 0.51111],
    "49": [0, 0.64444, 0.13556, 0, 0.51111],
    "50": [0, 0.64444, 0.13556, 0, 0.51111],
    "51": [0, 0.64444, 0.13556, 0, 0.51111],
    "52": [0.19444, 0.64444, 0.13556, 0, 0.51111],
    "53": [0, 0.64444, 0.13556, 0, 0.51111],
    "54": [0, 0.64444, 0.13556, 0, 0.51111],
    "55": [0.19444, 0.64444, 0.13556, 0, 0.51111],
    "56": [0, 0.64444, 0.13556, 0, 0.51111],
    "57": [0, 0.64444, 0.13556, 0, 0.51111],
    "58": [0, 0.43056, 0.0582, 0, 0.30667],
    "59": [0.19444, 0.43056, 0.0582, 0, 0.30667],
    "61": [-0.13313, 0.36687, 0.06616, 0, 0.76666],
    "63": [0, 0.69444, 0.1225, 0, 0.51111],
    "64": [0, 0.69444, 0.09597, 0, 0.76666],
    "65": [0, 0.68333, 0, 0, 0.74333],
    "66": [0, 0.68333, 0.10257, 0, 0.70389],
    "67": [0, 0.68333, 0.14528, 0, 0.71555],
    "68": [0, 0.68333, 0.09403, 0, 0.755],
    "69": [0, 0.68333, 0.12028, 0, 0.67833],
    "70": [0, 0.68333, 0.13305, 0, 0.65277],
    "71": [0, 0.68333, 0.08722, 0, 0.77361],
    "72": [0, 0.68333, 0.16389, 0, 0.74333],
    "73": [0, 0.68333, 0.15806, 0, 0.38555],
    "74": [0, 0.68333, 0.14028, 0, 0.525],
    "75": [0, 0.68333, 0.14528, 0, 0.76888],
    "76": [0, 0.68333, 0, 0, 0.62722],
    "77": [0, 0.68333, 0.16389, 0, 0.89666],
    "78": [0, 0.68333, 0.16389, 0, 0.74333],
    "79": [0, 0.68333, 0.09403, 0, 0.76666],
    "80": [0, 0.68333, 0.10257, 0, 0.67833],
    "81": [0.19444, 0.68333, 0.09403, 0, 0.76666],
    "82": [0, 0.68333, 0.03868, 0, 0.72944],
    "83": [0, 0.68333, 0.11972, 0, 0.56222],
    "84": [0, 0.68333, 0.13305, 0, 0.71555],
    "85": [0, 0.68333, 0.16389, 0, 0.74333],
    "86": [0, 0.68333, 0.18361, 0, 0.74333],
    "87": [0, 0.68333, 0.18361, 0, 0.99888],
    "88": [0, 0.68333, 0.15806, 0, 0.74333],
    "89": [0, 0.68333, 0.19383, 0, 0.74333],
    "90": [0, 0.68333, 0.14528, 0, 0.61333],
    "91": [0.25, 0.75, 0.1875, 0, 0.30667],
    "93": [0.25, 0.75, 0.10528, 0, 0.30667],
    "94": [0, 0.69444, 0.06646, 0, 0.51111],
    "95": [0.31, 0.12056, 0.09208, 0, 0.51111],
    "97": [0, 0.43056, 0.07671, 0, 0.51111],
    "98": [0, 0.69444, 0.06312, 0, 0.46],
    "99": [0, 0.43056, 0.05653, 0, 0.46],
    "100": [0, 0.69444, 0.10333, 0, 0.51111],
    "101": [0, 0.43056, 0.07514, 0, 0.46],
    "102": [0.19444, 0.69444, 0.21194, 0, 0.30667],
    "103": [0.19444, 0.43056, 0.08847, 0, 0.46],
    "104": [0, 0.69444, 0.07671, 0, 0.51111],
    "105": [0, 0.65536, 0.1019, 0, 0.30667],
    "106": [0.19444, 0.65536, 0.14467, 0, 0.30667],
    "107": [0, 0.69444, 0.10764, 0, 0.46],
    "108": [0, 0.69444, 0.10333, 0, 0.25555],
    "109": [0, 0.43056, 0.07671, 0, 0.81777],
    "110": [0, 0.43056, 0.07671, 0, 0.56222],
    "111": [0, 0.43056, 0.06312, 0, 0.51111],
    "112": [0.19444, 0.43056, 0.06312, 0, 0.51111],
    "113": [0.19444, 0.43056, 0.08847, 0, 0.46],
    "114": [0, 0.43056, 0.10764, 0, 0.42166],
    "115": [0, 0.43056, 0.08208, 0, 0.40889],
    "116": [0, 0.61508, 0.09486, 0, 0.33222],
    "117": [0, 0.43056, 0.07671, 0, 0.53666],
    "118": [0, 0.43056, 0.10764, 0, 0.46],
    "119": [0, 0.43056, 0.10764, 0, 0.66444],
    "120": [0, 0.43056, 0.12042, 0, 0.46389],
    "121": [0.19444, 0.43056, 0.08847, 0, 0.48555],
    "122": [0, 0.43056, 0.12292, 0, 0.40889],
    "126": [0.35, 0.31786, 0.11585, 0, 0.51111],
    "160": [0, 0, 0, 0, 0.25],
    "168": [0, 0.66786, 0.10474, 0, 0.51111],
    "176": [0, 0.69444, 0, 0, 0.83129],
    "184": [0.17014, 0, 0, 0, 0.46],
    "198": [0, 0.68333, 0.12028, 0, 0.88277],
    "216": [0.04861, 0.73194, 0.09403, 0, 0.76666],
    "223": [0.19444, 0.69444, 0.10514, 0, 0.53666],
    "230": [0, 0.43056, 0.07514, 0, 0.71555],
    "248": [0.09722, 0.52778, 0.09194, 0, 0.51111],
    "338": [0, 0.68333, 0.12028, 0, 0.98499],
    "339": [0, 0.43056, 0.07514, 0, 0.71555],
    "710": [0, 0.69444, 0.06646, 0, 0.51111],
    "711": [0, 0.62847, 0.08295, 0, 0.51111],
    "713": [0, 0.56167, 0.10333, 0, 0.51111],
    "714": [0, 0.69444, 0.09694, 0, 0.51111],
    "715": [0, 0.69444, 0, 0, 0.51111],
    "728": [0, 0.69444, 0.10806, 0, 0.51111],
    "729": [0, 0.66786, 0.11752, 0, 0.30667],
    "730": [0, 0.69444, 0, 0, 0.83129],
    "732": [0, 0.66786, 0.11585, 0, 0.51111],
    "733": [0, 0.69444, 0.1225, 0, 0.51111],
    "915": [0, 0.68333, 0.13305, 0, 0.62722],
    "916": [0, 0.68333, 0, 0, 0.81777],
    "920": [0, 0.68333, 0.09403, 0, 0.76666],
    "923": [0, 0.68333, 0, 0, 0.69222],
    "926": [0, 0.68333, 0.15294, 0, 0.66444],
    "928": [0, 0.68333, 0.16389, 0, 0.74333],
    "931": [0, 0.68333, 0.12028, 0, 0.71555],
    "933": [0, 0.68333, 0.11111, 0, 0.76666],
    "934": [0, 0.68333, 0.05986, 0, 0.71555],
    "936": [0, 0.68333, 0.11111, 0, 0.76666],
    "937": [0, 0.68333, 0.10257, 0, 0.71555],
    "8211": [0, 0.43056, 0.09208, 0, 0.51111],
    "8212": [0, 0.43056, 0.09208, 0, 1.02222],
    "8216": [0, 0.69444, 0.12417, 0, 0.30667],
    "8217": [0, 0.69444, 0.12417, 0, 0.30667],
    "8220": [0, 0.69444, 0.1685, 0, 0.51444],
    "8221": [0, 0.69444, 0.06961, 0, 0.51444],
    "8463": [0, 0.68889, 0, 0, 0.54028]
  },
  "Main-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0, 0, 0.27778],
    "34": [0, 0.69444, 0, 0, 0.5],
    "35": [0.19444, 0.69444, 0, 0, 0.83334],
    "36": [0.05556, 0.75, 0, 0, 0.5],
    "37": [0.05556, 0.75, 0, 0, 0.83334],
    "38": [0, 0.69444, 0, 0, 0.77778],
    "39": [0, 0.69444, 0, 0, 0.27778],
    "40": [0.25, 0.75, 0, 0, 0.38889],
    "41": [0.25, 0.75, 0, 0, 0.38889],
    "42": [0, 0.75, 0, 0, 0.5],
    "43": [0.08333, 0.58333, 0, 0, 0.77778],
    "44": [0.19444, 0.10556, 0, 0, 0.27778],
    "45": [0, 0.43056, 0, 0, 0.33333],
    "46": [0, 0.10556, 0, 0, 0.27778],
    "47": [0.25, 0.75, 0, 0, 0.5],
    "48": [0, 0.64444, 0, 0, 0.5],
    "49": [0, 0.64444, 0, 0, 0.5],
    "50": [0, 0.64444, 0, 0, 0.5],
    "51": [0, 0.64444, 0, 0, 0.5],
    "52": [0, 0.64444, 0, 0, 0.5],
    "53": [0, 0.64444, 0, 0, 0.5],
    "54": [0, 0.64444, 0, 0, 0.5],
    "55": [0, 0.64444, 0, 0, 0.5],
    "56": [0, 0.64444, 0, 0, 0.5],
    "57": [0, 0.64444, 0, 0, 0.5],
    "58": [0, 0.43056, 0, 0, 0.27778],
    "59": [0.19444, 0.43056, 0, 0, 0.27778],
    "60": [0.0391, 0.5391, 0, 0, 0.77778],
    "61": [-0.13313, 0.36687, 0, 0, 0.77778],
    "62": [0.0391, 0.5391, 0, 0, 0.77778],
    "63": [0, 0.69444, 0, 0, 0.47222],
    "64": [0, 0.69444, 0, 0, 0.77778],
    "65": [0, 0.68333, 0, 0, 0.75],
    "66": [0, 0.68333, 0, 0, 0.70834],
    "67": [0, 0.68333, 0, 0, 0.72222],
    "68": [0, 0.68333, 0, 0, 0.76389],
    "69": [0, 0.68333, 0, 0, 0.68056],
    "70": [0, 0.68333, 0, 0, 0.65278],
    "71": [0, 0.68333, 0, 0, 0.78472],
    "72": [0, 0.68333, 0, 0, 0.75],
    "73": [0, 0.68333, 0, 0, 0.36111],
    "74": [0, 0.68333, 0, 0, 0.51389],
    "75": [0, 0.68333, 0, 0, 0.77778],
    "76": [0, 0.68333, 0, 0, 0.625],
    "77": [0, 0.68333, 0, 0, 0.91667],
    "78": [0, 0.68333, 0, 0, 0.75],
    "79": [0, 0.68333, 0, 0, 0.77778],
    "80": [0, 0.68333, 0, 0, 0.68056],
    "81": [0.19444, 0.68333, 0, 0, 0.77778],
    "82": [0, 0.68333, 0, 0, 0.73611],
    "83": [0, 0.68333, 0, 0, 0.55556],
    "84": [0, 0.68333, 0, 0, 0.72222],
    "85": [0, 0.68333, 0, 0, 0.75],
    "86": [0, 0.68333, 0.01389, 0, 0.75],
    "87": [0, 0.68333, 0.01389, 0, 1.02778],
    "88": [0, 0.68333, 0, 0, 0.75],
    "89": [0, 0.68333, 0.025, 0, 0.75],
    "90": [0, 0.68333, 0, 0, 0.61111],
    "91": [0.25, 0.75, 0, 0, 0.27778],
    "92": [0.25, 0.75, 0, 0, 0.5],
    "93": [0.25, 0.75, 0, 0, 0.27778],
    "94": [0, 0.69444, 0, 0, 0.5],
    "95": [0.31, 0.12056, 0.02778, 0, 0.5],
    "97": [0, 0.43056, 0, 0, 0.5],
    "98": [0, 0.69444, 0, 0, 0.55556],
    "99": [0, 0.43056, 0, 0, 0.44445],
    "100": [0, 0.69444, 0, 0, 0.55556],
    "101": [0, 0.43056, 0, 0, 0.44445],
    "102": [0, 0.69444, 0.07778, 0, 0.30556],
    "103": [0.19444, 0.43056, 0.01389, 0, 0.5],
    "104": [0, 0.69444, 0, 0, 0.55556],
    "105": [0, 0.66786, 0, 0, 0.27778],
    "106": [0.19444, 0.66786, 0, 0, 0.30556],
    "107": [0, 0.69444, 0, 0, 0.52778],
    "108": [0, 0.69444, 0, 0, 0.27778],
    "109": [0, 0.43056, 0, 0, 0.83334],
    "110": [0, 0.43056, 0, 0, 0.55556],
    "111": [0, 0.43056, 0, 0, 0.5],
    "112": [0.19444, 0.43056, 0, 0, 0.55556],
    "113": [0.19444, 0.43056, 0, 0, 0.52778],
    "114": [0, 0.43056, 0, 0, 0.39167],
    "115": [0, 0.43056, 0, 0, 0.39445],
    "116": [0, 0.61508, 0, 0, 0.38889],
    "117": [0, 0.43056, 0, 0, 0.55556],
    "118": [0, 0.43056, 0.01389, 0, 0.52778],
    "119": [0, 0.43056, 0.01389, 0, 0.72222],
    "120": [0, 0.43056, 0, 0, 0.52778],
    "121": [0.19444, 0.43056, 0.01389, 0, 0.52778],
    "122": [0, 0.43056, 0, 0, 0.44445],
    "123": [0.25, 0.75, 0, 0, 0.5],
    "124": [0.25, 0.75, 0, 0, 0.27778],
    "125": [0.25, 0.75, 0, 0, 0.5],
    "126": [0.35, 0.31786, 0, 0, 0.5],
    "160": [0, 0, 0, 0, 0.25],
    "163": [0, 0.69444, 0, 0, 0.76909],
    "167": [0.19444, 0.69444, 0, 0, 0.44445],
    "168": [0, 0.66786, 0, 0, 0.5],
    "172": [0, 0.43056, 0, 0, 0.66667],
    "176": [0, 0.69444, 0, 0, 0.75],
    "177": [0.08333, 0.58333, 0, 0, 0.77778],
    "182": [0.19444, 0.69444, 0, 0, 0.61111],
    "184": [0.17014, 0, 0, 0, 0.44445],
    "198": [0, 0.68333, 0, 0, 0.90278],
    "215": [0.08333, 0.58333, 0, 0, 0.77778],
    "216": [0.04861, 0.73194, 0, 0, 0.77778],
    "223": [0, 0.69444, 0, 0, 0.5],
    "230": [0, 0.43056, 0, 0, 0.72222],
    "247": [0.08333, 0.58333, 0, 0, 0.77778],
    "248": [0.09722, 0.52778, 0, 0, 0.5],
    "305": [0, 0.43056, 0, 0, 0.27778],
    "338": [0, 0.68333, 0, 0, 1.01389],
    "339": [0, 0.43056, 0, 0, 0.77778],
    "567": [0.19444, 0.43056, 0, 0, 0.30556],
    "710": [0, 0.69444, 0, 0, 0.5],
    "711": [0, 0.62847, 0, 0, 0.5],
    "713": [0, 0.56778, 0, 0, 0.5],
    "714": [0, 0.69444, 0, 0, 0.5],
    "715": [0, 0.69444, 0, 0, 0.5],
    "728": [0, 0.69444, 0, 0, 0.5],
    "729": [0, 0.66786, 0, 0, 0.27778],
    "730": [0, 0.69444, 0, 0, 0.75],
    "732": [0, 0.66786, 0, 0, 0.5],
    "733": [0, 0.69444, 0, 0, 0.5],
    "915": [0, 0.68333, 0, 0, 0.625],
    "916": [0, 0.68333, 0, 0, 0.83334],
    "920": [0, 0.68333, 0, 0, 0.77778],
    "923": [0, 0.68333, 0, 0, 0.69445],
    "926": [0, 0.68333, 0, 0, 0.66667],
    "928": [0, 0.68333, 0, 0, 0.75],
    "931": [0, 0.68333, 0, 0, 0.72222],
    "933": [0, 0.68333, 0, 0, 0.77778],
    "934": [0, 0.68333, 0, 0, 0.72222],
    "936": [0, 0.68333, 0, 0, 0.77778],
    "937": [0, 0.68333, 0, 0, 0.72222],
    "8211": [0, 0.43056, 0.02778, 0, 0.5],
    "8212": [0, 0.43056, 0.02778, 0, 1.0],
    "8216": [0, 0.69444, 0, 0, 0.27778],
    "8217": [0, 0.69444, 0, 0, 0.27778],
    "8220": [0, 0.69444, 0, 0, 0.5],
    "8221": [0, 0.69444, 0, 0, 0.5],
    "8224": [0.19444, 0.69444, 0, 0, 0.44445],
    "8225": [0.19444, 0.69444, 0, 0, 0.44445],
    "8230": [0, 0.12, 0, 0, 1.172],
    "8242": [0, 0.55556, 0, 0, 0.275],
    "8407": [0, 0.71444, 0.15382, 0, 0.5],
    "8463": [0, 0.68889, 0, 0, 0.54028],
    "8465": [0, 0.69444, 0, 0, 0.72222],
    "8467": [0, 0.69444, 0, 0.11111, 0.41667],
    "8472": [0.19444, 0.43056, 0, 0.11111, 0.63646],
    "8476": [0, 0.69444, 0, 0, 0.72222],
    "8501": [0, 0.69444, 0, 0, 0.61111],
    "8592": [-0.13313, 0.36687, 0, 0, 1.0],
    "8593": [0.19444, 0.69444, 0, 0, 0.5],
    "8594": [-0.13313, 0.36687, 0, 0, 1.0],
    "8595": [0.19444, 0.69444, 0, 0, 0.5],
    "8596": [-0.13313, 0.36687, 0, 0, 1.0],
    "8597": [0.25, 0.75, 0, 0, 0.5],
    "8598": [0.19444, 0.69444, 0, 0, 1.0],
    "8599": [0.19444, 0.69444, 0, 0, 1.0],
    "8600": [0.19444, 0.69444, 0, 0, 1.0],
    "8601": [0.19444, 0.69444, 0, 0, 1.0],
    "8614": [0.011, 0.511, 0, 0, 1.0],
    "8617": [0.011, 0.511, 0, 0, 1.126],
    "8618": [0.011, 0.511, 0, 0, 1.126],
    "8636": [-0.13313, 0.36687, 0, 0, 1.0],
    "8637": [-0.13313, 0.36687, 0, 0, 1.0],
    "8640": [-0.13313, 0.36687, 0, 0, 1.0],
    "8641": [-0.13313, 0.36687, 0, 0, 1.0],
    "8652": [0.011, 0.671, 0, 0, 1.0],
    "8656": [-0.13313, 0.36687, 0, 0, 1.0],
    "8657": [0.19444, 0.69444, 0, 0, 0.61111],
    "8658": [-0.13313, 0.36687, 0, 0, 1.0],
    "8659": [0.19444, 0.69444, 0, 0, 0.61111],
    "8660": [-0.13313, 0.36687, 0, 0, 1.0],
    "8661": [0.25, 0.75, 0, 0, 0.61111],
    "8704": [0, 0.69444, 0, 0, 0.55556],
    "8706": [0, 0.69444, 0.05556, 0.08334, 0.5309],
    "8707": [0, 0.69444, 0, 0, 0.55556],
    "8709": [0.05556, 0.75, 0, 0, 0.5],
    "8711": [0, 0.68333, 0, 0, 0.83334],
    "8712": [0.0391, 0.5391, 0, 0, 0.66667],
    "8715": [0.0391, 0.5391, 0, 0, 0.66667],
    "8722": [0.08333, 0.58333, 0, 0, 0.77778],
    "8723": [0.08333, 0.58333, 0, 0, 0.77778],
    "8725": [0.25, 0.75, 0, 0, 0.5],
    "8726": [0.25, 0.75, 0, 0, 0.5],
    "8727": [-0.03472, 0.46528, 0, 0, 0.5],
    "8728": [-0.05555, 0.44445, 0, 0, 0.5],
    "8729": [-0.05555, 0.44445, 0, 0, 0.5],
    "8730": [0.2, 0.8, 0, 0, 0.83334],
    "8733": [0, 0.43056, 0, 0, 0.77778],
    "8734": [0, 0.43056, 0, 0, 1.0],
    "8736": [0, 0.69224, 0, 0, 0.72222],
    "8739": [0.25, 0.75, 0, 0, 0.27778],
    "8741": [0.25, 0.75, 0, 0, 0.5],
    "8743": [0, 0.55556, 0, 0, 0.66667],
    "8744": [0, 0.55556, 0, 0, 0.66667],
    "8745": [0, 0.55556, 0, 0, 0.66667],
    "8746": [0, 0.55556, 0, 0, 0.66667],
    "8747": [0.19444, 0.69444, 0.11111, 0, 0.41667],
    "8764": [-0.13313, 0.36687, 0, 0, 0.77778],
    "8768": [0.19444, 0.69444, 0, 0, 0.27778],
    "8771": [-0.03625, 0.46375, 0, 0, 0.77778],
    "8773": [-0.022, 0.589, 0, 0, 1.0],
    "8776": [-0.01688, 0.48312, 0, 0, 0.77778],
    "8781": [-0.03625, 0.46375, 0, 0, 0.77778],
    "8784": [-0.133, 0.67, 0, 0, 0.778],
    "8801": [-0.03625, 0.46375, 0, 0, 0.77778],
    "8804": [0.13597, 0.63597, 0, 0, 0.77778],
    "8805": [0.13597, 0.63597, 0, 0, 0.77778],
    "8810": [0.0391, 0.5391, 0, 0, 1.0],
    "8811": [0.0391, 0.5391, 0, 0, 1.0],
    "8826": [0.0391, 0.5391, 0, 0, 0.77778],
    "8827": [0.0391, 0.5391, 0, 0, 0.77778],
    "8834": [0.0391, 0.5391, 0, 0, 0.77778],
    "8835": [0.0391, 0.5391, 0, 0, 0.77778],
    "8838": [0.13597, 0.63597, 0, 0, 0.77778],
    "8839": [0.13597, 0.63597, 0, 0, 0.77778],
    "8846": [0, 0.55556, 0, 0, 0.66667],
    "8849": [0.13597, 0.63597, 0, 0, 0.77778],
    "8850": [0.13597, 0.63597, 0, 0, 0.77778],
    "8851": [0, 0.55556, 0, 0, 0.66667],
    "8852": [0, 0.55556, 0, 0, 0.66667],
    "8853": [0.08333, 0.58333, 0, 0, 0.77778],
    "8854": [0.08333, 0.58333, 0, 0, 0.77778],
    "8855": [0.08333, 0.58333, 0, 0, 0.77778],
    "8856": [0.08333, 0.58333, 0, 0, 0.77778],
    "8857": [0.08333, 0.58333, 0, 0, 0.77778],
    "8866": [0, 0.69444, 0, 0, 0.61111],
    "8867": [0, 0.69444, 0, 0, 0.61111],
    "8868": [0, 0.69444, 0, 0, 0.77778],
    "8869": [0, 0.69444, 0, 0, 0.77778],
    "8872": [0.249, 0.75, 0, 0, 0.867],
    "8900": [-0.05555, 0.44445, 0, 0, 0.5],
    "8901": [-0.05555, 0.44445, 0, 0, 0.27778],
    "8902": [-0.03472, 0.46528, 0, 0, 0.5],
    "8904": [0.005, 0.505, 0, 0, 0.9],
    "8942": [0.03, 0.9, 0, 0, 0.278],
    "8943": [-0.19, 0.31, 0, 0, 1.172],
    "8945": [-0.1, 0.82, 0, 0, 1.282],
    "8968": [0.25, 0.75, 0, 0, 0.44445],
    "8969": [0.25, 0.75, 0, 0, 0.44445],
    "8970": [0.25, 0.75, 0, 0, 0.44445],
    "8971": [0.25, 0.75, 0, 0, 0.44445],
    "8994": [-0.14236, 0.35764, 0, 0, 1.0],
    "8995": [-0.14236, 0.35764, 0, 0, 1.0],
    "9136": [0.244, 0.744, 0, 0, 0.412],
    "9137": [0.244, 0.744, 0, 0, 0.412],
    "9651": [0.19444, 0.69444, 0, 0, 0.88889],
    "9657": [-0.03472, 0.46528, 0, 0, 0.5],
    "9661": [0.19444, 0.69444, 0, 0, 0.88889],
    "9667": [-0.03472, 0.46528, 0, 0, 0.5],
    "9711": [0.19444, 0.69444, 0, 0, 1.0],
    "9824": [0.12963, 0.69444, 0, 0, 0.77778],
    "9825": [0.12963, 0.69444, 0, 0, 0.77778],
    "9826": [0.12963, 0.69444, 0, 0, 0.77778],
    "9827": [0.12963, 0.69444, 0, 0, 0.77778],
    "9837": [0, 0.75, 0, 0, 0.38889],
    "9838": [0.19444, 0.69444, 0, 0, 0.38889],
    "9839": [0.19444, 0.69444, 0, 0, 0.38889],
    "10216": [0.25, 0.75, 0, 0, 0.38889],
    "10217": [0.25, 0.75, 0, 0, 0.38889],
    "10222": [0.244, 0.744, 0, 0, 0.412],
    "10223": [0.244, 0.744, 0, 0, 0.412],
    "10229": [0.011, 0.511, 0, 0, 1.609],
    "10230": [0.011, 0.511, 0, 0, 1.638],
    "10231": [0.011, 0.511, 0, 0, 1.859],
    "10232": [0.024, 0.525, 0, 0, 1.609],
    "10233": [0.024, 0.525, 0, 0, 1.638],
    "10234": [0.024, 0.525, 0, 0, 1.858],
    "10236": [0.011, 0.511, 0, 0, 1.638],
    "10815": [0, 0.68333, 0, 0, 0.75],
    "10927": [0.13597, 0.63597, 0, 0, 0.77778],
    "10928": [0.13597, 0.63597, 0, 0, 0.77778],
    "57376": [0.19444, 0.69444, 0, 0, 0]
  },
  "Math-BoldItalic": {
    "32": [0, 0, 0, 0, 0.25],
    "48": [0, 0.44444, 0, 0, 0.575],
    "49": [0, 0.44444, 0, 0, 0.575],
    "50": [0, 0.44444, 0, 0, 0.575],
    "51": [0.19444, 0.44444, 0, 0, 0.575],
    "52": [0.19444, 0.44444, 0, 0, 0.575],
    "53": [0.19444, 0.44444, 0, 0, 0.575],
    "54": [0, 0.64444, 0, 0, 0.575],
    "55": [0.19444, 0.44444, 0, 0, 0.575],
    "56": [0, 0.64444, 0, 0, 0.575],
    "57": [0.19444, 0.44444, 0, 0, 0.575],
    "65": [0, 0.68611, 0, 0, 0.86944],
    "66": [0, 0.68611, 0.04835, 0, 0.8664],
    "67": [0, 0.68611, 0.06979, 0, 0.81694],
    "68": [0, 0.68611, 0.03194, 0, 0.93812],
    "69": [0, 0.68611, 0.05451, 0, 0.81007],
    "70": [0, 0.68611, 0.15972, 0, 0.68889],
    "71": [0, 0.68611, 0, 0, 0.88673],
    "72": [0, 0.68611, 0.08229, 0, 0.98229],
    "73": [0, 0.68611, 0.07778, 0, 0.51111],
    "74": [0, 0.68611, 0.10069, 0, 0.63125],
    "75": [0, 0.68611, 0.06979, 0, 0.97118],
    "76": [0, 0.68611, 0, 0, 0.75555],
    "77": [0, 0.68611, 0.11424, 0, 1.14201],
    "78": [0, 0.68611, 0.11424, 0, 0.95034],
    "79": [0, 0.68611, 0.03194, 0, 0.83666],
    "80": [0, 0.68611, 0.15972, 0, 0.72309],
    "81": [0.19444, 0.68611, 0, 0, 0.86861],
    "82": [0, 0.68611, 0.00421, 0, 0.87235],
    "83": [0, 0.68611, 0.05382, 0, 0.69271],
    "84": [0, 0.68611, 0.15972, 0, 0.63663],
    "85": [0, 0.68611, 0.11424, 0, 0.80027],
    "86": [0, 0.68611, 0.25555, 0, 0.67778],
    "87": [0, 0.68611, 0.15972, 0, 1.09305],
    "88": [0, 0.68611, 0.07778, 0, 0.94722],
    "89": [0, 0.68611, 0.25555, 0, 0.67458],
    "90": [0, 0.68611, 0.06979, 0, 0.77257],
    "97": [0, 0.44444, 0, 0, 0.63287],
    "98": [0, 0.69444, 0, 0, 0.52083],
    "99": [0, 0.44444, 0, 0, 0.51342],
    "100": [0, 0.69444, 0, 0, 0.60972],
    "101": [0, 0.44444, 0, 0, 0.55361],
    "102": [0.19444, 0.69444, 0.11042, 0, 0.56806],
    "103": [0.19444, 0.44444, 0.03704, 0, 0.5449],
    "104": [0, 0.69444, 0, 0, 0.66759],
    "105": [0, 0.69326, 0, 0, 0.4048],
    "106": [0.19444, 0.69326, 0.0622, 0, 0.47083],
    "107": [0, 0.69444, 0.01852, 0, 0.6037],
    "108": [0, 0.69444, 0.0088, 0, 0.34815],
    "109": [0, 0.44444, 0, 0, 1.0324],
    "110": [0, 0.44444, 0, 0, 0.71296],
    "111": [0, 0.44444, 0, 0, 0.58472],
    "112": [0.19444, 0.44444, 0, 0, 0.60092],
    "113": [0.19444, 0.44444, 0.03704, 0, 0.54213],
    "114": [0, 0.44444, 0.03194, 0, 0.5287],
    "115": [0, 0.44444, 0, 0, 0.53125],
    "116": [0, 0.63492, 0, 0, 0.41528],
    "117": [0, 0.44444, 0, 0, 0.68102],
    "118": [0, 0.44444, 0.03704, 0, 0.56666],
    "119": [0, 0.44444, 0.02778, 0, 0.83148],
    "120": [0, 0.44444, 0, 0, 0.65903],
    "121": [0.19444, 0.44444, 0.03704, 0, 0.59028],
    "122": [0, 0.44444, 0.04213, 0, 0.55509],
    "160": [0, 0, 0, 0, 0.25],
    "915": [0, 0.68611, 0.15972, 0, 0.65694],
    "916": [0, 0.68611, 0, 0, 0.95833],
    "920": [0, 0.68611, 0.03194, 0, 0.86722],
    "923": [0, 0.68611, 0, 0, 0.80555],
    "926": [0, 0.68611, 0.07458, 0, 0.84125],
    "928": [0, 0.68611, 0.08229, 0, 0.98229],
    "931": [0, 0.68611, 0.05451, 0, 0.88507],
    "933": [0, 0.68611, 0.15972, 0, 0.67083],
    "934": [0, 0.68611, 0, 0, 0.76666],
    "936": [0, 0.68611, 0.11653, 0, 0.71402],
    "937": [0, 0.68611, 0.04835, 0, 0.8789],
    "945": [0, 0.44444, 0, 0, 0.76064],
    "946": [0.19444, 0.69444, 0.03403, 0, 0.65972],
    "947": [0.19444, 0.44444, 0.06389, 0, 0.59003],
    "948": [0, 0.69444, 0.03819, 0, 0.52222],
    "949": [0, 0.44444, 0, 0, 0.52882],
    "950": [0.19444, 0.69444, 0.06215, 0, 0.50833],
    "951": [0.19444, 0.44444, 0.03704, 0, 0.6],
    "952": [0, 0.69444, 0.03194, 0, 0.5618],
    "953": [0, 0.44444, 0, 0, 0.41204],
    "954": [0, 0.44444, 0, 0, 0.66759],
    "955": [0, 0.69444, 0, 0, 0.67083],
    "956": [0.19444, 0.44444, 0, 0, 0.70787],
    "957": [0, 0.44444, 0.06898, 0, 0.57685],
    "958": [0.19444, 0.69444, 0.03021, 0, 0.50833],
    "959": [0, 0.44444, 0, 0, 0.58472],
    "960": [0, 0.44444, 0.03704, 0, 0.68241],
    "961": [0.19444, 0.44444, 0, 0, 0.6118],
    "962": [0.09722, 0.44444, 0.07917, 0, 0.42361],
    "963": [0, 0.44444, 0.03704, 0, 0.68588],
    "964": [0, 0.44444, 0.13472, 0, 0.52083],
    "965": [0, 0.44444, 0.03704, 0, 0.63055],
    "966": [0.19444, 0.44444, 0, 0, 0.74722],
    "967": [0.19444, 0.44444, 0, 0, 0.71805],
    "968": [0.19444, 0.69444, 0.03704, 0, 0.75833],
    "969": [0, 0.44444, 0.03704, 0, 0.71782],
    "977": [0, 0.69444, 0, 0, 0.69155],
    "981": [0.19444, 0.69444, 0, 0, 0.7125],
    "982": [0, 0.44444, 0.03194, 0, 0.975],
    "1009": [0.19444, 0.44444, 0, 0, 0.6118],
    "1013": [0, 0.44444, 0, 0, 0.48333],
    "57649": [0, 0.44444, 0, 0, 0.39352],
    "57911": [0.19444, 0.44444, 0, 0, 0.43889]
  },
  "Math-Italic": {
    "32": [0, 0, 0, 0, 0.25],
    "48": [0, 0.43056, 0, 0, 0.5],
    "49": [0, 0.43056, 0, 0, 0.5],
    "50": [0, 0.43056, 0, 0, 0.5],
    "51": [0.19444, 0.43056, 0, 0, 0.5],
    "52": [0.19444, 0.43056, 0, 0, 0.5],
    "53": [0.19444, 0.43056, 0, 0, 0.5],
    "54": [0, 0.64444, 0, 0, 0.5],
    "55": [0.19444, 0.43056, 0, 0, 0.5],
    "56": [0, 0.64444, 0, 0, 0.5],
    "57": [0.19444, 0.43056, 0, 0, 0.5],
    "65": [0, 0.68333, 0, 0.13889, 0.75],
    "66": [0, 0.68333, 0.05017, 0.08334, 0.75851],
    "67": [0, 0.68333, 0.07153, 0.08334, 0.71472],
    "68": [0, 0.68333, 0.02778, 0.05556, 0.82792],
    "69": [0, 0.68333, 0.05764, 0.08334, 0.7382],
    "70": [0, 0.68333, 0.13889, 0.08334, 0.64306],
    "71": [0, 0.68333, 0, 0.08334, 0.78625],
    "72": [0, 0.68333, 0.08125, 0.05556, 0.83125],
    "73": [0, 0.68333, 0.07847, 0.11111, 0.43958],
    "74": [0, 0.68333, 0.09618, 0.16667, 0.55451],
    "75": [0, 0.68333, 0.07153, 0.05556, 0.84931],
    "76": [0, 0.68333, 0, 0.02778, 0.68056],
    "77": [0, 0.68333, 0.10903, 0.08334, 0.97014],
    "78": [0, 0.68333, 0.10903, 0.08334, 0.80347],
    "79": [0, 0.68333, 0.02778, 0.08334, 0.76278],
    "80": [0, 0.68333, 0.13889, 0.08334, 0.64201],
    "81": [0.19444, 0.68333, 0, 0.08334, 0.79056],
    "82": [0, 0.68333, 0.00773, 0.08334, 0.75929],
    "83": [0, 0.68333, 0.05764, 0.08334, 0.6132],
    "84": [0, 0.68333, 0.13889, 0.08334, 0.58438],
    "85": [0, 0.68333, 0.10903, 0.02778, 0.68278],
    "86": [0, 0.68333, 0.22222, 0, 0.58333],
    "87": [0, 0.68333, 0.13889, 0, 0.94445],
    "88": [0, 0.68333, 0.07847, 0.08334, 0.82847],
    "89": [0, 0.68333, 0.22222, 0, 0.58056],
    "90": [0, 0.68333, 0.07153, 0.08334, 0.68264],
    "97": [0, 0.43056, 0, 0, 0.52859],
    "98": [0, 0.69444, 0, 0, 0.42917],
    "99": [0, 0.43056, 0, 0.05556, 0.43276],
    "100": [0, 0.69444, 0, 0.16667, 0.52049],
    "101": [0, 0.43056, 0, 0.05556, 0.46563],
    "102": [0.19444, 0.69444, 0.10764, 0.16667, 0.48959],
    "103": [0.19444, 0.43056, 0.03588, 0.02778, 0.47697],
    "104": [0, 0.69444, 0, 0, 0.57616],
    "105": [0, 0.65952, 0, 0, 0.34451],
    "106": [0.19444, 0.65952, 0.05724, 0, 0.41181],
    "107": [0, 0.69444, 0.03148, 0, 0.5206],
    "108": [0, 0.69444, 0.01968, 0.08334, 0.29838],
    "109": [0, 0.43056, 0, 0, 0.87801],
    "110": [0, 0.43056, 0, 0, 0.60023],
    "111": [0, 0.43056, 0, 0.05556, 0.48472],
    "112": [0.19444, 0.43056, 0, 0.08334, 0.50313],
    "113": [0.19444, 0.43056, 0.03588, 0.08334, 0.44641],
    "114": [0, 0.43056, 0.02778, 0.05556, 0.45116],
    "115": [0, 0.43056, 0, 0.05556, 0.46875],
    "116": [0, 0.61508, 0, 0.08334, 0.36111],
    "117": [0, 0.43056, 0, 0.02778, 0.57246],
    "118": [0, 0.43056, 0.03588, 0.02778, 0.48472],
    "119": [0, 0.43056, 0.02691, 0.08334, 0.71592],
    "120": [0, 0.43056, 0, 0.02778, 0.57153],
    "121": [0.19444, 0.43056, 0.03588, 0.05556, 0.49028],
    "122": [0, 0.43056, 0.04398, 0.05556, 0.46505],
    "160": [0, 0, 0, 0, 0.25],
    "915": [0, 0.68333, 0.13889, 0.08334, 0.61528],
    "916": [0, 0.68333, 0, 0.16667, 0.83334],
    "920": [0, 0.68333, 0.02778, 0.08334, 0.76278],
    "923": [0, 0.68333, 0, 0.16667, 0.69445],
    "926": [0, 0.68333, 0.07569, 0.08334, 0.74236],
    "928": [0, 0.68333, 0.08125, 0.05556, 0.83125],
    "931": [0, 0.68333, 0.05764, 0.08334, 0.77986],
    "933": [0, 0.68333, 0.13889, 0.05556, 0.58333],
    "934": [0, 0.68333, 0, 0.08334, 0.66667],
    "936": [0, 0.68333, 0.11, 0.05556, 0.61222],
    "937": [0, 0.68333, 0.05017, 0.08334, 0.7724],
    "945": [0, 0.43056, 0.0037, 0.02778, 0.6397],
    "946": [0.19444, 0.69444, 0.05278, 0.08334, 0.56563],
    "947": [0.19444, 0.43056, 0.05556, 0, 0.51773],
    "948": [0, 0.69444, 0.03785, 0.05556, 0.44444],
    "949": [0, 0.43056, 0, 0.08334, 0.46632],
    "950": [0.19444, 0.69444, 0.07378, 0.08334, 0.4375],
    "951": [0.19444, 0.43056, 0.03588, 0.05556, 0.49653],
    "952": [0, 0.69444, 0.02778, 0.08334, 0.46944],
    "953": [0, 0.43056, 0, 0.05556, 0.35394],
    "954": [0, 0.43056, 0, 0, 0.57616],
    "955": [0, 0.69444, 0, 0, 0.58334],
    "956": [0.19444, 0.43056, 0, 0.02778, 0.60255],
    "957": [0, 0.43056, 0.06366, 0.02778, 0.49398],
    "958": [0.19444, 0.69444, 0.04601, 0.11111, 0.4375],
    "959": [0, 0.43056, 0, 0.05556, 0.48472],
    "960": [0, 0.43056, 0.03588, 0, 0.57003],
    "961": [0.19444, 0.43056, 0, 0.08334, 0.51702],
    "962": [0.09722, 0.43056, 0.07986, 0.08334, 0.36285],
    "963": [0, 0.43056, 0.03588, 0, 0.57141],
    "964": [0, 0.43056, 0.1132, 0.02778, 0.43715],
    "965": [0, 0.43056, 0.03588, 0.02778, 0.54028],
    "966": [0.19444, 0.43056, 0, 0.08334, 0.65417],
    "967": [0.19444, 0.43056, 0, 0.05556, 0.62569],
    "968": [0.19444, 0.69444, 0.03588, 0.11111, 0.65139],
    "969": [0, 0.43056, 0.03588, 0, 0.62245],
    "977": [0, 0.69444, 0, 0.08334, 0.59144],
    "981": [0.19444, 0.69444, 0, 0.08334, 0.59583],
    "982": [0, 0.43056, 0.02778, 0, 0.82813],
    "1009": [0.19444, 0.43056, 0, 0.08334, 0.51702],
    "1013": [0, 0.43056, 0, 0.05556, 0.4059],
    "57649": [0, 0.43056, 0, 0.02778, 0.32246],
    "57911": [0.19444, 0.43056, 0, 0.08334, 0.38403]
  },
  "SansSerif-Bold": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0, 0, 0.36667],
    "34": [0, 0.69444, 0, 0, 0.55834],
    "35": [0.19444, 0.69444, 0, 0, 0.91667],
    "36": [0.05556, 0.75, 0, 0, 0.55],
    "37": [0.05556, 0.75, 0, 0, 1.02912],
    "38": [0, 0.69444, 0, 0, 0.83056],
    "39": [0, 0.69444, 0, 0, 0.30556],
    "40": [0.25, 0.75, 0, 0, 0.42778],
    "41": [0.25, 0.75, 0, 0, 0.42778],
    "42": [0, 0.75, 0, 0, 0.55],
    "43": [0.11667, 0.61667, 0, 0, 0.85556],
    "44": [0.10556, 0.13056, 0, 0, 0.30556],
    "45": [0, 0.45833, 0, 0, 0.36667],
    "46": [0, 0.13056, 0, 0, 0.30556],
    "47": [0.25, 0.75, 0, 0, 0.55],
    "48": [0, 0.69444, 0, 0, 0.55],
    "49": [0, 0.69444, 0, 0, 0.55],
    "50": [0, 0.69444, 0, 0, 0.55],
    "51": [0, 0.69444, 0, 0, 0.55],
    "52": [0, 0.69444, 0, 0, 0.55],
    "53": [0, 0.69444, 0, 0, 0.55],
    "54": [0, 0.69444, 0, 0, 0.55],
    "55": [0, 0.69444, 0, 0, 0.55],
    "56": [0, 0.69444, 0, 0, 0.55],
    "57": [0, 0.69444, 0, 0, 0.55],
    "58": [0, 0.45833, 0, 0, 0.30556],
    "59": [0.10556, 0.45833, 0, 0, 0.30556],
    "61": [-0.09375, 0.40625, 0, 0, 0.85556],
    "63": [0, 0.69444, 0, 0, 0.51945],
    "64": [0, 0.69444, 0, 0, 0.73334],
    "65": [0, 0.69444, 0, 0, 0.73334],
    "66": [0, 0.69444, 0, 0, 0.73334],
    "67": [0, 0.69444, 0, 0, 0.70278],
    "68": [0, 0.69444, 0, 0, 0.79445],
    "69": [0, 0.69444, 0, 0, 0.64167],
    "70": [0, 0.69444, 0, 0, 0.61111],
    "71": [0, 0.69444, 0, 0, 0.73334],
    "72": [0, 0.69444, 0, 0, 0.79445],
    "73": [0, 0.69444, 0, 0, 0.33056],
    "74": [0, 0.69444, 0, 0, 0.51945],
    "75": [0, 0.69444, 0, 0, 0.76389],
    "76": [0, 0.69444, 0, 0, 0.58056],
    "77": [0, 0.69444, 0, 0, 0.97778],
    "78": [0, 0.69444, 0, 0, 0.79445],
    "79": [0, 0.69444, 0, 0, 0.79445],
    "80": [0, 0.69444, 0, 0, 0.70278],
    "81": [0.10556, 0.69444, 0, 0, 0.79445],
    "82": [0, 0.69444, 0, 0, 0.70278],
    "83": [0, 0.69444, 0, 0, 0.61111],
    "84": [0, 0.69444, 0, 0, 0.73334],
    "85": [0, 0.69444, 0, 0, 0.76389],
    "86": [0, 0.69444, 0.01528, 0, 0.73334],
    "87": [0, 0.69444, 0.01528, 0, 1.03889],
    "88": [0, 0.69444, 0, 0, 0.73334],
    "89": [0, 0.69444, 0.0275, 0, 0.73334],
    "90": [0, 0.69444, 0, 0, 0.67223],
    "91": [0.25, 0.75, 0, 0, 0.34306],
    "93": [0.25, 0.75, 0, 0, 0.34306],
    "94": [0, 0.69444, 0, 0, 0.55],
    "95": [0.35, 0.10833, 0.03056, 0, 0.55],
    "97": [0, 0.45833, 0, 0, 0.525],
    "98": [0, 0.69444, 0, 0, 0.56111],
    "99": [0, 0.45833, 0, 0, 0.48889],
    "100": [0, 0.69444, 0, 0, 0.56111],
    "101": [0, 0.45833, 0, 0, 0.51111],
    "102": [0, 0.69444, 0.07639, 0, 0.33611],
    "103": [0.19444, 0.45833, 0.01528, 0, 0.55],
    "104": [0, 0.69444, 0, 0, 0.56111],
    "105": [0, 0.69444, 0, 0, 0.25556],
    "106": [0.19444, 0.69444, 0, 0, 0.28611],
    "107": [0, 0.69444, 0, 0, 0.53056],
    "108": [0, 0.69444, 0, 0, 0.25556],
    "109": [0, 0.45833, 0, 0, 0.86667],
    "110": [0, 0.45833, 0, 0, 0.56111],
    "111": [0, 0.45833, 0, 0, 0.55],
    "112": [0.19444, 0.45833, 0, 0, 0.56111],
    "113": [0.19444, 0.45833, 0, 0, 0.56111],
    "114": [0, 0.45833, 0.01528, 0, 0.37222],
    "115": [0, 0.45833, 0, 0, 0.42167],
    "116": [0, 0.58929, 0, 0, 0.40417],
    "117": [0, 0.45833, 0, 0, 0.56111],
    "118": [0, 0.45833, 0.01528, 0, 0.5],
    "119": [0, 0.45833, 0.01528, 0, 0.74445],
    "120": [0, 0.45833, 0, 0, 0.5],
    "121": [0.19444, 0.45833, 0.01528, 0, 0.5],
    "122": [0, 0.45833, 0, 0, 0.47639],
    "126": [0.35, 0.34444, 0, 0, 0.55],
    "160": [0, 0, 0, 0, 0.25],
    "168": [0, 0.69444, 0, 0, 0.55],
    "176": [0, 0.69444, 0, 0, 0.73334],
    "180": [0, 0.69444, 0, 0, 0.55],
    "184": [0.17014, 0, 0, 0, 0.48889],
    "305": [0, 0.45833, 0, 0, 0.25556],
    "567": [0.19444, 0.45833, 0, 0, 0.28611],
    "710": [0, 0.69444, 0, 0, 0.55],
    "711": [0, 0.63542, 0, 0, 0.55],
    "713": [0, 0.63778, 0, 0, 0.55],
    "728": [0, 0.69444, 0, 0, 0.55],
    "729": [0, 0.69444, 0, 0, 0.30556],
    "730": [0, 0.69444, 0, 0, 0.73334],
    "732": [0, 0.69444, 0, 0, 0.55],
    "733": [0, 0.69444, 0, 0, 0.55],
    "915": [0, 0.69444, 0, 0, 0.58056],
    "916": [0, 0.69444, 0, 0, 0.91667],
    "920": [0, 0.69444, 0, 0, 0.85556],
    "923": [0, 0.69444, 0, 0, 0.67223],
    "926": [0, 0.69444, 0, 0, 0.73334],
    "928": [0, 0.69444, 0, 0, 0.79445],
    "931": [0, 0.69444, 0, 0, 0.79445],
    "933": [0, 0.69444, 0, 0, 0.85556],
    "934": [0, 0.69444, 0, 0, 0.79445],
    "936": [0, 0.69444, 0, 0, 0.85556],
    "937": [0, 0.69444, 0, 0, 0.79445],
    "8211": [0, 0.45833, 0.03056, 0, 0.55],
    "8212": [0, 0.45833, 0.03056, 0, 1.10001],
    "8216": [0, 0.69444, 0, 0, 0.30556],
    "8217": [0, 0.69444, 0, 0, 0.30556],
    "8220": [0, 0.69444, 0, 0, 0.55834],
    "8221": [0, 0.69444, 0, 0, 0.55834]
  },
  "SansSerif-Italic": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0.05733, 0, 0.31945],
    "34": [0, 0.69444, 0.00316, 0, 0.5],
    "35": [0.19444, 0.69444, 0.05087, 0, 0.83334],
    "36": [0.05556, 0.75, 0.11156, 0, 0.5],
    "37": [0.05556, 0.75, 0.03126, 0, 0.83334],
    "38": [0, 0.69444, 0.03058, 0, 0.75834],
    "39": [0, 0.69444, 0.07816, 0, 0.27778],
    "40": [0.25, 0.75, 0.13164, 0, 0.38889],
    "41": [0.25, 0.75, 0.02536, 0, 0.38889],
    "42": [0, 0.75, 0.11775, 0, 0.5],
    "43": [0.08333, 0.58333, 0.02536, 0, 0.77778],
    "44": [0.125, 0.08333, 0, 0, 0.27778],
    "45": [0, 0.44444, 0.01946, 0, 0.33333],
    "46": [0, 0.08333, 0, 0, 0.27778],
    "47": [0.25, 0.75, 0.13164, 0, 0.5],
    "48": [0, 0.65556, 0.11156, 0, 0.5],
    "49": [0, 0.65556, 0.11156, 0, 0.5],
    "50": [0, 0.65556, 0.11156, 0, 0.5],
    "51": [0, 0.65556, 0.11156, 0, 0.5],
    "52": [0, 0.65556, 0.11156, 0, 0.5],
    "53": [0, 0.65556, 0.11156, 0, 0.5],
    "54": [0, 0.65556, 0.11156, 0, 0.5],
    "55": [0, 0.65556, 0.11156, 0, 0.5],
    "56": [0, 0.65556, 0.11156, 0, 0.5],
    "57": [0, 0.65556, 0.11156, 0, 0.5],
    "58": [0, 0.44444, 0.02502, 0, 0.27778],
    "59": [0.125, 0.44444, 0.02502, 0, 0.27778],
    "61": [-0.13, 0.37, 0.05087, 0, 0.77778],
    "63": [0, 0.69444, 0.11809, 0, 0.47222],
    "64": [0, 0.69444, 0.07555, 0, 0.66667],
    "65": [0, 0.69444, 0, 0, 0.66667],
    "66": [0, 0.69444, 0.08293, 0, 0.66667],
    "67": [0, 0.69444, 0.11983, 0, 0.63889],
    "68": [0, 0.69444, 0.07555, 0, 0.72223],
    "69": [0, 0.69444, 0.11983, 0, 0.59722],
    "70": [0, 0.69444, 0.13372, 0, 0.56945],
    "71": [0, 0.69444, 0.11983, 0, 0.66667],
    "72": [0, 0.69444, 0.08094, 0, 0.70834],
    "73": [0, 0.69444, 0.13372, 0, 0.27778],
    "74": [0, 0.69444, 0.08094, 0, 0.47222],
    "75": [0, 0.69444, 0.11983, 0, 0.69445],
    "76": [0, 0.69444, 0, 0, 0.54167],
    "77": [0, 0.69444, 0.08094, 0, 0.875],
    "78": [0, 0.69444, 0.08094, 0, 0.70834],
    "79": [0, 0.69444, 0.07555, 0, 0.73611],
    "80": [0, 0.69444, 0.08293, 0, 0.63889],
    "81": [0.125, 0.69444, 0.07555, 0, 0.73611],
    "82": [0, 0.69444, 0.08293, 0, 0.64584],
    "83": [0, 0.69444, 0.09205, 0, 0.55556],
    "84": [0, 0.69444, 0.13372, 0, 0.68056],
    "85": [0, 0.69444, 0.08094, 0, 0.6875],
    "86": [0, 0.69444, 0.1615, 0, 0.66667],
    "87": [0, 0.69444, 0.1615, 0, 0.94445],
    "88": [0, 0.69444, 0.13372, 0, 0.66667],
    "89": [0, 0.69444, 0.17261, 0, 0.66667],
    "90": [0, 0.69444, 0.11983, 0, 0.61111],
    "91": [0.25, 0.75, 0.15942, 0, 0.28889],
    "93": [0.25, 0.75, 0.08719, 0, 0.28889],
    "94": [0, 0.69444, 0.0799, 0, 0.5],
    "95": [0.35, 0.09444, 0.08616, 0, 0.5],
    "97": [0, 0.44444, 0.00981, 0, 0.48056],
    "98": [0, 0.69444, 0.03057, 0, 0.51667],
    "99": [0, 0.44444, 0.08336, 0, 0.44445],
    "100": [0, 0.69444, 0.09483, 0, 0.51667],
    "101": [0, 0.44444, 0.06778, 0, 0.44445],
    "102": [0, 0.69444, 0.21705, 0, 0.30556],
    "103": [0.19444, 0.44444, 0.10836, 0, 0.5],
    "104": [0, 0.69444, 0.01778, 0, 0.51667],
    "105": [0, 0.67937, 0.09718, 0, 0.23889],
    "106": [0.19444, 0.67937, 0.09162, 0, 0.26667],
    "107": [0, 0.69444, 0.08336, 0, 0.48889],
    "108": [0, 0.69444, 0.09483, 0, 0.23889],
    "109": [0, 0.44444, 0.01778, 0, 0.79445],
    "110": [0, 0.44444, 0.01778, 0, 0.51667],
    "111": [0, 0.44444, 0.06613, 0, 0.5],
    "112": [0.19444, 0.44444, 0.0389, 0, 0.51667],
    "113": [0.19444, 0.44444, 0.04169, 0, 0.51667],
    "114": [0, 0.44444, 0.10836, 0, 0.34167],
    "115": [0, 0.44444, 0.0778, 0, 0.38333],
    "116": [0, 0.57143, 0.07225, 0, 0.36111],
    "117": [0, 0.44444, 0.04169, 0, 0.51667],
    "118": [0, 0.44444, 0.10836, 0, 0.46111],
    "119": [0, 0.44444, 0.10836, 0, 0.68334],
    "120": [0, 0.44444, 0.09169, 0, 0.46111],
    "121": [0.19444, 0.44444, 0.10836, 0, 0.46111],
    "122": [0, 0.44444, 0.08752, 0, 0.43472],
    "126": [0.35, 0.32659, 0.08826, 0, 0.5],
    "160": [0, 0, 0, 0, 0.25],
    "168": [0, 0.67937, 0.06385, 0, 0.5],
    "176": [0, 0.69444, 0, 0, 0.73752],
    "184": [0.17014, 0, 0, 0, 0.44445],
    "305": [0, 0.44444, 0.04169, 0, 0.23889],
    "567": [0.19444, 0.44444, 0.04169, 0, 0.26667],
    "710": [0, 0.69444, 0.0799, 0, 0.5],
    "711": [0, 0.63194, 0.08432, 0, 0.5],
    "713": [0, 0.60889, 0.08776, 0, 0.5],
    "714": [0, 0.69444, 0.09205, 0, 0.5],
    "715": [0, 0.69444, 0, 0, 0.5],
    "728": [0, 0.69444, 0.09483, 0, 0.5],
    "729": [0, 0.67937, 0.07774, 0, 0.27778],
    "730": [0, 0.69444, 0, 0, 0.73752],
    "732": [0, 0.67659, 0.08826, 0, 0.5],
    "733": [0, 0.69444, 0.09205, 0, 0.5],
    "915": [0, 0.69444, 0.13372, 0, 0.54167],
    "916": [0, 0.69444, 0, 0, 0.83334],
    "920": [0, 0.69444, 0.07555, 0, 0.77778],
    "923": [0, 0.69444, 0, 0, 0.61111],
    "926": [0, 0.69444, 0.12816, 0, 0.66667],
    "928": [0, 0.69444, 0.08094, 0, 0.70834],
    "931": [0, 0.69444, 0.11983, 0, 0.72222],
    "933": [0, 0.69444, 0.09031, 0, 0.77778],
    "934": [0, 0.69444, 0.04603, 0, 0.72222],
    "936": [0, 0.69444, 0.09031, 0, 0.77778],
    "937": [0, 0.69444, 0.08293, 0, 0.72222],
    "8211": [0, 0.44444, 0.08616, 0, 0.5],
    "8212": [0, 0.44444, 0.08616, 0, 1.0],
    "8216": [0, 0.69444, 0.07816, 0, 0.27778],
    "8217": [0, 0.69444, 0.07816, 0, 0.27778],
    "8220": [0, 0.69444, 0.14205, 0, 0.5],
    "8221": [0, 0.69444, 0.00316, 0, 0.5]
  },
  "SansSerif-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "33": [0, 0.69444, 0, 0, 0.31945],
    "34": [0, 0.69444, 0, 0, 0.5],
    "35": [0.19444, 0.69444, 0, 0, 0.83334],
    "36": [0.05556, 0.75, 0, 0, 0.5],
    "37": [0.05556, 0.75, 0, 0, 0.83334],
    "38": [0, 0.69444, 0, 0, 0.75834],
    "39": [0, 0.69444, 0, 0, 0.27778],
    "40": [0.25, 0.75, 0, 0, 0.38889],
    "41": [0.25, 0.75, 0, 0, 0.38889],
    "42": [0, 0.75, 0, 0, 0.5],
    "43": [0.08333, 0.58333, 0, 0, 0.77778],
    "44": [0.125, 0.08333, 0, 0, 0.27778],
    "45": [0, 0.44444, 0, 0, 0.33333],
    "46": [0, 0.08333, 0, 0, 0.27778],
    "47": [0.25, 0.75, 0, 0, 0.5],
    "48": [0, 0.65556, 0, 0, 0.5],
    "49": [0, 0.65556, 0, 0, 0.5],
    "50": [0, 0.65556, 0, 0, 0.5],
    "51": [0, 0.65556, 0, 0, 0.5],
    "52": [0, 0.65556, 0, 0, 0.5],
    "53": [0, 0.65556, 0, 0, 0.5],
    "54": [0, 0.65556, 0, 0, 0.5],
    "55": [0, 0.65556, 0, 0, 0.5],
    "56": [0, 0.65556, 0, 0, 0.5],
    "57": [0, 0.65556, 0, 0, 0.5],
    "58": [0, 0.44444, 0, 0, 0.27778],
    "59": [0.125, 0.44444, 0, 0, 0.27778],
    "61": [-0.13, 0.37, 0, 0, 0.77778],
    "63": [0, 0.69444, 0, 0, 0.47222],
    "64": [0, 0.69444, 0, 0, 0.66667],
    "65": [0, 0.69444, 0, 0, 0.66667],
    "66": [0, 0.69444, 0, 0, 0.66667],
    "67": [0, 0.69444, 0, 0, 0.63889],
    "68": [0, 0.69444, 0, 0, 0.72223],
    "69": [0, 0.69444, 0, 0, 0.59722],
    "70": [0, 0.69444, 0, 0, 0.56945],
    "71": [0, 0.69444, 0, 0, 0.66667],
    "72": [0, 0.69444, 0, 0, 0.70834],
    "73": [0, 0.69444, 0, 0, 0.27778],
    "74": [0, 0.69444, 0, 0, 0.47222],
    "75": [0, 0.69444, 0, 0, 0.69445],
    "76": [0, 0.69444, 0, 0, 0.54167],
    "77": [0, 0.69444, 0, 0, 0.875],
    "78": [0, 0.69444, 0, 0, 0.70834],
    "79": [0, 0.69444, 0, 0, 0.73611],
    "80": [0, 0.69444, 0, 0, 0.63889],
    "81": [0.125, 0.69444, 0, 0, 0.73611],
    "82": [0, 0.69444, 0, 0, 0.64584],
    "83": [0, 0.69444, 0, 0, 0.55556],
    "84": [0, 0.69444, 0, 0, 0.68056],
    "85": [0, 0.69444, 0, 0, 0.6875],
    "86": [0, 0.69444, 0.01389, 0, 0.66667],
    "87": [0, 0.69444, 0.01389, 0, 0.94445],
    "88": [0, 0.69444, 0, 0, 0.66667],
    "89": [0, 0.69444, 0.025, 0, 0.66667],
    "90": [0, 0.69444, 0, 0, 0.61111],
    "91": [0.25, 0.75, 0, 0, 0.28889],
    "93": [0.25, 0.75, 0, 0, 0.28889],
    "94": [0, 0.69444, 0, 0, 0.5],
    "95": [0.35, 0.09444, 0.02778, 0, 0.5],
    "97": [0, 0.44444, 0, 0, 0.48056],
    "98": [0, 0.69444, 0, 0, 0.51667],
    "99": [0, 0.44444, 0, 0, 0.44445],
    "100": [0, 0.69444, 0, 0, 0.51667],
    "101": [0, 0.44444, 0, 0, 0.44445],
    "102": [0, 0.69444, 0.06944, 0, 0.30556],
    "103": [0.19444, 0.44444, 0.01389, 0, 0.5],
    "104": [0, 0.69444, 0, 0, 0.51667],
    "105": [0, 0.67937, 0, 0, 0.23889],
    "106": [0.19444, 0.67937, 0, 0, 0.26667],
    "107": [0, 0.69444, 0, 0, 0.48889],
    "108": [0, 0.69444, 0, 0, 0.23889],
    "109": [0, 0.44444, 0, 0, 0.79445],
    "110": [0, 0.44444, 0, 0, 0.51667],
    "111": [0, 0.44444, 0, 0, 0.5],
    "112": [0.19444, 0.44444, 0, 0, 0.51667],
    "113": [0.19444, 0.44444, 0, 0, 0.51667],
    "114": [0, 0.44444, 0.01389, 0, 0.34167],
    "115": [0, 0.44444, 0, 0, 0.38333],
    "116": [0, 0.57143, 0, 0, 0.36111],
    "117": [0, 0.44444, 0, 0, 0.51667],
    "118": [0, 0.44444, 0.01389, 0, 0.46111],
    "119": [0, 0.44444, 0.01389, 0, 0.68334],
    "120": [0, 0.44444, 0, 0, 0.46111],
    "121": [0.19444, 0.44444, 0.01389, 0, 0.46111],
    "122": [0, 0.44444, 0, 0, 0.43472],
    "126": [0.35, 0.32659, 0, 0, 0.5],
    "160": [0, 0, 0, 0, 0.25],
    "168": [0, 0.67937, 0, 0, 0.5],
    "176": [0, 0.69444, 0, 0, 0.66667],
    "184": [0.17014, 0, 0, 0, 0.44445],
    "305": [0, 0.44444, 0, 0, 0.23889],
    "567": [0.19444, 0.44444, 0, 0, 0.26667],
    "710": [0, 0.69444, 0, 0, 0.5],
    "711": [0, 0.63194, 0, 0, 0.5],
    "713": [0, 0.60889, 0, 0, 0.5],
    "714": [0, 0.69444, 0, 0, 0.5],
    "715": [0, 0.69444, 0, 0, 0.5],
    "728": [0, 0.69444, 0, 0, 0.5],
    "729": [0, 0.67937, 0, 0, 0.27778],
    "730": [0, 0.69444, 0, 0, 0.66667],
    "732": [0, 0.67659, 0, 0, 0.5],
    "733": [0, 0.69444, 0, 0, 0.5],
    "915": [0, 0.69444, 0, 0, 0.54167],
    "916": [0, 0.69444, 0, 0, 0.83334],
    "920": [0, 0.69444, 0, 0, 0.77778],
    "923": [0, 0.69444, 0, 0, 0.61111],
    "926": [0, 0.69444, 0, 0, 0.66667],
    "928": [0, 0.69444, 0, 0, 0.70834],
    "931": [0, 0.69444, 0, 0, 0.72222],
    "933": [0, 0.69444, 0, 0, 0.77778],
    "934": [0, 0.69444, 0, 0, 0.72222],
    "936": [0, 0.69444, 0, 0, 0.77778],
    "937": [0, 0.69444, 0, 0, 0.72222],
    "8211": [0, 0.44444, 0.02778, 0, 0.5],
    "8212": [0, 0.44444, 0.02778, 0, 1.0],
    "8216": [0, 0.69444, 0, 0, 0.27778],
    "8217": [0, 0.69444, 0, 0, 0.27778],
    "8220": [0, 0.69444, 0, 0, 0.5],
    "8221": [0, 0.69444, 0, 0, 0.5]
  },
  "Script-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "65": [0, 0.7, 0.22925, 0, 0.80253],
    "66": [0, 0.7, 0.04087, 0, 0.90757],
    "67": [0, 0.7, 0.1689, 0, 0.66619],
    "68": [0, 0.7, 0.09371, 0, 0.77443],
    "69": [0, 0.7, 0.18583, 0, 0.56162],
    "70": [0, 0.7, 0.13634, 0, 0.89544],
    "71": [0, 0.7, 0.17322, 0, 0.60961],
    "72": [0, 0.7, 0.29694, 0, 0.96919],
    "73": [0, 0.7, 0.19189, 0, 0.80907],
    "74": [0.27778, 0.7, 0.19189, 0, 1.05159],
    "75": [0, 0.7, 0.31259, 0, 0.91364],
    "76": [0, 0.7, 0.19189, 0, 0.87373],
    "77": [0, 0.7, 0.15981, 0, 1.08031],
    "78": [0, 0.7, 0.3525, 0, 0.9015],
    "79": [0, 0.7, 0.08078, 0, 0.73787],
    "80": [0, 0.7, 0.08078, 0, 1.01262],
    "81": [0, 0.7, 0.03305, 0, 0.88282],
    "82": [0, 0.7, 0.06259, 0, 0.85],
    "83": [0, 0.7, 0.19189, 0, 0.86767],
    "84": [0, 0.7, 0.29087, 0, 0.74697],
    "85": [0, 0.7, 0.25815, 0, 0.79996],
    "86": [0, 0.7, 0.27523, 0, 0.62204],
    "87": [0, 0.7, 0.27523, 0, 0.80532],
    "88": [0, 0.7, 0.26006, 0, 0.94445],
    "89": [0, 0.7, 0.2939, 0, 0.70961],
    "90": [0, 0.7, 0.24037, 0, 0.8212],
    "160": [0, 0, 0, 0, 0.25]
  },
  "Size1-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "40": [0.35001, 0.85, 0, 0, 0.45834],
    "41": [0.35001, 0.85, 0, 0, 0.45834],
    "47": [0.35001, 0.85, 0, 0, 0.57778],
    "91": [0.35001, 0.85, 0, 0, 0.41667],
    "92": [0.35001, 0.85, 0, 0, 0.57778],
    "93": [0.35001, 0.85, 0, 0, 0.41667],
    "123": [0.35001, 0.85, 0, 0, 0.58334],
    "125": [0.35001, 0.85, 0, 0, 0.58334],
    "160": [0, 0, 0, 0, 0.25],
    "710": [0, 0.72222, 0, 0, 0.55556],
    "732": [0, 0.72222, 0, 0, 0.55556],
    "770": [0, 0.72222, 0, 0, 0.55556],
    "771": [0, 0.72222, 0, 0, 0.55556],
    "8214": [-0.00099, 0.601, 0, 0, 0.77778],
    "8593": [1e-05, 0.6, 0, 0, 0.66667],
    "8595": [1e-05, 0.6, 0, 0, 0.66667],
    "8657": [1e-05, 0.6, 0, 0, 0.77778],
    "8659": [1e-05, 0.6, 0, 0, 0.77778],
    "8719": [0.25001, 0.75, 0, 0, 0.94445],
    "8720": [0.25001, 0.75, 0, 0, 0.94445],
    "8721": [0.25001, 0.75, 0, 0, 1.05556],
    "8730": [0.35001, 0.85, 0, 0, 1.0],
    "8739": [-0.00599, 0.606, 0, 0, 0.33333],
    "8741": [-0.00599, 0.606, 0, 0, 0.55556],
    "8747": [0.30612, 0.805, 0.19445, 0, 0.47222],
    "8748": [0.306, 0.805, 0.19445, 0, 0.47222],
    "8749": [0.306, 0.805, 0.19445, 0, 0.47222],
    "8750": [0.30612, 0.805, 0.19445, 0, 0.47222],
    "8896": [0.25001, 0.75, 0, 0, 0.83334],
    "8897": [0.25001, 0.75, 0, 0, 0.83334],
    "8898": [0.25001, 0.75, 0, 0, 0.83334],
    "8899": [0.25001, 0.75, 0, 0, 0.83334],
    "8968": [0.35001, 0.85, 0, 0, 0.47222],
    "8969": [0.35001, 0.85, 0, 0, 0.47222],
    "8970": [0.35001, 0.85, 0, 0, 0.47222],
    "8971": [0.35001, 0.85, 0, 0, 0.47222],
    "9168": [-0.00099, 0.601, 0, 0, 0.66667],
    "10216": [0.35001, 0.85, 0, 0, 0.47222],
    "10217": [0.35001, 0.85, 0, 0, 0.47222],
    "10752": [0.25001, 0.75, 0, 0, 1.11111],
    "10753": [0.25001, 0.75, 0, 0, 1.11111],
    "10754": [0.25001, 0.75, 0, 0, 1.11111],
    "10756": [0.25001, 0.75, 0, 0, 0.83334],
    "10758": [0.25001, 0.75, 0, 0, 0.83334]
  },
  "Size2-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "40": [0.65002, 1.15, 0, 0, 0.59722],
    "41": [0.65002, 1.15, 0, 0, 0.59722],
    "47": [0.65002, 1.15, 0, 0, 0.81111],
    "91": [0.65002, 1.15, 0, 0, 0.47222],
    "92": [0.65002, 1.15, 0, 0, 0.81111],
    "93": [0.65002, 1.15, 0, 0, 0.47222],
    "123": [0.65002, 1.15, 0, 0, 0.66667],
    "125": [0.65002, 1.15, 0, 0, 0.66667],
    "160": [0, 0, 0, 0, 0.25],
    "710": [0, 0.75, 0, 0, 1.0],
    "732": [0, 0.75, 0, 0, 1.0],
    "770": [0, 0.75, 0, 0, 1.0],
    "771": [0, 0.75, 0, 0, 1.0],
    "8719": [0.55001, 1.05, 0, 0, 1.27778],
    "8720": [0.55001, 1.05, 0, 0, 1.27778],
    "8721": [0.55001, 1.05, 0, 0, 1.44445],
    "8730": [0.65002, 1.15, 0, 0, 1.0],
    "8747": [0.86225, 1.36, 0.44445, 0, 0.55556],
    "8748": [0.862, 1.36, 0.44445, 0, 0.55556],
    "8749": [0.862, 1.36, 0.44445, 0, 0.55556],
    "8750": [0.86225, 1.36, 0.44445, 0, 0.55556],
    "8896": [0.55001, 1.05, 0, 0, 1.11111],
    "8897": [0.55001, 1.05, 0, 0, 1.11111],
    "8898": [0.55001, 1.05, 0, 0, 1.11111],
    "8899": [0.55001, 1.05, 0, 0, 1.11111],
    "8968": [0.65002, 1.15, 0, 0, 0.52778],
    "8969": [0.65002, 1.15, 0, 0, 0.52778],
    "8970": [0.65002, 1.15, 0, 0, 0.52778],
    "8971": [0.65002, 1.15, 0, 0, 0.52778],
    "10216": [0.65002, 1.15, 0, 0, 0.61111],
    "10217": [0.65002, 1.15, 0, 0, 0.61111],
    "10752": [0.55001, 1.05, 0, 0, 1.51112],
    "10753": [0.55001, 1.05, 0, 0, 1.51112],
    "10754": [0.55001, 1.05, 0, 0, 1.51112],
    "10756": [0.55001, 1.05, 0, 0, 1.11111],
    "10758": [0.55001, 1.05, 0, 0, 1.11111]
  },
  "Size3-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "40": [0.95003, 1.45, 0, 0, 0.73611],
    "41": [0.95003, 1.45, 0, 0, 0.73611],
    "47": [0.95003, 1.45, 0, 0, 1.04445],
    "91": [0.95003, 1.45, 0, 0, 0.52778],
    "92": [0.95003, 1.45, 0, 0, 1.04445],
    "93": [0.95003, 1.45, 0, 0, 0.52778],
    "123": [0.95003, 1.45, 0, 0, 0.75],
    "125": [0.95003, 1.45, 0, 0, 0.75],
    "160": [0, 0, 0, 0, 0.25],
    "710": [0, 0.75, 0, 0, 1.44445],
    "732": [0, 0.75, 0, 0, 1.44445],
    "770": [0, 0.75, 0, 0, 1.44445],
    "771": [0, 0.75, 0, 0, 1.44445],
    "8730": [0.95003, 1.45, 0, 0, 1.0],
    "8968": [0.95003, 1.45, 0, 0, 0.58334],
    "8969": [0.95003, 1.45, 0, 0, 0.58334],
    "8970": [0.95003, 1.45, 0, 0, 0.58334],
    "8971": [0.95003, 1.45, 0, 0, 0.58334],
    "10216": [0.95003, 1.45, 0, 0, 0.75],
    "10217": [0.95003, 1.45, 0, 0, 0.75]
  },
  "Size4-Regular": {
    "32": [0, 0, 0, 0, 0.25],
    "40": [1.25003, 1.75, 0, 0, 0.79167],
    "41": [1.25003, 1.75, 0, 0, 0.79167],
    "47": [1.25003, 1.75, 0, 0, 1.27778],
    "91": [1.25003, 1.75, 0, 0, 0.58334],
    "92": [1.25003, 1.75, 0, 0, 1.27778],
    "93": [1.25003, 1.75, 0, 0, 0.58334],
    "123": [1.25003, 1.75, 0, 0, 0.80556],
    "125": [1.25003, 1.75, 0, 0, 0.80556],
    "160": [0, 0, 0, 0, 0.25],
    "710": [0, 0.825, 0, 0, 1.8889],
    "732": [0, 0.825, 0, 0, 1.8889],
    "770": [0, 0.825, 0, 0, 1.8889],
    "771": [0, 0.825, 0, 0, 1.8889],
    "8730": [1.25003, 1.75, 0, 0, 1.0],
    "8968": [1.25003, 1.75, 0, 0, 0.63889],
    "8969": [1.25003, 1.75, 0, 0, 0.63889],
    "8970": [1.25003, 1.75, 0, 0, 0.63889],
    "8971": [1.25003, 1.75, 0, 0, 0.63889],
    "9115": [0.64502, 1.155, 0, 0, 0.875],
    "9116": [1e-05, 0.6, 0, 0, 0.875],
    "9117": [0.64502, 1.155, 0, 0, 0.875],
    "9118": [0.64502, 1.155, 0, 0, 0.875],
    "9119": [1e-05, 0.6, 0, 0, 0.875],
    "9120": [0.64502, 1.155, 0, 0, 0.875],
    "9121": [0.64502, 1.155, 0, 0, 0.66667],
    "9122": [-0.00099, 0.601, 0, 0, 0.66667],
    "9123": [0.64502, 1.155, 0, 0, 0.66667],
    "9124": [0.64502, 1.155, 0, 0, 0.66667],
    "9125": [-0.00099, 0.601, 0, 0, 0.66667],
    "9126": [0.64502, 1.155, 0, 0, 0.66667],
    "9127": [1e-05, 0.9, 0, 0, 0.88889],
    "9128": [0.65002, 1.15, 0, 0, 0.88889],
    "9129": [0.90001, 0, 0, 0, 0.88889],
    "9130": [0, 0.3, 0, 0, 0.88889],
    "9131": [1e-05, 0.9, 0, 0, 0.88889],
    "9132": [0.65002, 1.15, 0, 0, 0.88889],
    "9133": [0.90001, 0, 0, 0, 0.88889],
    "9143": [0.88502, 0.915, 0, 0, 1.05556],
    "10216": [1.25003, 1.75, 0, 0, 0.80556],
    "10217": [1.25003, 1.75, 0, 0, 0.80556],
    "57344": [-0.00499, 0.605, 0, 0, 1.05556],
    "57345": [-0.00499, 0.605, 0, 0, 1.05556],
    "57680": [0, 0.12, 0, 0, 0.45],
    "57681": [0, 0.12, 0, 0, 0.45],
    "57682": [0, 0.12, 0, 0, 0.45],
    "57683": [0, 0.12, 0, 0, 0.45]
  },
  "Typewriter-Regular": {
    "32": [0, 0, 0, 0, 0.525],
    "33": [0, 0.61111, 0, 0, 0.525],
    "34": [0, 0.61111, 0, 0, 0.525],
    "35": [0, 0.61111, 0, 0, 0.525],
    "36": [0.08333, 0.69444, 0, 0, 0.525],
    "37": [0.08333, 0.69444, 0, 0, 0.525],
    "38": [0, 0.61111, 0, 0, 0.525],
    "39": [0, 0.61111, 0, 0, 0.525],
    "40": [0.08333, 0.69444, 0, 0, 0.525],
    "41": [0.08333, 0.69444, 0, 0, 0.525],
    "42": [0, 0.52083, 0, 0, 0.525],
    "43": [-0.08056, 0.53055, 0, 0, 0.525],
    "44": [0.13889, 0.125, 0, 0, 0.525],
    "45": [-0.08056, 0.53055, 0, 0, 0.525],
    "46": [0, 0.125, 0, 0, 0.525],
    "47": [0.08333, 0.69444, 0, 0, 0.525],
    "48": [0, 0.61111, 0, 0, 0.525],
    "49": [0, 0.61111, 0, 0, 0.525],
    "50": [0, 0.61111, 0, 0, 0.525],
    "51": [0, 0.61111, 0, 0, 0.525],
    "52": [0, 0.61111, 0, 0, 0.525],
    "53": [0, 0.61111, 0, 0, 0.525],
    "54": [0, 0.61111, 0, 0, 0.525],
    "55": [0, 0.61111, 0, 0, 0.525],
    "56": [0, 0.61111, 0, 0, 0.525],
    "57": [0, 0.61111, 0, 0, 0.525],
    "58": [0, 0.43056, 0, 0, 0.525],
    "59": [0.13889, 0.43056, 0, 0, 0.525],
    "60": [-0.05556, 0.55556, 0, 0, 0.525],
    "61": [-0.19549, 0.41562, 0, 0, 0.525],
    "62": [-0.05556, 0.55556, 0, 0, 0.525],
    "63": [0, 0.61111, 0, 0, 0.525],
    "64": [0, 0.61111, 0, 0, 0.525],
    "65": [0, 0.61111, 0, 0, 0.525],
    "66": [0, 0.61111, 0, 0, 0.525],
    "67": [0, 0.61111, 0, 0, 0.525],
    "68": [0, 0.61111, 0, 0, 0.525],
    "69": [0, 0.61111, 0, 0, 0.525],
    "70": [0, 0.61111, 0, 0, 0.525],
    "71": [0, 0.61111, 0, 0, 0.525],
    "72": [0, 0.61111, 0, 0, 0.525],
    "73": [0, 0.61111, 0, 0, 0.525],
    "74": [0, 0.61111, 0, 0, 0.525],
    "75": [0, 0.61111, 0, 0, 0.525],
    "76": [0, 0.61111, 0, 0, 0.525],
    "77": [0, 0.61111, 0, 0, 0.525],
    "78": [0, 0.61111, 0, 0, 0.525],
    "79": [0, 0.61111, 0, 0, 0.525],
    "80": [0, 0.61111, 0, 0, 0.525],
    "81": [0.13889, 0.61111, 0, 0, 0.525],
    "82": [0, 0.61111, 0, 0, 0.525],
    "83": [0, 0.61111, 0, 0, 0.525],
    "84": [0, 0.61111, 0, 0, 0.525],
    "85": [0, 0.61111, 0, 0, 0.525],
    "86": [0, 0.61111, 0, 0, 0.525],
    "87": [0, 0.61111, 0, 0, 0.525],
    "88": [0, 0.61111, 0, 0, 0.525],
    "89": [0, 0.61111, 0, 0, 0.525],
    "90": [0, 0.61111, 0, 0, 0.525],
    "91": [0.08333, 0.69444, 0, 0, 0.525],
    "92": [0.08333, 0.69444, 0, 0, 0.525],
    "93": [0.08333, 0.69444, 0, 0, 0.525],
    "94": [0, 0.61111, 0, 0, 0.525],
    "95": [0.09514, 0, 0, 0, 0.525],
    "96": [0, 0.61111, 0, 0, 0.525],
    "97": [0, 0.43056, 0, 0, 0.525],
    "98": [0, 0.61111, 0, 0, 0.525],
    "99": [0, 0.43056, 0, 0, 0.525],
    "100": [0, 0.61111, 0, 0, 0.525],
    "101": [0, 0.43056, 0, 0, 0.525],
    "102": [0, 0.61111, 0, 0, 0.525],
    "103": [0.22222, 0.43056, 0, 0, 0.525],
    "104": [0, 0.61111, 0, 0, 0.525],
    "105": [0, 0.61111, 0, 0, 0.525],
    "106": [0.22222, 0.61111, 0, 0, 0.525],
    "107": [0, 0.61111, 0, 0, 0.525],
    "108": [0, 0.61111, 0, 0, 0.525],
    "109": [0, 0.43056, 0, 0, 0.525],
    "110": [0, 0.43056, 0, 0, 0.525],
    "111": [0, 0.43056, 0, 0, 0.525],
    "112": [0.22222, 0.43056, 0, 0, 0.525],
    "113": [0.22222, 0.43056, 0, 0, 0.525],
    "114": [0, 0.43056, 0, 0, 0.525],
    "115": [0, 0.43056, 0, 0, 0.525],
    "116": [0, 0.55358, 0, 0, 0.525],
    "117": [0, 0.43056, 0, 0, 0.525],
    "118": [0, 0.43056, 0, 0, 0.525],
    "119": [0, 0.43056, 0, 0, 0.525],
    "120": [0, 0.43056, 0, 0, 0.525],
    "121": [0.22222, 0.43056, 0, 0, 0.525],
    "122": [0, 0.43056, 0, 0, 0.525],
    "123": [0.08333, 0.69444, 0, 0, 0.525],
    "124": [0.08333, 0.69444, 0, 0, 0.525],
    "125": [0.08333, 0.69444, 0, 0, 0.525],
    "126": [0, 0.61111, 0, 0, 0.525],
    "127": [0, 0.61111, 0, 0, 0.525],
    "160": [0, 0, 0, 0, 0.525],
    "176": [0, 0.61111, 0, 0, 0.525],
    "184": [0.19445, 0, 0, 0, 0.525],
    "305": [0, 0.43056, 0, 0, 0.525],
    "567": [0.22222, 0.43056, 0, 0, 0.525],
    "711": [0, 0.56597, 0, 0, 0.525],
    "713": [0, 0.56555, 0, 0, 0.525],
    "714": [0, 0.61111, 0, 0, 0.525],
    "715": [0, 0.61111, 0, 0, 0.525],
    "728": [0, 0.61111, 0, 0, 0.525],
    "730": [0, 0.61111, 0, 0, 0.525],
    "770": [0, 0.61111, 0, 0, 0.525],
    "771": [0, 0.61111, 0, 0, 0.525],
    "776": [0, 0.61111, 0, 0, 0.525],
    "915": [0, 0.61111, 0, 0, 0.525],
    "916": [0, 0.61111, 0, 0, 0.525],
    "920": [0, 0.61111, 0, 0, 0.525],
    "923": [0, 0.61111, 0, 0, 0.525],
    "926": [0, 0.61111, 0, 0, 0.525],
    "928": [0, 0.61111, 0, 0, 0.525],
    "931": [0, 0.61111, 0, 0, 0.525],
    "933": [0, 0.61111, 0, 0, 0.525],
    "934": [0, 0.61111, 0, 0, 0.525],
    "936": [0, 0.61111, 0, 0, 0.525],
    "937": [0, 0.61111, 0, 0, 0.525],
    "8216": [0, 0.61111, 0, 0, 0.525],
    "8217": [0, 0.61111, 0, 0, 0.525],
    "8242": [0, 0.61111, 0, 0, 0.525],
    "9251": [0.11111, 0.21944, 0, 0, 0.525]
  }
});
;// CONCATENATED MODULE: ./src/fontMetrics.js


/**
 * This file contains metrics regarding fonts and individual symbols. The sigma
 * and xi variables, as well as the metricMap map contain data extracted from
 * TeX, TeX font metrics, and the TTF files. These data are then exposed via the
 * `metrics` variable and the getCharacterMetrics function.
 */
// In TeX, there are actually three sets of dimensions, one for each of
// textstyle (size index 5 and higher: >=9pt), scriptstyle (size index 3 and 4:
// 7-8pt), and scriptscriptstyle (size index 1 and 2: 5-6pt).  These are
// provided in the the arrays below, in that order.
//
// The font metrics are stored in fonts cmsy10, cmsy7, and cmsy5 respsectively.
// This was determined by running the following script:
//
//     latex -interaction=nonstopmode \
//     '\documentclass{article}\usepackage{amsmath}\begin{document}' \
//     '$a$ \expandafter\show\the\textfont2' \
//     '\expandafter\show\the\scriptfont2' \
//     '\expandafter\show\the\scriptscriptfont2' \
//     '\stop'
//
// The metrics themselves were retreived using the following commands:
//
//     tftopl cmsy10
//     tftopl cmsy7
//     tftopl cmsy5
//
// The output of each of these commands is quite lengthy.  The only part we
// care about is the FONTDIMEN section. Each value is measured in EMs.
var sigmasAndXis = {
  slant: [0.250, 0.250, 0.250],
  // sigma1
  space: [0.000, 0.000, 0.000],
  // sigma2
  stretch: [0.000, 0.000, 0.000],
  // sigma3
  shrink: [0.000, 0.000, 0.000],
  // sigma4
  xHeight: [0.431, 0.431, 0.431],
  // sigma5
  quad: [1.000, 1.171, 1.472],
  // sigma6
  extraSpace: [0.000, 0.000, 0.000],
  // sigma7
  num1: [0.677, 0.732, 0.925],
  // sigma8
  num2: [0.394, 0.384, 0.387],
  // sigma9
  num3: [0.444, 0.471, 0.504],
  // sigma10
  denom1: [0.686, 0.752, 1.025],
  // sigma11
  denom2: [0.345, 0.344, 0.532],
  // sigma12
  sup1: [0.413, 0.503, 0.504],
  // sigma13
  sup2: [0.363, 0.431, 0.404],
  // sigma14
  sup3: [0.289, 0.286, 0.294],
  // sigma15
  sub1: [0.150, 0.143, 0.200],
  // sigma16
  sub2: [0.247, 0.286, 0.400],
  // sigma17
  supDrop: [0.386, 0.353, 0.494],
  // sigma18
  subDrop: [0.050, 0.071, 0.100],
  // sigma19
  delim1: [2.390, 1.700, 1.980],
  // sigma20
  delim2: [1.010, 1.157, 1.420],
  // sigma21
  axisHeight: [0.250, 0.250, 0.250],
  // sigma22
  // These font metrics are extracted from TeX by using tftopl on cmex10.tfm;
  // they correspond to the font parameters of the extension fonts (family 3).
  // See the TeXbook, page 441. In AMSTeX, the extension fonts scale; to
  // match cmex7, we'd use cmex7.tfm values for script and scriptscript
  // values.
  defaultRuleThickness: [0.04, 0.049, 0.049],
  // xi8; cmex7: 0.049
  bigOpSpacing1: [0.111, 0.111, 0.111],
  // xi9
  bigOpSpacing2: [0.166, 0.166, 0.166],
  // xi10
  bigOpSpacing3: [0.2, 0.2, 0.2],
  // xi11
  bigOpSpacing4: [0.6, 0.611, 0.611],
  // xi12; cmex7: 0.611
  bigOpSpacing5: [0.1, 0.143, 0.143],
  // xi13; cmex7: 0.143
  // The \sqrt rule width is taken from the height of the surd character.
  // Since we use the same font at all sizes, this thickness doesn't scale.
  sqrtRuleThickness: [0.04, 0.04, 0.04],
  // This value determines how large a pt is, for metrics which are defined
  // in terms of pts.
  // This value is also used in katex.less; if you change it make sure the
  // values match.
  ptPerEm: [10.0, 10.0, 10.0],
  // The space between adjacent `|` columns in an array definition. From
  // `\showthe\doublerulesep` in LaTeX. Equals 2.0 / ptPerEm.
  doubleRuleSep: [0.2, 0.2, 0.2],
  // The width of separator lines in {array} environments. From
  // `\showthe\arrayrulewidth` in LaTeX. Equals 0.4 / ptPerEm.
  arrayRuleWidth: [0.04, 0.04, 0.04],
  // Two values from LaTeX source2e:
  fboxsep: [0.3, 0.3, 0.3],
  //        3 pt / ptPerEm
  fboxrule: [0.04, 0.04, 0.04] // 0.4 pt / ptPerEm

}; // This map contains a mapping from font name and character code to character
// metrics, including height, depth, italic correction, and skew (kern from the
// character to the corresponding \skewchar)
// This map is generated via `make metrics`. It should not be changed manually.

 // These are very rough approximations.  We default to Times New Roman which
// should have Latin-1 and Cyrillic characters, but may not depending on the
// operating system.  The metrics do not account for extra height from the
// accents.  In the case of Cyrillic characters which have both ascenders and
// descenders we prefer approximations with ascenders, primarily to prevent
// the fraction bar or root line from intersecting the glyph.
// TODO(kevinb) allow union of multiple glyph metrics for better accuracy.

var extraCharacterMap = {
  // Latin-1
  'Å': 'A',
  'Ç': 'C',
  'Ð': 'D',
  'Þ': 'o',
  'å': 'a',
  'ç': 'c',
  'ð': 'd',
  'þ': 'o',
  // Cyrillic
  'А': 'A',
  'Б': 'B',
  'В': 'B',
  'Г': 'F',
  'Д': 'A',
  'Е': 'E',
  'Ж': 'K',
  'З': '3',
  'И': 'N',
  'Й': 'N',
  'К': 'K',
  'Л': 'N',
  'М': 'M',
  'Н': 'H',
  'О': 'O',
  'П': 'N',
  'Р': 'P',
  'С': 'C',
  'Т': 'T',
  'У': 'y',
  'Ф': 'O',
  'Х': 'X',
  'Ц': 'U',
  'Ч': 'h',
  'Ш': 'W',
  'Щ': 'W',
  'Ъ': 'B',
  'Ы': 'X',
  'Ь': 'B',
  'Э': '3',
  'Ю': 'X',
  'Я': 'R',
  'а': 'a',
  'б': 'b',
  'в': 'a',
  'г': 'r',
  'д': 'y',
  'е': 'e',
  'ж': 'm',
  'з': 'e',
  'и': 'n',
  'й': 'n',
  'к': 'n',
  'л': 'n',
  'м': 'm',
  'н': 'n',
  'о': 'o',
  'п': 'n',
  'р': 'p',
  'с': 'c',
  'т': 'o',
  'у': 'y',
  'ф': 'b',
  'х': 'x',
  'ц': 'n',
  'ч': 'n',
  'ш': 'w',
  'щ': 'w',
  'ъ': 'a',
  'ы': 'm',
  'ь': 'a',
  'э': 'e',
  'ю': 'm',
  'я': 'r'
};

/**
 * This function adds new font metrics to default metricMap
 * It can also override existing metrics
 */
function setFontMetrics(fontName, metrics) {
  fontMetricsData[fontName] = metrics;
}
/**
 * This function is a convenience function for looking up information in the
 * metricMap table. It takes a character as a string, and a font.
 *
 * Note: the `width` property may be undefined if fontMetricsData.js wasn't
 * built using `Make extended_metrics`.
 */

function getCharacterMetrics(character, font, mode) {
  if (!fontMetricsData[font]) {
    throw new Error("Font metrics not found for font: " + font + ".");
  }

  var ch = character.charCodeAt(0);
  var metrics = fontMetricsData[font][ch];

  if (!metrics && character[0] in extraCharacterMap) {
    ch = extraCharacterMap[character[0]].charCodeAt(0);
    metrics = fontMetricsData[font][ch];
  }

  if (!metrics && mode === 'text') {
    // We don't typically have font metrics for Asian scripts.
    // But since we support them in text mode, we need to return
    // some sort of metrics.
    // So if the character is in a script we support but we
    // don't have metrics for it, just use the metrics for
    // the Latin capital letter M. This is close enough because
    // we (currently) only care about the height of the glpyh
    // not its width.
    if (supportedCodepoint(ch)) {
      metrics = fontMetricsData[font][77]; // 77 is the charcode for 'M'
    }
  }

  if (metrics) {
    return {
      depth: metrics[0],
      height: metrics[1],
      italic: metrics[2],
      skew: metrics[3],
      width: metrics[4]
    };
  }
}
var fontMetricsBySizeIndex = {};
/**
 * Get the font metrics for a given size.
 */

function getGlobalMetrics(size) {
  var sizeIndex;

  if (size >= 5) {
    sizeIndex = 0;
  } else if (size >= 3) {
    sizeIndex = 1;
  } else {
    sizeIndex = 2;
  }

  if (!fontMetricsBySizeIndex[sizeIndex]) {
    var metrics = fontMetricsBySizeIndex[sizeIndex] = {
      cssEmPerMu: sigmasAndXis.quad[sizeIndex] / 18
    };

    for (var key in sigmasAndXis) {
      if (sigmasAndXis.hasOwnProperty(key)) {
        metrics[key] = sigmasAndXis[key][sizeIndex];
      }
    }
  }

  return fontMetricsBySizeIndex[sizeIndex];
}
;// CONCATENATED MODULE: ./src/symbols.js
/**
 * This file holds a list of all no-argument functions and single-character
 * symbols (like 'a' or ';').
 *
 * For each of the symbols, there are three properties they can have:
 * - font (required): the font to be used for this symbol. Either "main" (the
     normal font), or "ams" (the ams fonts).
 * - group (required): the ParseNode group type the symbol should have (i.e.
     "textord", "mathord", etc).
     See https://github.com/KaTeX/KaTeX/wiki/Examining-TeX#group-types
 * - replace: the character that this symbol or function should be
 *   replaced with (i.e. "\phi" has a replace value of "\u03d5", the phi
 *   character in the main font).
 *
 * The outermost map in the table indicates what mode the symbols should be
 * accepted in (e.g. "math" or "text").
 */
// Some of these have a "-token" suffix since these are also used as `ParseNode`
// types for raw text tokens, and we want to avoid conflicts with higher-level
// `ParseNode` types. These `ParseNode`s are constructed within `Parser` by
// looking up the `symbols` map.
var ATOMS = {
  "bin": 1,
  "close": 1,
  "inner": 1,
  "open": 1,
  "punct": 1,
  "rel": 1
};
var NON_ATOMS = {
  "accent-token": 1,
  "mathord": 1,
  "op-token": 1,
  "spacing": 1,
  "textord": 1
};
var symbols = {
  "math": {},
  "text": {}
};
/* harmony default export */ var src_symbols = (symbols);
/** `acceptUnicodeChar = true` is only applicable if `replace` is set. */

function defineSymbol(mode, font, group, replace, name, acceptUnicodeChar) {
  symbols[mode][name] = {
    font: font,
    group: group,
    replace: replace
  };

  if (acceptUnicodeChar && replace) {
    symbols[mode][replace] = symbols[mode][name];
  }
} // Some abbreviations for commonly used strings.
// This helps minify the code, and also spotting typos using jshint.
// modes:

var math = "math";
var symbols_text = "text"; // fonts:

var main = "main";
var ams = "ams"; // groups:

var accent = "accent-token";
var bin = "bin";
var symbols_close = "close";
var inner = "inner";
var mathord = "mathord";
var op = "op-token";
var symbols_open = "open";
var punct = "punct";
var rel = "rel";
var spacing = "spacing";
var textord = "textord"; // Now comes the symbol table
// Relation Symbols

defineSymbol(math, main, rel, "\u2261", "\\equiv", true);
defineSymbol(math, main, rel, "\u227A", "\\prec", true);
defineSymbol(math, main, rel, "\u227B", "\\succ", true);
defineSymbol(math, main, rel, "\u223C", "\\sim", true);
defineSymbol(math, main, rel, "\u22A5", "\\perp");
defineSymbol(math, main, rel, "\u2AAF", "\\preceq", true);
defineSymbol(math, main, rel, "\u2AB0", "\\succeq", true);
defineSymbol(math, main, rel, "\u2243", "\\simeq", true);
defineSymbol(math, main, rel, "\u2223", "\\mid", true);
defineSymbol(math, main, rel, "\u226A", "\\ll", true);
defineSymbol(math, main, rel, "\u226B", "\\gg", true);
defineSymbol(math, main, rel, "\u224D", "\\asymp", true);
defineSymbol(math, main, rel, "\u2225", "\\parallel");
defineSymbol(math, main, rel, "\u22C8", "\\bowtie", true);
defineSymbol(math, main, rel, "\u2323", "\\smile", true);
defineSymbol(math, main, rel, "\u2291", "\\sqsubseteq", true);
defineSymbol(math, main, rel, "\u2292", "\\sqsupseteq", true);
defineSymbol(math, main, rel, "\u2250", "\\doteq", true);
defineSymbol(math, main, rel, "\u2322", "\\frown", true);
defineSymbol(math, main, rel, "\u220B", "\\ni", true);
defineSymbol(math, main, rel, "\u221D", "\\propto", true);
defineSymbol(math, main, rel, "\u22A2", "\\vdash", true);
defineSymbol(math, main, rel, "\u22A3", "\\dashv", true);
defineSymbol(math, main, rel, "\u220B", "\\owns"); // Punctuation

defineSymbol(math, main, punct, ".", "\\ldotp");
defineSymbol(math, main, punct, "\u22C5", "\\cdotp"); // Misc Symbols

defineSymbol(math, main, textord, "#", "\\#");
defineSymbol(symbols_text, main, textord, "#", "\\#");
defineSymbol(math, main, textord, "&", "\\&");
defineSymbol(symbols_text, main, textord, "&", "\\&");
defineSymbol(math, main, textord, "\u2135", "\\aleph", true);
defineSymbol(math, main, textord, "\u2200", "\\forall", true);
defineSymbol(math, main, textord, "\u210F", "\\hbar", true);
defineSymbol(math, main, textord, "\u2203", "\\exists", true);
defineSymbol(math, main, textord, "\u2207", "\\nabla", true);
defineSymbol(math, main, textord, "\u266D", "\\flat", true);
defineSymbol(math, main, textord, "\u2113", "\\ell", true);
defineSymbol(math, main, textord, "\u266E", "\\natural", true);
defineSymbol(math, main, textord, "\u2663", "\\clubsuit", true);
defineSymbol(math, main, textord, "\u2118", "\\wp", true);
defineSymbol(math, main, textord, "\u266F", "\\sharp", true);
defineSymbol(math, main, textord, "\u2662", "\\diamondsuit", true);
defineSymbol(math, main, textord, "\u211C", "\\Re", true);
defineSymbol(math, main, textord, "\u2661", "\\heartsuit", true);
defineSymbol(math, main, textord, "\u2111", "\\Im", true);
defineSymbol(math, main, textord, "\u2660", "\\spadesuit", true);
defineSymbol(math, main, textord, "\xA7", "\\S", true);
defineSymbol(symbols_text, main, textord, "\xA7", "\\S");
defineSymbol(math, main, textord, "\xB6", "\\P", true);
defineSymbol(symbols_text, main, textord, "\xB6", "\\P"); // Math and Text

defineSymbol(math, main, textord, "\u2020", "\\dag");
defineSymbol(symbols_text, main, textord, "\u2020", "\\dag");
defineSymbol(symbols_text, main, textord, "\u2020", "\\textdagger");
defineSymbol(math, main, textord, "\u2021", "\\ddag");
defineSymbol(symbols_text, main, textord, "\u2021", "\\ddag");
defineSymbol(symbols_text, main, textord, "\u2021", "\\textdaggerdbl"); // Large Delimiters

defineSymbol(math, main, symbols_close, "\u23B1", "\\rmoustache", true);
defineSymbol(math, main, symbols_open, "\u23B0", "\\lmoustache", true);
defineSymbol(math, main, symbols_close, "\u27EF", "\\rgroup", true);
defineSymbol(math, main, symbols_open, "\u27EE", "\\lgroup", true); // Binary Operators

defineSymbol(math, main, bin, "\u2213", "\\mp", true);
defineSymbol(math, main, bin, "\u2296", "\\ominus", true);
defineSymbol(math, main, bin, "\u228E", "\\uplus", true);
defineSymbol(math, main, bin, "\u2293", "\\sqcap", true);
defineSymbol(math, main, bin, "\u2217", "\\ast");
defineSymbol(math, main, bin, "\u2294", "\\sqcup", true);
defineSymbol(math, main, bin, "\u25EF", "\\bigcirc", true);
defineSymbol(math, main, bin, "\u2219", "\\bullet");
defineSymbol(math, main, bin, "\u2021", "\\ddagger");
defineSymbol(math, main, bin, "\u2240", "\\wr", true);
defineSymbol(math, main, bin, "\u2A3F", "\\amalg");
defineSymbol(math, main, bin, "&", "\\And"); // from amsmath
// Arrow Symbols

defineSymbol(math, main, rel, "\u27F5", "\\longleftarrow", true);
defineSymbol(math, main, rel, "\u21D0", "\\Leftarrow", true);
defineSymbol(math, main, rel, "\u27F8", "\\Longleftarrow", true);
defineSymbol(math, main, rel, "\u27F6", "\\longrightarrow", true);
defineSymbol(math, main, rel, "\u21D2", "\\Rightarrow", true);
defineSymbol(math, main, rel, "\u27F9", "\\Longrightarrow", true);
defineSymbol(math, main, rel, "\u2194", "\\leftrightarrow", true);
defineSymbol(math, main, rel, "\u27F7", "\\longleftrightarrow", true);
defineSymbol(math, main, rel, "\u21D4", "\\Leftrightarrow", true);
defineSymbol(math, main, rel, "\u27FA", "\\Longleftrightarrow", true);
defineSymbol(math, main, rel, "\u21A6", "\\mapsto", true);
defineSymbol(math, main, rel, "\u27FC", "\\longmapsto", true);
defineSymbol(math, main, rel, "\u2197", "\\nearrow", true);
defineSymbol(math, main, rel, "\u21A9", "\\hookleftarrow", true);
defineSymbol(math, main, rel, "\u21AA", "\\hookrightarrow", true);
defineSymbol(math, main, rel, "\u2198", "\\searrow", true);
defineSymbol(math, main, rel, "\u21BC", "\\leftharpoonup", true);
defineSymbol(math, main, rel, "\u21C0", "\\rightharpoonup", true);
defineSymbol(math, main, rel, "\u2199", "\\swarrow", true);
defineSymbol(math, main, rel, "\u21BD", "\\leftharpoondown", true);
defineSymbol(math, main, rel, "\u21C1", "\\rightharpoondown", true);
defineSymbol(math, main, rel, "\u2196", "\\nwarrow", true);
defineSymbol(math, main, rel, "\u21CC", "\\rightleftharpoons", true); // AMS Negated Binary Relations

defineSymbol(math, ams, rel, "\u226E", "\\nless", true); // Symbol names preceeded by "@" each have a corresponding macro.

defineSymbol(math, ams, rel, "\uE010", "\\@nleqslant");
defineSymbol(math, ams, rel, "\uE011", "\\@nleqq");
defineSymbol(math, ams, rel, "\u2A87", "\\lneq", true);
defineSymbol(math, ams, rel, "\u2268", "\\lneqq", true);
defineSymbol(math, ams, rel, "\uE00C", "\\@lvertneqq");
defineSymbol(math, ams, rel, "\u22E6", "\\lnsim", true);
defineSymbol(math, ams, rel, "\u2A89", "\\lnapprox", true);
defineSymbol(math, ams, rel, "\u2280", "\\nprec", true); // unicode-math maps \u22e0 to \npreccurlyeq. We'll use the AMS synonym.

defineSymbol(math, ams, rel, "\u22E0", "\\npreceq", true);
defineSymbol(math, ams, rel, "\u22E8", "\\precnsim", true);
defineSymbol(math, ams, rel, "\u2AB9", "\\precnapprox", true);
defineSymbol(math, ams, rel, "\u2241", "\\nsim", true);
defineSymbol(math, ams, rel, "\uE006", "\\@nshortmid");
defineSymbol(math, ams, rel, "\u2224", "\\nmid", true);
defineSymbol(math, ams, rel, "\u22AC", "\\nvdash", true);
defineSymbol(math, ams, rel, "\u22AD", "\\nvDash", true);
defineSymbol(math, ams, rel, "\u22EA", "\\ntriangleleft");
defineSymbol(math, ams, rel, "\u22EC", "\\ntrianglelefteq", true);
defineSymbol(math, ams, rel, "\u228A", "\\subsetneq", true);
defineSymbol(math, ams, rel, "\uE01A", "\\@varsubsetneq");
defineSymbol(math, ams, rel, "\u2ACB", "\\subsetneqq", true);
defineSymbol(math, ams, rel, "\uE017", "\\@varsubsetneqq");
defineSymbol(math, ams, rel, "\u226F", "\\ngtr", true);
defineSymbol(math, ams, rel, "\uE00F", "\\@ngeqslant");
defineSymbol(math, ams, rel, "\uE00E", "\\@ngeqq");
defineSymbol(math, ams, rel, "\u2A88", "\\gneq", true);
defineSymbol(math, ams, rel, "\u2269", "\\gneqq", true);
defineSymbol(math, ams, rel, "\uE00D", "\\@gvertneqq");
defineSymbol(math, ams, rel, "\u22E7", "\\gnsim", true);
defineSymbol(math, ams, rel, "\u2A8A", "\\gnapprox", true);
defineSymbol(math, ams, rel, "\u2281", "\\nsucc", true); // unicode-math maps \u22e1 to \nsucccurlyeq. We'll use the AMS synonym.

defineSymbol(math, ams, rel, "\u22E1", "\\nsucceq", true);
defineSymbol(math, ams, rel, "\u22E9", "\\succnsim", true);
defineSymbol(math, ams, rel, "\u2ABA", "\\succnapprox", true); // unicode-math maps \u2246 to \simneqq. We'll use the AMS synonym.

defineSymbol(math, ams, rel, "\u2246", "\\ncong", true);
defineSymbol(math, ams, rel, "\uE007", "\\@nshortparallel");
defineSymbol(math, ams, rel, "\u2226", "\\nparallel", true);
defineSymbol(math, ams, rel, "\u22AF", "\\nVDash", true);
defineSymbol(math, ams, rel, "\u22EB", "\\ntriangleright");
defineSymbol(math, ams, rel, "\u22ED", "\\ntrianglerighteq", true);
defineSymbol(math, ams, rel, "\uE018", "\\@nsupseteqq");
defineSymbol(math, ams, rel, "\u228B", "\\supsetneq", true);
defineSymbol(math, ams, rel, "\uE01B", "\\@varsupsetneq");
defineSymbol(math, ams, rel, "\u2ACC", "\\supsetneqq", true);
defineSymbol(math, ams, rel, "\uE019", "\\@varsupsetneqq");
defineSymbol(math, ams, rel, "\u22AE", "\\nVdash", true);
defineSymbol(math, ams, rel, "\u2AB5", "\\precneqq", true);
defineSymbol(math, ams, rel, "\u2AB6", "\\succneqq", true);
defineSymbol(math, ams, rel, "\uE016", "\\@nsubseteqq");
defineSymbol(math, ams, bin, "\u22B4", "\\unlhd");
defineSymbol(math, ams, bin, "\u22B5", "\\unrhd"); // AMS Negated Arrows

defineSymbol(math, ams, rel, "\u219A", "\\nleftarrow", true);
defineSymbol(math, ams, rel, "\u219B", "\\nrightarrow", true);
defineSymbol(math, ams, rel, "\u21CD", "\\nLeftarrow", true);
defineSymbol(math, ams, rel, "\u21CF", "\\nRightarrow", true);
defineSymbol(math, ams, rel, "\u21AE", "\\nleftrightarrow", true);
defineSymbol(math, ams, rel, "\u21CE", "\\nLeftrightarrow", true); // AMS Misc

defineSymbol(math, ams, rel, "\u25B3", "\\vartriangle");
defineSymbol(math, ams, textord, "\u210F", "\\hslash");
defineSymbol(math, ams, textord, "\u25BD", "\\triangledown");
defineSymbol(math, ams, textord, "\u25CA", "\\lozenge");
defineSymbol(math, ams, textord, "\u24C8", "\\circledS");
defineSymbol(math, ams, textord, "\xAE", "\\circledR");
defineSymbol(symbols_text, ams, textord, "\xAE", "\\circledR");
defineSymbol(math, ams, textord, "\u2221", "\\measuredangle", true);
defineSymbol(math, ams, textord, "\u2204", "\\nexists");
defineSymbol(math, ams, textord, "\u2127", "\\mho");
defineSymbol(math, ams, textord, "\u2132", "\\Finv", true);
defineSymbol(math, ams, textord, "\u2141", "\\Game", true);
defineSymbol(math, ams, textord, "\u2035", "\\backprime");
defineSymbol(math, ams, textord, "\u25B2", "\\blacktriangle");
defineSymbol(math, ams, textord, "\u25BC", "\\blacktriangledown");
defineSymbol(math, ams, textord, "\u25A0", "\\blacksquare");
defineSymbol(math, ams, textord, "\u29EB", "\\blacklozenge");
defineSymbol(math, ams, textord, "\u2605", "\\bigstar");
defineSymbol(math, ams, textord, "\u2222", "\\sphericalangle", true);
defineSymbol(math, ams, textord, "\u2201", "\\complement", true); // unicode-math maps U+F0 to \matheth. We map to AMS function \eth

defineSymbol(math, ams, textord, "\xF0", "\\eth", true);
defineSymbol(symbols_text, main, textord, "\xF0", "\xF0");
defineSymbol(math, ams, textord, "\u2571", "\\diagup");
defineSymbol(math, ams, textord, "\u2572", "\\diagdown");
defineSymbol(math, ams, textord, "\u25A1", "\\square");
defineSymbol(math, ams, textord, "\u25A1", "\\Box");
defineSymbol(math, ams, textord, "\u25CA", "\\Diamond"); // unicode-math maps U+A5 to \mathyen. We map to AMS function \yen

defineSymbol(math, ams, textord, "\xA5", "\\yen", true);
defineSymbol(symbols_text, ams, textord, "\xA5", "\\yen", true);
defineSymbol(math, ams, textord, "\u2713", "\\checkmark", true);
defineSymbol(symbols_text, ams, textord, "\u2713", "\\checkmark"); // AMS Hebrew

defineSymbol(math, ams, textord, "\u2136", "\\beth", true);
defineSymbol(math, ams, textord, "\u2138", "\\daleth", true);
defineSymbol(math, ams, textord, "\u2137", "\\gimel", true); // AMS Greek

defineSymbol(math, ams, textord, "\u03DD", "\\digamma", true);
defineSymbol(math, ams, textord, "\u03F0", "\\varkappa"); // AMS Delimiters

defineSymbol(math, ams, symbols_open, "\u250C", "\\@ulcorner", true);
defineSymbol(math, ams, symbols_close, "\u2510", "\\@urcorner", true);
defineSymbol(math, ams, symbols_open, "\u2514", "\\@llcorner", true);
defineSymbol(math, ams, symbols_close, "\u2518", "\\@lrcorner", true); // AMS Binary Relations

defineSymbol(math, ams, rel, "\u2266", "\\leqq", true);
defineSymbol(math, ams, rel, "\u2A7D", "\\leqslant", true);
defineSymbol(math, ams, rel, "\u2A95", "\\eqslantless", true);
defineSymbol(math, ams, rel, "\u2272", "\\lesssim", true);
defineSymbol(math, ams, rel, "\u2A85", "\\lessapprox", true);
defineSymbol(math, ams, rel, "\u224A", "\\approxeq", true);
defineSymbol(math, ams, bin, "\u22D6", "\\lessdot");
defineSymbol(math, ams, rel, "\u22D8", "\\lll", true);
defineSymbol(math, ams, rel, "\u2276", "\\lessgtr", true);
defineSymbol(math, ams, rel, "\u22DA", "\\lesseqgtr", true);
defineSymbol(math, ams, rel, "\u2A8B", "\\lesseqqgtr", true);
defineSymbol(math, ams, rel, "\u2251", "\\doteqdot");
defineSymbol(math, ams, rel, "\u2253", "\\risingdotseq", true);
defineSymbol(math, ams, rel, "\u2252", "\\fallingdotseq", true);
defineSymbol(math, ams, rel, "\u223D", "\\backsim", true);
defineSymbol(math, ams, rel, "\u22CD", "\\backsimeq", true);
defineSymbol(math, ams, rel, "\u2AC5", "\\subseteqq", true);
defineSymbol(math, ams, rel, "\u22D0", "\\Subset", true);
defineSymbol(math, ams, rel, "\u228F", "\\sqsubset", true);
defineSymbol(math, ams, rel, "\u227C", "\\preccurlyeq", true);
defineSymbol(math, ams, rel, "\u22DE", "\\curlyeqprec", true);
defineSymbol(math, ams, rel, "\u227E", "\\precsim", true);
defineSymbol(math, ams, rel, "\u2AB7", "\\precapprox", true);
defineSymbol(math, ams, rel, "\u22B2", "\\vartriangleleft");
defineSymbol(math, ams, rel, "\u22B4", "\\trianglelefteq");
defineSymbol(math, ams, rel, "\u22A8", "\\vDash", true);
defineSymbol(math, ams, rel, "\u22AA", "\\Vvdash", true);
defineSymbol(math, ams, rel, "\u2323", "\\smallsmile");
defineSymbol(math, ams, rel, "\u2322", "\\smallfrown");
defineSymbol(math, ams, rel, "\u224F", "\\bumpeq", true);
defineSymbol(math, ams, rel, "\u224E", "\\Bumpeq", true);
defineSymbol(math, ams, rel, "\u2267", "\\geqq", true);
defineSymbol(math, ams, rel, "\u2A7E", "\\geqslant", true);
defineSymbol(math, ams, rel, "\u2A96", "\\eqslantgtr", true);
defineSymbol(math, ams, rel, "\u2273", "\\gtrsim", true);
defineSymbol(math, ams, rel, "\u2A86", "\\gtrapprox", true);
defineSymbol(math, ams, bin, "\u22D7", "\\gtrdot");
defineSymbol(math, ams, rel, "\u22D9", "\\ggg", true);
defineSymbol(math, ams, rel, "\u2277", "\\gtrless", true);
defineSymbol(math, ams, rel, "\u22DB", "\\gtreqless", true);
defineSymbol(math, ams, rel, "\u2A8C", "\\gtreqqless", true);
defineSymbol(math, ams, rel, "\u2256", "\\eqcirc", true);
defineSymbol(math, ams, rel, "\u2257", "\\circeq", true);
defineSymbol(math, ams, rel, "\u225C", "\\triangleq", true);
defineSymbol(math, ams, rel, "\u223C", "\\thicksim");
defineSymbol(math, ams, rel, "\u2248", "\\thickapprox");
defineSymbol(math, ams, rel, "\u2AC6", "\\supseteqq", true);
defineSymbol(math, ams, rel, "\u22D1", "\\Supset", true);
defineSymbol(math, ams, rel, "\u2290", "\\sqsupset", true);
defineSymbol(math, ams, rel, "\u227D", "\\succcurlyeq", true);
defineSymbol(math, ams, rel, "\u22DF", "\\curlyeqsucc", true);
defineSymbol(math, ams, rel, "\u227F", "\\succsim", true);
defineSymbol(math, ams, rel, "\u2AB8", "\\succapprox", true);
defineSymbol(math, ams, rel, "\u22B3", "\\vartriangleright");
defineSymbol(math, ams, rel, "\u22B5", "\\trianglerighteq");
defineSymbol(math, ams, rel, "\u22A9", "\\Vdash", true);
defineSymbol(math, ams, rel, "\u2223", "\\shortmid");
defineSymbol(math, ams, rel, "\u2225", "\\shortparallel");
defineSymbol(math, ams, rel, "\u226C", "\\between", true);
defineSymbol(math, ams, rel, "\u22D4", "\\pitchfork", true);
defineSymbol(math, ams, rel, "\u221D", "\\varpropto");
defineSymbol(math, ams, rel, "\u25C0", "\\blacktriangleleft"); // unicode-math says that \therefore is a mathord atom.
// We kept the amssymb atom type, which is rel.

defineSymbol(math, ams, rel, "\u2234", "\\therefore", true);
defineSymbol(math, ams, rel, "\u220D", "\\backepsilon");
defineSymbol(math, ams, rel, "\u25B6", "\\blacktriangleright"); // unicode-math says that \because is a mathord atom.
// We kept the amssymb atom type, which is rel.

defineSymbol(math, ams, rel, "\u2235", "\\because", true);
defineSymbol(math, ams, rel, "\u22D8", "\\llless");
defineSymbol(math, ams, rel, "\u22D9", "\\gggtr");
defineSymbol(math, ams, bin, "\u22B2", "\\lhd");
defineSymbol(math, ams, bin, "\u22B3", "\\rhd");
defineSymbol(math, ams, rel, "\u2242", "\\eqsim", true);
defineSymbol(math, main, rel, "\u22C8", "\\Join");
defineSymbol(math, ams, rel, "\u2251", "\\Doteq", true); // AMS Binary Operators

defineSymbol(math, ams, bin, "\u2214", "\\dotplus", true);
defineSymbol(math, ams, bin, "\u2216", "\\smallsetminus");
defineSymbol(math, ams, bin, "\u22D2", "\\Cap", true);
defineSymbol(math, ams, bin, "\u22D3", "\\Cup", true);
defineSymbol(math, ams, bin, "\u2A5E", "\\doublebarwedge", true);
defineSymbol(math, ams, bin, "\u229F", "\\boxminus", true);
defineSymbol(math, ams, bin, "\u229E", "\\boxplus", true);
defineSymbol(math, ams, bin, "\u22C7", "\\divideontimes", true);
defineSymbol(math, ams, bin, "\u22C9", "\\ltimes", true);
defineSymbol(math, ams, bin, "\u22CA", "\\rtimes", true);
defineSymbol(math, ams, bin, "\u22CB", "\\leftthreetimes", true);
defineSymbol(math, ams, bin, "\u22CC", "\\rightthreetimes", true);
defineSymbol(math, ams, bin, "\u22CF", "\\curlywedge", true);
defineSymbol(math, ams, bin, "\u22CE", "\\curlyvee", true);
defineSymbol(math, ams, bin, "\u229D", "\\circleddash", true);
defineSymbol(math, ams, bin, "\u229B", "\\circledast", true);
defineSymbol(math, ams, bin, "\u22C5", "\\centerdot");
defineSymbol(math, ams, bin, "\u22BA", "\\intercal", true);
defineSymbol(math, ams, bin, "\u22D2", "\\doublecap");
defineSymbol(math, ams, bin, "\u22D3", "\\doublecup");
defineSymbol(math, ams, bin, "\u22A0", "\\boxtimes", true); // AMS Arrows
// Note: unicode-math maps \u21e2 to their own function \rightdasharrow.
// We'll map it to AMS function \dashrightarrow. It produces the same atom.

defineSymbol(math, ams, rel, "\u21E2", "\\dashrightarrow", true); // unicode-math maps \u21e0 to \leftdasharrow. We'll use the AMS synonym.

defineSymbol(math, ams, rel, "\u21E0", "\\dashleftarrow", true);
defineSymbol(math, ams, rel, "\u21C7", "\\leftleftarrows", true);
defineSymbol(math, ams, rel, "\u21C6", "\\leftrightarrows", true);
defineSymbol(math, ams, rel, "\u21DA", "\\Lleftarrow", true);
defineSymbol(math, ams, rel, "\u219E", "\\twoheadleftarrow", true);
defineSymbol(math, ams, rel, "\u21A2", "\\leftarrowtail", true);
defineSymbol(math, ams, rel, "\u21AB", "\\looparrowleft", true);
defineSymbol(math, ams, rel, "\u21CB", "\\leftrightharpoons", true);
defineSymbol(math, ams, rel, "\u21B6", "\\curvearrowleft", true); // unicode-math maps \u21ba to \acwopencirclearrow. We'll use the AMS synonym.

defineSymbol(math, ams, rel, "\u21BA", "\\circlearrowleft", true);
defineSymbol(math, ams, rel, "\u21B0", "\\Lsh", true);
defineSymbol(math, ams, rel, "\u21C8", "\\upuparrows", true);
defineSymbol(math, ams, rel, "\u21BF", "\\upharpoonleft", true);
defineSymbol(math, ams, rel, "\u21C3", "\\downharpoonleft", true);
defineSymbol(math, main, rel, "\u22B6", "\\origof", true); // not in font

defineSymbol(math, main, rel, "\u22B7", "\\imageof", true); // not in font

defineSymbol(math, ams, rel, "\u22B8", "\\multimap", true);
defineSymbol(math, ams, rel, "\u21AD", "\\leftrightsquigarrow", true);
defineSymbol(math, ams, rel, "\u21C9", "\\rightrightarrows", true);
defineSymbol(math, ams, rel, "\u21C4", "\\rightleftarrows", true);
defineSymbol(math, ams, rel, "\u21A0", "\\twoheadrightarrow", true);
defineSymbol(math, ams, rel, "\u21A3", "\\rightarrowtail", true);
defineSymbol(math, ams, rel, "\u21AC", "\\looparrowright", true);
defineSymbol(math, ams, rel, "\u21B7", "\\curvearrowright", true); // unicode-math maps \u21bb to \cwopencirclearrow. We'll use the AMS synonym.

defineSymbol(math, ams, rel, "\u21BB", "\\circlearrowright", true);
defineSymbol(math, ams, rel, "\u21B1", "\\Rsh", true);
defineSymbol(math, ams, rel, "\u21CA", "\\downdownarrows", true);
defineSymbol(math, ams, rel, "\u21BE", "\\upharpoonright", true);
defineSymbol(math, ams, rel, "\u21C2", "\\downharpoonright", true);
defineSymbol(math, ams, rel, "\u21DD", "\\rightsquigarrow", true);
defineSymbol(math, ams, rel, "\u21DD", "\\leadsto");
defineSymbol(math, ams, rel, "\u21DB", "\\Rrightarrow", true);
defineSymbol(math, ams, rel, "\u21BE", "\\restriction");
defineSymbol(math, main, textord, "\u2018", "`");
defineSymbol(math, main, textord, "$", "\\$");
defineSymbol(symbols_text, main, textord, "$", "\\$");
defineSymbol(symbols_text, main, textord, "$", "\\textdollar");
defineSymbol(math, main, textord, "%", "\\%");
defineSymbol(symbols_text, main, textord, "%", "\\%");
defineSymbol(math, main, textord, "_", "\\_");
defineSymbol(symbols_text, main, textord, "_", "\\_");
defineSymbol(symbols_text, main, textord, "_", "\\textunderscore");
defineSymbol(math, main, textord, "\u2220", "\\angle", true);
defineSymbol(math, main, textord, "\u221E", "\\infty", true);
defineSymbol(math, main, textord, "\u2032", "\\prime");
defineSymbol(math, main, textord, "\u25B3", "\\triangle");
defineSymbol(math, main, textord, "\u0393", "\\Gamma", true);
defineSymbol(math, main, textord, "\u0394", "\\Delta", true);
defineSymbol(math, main, textord, "\u0398", "\\Theta", true);
defineSymbol(math, main, textord, "\u039B", "\\Lambda", true);
defineSymbol(math, main, textord, "\u039E", "\\Xi", true);
defineSymbol(math, main, textord, "\u03A0", "\\Pi", true);
defineSymbol(math, main, textord, "\u03A3", "\\Sigma", true);
defineSymbol(math, main, textord, "\u03A5", "\\Upsilon", true);
defineSymbol(math, main, textord, "\u03A6", "\\Phi", true);
defineSymbol(math, main, textord, "\u03A8", "\\Psi", true);
defineSymbol(math, main, textord, "\u03A9", "\\Omega", true);
defineSymbol(math, main, textord, "A", "\u0391");
defineSymbol(math, main, textord, "B", "\u0392");
defineSymbol(math, main, textord, "E", "\u0395");
defineSymbol(math, main, textord, "Z", "\u0396");
defineSymbol(math, main, textord, "H", "\u0397");
defineSymbol(math, main, textord, "I", "\u0399");
defineSymbol(math, main, textord, "K", "\u039A");
defineSymbol(math, main, textord, "M", "\u039C");
defineSymbol(math, main, textord, "N", "\u039D");
defineSymbol(math, main, textord, "O", "\u039F");
defineSymbol(math, main, textord, "P", "\u03A1");
defineSymbol(math, main, textord, "T", "\u03A4");
defineSymbol(math, main, textord, "X", "\u03A7");
defineSymbol(math, main, textord, "\xAC", "\\neg", true);
defineSymbol(math, main, textord, "\xAC", "\\lnot");
defineSymbol(math, main, textord, "\u22A4", "\\top");
defineSymbol(math, main, textord, "\u22A5", "\\bot");
defineSymbol(math, main, textord, "\u2205", "\\emptyset");
defineSymbol(math, ams, textord, "\u2205", "\\varnothing");
defineSymbol(math, main, mathord, "\u03B1", "\\alpha", true);
defineSymbol(math, main, mathord, "\u03B2", "\\beta", true);
defineSymbol(math, main, mathord, "\u03B3", "\\gamma", true);
defineSymbol(math, main, mathord, "\u03B4", "\\delta", true);
defineSymbol(math, main, mathord, "\u03F5", "\\epsilon", true);
defineSymbol(math, main, mathord, "\u03B6", "\\zeta", true);
defineSymbol(math, main, mathord, "\u03B7", "\\eta", true);
defineSymbol(math, main, mathord, "\u03B8", "\\theta", true);
defineSymbol(math, main, mathord, "\u03B9", "\\iota", true);
defineSymbol(math, main, mathord, "\u03BA", "\\kappa", true);
defineSymbol(math, main, mathord, "\u03BB", "\\lambda", true);
defineSymbol(math, main, mathord, "\u03BC", "\\mu", true);
defineSymbol(math, main, mathord, "\u03BD", "\\nu", true);
defineSymbol(math, main, mathord, "\u03BE", "\\xi", true);
defineSymbol(math, main, mathord, "\u03BF", "\\omicron", true);
defineSymbol(math, main, mathord, "\u03C0", "\\pi", true);
defineSymbol(math, main, mathord, "\u03C1", "\\rho", true);
defineSymbol(math, main, mathord, "\u03C3", "\\sigma", true);
defineSymbol(math, main, mathord, "\u03C4", "\\tau", true);
defineSymbol(math, main, mathord, "\u03C5", "\\upsilon", true);
defineSymbol(math, main, mathord, "\u03D5", "\\phi", true);
defineSymbol(math, main, mathord, "\u03C7", "\\chi", true);
defineSymbol(math, main, mathord, "\u03C8", "\\psi", true);
defineSymbol(math, main, mathord, "\u03C9", "\\omega", true);
defineSymbol(math, main, mathord, "\u03B5", "\\varepsilon", true);
defineSymbol(math, main, mathord, "\u03D1", "\\vartheta", true);
defineSymbol(math, main, mathord, "\u03D6", "\\varpi", true);
defineSymbol(math, main, mathord, "\u03F1", "\\varrho", true);
defineSymbol(math, main, mathord, "\u03C2", "\\varsigma", true);
defineSymbol(math, main, mathord, "\u03C6", "\\varphi", true);
defineSymbol(math, main, bin, "\u2217", "*");
defineSymbol(math, main, bin, "+", "+");
defineSymbol(math, main, bin, "\u2212", "-");
defineSymbol(math, main, bin, "\u22C5", "\\cdot", true);
defineSymbol(math, main, bin, "\u2218", "\\circ");
defineSymbol(math, main, bin, "\xF7", "\\div", true);
defineSymbol(math, main, bin, "\xB1", "\\pm", true);
defineSymbol(math, main, bin, "\xD7", "\\times", true);
defineSymbol(math, main, bin, "\u2229", "\\cap", true);
defineSymbol(math, main, bin, "\u222A", "\\cup", true);
defineSymbol(math, main, bin, "\u2216", "\\setminus");
defineSymbol(math, main, bin, "\u2227", "\\land");
defineSymbol(math, main, bin, "\u2228", "\\lor");
defineSymbol(math, main, bin, "\u2227", "\\wedge", true);
defineSymbol(math, main, bin, "\u2228", "\\vee", true);
defineSymbol(math, main, textord, "\u221A", "\\surd");
defineSymbol(math, main, symbols_open, "\u27E8", "\\langle", true);
defineSymbol(math, main, symbols_open, "\u2223", "\\lvert");
defineSymbol(math, main, symbols_open, "\u2225", "\\lVert");
defineSymbol(math, main, symbols_close, "?", "?");
defineSymbol(math, main, symbols_close, "!", "!");
defineSymbol(math, main, symbols_close, "\u27E9", "\\rangle", true);
defineSymbol(math, main, symbols_close, "\u2223", "\\rvert");
defineSymbol(math, main, symbols_close, "\u2225", "\\rVert");
defineSymbol(math, main, rel, "=", "=");
defineSymbol(math, main, rel, ":", ":");
defineSymbol(math, main, rel, "\u2248", "\\approx", true);
defineSymbol(math, main, rel, "\u2245", "\\cong", true);
defineSymbol(math, main, rel, "\u2265", "\\ge");
defineSymbol(math, main, rel, "\u2265", "\\geq", true);
defineSymbol(math, main, rel, "\u2190", "\\gets");
defineSymbol(math, main, rel, ">", "\\gt", true);
defineSymbol(math, main, rel, "\u2208", "\\in", true);
defineSymbol(math, main, rel, "\uE020", "\\@not");
defineSymbol(math, main, rel, "\u2282", "\\subset", true);
defineSymbol(math, main, rel, "\u2283", "\\supset", true);
defineSymbol(math, main, rel, "\u2286", "\\subseteq", true);
defineSymbol(math, main, rel, "\u2287", "\\supseteq", true);
defineSymbol(math, ams, rel, "\u2288", "\\nsubseteq", true);
defineSymbol(math, ams, rel, "\u2289", "\\nsupseteq", true);
defineSymbol(math, main, rel, "\u22A8", "\\models");
defineSymbol(math, main, rel, "\u2190", "\\leftarrow", true);
defineSymbol(math, main, rel, "\u2264", "\\le");
defineSymbol(math, main, rel, "\u2264", "\\leq", true);
defineSymbol(math, main, rel, "<", "\\lt", true);
defineSymbol(math, main, rel, "\u2192", "\\rightarrow", true);
defineSymbol(math, main, rel, "\u2192", "\\to");
defineSymbol(math, ams, rel, "\u2271", "\\ngeq", true);
defineSymbol(math, ams, rel, "\u2270", "\\nleq", true);
defineSymbol(math, main, spacing, "\xA0", "\\ ");
defineSymbol(math, main, spacing, "\xA0", "\\space"); // Ref: LaTeX Source 2e: \DeclareRobustCommand{\nobreakspace}{%

defineSymbol(math, main, spacing, "\xA0", "\\nobreakspace");
defineSymbol(symbols_text, main, spacing, "\xA0", "\\ ");
defineSymbol(symbols_text, main, spacing, "\xA0", " ");
defineSymbol(symbols_text, main, spacing, "\xA0", "\\space");
defineSymbol(symbols_text, main, spacing, "\xA0", "\\nobreakspace");
defineSymbol(math, main, spacing, null, "\\nobreak");
defineSymbol(math, main, spacing, null, "\\allowbreak");
defineSymbol(math, main, punct, ",", ",");
defineSymbol(math, main, punct, ";", ";");
defineSymbol(math, ams, bin, "\u22BC", "\\barwedge", true);
defineSymbol(math, ams, bin, "\u22BB", "\\veebar", true);
defineSymbol(math, main, bin, "\u2299", "\\odot", true);
defineSymbol(math, main, bin, "\u2295", "\\oplus", true);
defineSymbol(math, main, bin, "\u2297", "\\otimes", true);
defineSymbol(math, main, textord, "\u2202", "\\partial", true);
defineSymbol(math, main, bin, "\u2298", "\\oslash", true);
defineSymbol(math, ams, bin, "\u229A", "\\circledcirc", true);
defineSymbol(math, ams, bin, "\u22A1", "\\boxdot", true);
defineSymbol(math, main, bin, "\u25B3", "\\bigtriangleup");
defineSymbol(math, main, bin, "\u25BD", "\\bigtriangledown");
defineSymbol(math, main, bin, "\u2020", "\\dagger");
defineSymbol(math, main, bin, "\u22C4", "\\diamond");
defineSymbol(math, main, bin, "\u22C6", "\\star");
defineSymbol(math, main, bin, "\u25C3", "\\triangleleft");
defineSymbol(math, main, bin, "\u25B9", "\\triangleright");
defineSymbol(math, main, symbols_open, "{", "\\{");
defineSymbol(symbols_text, main, textord, "{", "\\{");
defineSymbol(symbols_text, main, textord, "{", "\\textbraceleft");
defineSymbol(math, main, symbols_close, "}", "\\}");
defineSymbol(symbols_text, main, textord, "}", "\\}");
defineSymbol(symbols_text, main, textord, "}", "\\textbraceright");
defineSymbol(math, main, symbols_open, "{", "\\lbrace");
defineSymbol(math, main, symbols_close, "}", "\\rbrace");
defineSymbol(math, main, symbols_open, "[", "\\lbrack", true);
defineSymbol(symbols_text, main, textord, "[", "\\lbrack", true);
defineSymbol(math, main, symbols_close, "]", "\\rbrack", true);
defineSymbol(symbols_text, main, textord, "]", "\\rbrack", true);
defineSymbol(math, main, symbols_open, "(", "\\lparen", true);
defineSymbol(math, main, symbols_close, ")", "\\rparen", true);
defineSymbol(symbols_text, main, textord, "<", "\\textless", true); // in T1 fontenc

defineSymbol(symbols_text, main, textord, ">", "\\textgreater", true); // in T1 fontenc

defineSymbol(math, main, symbols_open, "\u230A", "\\lfloor", true);
defineSymbol(math, main, symbols_close, "\u230B", "\\rfloor", true);
defineSymbol(math, main, symbols_open, "\u2308", "\\lceil", true);
defineSymbol(math, main, symbols_close, "\u2309", "\\rceil", true);
defineSymbol(math, main, textord, "\\", "\\backslash");
defineSymbol(math, main, textord, "\u2223", "|");
defineSymbol(math, main, textord, "\u2223", "\\vert");
defineSymbol(symbols_text, main, textord, "|", "\\textbar", true); // in T1 fontenc

defineSymbol(math, main, textord, "\u2225", "\\|");
defineSymbol(math, main, textord, "\u2225", "\\Vert");
defineSymbol(symbols_text, main, textord, "\u2225", "\\textbardbl");
defineSymbol(symbols_text, main, textord, "~", "\\textasciitilde");
defineSymbol(symbols_text, main, textord, "\\", "\\textbackslash");
defineSymbol(symbols_text, main, textord, "^", "\\textasciicircum");
defineSymbol(math, main, rel, "\u2191", "\\uparrow", true);
defineSymbol(math, main, rel, "\u21D1", "\\Uparrow", true);
defineSymbol(math, main, rel, "\u2193", "\\downarrow", true);
defineSymbol(math, main, rel, "\u21D3", "\\Downarrow", true);
defineSymbol(math, main, rel, "\u2195", "\\updownarrow", true);
defineSymbol(math, main, rel, "\u21D5", "\\Updownarrow", true);
defineSymbol(math, main, op, "\u2210", "\\coprod");
defineSymbol(math, main, op, "\u22C1", "\\bigvee");
defineSymbol(math, main, op, "\u22C0", "\\bigwedge");
defineSymbol(math, main, op, "\u2A04", "\\biguplus");
defineSymbol(math, main, op, "\u22C2", "\\bigcap");
defineSymbol(math, main, op, "\u22C3", "\\bigcup");
defineSymbol(math, main, op, "\u222B", "\\int");
defineSymbol(math, main, op, "\u222B", "\\intop");
defineSymbol(math, main, op, "\u222C", "\\iint");
defineSymbol(math, main, op, "\u222D", "\\iiint");
defineSymbol(math, main, op, "\u220F", "\\prod");
defineSymbol(math, main, op, "\u2211", "\\sum");
defineSymbol(math, main, op, "\u2A02", "\\bigotimes");
defineSymbol(math, main, op, "\u2A01", "\\bigoplus");
defineSymbol(math, main, op, "\u2A00", "\\bigodot");
defineSymbol(math, main, op, "\u222E", "\\oint");
defineSymbol(math, main, op, "\u222F", "\\oiint");
defineSymbol(math, main, op, "\u2230", "\\oiiint");
defineSymbol(math, main, op, "\u2A06", "\\bigsqcup");
defineSymbol(math, main, op, "\u222B", "\\smallint");
defineSymbol(symbols_text, main, inner, "\u2026", "\\textellipsis");
defineSymbol(math, main, inner, "\u2026", "\\mathellipsis");
defineSymbol(symbols_text, main, inner, "\u2026", "\\ldots", true);
defineSymbol(math, main, inner, "\u2026", "\\ldots", true);
defineSymbol(math, main, inner, "\u22EF", "\\@cdots", true);
defineSymbol(math, main, inner, "\u22F1", "\\ddots", true);
defineSymbol(math, main, textord, "\u22EE", "\\varvdots"); // \vdots is a macro

defineSymbol(math, main, accent, "\u02CA", "\\acute");
defineSymbol(math, main, accent, "\u02CB", "\\grave");
defineSymbol(math, main, accent, "\xA8", "\\ddot");
defineSymbol(math, main, accent, "~", "\\tilde");
defineSymbol(math, main, accent, "\u02C9", "\\bar");
defineSymbol(math, main, accent, "\u02D8", "\\breve");
defineSymbol(math, main, accent, "\u02C7", "\\check");
defineSymbol(math, main, accent, "^", "\\hat");
defineSymbol(math, main, accent, "\u20D7", "\\vec");
defineSymbol(math, main, accent, "\u02D9", "\\dot");
defineSymbol(math, main, accent, "\u02DA", "\\mathring"); // \imath and \jmath should be invariant to \mathrm, \mathbf, etc., so use PUA

defineSymbol(math, main, mathord, "\uE131", "\\@imath");
defineSymbol(math, main, mathord, "\uE237", "\\@jmath");
defineSymbol(math, main, textord, "\u0131", "\u0131");
defineSymbol(math, main, textord, "\u0237", "\u0237");
defineSymbol(symbols_text, main, textord, "\u0131", "\\i", true);
defineSymbol(symbols_text, main, textord, "\u0237", "\\j", true);
defineSymbol(symbols_text, main, textord, "\xDF", "\\ss", true);
defineSymbol(symbols_text, main, textord, "\xE6", "\\ae", true);
defineSymbol(symbols_text, main, textord, "\u0153", "\\oe", true);
defineSymbol(symbols_text, main, textord, "\xF8", "\\o", true);
defineSymbol(symbols_text, main, textord, "\xC6", "\\AE", true);
defineSymbol(symbols_text, main, textord, "\u0152", "\\OE", true);
defineSymbol(symbols_text, main, textord, "\xD8", "\\O", true);
defineSymbol(symbols_text, main, accent, "\u02CA", "\\'"); // acute

defineSymbol(symbols_text, main, accent, "\u02CB", "\\`"); // grave

defineSymbol(symbols_text, main, accent, "\u02C6", "\\^"); // circumflex

defineSymbol(symbols_text, main, accent, "\u02DC", "\\~"); // tilde

defineSymbol(symbols_text, main, accent, "\u02C9", "\\="); // macron

defineSymbol(symbols_text, main, accent, "\u02D8", "\\u"); // breve

defineSymbol(symbols_text, main, accent, "\u02D9", "\\."); // dot above

defineSymbol(symbols_text, main, accent, "\u02DA", "\\r"); // ring above

defineSymbol(symbols_text, main, accent, "\u02C7", "\\v"); // caron

defineSymbol(symbols_text, main, accent, "\xA8", '\\"'); // diaresis

defineSymbol(symbols_text, main, accent, "\u02DD", "\\H"); // double acute

defineSymbol(symbols_text, main, accent, "\u25EF", "\\textcircled"); // \bigcirc glyph
// These ligatures are detected and created in Parser.js's `formLigatures`.

var ligatures = {
  "--": true,
  "---": true,
  "``": true,
  "''": true
};
defineSymbol(symbols_text, main, textord, "\u2013", "--", true);
defineSymbol(symbols_text, main, textord, "\u2013", "\\textendash");
defineSymbol(symbols_text, main, textord, "\u2014", "---", true);
defineSymbol(symbols_text, main, textord, "\u2014", "\\textemdash");
defineSymbol(symbols_text, main, textord, "\u2018", "`", true);
defineSymbol(symbols_text, main, textord, "\u2018", "\\textquoteleft");
defineSymbol(symbols_text, main, textord, "\u2019", "'", true);
defineSymbol(symbols_text, main, textord, "\u2019", "\\textquoteright");
defineSymbol(symbols_text, main, textord, "\u201C", "``", true);
defineSymbol(symbols_text, main, textord, "\u201C", "\\textquotedblleft");
defineSymbol(symbols_text, main, textord, "\u201D", "''", true);
defineSymbol(symbols_text, main, textord, "\u201D", "\\textquotedblright"); //  \degree from gensymb package

defineSymbol(math, main, textord, "\xB0", "\\degree", true);
defineSymbol(symbols_text, main, textord, "\xB0", "\\degree"); // \textdegree from inputenc package

defineSymbol(symbols_text, main, textord, "\xB0", "\\textdegree", true); // TODO: In LaTeX, \pounds can generate a different character in text and math
// mode, but among our fonts, only Main-Regular defines this character "163".

defineSymbol(math, main, textord, "\xA3", "\\pounds");
defineSymbol(math, main, textord, "\xA3", "\\mathsterling", true);
defineSymbol(symbols_text, main, textord, "\xA3", "\\pounds");
defineSymbol(symbols_text, main, textord, "\xA3", "\\textsterling", true);
defineSymbol(math, ams, textord, "\u2720", "\\maltese");
defineSymbol(symbols_text, ams, textord, "\u2720", "\\maltese"); // There are lots of symbols which are the same, so we add them in afterwards.
// All of these are textords in math mode

var mathTextSymbols = "0123456789/@.\"";

for (var i = 0; i < mathTextSymbols.length; i++) {
  var ch = mathTextSymbols.charAt(i);
  defineSymbol(math, main, textord, ch, ch);
} // All of these are textords in text mode


var textSymbols = "0123456789!@*()-=+\";:?/.,";

for (var _i = 0; _i < textSymbols.length; _i++) {
  var _ch = textSymbols.charAt(_i);

  defineSymbol(symbols_text, main, textord, _ch, _ch);
} // All of these are textords in text mode, and mathords in math mode


var letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

for (var _i2 = 0; _i2 < letters.length; _i2++) {
  var _ch2 = letters.charAt(_i2);

  defineSymbol(math, main, mathord, _ch2, _ch2);
  defineSymbol(symbols_text, main, textord, _ch2, _ch2);
} // Blackboard bold and script letters in Unicode range


defineSymbol(math, ams, textord, "C", "\u2102"); // blackboard bold

defineSymbol(symbols_text, ams, textord, "C", "\u2102");
defineSymbol(math, ams, textord, "H", "\u210D");
defineSymbol(symbols_text, ams, textord, "H", "\u210D");
defineSymbol(math, ams, textord, "N", "\u2115");
defineSymbol(symbols_text, ams, textord, "N", "\u2115");
defineSymbol(math, ams, textord, "P", "\u2119");
defineSymbol(symbols_text, ams, textord, "P", "\u2119");
defineSymbol(math, ams, textord, "Q", "\u211A");
defineSymbol(symbols_text, ams, textord, "Q", "\u211A");
defineSymbol(math, ams, textord, "R", "\u211D");
defineSymbol(symbols_text, ams, textord, "R", "\u211D");
defineSymbol(math, ams, textord, "Z", "\u2124");
defineSymbol(symbols_text, ams, textord, "Z", "\u2124");
defineSymbol(math, main, mathord, "h", "\u210E"); // italic h, Planck constant

defineSymbol(symbols_text, main, mathord, "h", "\u210E"); // The next loop loads wide (surrogate pair) characters.
// We support some letters in the Unicode range U+1D400 to U+1D7FF,
// Mathematical Alphanumeric Symbols.
// Some editors do not deal well with wide characters. So don't write the
// string into this file. Instead, create the string from the surrogate pair.

var wideChar = "";

for (var _i3 = 0; _i3 < letters.length; _i3++) {
  var _ch3 = letters.charAt(_i3); // The hex numbers in the next line are a surrogate pair.
  // 0xD835 is the high surrogate for all letters in the range we support.
  // 0xDC00 is the low surrogate for bold A.


  wideChar = String.fromCharCode(0xD835, 0xDC00 + _i3); // A-Z a-z bold

  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(symbols_text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(0xD835, 0xDC34 + _i3); // A-Z a-z italic

  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(symbols_text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(0xD835, 0xDC68 + _i3); // A-Z a-z bold italic

  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(symbols_text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(0xD835, 0xDD04 + _i3); // A-Z a-z Fractur

  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(symbols_text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(0xD835, 0xDDA0 + _i3); // A-Z a-z sans-serif

  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(symbols_text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(0xD835, 0xDDD4 + _i3); // A-Z a-z sans bold

  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(symbols_text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(0xD835, 0xDE08 + _i3); // A-Z a-z sans italic

  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(symbols_text, main, textord, _ch3, wideChar);
  wideChar = String.fromCharCode(0xD835, 0xDE70 + _i3); // A-Z a-z monospace

  defineSymbol(math, main, mathord, _ch3, wideChar);
  defineSymbol(symbols_text, main, textord, _ch3, wideChar);

  if (_i3 < 26) {
    // KaTeX fonts have only capital letters for blackboard bold and script.
    // See exception for k below.
    wideChar = String.fromCharCode(0xD835, 0xDD38 + _i3); // A-Z double struck

    defineSymbol(math, main, mathord, _ch3, wideChar);
    defineSymbol(symbols_text, main, textord, _ch3, wideChar);
    wideChar = String.fromCharCode(0xD835, 0xDC9C + _i3); // A-Z script

    defineSymbol(math, main, mathord, _ch3, wideChar);
    defineSymbol(symbols_text, main, textord, _ch3, wideChar);
  } // TODO: Add bold script when it is supported by a KaTeX font.

} // "k" is the only double struck lower case letter in the KaTeX fonts.


wideChar = String.fromCharCode(0xD835, 0xDD5C); // k double struck

defineSymbol(math, main, mathord, "k", wideChar);
defineSymbol(symbols_text, main, textord, "k", wideChar); // Next, some wide character numerals

for (var _i4 = 0; _i4 < 10; _i4++) {
  var _ch4 = _i4.toString();

  wideChar = String.fromCharCode(0xD835, 0xDFCE + _i4); // 0-9 bold

  defineSymbol(math, main, mathord, _ch4, wideChar);
  defineSymbol(symbols_text, main, textord, _ch4, wideChar);
  wideChar = String.fromCharCode(0xD835, 0xDFE2 + _i4); // 0-9 sans serif

  defineSymbol(math, main, mathord, _ch4, wideChar);
  defineSymbol(symbols_text, main, textord, _ch4, wideChar);
  wideChar = String.fromCharCode(0xD835, 0xDFEC + _i4); // 0-9 bold sans

  defineSymbol(math, main, mathord, _ch4, wideChar);
  defineSymbol(symbols_text, main, textord, _ch4, wideChar);
  wideChar = String.fromCharCode(0xD835, 0xDFF6 + _i4); // 0-9 monospace

  defineSymbol(math, main, mathord, _ch4, wideChar);
  defineSymbol(symbols_text, main, textord, _ch4, wideChar);
} // We add these Latin-1 letters as symbols for backwards-compatibility,
// but they are not actually in the font, nor are they supported by the
// Unicode accent mechanism, so they fall back to Times font and look ugly.
// TODO(edemaine): Fix this.


var extraLatin = "\xC7\xD0\xDE\xE7\xFE";

for (var _i5 = 0; _i5 < extraLatin.length; _i5++) {
  var _ch5 = extraLatin.charAt(_i5);

  defineSymbol(math, main, mathord, _ch5, _ch5);
  defineSymbol(symbols_text, main, textord, _ch5, _ch5);
}
;// CONCATENATED MODULE: ./src/wide-character.js
/**
 * This file provides support for Unicode range U+1D400 to U+1D7FF,
 * Mathematical Alphanumeric Symbols.
 *
 * Function wideCharacterFont takes a wide character as input and returns
 * the font information necessary to render it properly.
 */

/**
 * Data below is from https://www.unicode.org/charts/PDF/U1D400.pdf
 * That document sorts characters into groups by font type, say bold or italic.
 *
 * In the arrays below, each subarray consists three elements:
 *      * The CSS class of that group when in math mode.
 *      * The CSS class of that group when in text mode.
 *      * The font name, so that KaTeX can get font metrics.
 */

var wideLatinLetterData = [["mathbf", "textbf", "Main-Bold"], // A-Z bold upright
["mathbf", "textbf", "Main-Bold"], // a-z bold upright
["mathnormal", "textit", "Math-Italic"], // A-Z italic
["mathnormal", "textit", "Math-Italic"], // a-z italic
["boldsymbol", "boldsymbol", "Main-BoldItalic"], // A-Z bold italic
["boldsymbol", "boldsymbol", "Main-BoldItalic"], // a-z bold italic
// Map fancy A-Z letters to script, not calligraphic.
// This aligns with unicode-math and math fonts (except Cambria Math).
["mathscr", "textscr", "Script-Regular"], // A-Z script
["", "", ""], // a-z script.  No font
["", "", ""], // A-Z bold script. No font
["", "", ""], // a-z bold script. No font
["mathfrak", "textfrak", "Fraktur-Regular"], // A-Z Fraktur
["mathfrak", "textfrak", "Fraktur-Regular"], // a-z Fraktur
["mathbb", "textbb", "AMS-Regular"], // A-Z double-struck
["mathbb", "textbb", "AMS-Regular"], // k double-struck
["", "", ""], // A-Z bold Fraktur No font metrics
["", "", ""], // a-z bold Fraktur.   No font.
["mathsf", "textsf", "SansSerif-Regular"], // A-Z sans-serif
["mathsf", "textsf", "SansSerif-Regular"], // a-z sans-serif
["mathboldsf", "textboldsf", "SansSerif-Bold"], // A-Z bold sans-serif
["mathboldsf", "textboldsf", "SansSerif-Bold"], // a-z bold sans-serif
["mathitsf", "textitsf", "SansSerif-Italic"], // A-Z italic sans-serif
["mathitsf", "textitsf", "SansSerif-Italic"], // a-z italic sans-serif
["", "", ""], // A-Z bold italic sans. No font
["", "", ""], // a-z bold italic sans. No font
["mathtt", "texttt", "Typewriter-Regular"], // A-Z monospace
["mathtt", "texttt", "Typewriter-Regular"] // a-z monospace
];
var wideNumeralData = [["mathbf", "textbf", "Main-Bold"], // 0-9 bold
["", "", ""], // 0-9 double-struck. No KaTeX font.
["mathsf", "textsf", "SansSerif-Regular"], // 0-9 sans-serif
["mathboldsf", "textboldsf", "SansSerif-Bold"], // 0-9 bold sans-serif
["mathtt", "texttt", "Typewriter-Regular"] // 0-9 monospace
];
var wideCharacterFont = function wideCharacterFont(wideChar, mode) {
  // IE doesn't support codePointAt(). So work with the surrogate pair.
  var H = wideChar.charCodeAt(0); // high surrogate

  var L = wideChar.charCodeAt(1); // low surrogate

  var codePoint = (H - 0xD800) * 0x400 + (L - 0xDC00) + 0x10000;
  var j = mode === "math" ? 0 : 1; // column index for CSS class.

  if (0x1D400 <= codePoint && codePoint < 0x1D6A4) {
    // wideLatinLetterData contains exactly 26 chars on each row.
    // So we can calculate the relevant row. No traverse necessary.
    var i = Math.floor((codePoint - 0x1D400) / 26);
    return [wideLatinLetterData[i][2], wideLatinLetterData[i][j]];
  } else if (0x1D7CE <= codePoint && codePoint <= 0x1D7FF) {
    // Numerals, ten per row.
    var _i = Math.floor((codePoint - 0x1D7CE) / 10);

    return [wideNumeralData[_i][2], wideNumeralData[_i][j]];
  } else if (codePoint === 0x1D6A5 || codePoint === 0x1D6A6) {
    // dotless i or j
    return [wideLatinLetterData[0][2], wideLatinLetterData[0][j]];
  } else if (0x1D6A6 < codePoint && codePoint < 0x1D7CE) {
    // Greek letters. Not supported, yet.
    return ["", ""];
  } else {
    // We don't support any wide characters outside 1D400–1D7FF.
    throw new src_ParseError("Unsupported character: " + wideChar);
  }
};
;// CONCATENATED MODULE: ./src/Options.js
/**
 * This file contains information about the options that the Parser carries
 * around with it while parsing. Data is held in an `Options` object, and when
 * recursing, a new `Options` object can be created with the `.with*` and
 * `.reset` functions.
 */

var sizeStyleMap = [// Each element contains [textsize, scriptsize, scriptscriptsize].
// The size mappings are taken from TeX with \normalsize=10pt.
[1, 1, 1], // size1: [5, 5, 5]              \tiny
[2, 1, 1], // size2: [6, 5, 5]
[3, 1, 1], // size3: [7, 5, 5]              \scriptsize
[4, 2, 1], // size4: [8, 6, 5]              \footnotesize
[5, 2, 1], // size5: [9, 6, 5]              \small
[6, 3, 1], // size6: [10, 7, 5]             \normalsize
[7, 4, 2], // size7: [12, 8, 6]             \large
[8, 6, 3], // size8: [14.4, 10, 7]          \Large
[9, 7, 6], // size9: [17.28, 12, 10]        \LARGE
[10, 8, 7], // size10: [20.74, 14.4, 12]     \huge
[11, 10, 9] // size11: [24.88, 20.74, 17.28] \HUGE
];
var sizeMultipliers = [// fontMetrics.js:getGlobalMetrics also uses size indexes, so if
// you change size indexes, change that function.
0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.2, 1.44, 1.728, 2.074, 2.488];

var sizeAtStyle = function sizeAtStyle(size, style) {
  return style.size < 2 ? size : sizeStyleMap[size - 1][style.size - 1];
}; // In these types, "" (empty string) means "no change".


/**
 * This is the main options class. It contains the current style, size, color,
 * and font.
 *
 * Options objects should not be modified. To create a new Options with
 * different properties, call a `.having*` method.
 */
var Options = /*#__PURE__*/function () {
  // A font family applies to a group of fonts (i.e. SansSerif), while a font
  // represents a specific font (i.e. SansSerif Bold).
  // See: https://tex.stackexchange.com/questions/22350/difference-between-textrm-and-mathrm

  /**
   * The base size index.
   */
  function Options(data) {
    this.style = void 0;
    this.color = void 0;
    this.size = void 0;
    this.textSize = void 0;
    this.phantom = void 0;
    this.font = void 0;
    this.fontFamily = void 0;
    this.fontWeight = void 0;
    this.fontShape = void 0;
    this.sizeMultiplier = void 0;
    this.maxSize = void 0;
    this.minRuleThickness = void 0;
    this._fontMetrics = void 0;
    this.style = data.style;
    this.color = data.color;
    this.size = data.size || Options.BASESIZE;
    this.textSize = data.textSize || this.size;
    this.phantom = !!data.phantom;
    this.font = data.font || "";
    this.fontFamily = data.fontFamily || "";
    this.fontWeight = data.fontWeight || '';
    this.fontShape = data.fontShape || '';
    this.sizeMultiplier = sizeMultipliers[this.size - 1];
    this.maxSize = data.maxSize;
    this.minRuleThickness = data.minRuleThickness;
    this._fontMetrics = undefined;
  }
  /**
   * Returns a new options object with the same properties as "this".  Properties
   * from "extension" will be copied to the new options object.
   */


  var _proto = Options.prototype;

  _proto.extend = function extend(extension) {
    var data = {
      style: this.style,
      size: this.size,
      textSize: this.textSize,
      color: this.color,
      phantom: this.phantom,
      font: this.font,
      fontFamily: this.fontFamily,
      fontWeight: this.fontWeight,
      fontShape: this.fontShape,
      maxSize: this.maxSize,
      minRuleThickness: this.minRuleThickness
    };

    for (var key in extension) {
      if (extension.hasOwnProperty(key)) {
        data[key] = extension[key];
      }
    }

    return new Options(data);
  }
  /**
   * Return an options object with the given style. If `this.style === style`,
   * returns `this`.
   */
  ;

  _proto.havingStyle = function havingStyle(style) {
    if (this.style === style) {
      return this;
    } else {
      return this.extend({
        style: style,
        size: sizeAtStyle(this.textSize, style)
      });
    }
  }
  /**
   * Return an options object with a cramped version of the current style. If
   * the current style is cramped, returns `this`.
   */
  ;

  _proto.havingCrampedStyle = function havingCrampedStyle() {
    return this.havingStyle(this.style.cramp());
  }
  /**
   * Return an options object with the given size and in at least `\textstyle`.
   * Returns `this` if appropriate.
   */
  ;

  _proto.havingSize = function havingSize(size) {
    if (this.size === size && this.textSize === size) {
      return this;
    } else {
      return this.extend({
        style: this.style.text(),
        size: size,
        textSize: size,
        sizeMultiplier: sizeMultipliers[size - 1]
      });
    }
  }
  /**
   * Like `this.havingSize(BASESIZE).havingStyle(style)`. If `style` is omitted,
   * changes to at least `\textstyle`.
   */
  ;

  _proto.havingBaseStyle = function havingBaseStyle(style) {
    style = style || this.style.text();
    var wantSize = sizeAtStyle(Options.BASESIZE, style);

    if (this.size === wantSize && this.textSize === Options.BASESIZE && this.style === style) {
      return this;
    } else {
      return this.extend({
        style: style,
        size: wantSize
      });
    }
  }
  /**
   * Remove the effect of sizing changes such as \Huge.
   * Keep the effect of the current style, such as \scriptstyle.
   */
  ;

  _proto.havingBaseSizing = function havingBaseSizing() {
    var size;

    switch (this.style.id) {
      case 4:
      case 5:
        size = 3; // normalsize in scriptstyle

        break;

      case 6:
      case 7:
        size = 1; // normalsize in scriptscriptstyle

        break;

      default:
        size = 6;
      // normalsize in textstyle or displaystyle
    }

    return this.extend({
      style: this.style.text(),
      size: size
    });
  }
  /**
   * Create a new options object with the given color.
   */
  ;

  _proto.withColor = function withColor(color) {
    return this.extend({
      color: color
    });
  }
  /**
   * Create a new options object with "phantom" set to true.
   */
  ;

  _proto.withPhantom = function withPhantom() {
    return this.extend({
      phantom: true
    });
  }
  /**
   * Creates a new options object with the given math font or old text font.
   * @type {[type]}
   */
  ;

  _proto.withFont = function withFont(font) {
    return this.extend({
      font: font
    });
  }
  /**
   * Create a new options objects with the given fontFamily.
   */
  ;

  _proto.withTextFontFamily = function withTextFontFamily(fontFamily) {
    return this.extend({
      fontFamily: fontFamily,
      font: ""
    });
  }
  /**
   * Creates a new options object with the given font weight
   */
  ;

  _proto.withTextFontWeight = function withTextFontWeight(fontWeight) {
    return this.extend({
      fontWeight: fontWeight,
      font: ""
    });
  }
  /**
   * Creates a new options object with the given font weight
   */
  ;

  _proto.withTextFontShape = function withTextFontShape(fontShape) {
    return this.extend({
      fontShape: fontShape,
      font: ""
    });
  }
  /**
   * Return the CSS sizing classes required to switch from enclosing options
   * `oldOptions` to `this`. Returns an array of classes.
   */
  ;

  _proto.sizingClasses = function sizingClasses(oldOptions) {
    if (oldOptions.size !== this.size) {
      return ["sizing", "reset-size" + oldOptions.size, "size" + this.size];
    } else {
      return [];
    }
  }
  /**
   * Return the CSS sizing classes required to switch to the base size. Like
   * `this.havingSize(BASESIZE).sizingClasses(this)`.
   */
  ;

  _proto.baseSizingClasses = function baseSizingClasses() {
    if (this.size !== Options.BASESIZE) {
      return ["sizing", "reset-size" + this.size, "size" + Options.BASESIZE];
    } else {
      return [];
    }
  }
  /**
   * Return the font metrics for this size.
   */
  ;

  _proto.fontMetrics = function fontMetrics() {
    if (!this._fontMetrics) {
      this._fontMetrics = getGlobalMetrics(this.size);
    }

    return this._fontMetrics;
  }
  /**
   * Gets the CSS color of the current options object
   */
  ;

  _proto.getColor = function getColor() {
    if (this.phantom) {
      return "transparent";
    } else {
      return this.color;
    }
  };

  return Options;
}();

Options.BASESIZE = 6;
/* harmony default export */ var src_Options = (Options);
;// CONCATENATED MODULE: ./src/units.js
/**
 * This file does conversion between units.  In particular, it provides
 * calculateSize to convert other units into ems.
 */

 // This table gives the number of TeX pts in one of each *absolute* TeX unit.
// Thus, multiplying a length by this number converts the length from units
// into pts.  Dividing the result by ptPerEm gives the number of ems
// *assuming* a font size of ptPerEm (normal size, normal style).

var ptPerUnit = {
  // https://en.wikibooks.org/wiki/LaTeX/Lengths and
  // https://tex.stackexchange.com/a/8263
  "pt": 1,
  // TeX point
  "mm": 7227 / 2540,
  // millimeter
  "cm": 7227 / 254,
  // centimeter
  "in": 72.27,
  // inch
  "bp": 803 / 800,
  // big (PostScript) points
  "pc": 12,
  // pica
  "dd": 1238 / 1157,
  // didot
  "cc": 14856 / 1157,
  // cicero (12 didot)
  "nd": 685 / 642,
  // new didot
  "nc": 1370 / 107,
  // new cicero (12 new didot)
  "sp": 1 / 65536,
  // scaled point (TeX's internal smallest unit)
  // https://tex.stackexchange.com/a/41371
  "px": 803 / 800 // \pdfpxdimen defaults to 1 bp in pdfTeX and LuaTeX

}; // Dictionary of relative units, for fast validity testing.

var relativeUnit = {
  "ex": true,
  "em": true,
  "mu": true
};

/**
 * Determine whether the specified unit (either a string defining the unit
 * or a "size" parse node containing a unit field) is valid.
 */
var validUnit = function validUnit(unit) {
  if (typeof unit !== "string") {
    unit = unit.unit;
  }

  return unit in ptPerUnit || unit in relativeUnit || unit === "ex";
};
/*
 * Convert a "size" parse node (with numeric "number" and string "unit" fields,
 * as parsed by functions.js argType "size") into a CSS em value for the
 * current style/scale.  `options` gives the current options.
 */

var calculateSize = function calculateSize(sizeValue, options) {
  var scale;

  if (sizeValue.unit in ptPerUnit) {
    // Absolute units
    scale = ptPerUnit[sizeValue.unit] // Convert unit to pt
    / options.fontMetrics().ptPerEm // Convert pt to CSS em
    / options.sizeMultiplier; // Unscale to make absolute units
  } else if (sizeValue.unit === "mu") {
    // `mu` units scale with scriptstyle/scriptscriptstyle.
    scale = options.fontMetrics().cssEmPerMu;
  } else {
    // Other relative units always refer to the *textstyle* font
    // in the current size.
    var unitOptions;

    if (options.style.isTight()) {
      // isTight() means current style is script/scriptscript.
      unitOptions = options.havingStyle(options.style.text());
    } else {
      unitOptions = options;
    } // TODO: In TeX these units are relative to the quad of the current
    // *text* font, e.g. cmr10. KaTeX instead uses values from the
    // comparably-sized *Computer Modern symbol* font. At 10pt, these
    // match. At 7pt and 5pt, they differ: cmr7=1.138894, cmsy7=1.170641;
    // cmr5=1.361133, cmsy5=1.472241. Consider $\scriptsize a\kern1emb$.
    // TeX \showlists shows a kern of 1.13889 * fontsize;
    // KaTeX shows a kern of 1.171 * fontsize.


    if (sizeValue.unit === "ex") {
      scale = unitOptions.fontMetrics().xHeight;
    } else if (sizeValue.unit === "em") {
      scale = unitOptions.fontMetrics().quad;
    } else {
      throw new src_ParseError("Invalid unit: '" + sizeValue.unit + "'");
    }

    if (unitOptions !== options) {
      scale *= unitOptions.sizeMultiplier / options.sizeMultiplier;
    }
  }

  return Math.min(sizeValue.number * scale, options.maxSize);
};
;// CONCATENATED MODULE: ./src/buildCommon.js
/* eslint no-console:0 */

/**
 * This module contains general functions that can be used for building
 * different kinds of domTree nodes in a consistent manner.
 */







/**
 * Looks up the given symbol in fontMetrics, after applying any symbol
 * replacements defined in symbol.js
 */
var lookupSymbol = function lookupSymbol(value, // TODO(#963): Use a union type for this.
fontName, mode) {
  // Replace the value with its replaced value from symbol.js
  if (src_symbols[mode][value] && src_symbols[mode][value].replace) {
    value = src_symbols[mode][value].replace;
  }

  return {
    value: value,
    metrics: getCharacterMetrics(value, fontName, mode)
  };
};
/**
 * Makes a symbolNode after translation via the list of symbols in symbols.js.
 * Correctly pulls out metrics for the character, and optionally takes a list of
 * classes to be attached to the node.
 *
 * TODO: make argument order closer to makeSpan
 * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
 * should if present come first in `classes`.
 * TODO(#953): Make `options` mandatory and always pass it in.
 */


var makeSymbol = function makeSymbol(value, fontName, mode, options, classes) {
  var lookup = lookupSymbol(value, fontName, mode);
  var metrics = lookup.metrics;
  value = lookup.value;
  var symbolNode;

  if (metrics) {
    var italic = metrics.italic;

    if (mode === "text" || options && options.font === "mathit") {
      italic = 0;
    }

    symbolNode = new SymbolNode(value, metrics.height, metrics.depth, italic, metrics.skew, metrics.width, classes);
  } else {
    // TODO(emily): Figure out a good way to only print this in development
    typeof console !== "undefined" && console.warn("No character metrics " + ("for '" + value + "' in style '" + fontName + "' and mode '" + mode + "'"));
    symbolNode = new SymbolNode(value, 0, 0, 0, 0, 0, classes);
  }

  if (options) {
    symbolNode.maxFontSize = options.sizeMultiplier;

    if (options.style.isTight()) {
      symbolNode.classes.push("mtight");
    }

    var color = options.getColor();

    if (color) {
      symbolNode.style.color = color;
    }
  }

  return symbolNode;
};
/**
 * Makes a symbol in Main-Regular or AMS-Regular.
 * Used for rel, bin, open, close, inner, and punct.
 */


var mathsym = function mathsym(value, mode, options, classes) {
  if (classes === void 0) {
    classes = [];
  }

  // Decide what font to render the symbol in by its entry in the symbols
  // table.
  // Have a special case for when the value = \ because the \ is used as a
  // textord in unsupported command errors but cannot be parsed as a regular
  // text ordinal and is therefore not present as a symbol in the symbols
  // table for text, as well as a special case for boldsymbol because it
  // can be used for bold + and -
  if (options.font === "boldsymbol" && lookupSymbol(value, "Main-Bold", mode).metrics) {
    return makeSymbol(value, "Main-Bold", mode, options, classes.concat(["mathbf"]));
  } else if (value === "\\" || src_symbols[mode][value].font === "main") {
    return makeSymbol(value, "Main-Regular", mode, options, classes);
  } else {
    return makeSymbol(value, "AMS-Regular", mode, options, classes.concat(["amsrm"]));
  }
};
/**
 * Determines which of the two font names (Main-Bold and Math-BoldItalic) and
 * corresponding style tags (mathbf or boldsymbol) to use for font "boldsymbol",
 * depending on the symbol.  Use this function instead of fontMap for font
 * "boldsymbol".
 */


var boldsymbol = function boldsymbol(value, mode, options, classes, type) {
  if (type !== "textord" && lookupSymbol(value, "Math-BoldItalic", mode).metrics) {
    return {
      fontName: "Math-BoldItalic",
      fontClass: "boldsymbol"
    };
  } else {
    // Some glyphs do not exist in Math-BoldItalic so we need to use
    // Main-Bold instead.
    return {
      fontName: "Main-Bold",
      fontClass: "mathbf"
    };
  }
};
/**
 * Makes either a mathord or textord in the correct font and color.
 */


var makeOrd = function makeOrd(group, options, type) {
  var mode = group.mode;
  var text = group.text;
  var classes = ["mord"]; // Math mode or Old font (i.e. \rm)

  var isFont = mode === "math" || mode === "text" && options.font;
  var fontOrFamily = isFont ? options.font : options.fontFamily;

  if (text.charCodeAt(0) === 0xD835) {
    // surrogate pairs get special treatment
    var _wideCharacterFont = wideCharacterFont(text, mode),
        wideFontName = _wideCharacterFont[0],
        wideFontClass = _wideCharacterFont[1];

    return makeSymbol(text, wideFontName, mode, options, classes.concat(wideFontClass));
  } else if (fontOrFamily) {
    var fontName;
    var fontClasses;

    if (fontOrFamily === "boldsymbol") {
      var fontData = boldsymbol(text, mode, options, classes, type);
      fontName = fontData.fontName;
      fontClasses = [fontData.fontClass];
    } else if (isFont) {
      fontName = fontMap[fontOrFamily].fontName;
      fontClasses = [fontOrFamily];
    } else {
      fontName = retrieveTextFontName(fontOrFamily, options.fontWeight, options.fontShape);
      fontClasses = [fontOrFamily, options.fontWeight, options.fontShape];
    }

    if (lookupSymbol(text, fontName, mode).metrics) {
      return makeSymbol(text, fontName, mode, options, classes.concat(fontClasses));
    } else if (ligatures.hasOwnProperty(text) && fontName.substr(0, 10) === "Typewriter") {
      // Deconstruct ligatures in monospace fonts (\texttt, \tt).
      var parts = [];

      for (var i = 0; i < text.length; i++) {
        parts.push(makeSymbol(text[i], fontName, mode, options, classes.concat(fontClasses)));
      }

      return makeFragment(parts);
    }
  } // Makes a symbol in the default font for mathords and textords.


  if (type === "mathord") {
    return makeSymbol(text, "Math-Italic", mode, options, classes.concat(["mathnormal"]));
  } else if (type === "textord") {
    var font = src_symbols[mode][text] && src_symbols[mode][text].font;

    if (font === "ams") {
      var _fontName = retrieveTextFontName("amsrm", options.fontWeight, options.fontShape);

      return makeSymbol(text, _fontName, mode, options, classes.concat("amsrm", options.fontWeight, options.fontShape));
    } else if (font === "main" || !font) {
      var _fontName2 = retrieveTextFontName("textrm", options.fontWeight, options.fontShape);

      return makeSymbol(text, _fontName2, mode, options, classes.concat(options.fontWeight, options.fontShape));
    } else {
      // fonts added by plugins
      var _fontName3 = retrieveTextFontName(font, options.fontWeight, options.fontShape); // We add font name as a css class


      return makeSymbol(text, _fontName3, mode, options, classes.concat(_fontName3, options.fontWeight, options.fontShape));
    }
  } else {
    throw new Error("unexpected type: " + type + " in makeOrd");
  }
};
/**
 * Returns true if subsequent symbolNodes have the same classes, skew, maxFont,
 * and styles.
 */


var canCombine = function canCombine(prev, next) {
  if (createClass(prev.classes) !== createClass(next.classes) || prev.skew !== next.skew || prev.maxFontSize !== next.maxFontSize) {
    return false;
  } // If prev and next both are just "mbin"s or "mord"s we don't combine them
  // so that the proper spacing can be preserved.


  if (prev.classes.length === 1) {
    var cls = prev.classes[0];

    if (cls === "mbin" || cls === "mord") {
      return false;
    }
  }

  for (var style in prev.style) {
    if (prev.style.hasOwnProperty(style) && prev.style[style] !== next.style[style]) {
      return false;
    }
  }

  for (var _style in next.style) {
    if (next.style.hasOwnProperty(_style) && prev.style[_style] !== next.style[_style]) {
      return false;
    }
  }

  return true;
};
/**
 * Combine consecutive domTree.symbolNodes into a single symbolNode.
 * Note: this function mutates the argument.
 */


var tryCombineChars = function tryCombineChars(chars) {
  for (var i = 0; i < chars.length - 1; i++) {
    var prev = chars[i];
    var next = chars[i + 1];

    if (prev instanceof SymbolNode && next instanceof SymbolNode && canCombine(prev, next)) {
      prev.text += next.text;
      prev.height = Math.max(prev.height, next.height);
      prev.depth = Math.max(prev.depth, next.depth); // Use the last character's italic correction since we use
      // it to add padding to the right of the span created from
      // the combined characters.

      prev.italic = next.italic;
      chars.splice(i + 1, 1);
      i--;
    }
  }

  return chars;
};
/**
 * Calculate the height, depth, and maxFontSize of an element based on its
 * children.
 */


var sizeElementFromChildren = function sizeElementFromChildren(elem) {
  var height = 0;
  var depth = 0;
  var maxFontSize = 0;

  for (var i = 0; i < elem.children.length; i++) {
    var child = elem.children[i];

    if (child.height > height) {
      height = child.height;
    }

    if (child.depth > depth) {
      depth = child.depth;
    }

    if (child.maxFontSize > maxFontSize) {
      maxFontSize = child.maxFontSize;
    }
  }

  elem.height = height;
  elem.depth = depth;
  elem.maxFontSize = maxFontSize;
};
/**
 * Makes a span with the given list of classes, list of children, and options.
 *
 * TODO(#953): Ensure that `options` is always provided (currently some call
 * sites don't pass it) and make the type below mandatory.
 * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
 * should if present come first in `classes`.
 */


var makeSpan = function makeSpan(classes, children, options, style) {
  var span = new Span(classes, children, options, style);
  sizeElementFromChildren(span);
  return span;
}; // SVG one is simpler -- doesn't require height, depth, max-font setting.
// This is also a separate method for typesafety.


var makeSvgSpan = function makeSvgSpan(classes, children, options, style) {
  return new Span(classes, children, options, style);
};

var makeLineSpan = function makeLineSpan(className, options, thickness) {
  var line = makeSpan([className], [], options);
  line.height = Math.max(thickness || options.fontMetrics().defaultRuleThickness, options.minRuleThickness);
  line.style.borderBottomWidth = line.height + "em";
  line.maxFontSize = 1.0;
  return line;
};
/**
 * Makes an anchor with the given href, list of classes, list of children,
 * and options.
 */


var makeAnchor = function makeAnchor(href, classes, children, options) {
  var anchor = new Anchor(href, classes, children, options);
  sizeElementFromChildren(anchor);
  return anchor;
};
/**
 * Makes a document fragment with the given list of children.
 */


var makeFragment = function makeFragment(children) {
  var fragment = new DocumentFragment(children);
  sizeElementFromChildren(fragment);
  return fragment;
};
/**
 * Wraps group in a span if it's a document fragment, allowing to apply classes
 * and styles
 */


var wrapFragment = function wrapFragment(group, options) {
  if (group instanceof DocumentFragment) {
    return makeSpan([], [group], options);
  }

  return group;
}; // These are exact object types to catch typos in the names of the optional fields.


// Computes the updated `children` list and the overall depth.
//
// This helper function for makeVList makes it easier to enforce type safety by
// allowing early exits (returns) in the logic.
var getVListChildrenAndDepth = function getVListChildrenAndDepth(params) {
  if (params.positionType === "individualShift") {
    var oldChildren = params.children;
    var children = [oldChildren[0]]; // Add in kerns to the list of params.children to get each element to be
    // shifted to the correct specified shift

    var _depth = -oldChildren[0].shift - oldChildren[0].elem.depth;

    var currPos = _depth;

    for (var i = 1; i < oldChildren.length; i++) {
      var diff = -oldChildren[i].shift - currPos - oldChildren[i].elem.depth;
      var size = diff - (oldChildren[i - 1].elem.height + oldChildren[i - 1].elem.depth);
      currPos = currPos + diff;
      children.push({
        type: "kern",
        size: size
      });
      children.push(oldChildren[i]);
    }

    return {
      children: children,
      depth: _depth
    };
  }

  var depth;

  if (params.positionType === "top") {
    // We always start at the bottom, so calculate the bottom by adding up
    // all the sizes
    var bottom = params.positionData;

    for (var _i = 0; _i < params.children.length; _i++) {
      var child = params.children[_i];
      bottom -= child.type === "kern" ? child.size : child.elem.height + child.elem.depth;
    }

    depth = bottom;
  } else if (params.positionType === "bottom") {
    depth = -params.positionData;
  } else {
    var firstChild = params.children[0];

    if (firstChild.type !== "elem") {
      throw new Error('First child must have type "elem".');
    }

    if (params.positionType === "shift") {
      depth = -firstChild.elem.depth - params.positionData;
    } else if (params.positionType === "firstBaseline") {
      depth = -firstChild.elem.depth;
    } else {
      throw new Error("Invalid positionType " + params.positionType + ".");
    }
  }

  return {
    children: params.children,
    depth: depth
  };
};
/**
 * Makes a vertical list by stacking elements and kerns on top of each other.
 * Allows for many different ways of specifying the positioning method.
 *
 * See VListParam documentation above.
 */


var makeVList = function makeVList(params, options) {
  var _getVListChildrenAndD = getVListChildrenAndDepth(params),
      children = _getVListChildrenAndD.children,
      depth = _getVListChildrenAndD.depth; // Create a strut that is taller than any list item. The strut is added to
  // each item, where it will determine the item's baseline. Since it has
  // `overflow:hidden`, the strut's top edge will sit on the item's line box's
  // top edge and the strut's bottom edge will sit on the item's baseline,
  // with no additional line-height spacing. This allows the item baseline to
  // be positioned precisely without worrying about font ascent and
  // line-height.


  var pstrutSize = 0;

  for (var i = 0; i < children.length; i++) {
    var child = children[i];

    if (child.type === "elem") {
      var elem = child.elem;
      pstrutSize = Math.max(pstrutSize, elem.maxFontSize, elem.height);
    }
  }

  pstrutSize += 2;
  var pstrut = makeSpan(["pstrut"], []);
  pstrut.style.height = pstrutSize + "em"; // Create a new list of actual children at the correct offsets

  var realChildren = [];
  var minPos = depth;
  var maxPos = depth;
  var currPos = depth;

  for (var _i2 = 0; _i2 < children.length; _i2++) {
    var _child = children[_i2];

    if (_child.type === "kern") {
      currPos += _child.size;
    } else {
      var _elem = _child.elem;
      var classes = _child.wrapperClasses || [];
      var style = _child.wrapperStyle || {};
      var childWrap = makeSpan(classes, [pstrut, _elem], undefined, style);
      childWrap.style.top = -pstrutSize - currPos - _elem.depth + "em";

      if (_child.marginLeft) {
        childWrap.style.marginLeft = _child.marginLeft;
      }

      if (_child.marginRight) {
        childWrap.style.marginRight = _child.marginRight;
      }

      realChildren.push(childWrap);
      currPos += _elem.height + _elem.depth;
    }

    minPos = Math.min(minPos, currPos);
    maxPos = Math.max(maxPos, currPos);
  } // The vlist contents go in a table-cell with `vertical-align:bottom`.
  // This cell's bottom edge will determine the containing table's baseline
  // without overly expanding the containing line-box.


  var vlist = makeSpan(["vlist"], realChildren);
  vlist.style.height = maxPos + "em"; // A second row is used if necessary to represent the vlist's depth.

  var rows;

  if (minPos < 0) {
    // We will define depth in an empty span with display: table-cell.
    // It should render with the height that we define. But Chrome, in
    // contenteditable mode only, treats that span as if it contains some
    // text content. And that min-height over-rides our desired height.
    // So we put another empty span inside the depth strut span.
    var emptySpan = makeSpan([], []);
    var depthStrut = makeSpan(["vlist"], [emptySpan]);
    depthStrut.style.height = -minPos + "em"; // Safari wants the first row to have inline content; otherwise it
    // puts the bottom of the *second* row on the baseline.

    var topStrut = makeSpan(["vlist-s"], [new SymbolNode("\u200B")]);
    rows = [makeSpan(["vlist-r"], [vlist, topStrut]), makeSpan(["vlist-r"], [depthStrut])];
  } else {
    rows = [makeSpan(["vlist-r"], [vlist])];
  }

  var vtable = makeSpan(["vlist-t"], rows);

  if (rows.length === 2) {
    vtable.classes.push("vlist-t2");
  }

  vtable.height = maxPos;
  vtable.depth = -minPos;
  return vtable;
}; // Glue is a concept from TeX which is a flexible space between elements in
// either a vertical or horizontal list. In KaTeX, at least for now, it's
// static space between elements in a horizontal layout.


var makeGlue = function makeGlue(measurement, options) {
  // Make an empty span for the space
  var rule = makeSpan(["mspace"], [], options);
  var size = calculateSize(measurement, options);
  rule.style.marginRight = size + "em";
  return rule;
}; // Takes font options, and returns the appropriate fontLookup name


var retrieveTextFontName = function retrieveTextFontName(fontFamily, fontWeight, fontShape) {
  var baseFontName = "";

  switch (fontFamily) {
    case "amsrm":
      baseFontName = "AMS";
      break;

    case "textrm":
      baseFontName = "Main";
      break;

    case "textsf":
      baseFontName = "SansSerif";
      break;

    case "texttt":
      baseFontName = "Typewriter";
      break;

    default:
      baseFontName = fontFamily;
    // use fonts added by a plugin
  }

  var fontStylesName;

  if (fontWeight === "textbf" && fontShape === "textit") {
    fontStylesName = "BoldItalic";
  } else if (fontWeight === "textbf") {
    fontStylesName = "Bold";
  } else if (fontWeight === "textit") {
    fontStylesName = "Italic";
  } else {
    fontStylesName = "Regular";
  }

  return baseFontName + "-" + fontStylesName;
};
/**
 * Maps TeX font commands to objects containing:
 * - variant: string used for "mathvariant" attribute in buildMathML.js
 * - fontName: the "style" parameter to fontMetrics.getCharacterMetrics
 */
// A map between tex font commands an MathML mathvariant attribute values


var fontMap = {
  // styles
  "mathbf": {
    variant: "bold",
    fontName: "Main-Bold"
  },
  "mathrm": {
    variant: "normal",
    fontName: "Main-Regular"
  },
  "textit": {
    variant: "italic",
    fontName: "Main-Italic"
  },
  "mathit": {
    variant: "italic",
    fontName: "Main-Italic"
  },
  "mathnormal": {
    variant: "italic",
    fontName: "Math-Italic"
  },
  // "boldsymbol" is missing because they require the use of multiple fonts:
  // Math-BoldItalic and Main-Bold.  This is handled by a special case in
  // makeOrd which ends up calling boldsymbol.
  // families
  "mathbb": {
    variant: "double-struck",
    fontName: "AMS-Regular"
  },
  "mathcal": {
    variant: "script",
    fontName: "Caligraphic-Regular"
  },
  "mathfrak": {
    variant: "fraktur",
    fontName: "Fraktur-Regular"
  },
  "mathscr": {
    variant: "script",
    fontName: "Script-Regular"
  },
  "mathsf": {
    variant: "sans-serif",
    fontName: "SansSerif-Regular"
  },
  "mathtt": {
    variant: "monospace",
    fontName: "Typewriter-Regular"
  }
};
var svgData = {
  //   path, width, height
  vec: ["vec", 0.471, 0.714],
  // values from the font glyph
  oiintSize1: ["oiintSize1", 0.957, 0.499],
  // oval to overlay the integrand
  oiintSize2: ["oiintSize2", 1.472, 0.659],
  oiiintSize1: ["oiiintSize1", 1.304, 0.499],
  oiiintSize2: ["oiiintSize2", 1.98, 0.659]
};

var staticSvg = function staticSvg(value, options) {
  // Create a span with inline SVG for the element.
  var _svgData$value = svgData[value],
      pathName = _svgData$value[0],
      width = _svgData$value[1],
      height = _svgData$value[2];
  var path = new PathNode(pathName);
  var svgNode = new SvgNode([path], {
    "width": width + "em",
    "height": height + "em",
    // Override CSS rule `.katex svg { width: 100% }`
    "style": "width:" + width + "em",
    "viewBox": "0 0 " + 1000 * width + " " + 1000 * height,
    "preserveAspectRatio": "xMinYMin"
  });
  var span = makeSvgSpan(["overlay"], [svgNode], options);
  span.height = height;
  span.style.height = height + "em";
  span.style.width = width + "em";
  return span;
};

/* harmony default export */ var buildCommon = ({
  fontMap: fontMap,
  makeSymbol: makeSymbol,
  mathsym: mathsym,
  makeSpan: makeSpan,
  makeSvgSpan: makeSvgSpan,
  makeLineSpan: makeLineSpan,
  makeAnchor: makeAnchor,
  makeFragment: makeFragment,
  wrapFragment: wrapFragment,
  makeVList: makeVList,
  makeOrd: makeOrd,
  makeGlue: makeGlue,
  staticSvg: staticSvg,
  svgData: svgData,
  tryCombineChars: tryCombineChars
});
;// CONCATENATED MODULE: ./src/spacingData.js
/**
 * Describes spaces between different classes of atoms.
 */
var thinspace = {
  number: 3,
  unit: "mu"
};
var mediumspace = {
  number: 4,
  unit: "mu"
};
var thickspace = {
  number: 5,
  unit: "mu"
}; // Making the type below exact with all optional fields doesn't work due to
// - https://github.com/facebook/flow/issues/4582
// - https://github.com/facebook/flow/issues/5688
// However, since *all* fields are optional, $Shape<> works as suggested in 5688
// above.

// Spacing relationships for display and text styles
var spacings = {
  mord: {
    mop: thinspace,
    mbin: mediumspace,
    mrel: thickspace,
    minner: thinspace
  },
  mop: {
    mord: thinspace,
    mop: thinspace,
    mrel: thickspace,
    minner: thinspace
  },
  mbin: {
    mord: mediumspace,
    mop: mediumspace,
    mopen: mediumspace,
    minner: mediumspace
  },
  mrel: {
    mord: thickspace,
    mop: thickspace,
    mopen: thickspace,
    minner: thickspace
  },
  mopen: {},
  mclose: {
    mop: thinspace,
    mbin: mediumspace,
    mrel: thickspace,
    minner: thinspace
  },
  mpunct: {
    mord: thinspace,
    mop: thinspace,
    mrel: thickspace,
    mopen: thinspace,
    mclose: thinspace,
    mpunct: thinspace,
    minner: thinspace
  },
  minner: {
    mord: thinspace,
    mop: thinspace,
    mbin: mediumspace,
    mrel: thickspace,
    mopen: thinspace,
    mpunct: thinspace,
    minner: thinspace
  }
}; // Spacing relationships for script and scriptscript styles

var tightSpacings = {
  mord: {
    mop: thinspace
  },
  mop: {
    mord: thinspace,
    mop: thinspace
  },
  mbin: {},
  mrel: {},
  mopen: {},
  mclose: {
    mop: thinspace
  },
  mpunct: {},
  minner: {
    mop: thinspace
  }
};
;// CONCATENATED MODULE: ./src/defineFunction.js
/** Context provided to function handlers for error messages. */
// Note: reverse the order of the return type union will cause a flow error.
// See https://github.com/facebook/flow/issues/3663.
// More general version of `HtmlBuilder` for nodes (e.g. \sum, accent types)
// whose presence impacts super/subscripting. In this case, ParseNode<"supsub">
// delegates its HTML building to the HtmlBuilder corresponding to these nodes.

/**
 * Final function spec for use at parse time.
 * This is almost identical to `FunctionPropSpec`, except it
 * 1. includes the function handler, and
 * 2. requires all arguments except argTypes.
 * It is generated by `defineFunction()` below.
 */

/**
 * All registered functions.
 * `functions.js` just exports this same dictionary again and makes it public.
 * `Parser.js` requires this dictionary.
 */
var _functions = {};
/**
 * All HTML builders. Should be only used in the `define*` and the `build*ML`
 * functions.
 */

var _htmlGroupBuilders = {};
/**
 * All MathML builders. Should be only used in the `define*` and the `build*ML`
 * functions.
 */

var _mathmlGroupBuilders = {};
function defineFunction(_ref) {
  var type = _ref.type,
      names = _ref.names,
      props = _ref.props,
      handler = _ref.handler,
      htmlBuilder = _ref.htmlBuilder,
      mathmlBuilder = _ref.mathmlBuilder;
  // Set default values of functions
  var data = {
    type: type,
    numArgs: props.numArgs,
    argTypes: props.argTypes,
    allowedInArgument: !!props.allowedInArgument,
    allowedInText: !!props.allowedInText,
    allowedInMath: props.allowedInMath === undefined ? true : props.allowedInMath,
    numOptionalArgs: props.numOptionalArgs || 0,
    infix: !!props.infix,
    primitive: !!props.primitive,
    handler: handler
  };

  for (var i = 0; i < names.length; ++i) {
    _functions[names[i]] = data;
  }

  if (type) {
    if (htmlBuilder) {
      _htmlGroupBuilders[type] = htmlBuilder;
    }

    if (mathmlBuilder) {
      _mathmlGroupBuilders[type] = mathmlBuilder;
    }
  }
}
/**
 * Use this to register only the HTML and MathML builders for a function (e.g.
 * if the function's ParseNode is generated in Parser.js rather than via a
 * stand-alone handler provided to `defineFunction`).
 */

function defineFunctionBuilders(_ref2) {
  var type = _ref2.type,
      htmlBuilder = _ref2.htmlBuilder,
      mathmlBuilder = _ref2.mathmlBuilder;
  defineFunction({
    type: type,
    names: [],
    props: {
      numArgs: 0
    },
    handler: function handler() {
      throw new Error('Should never be called.');
    },
    htmlBuilder: htmlBuilder,
    mathmlBuilder: mathmlBuilder
  });
}
var normalizeArgument = function normalizeArgument(arg) {
  return arg.type === "ordgroup" && arg.body.length === 1 ? arg.body[0] : arg;
}; // Since the corresponding buildHTML/buildMathML function expects a
// list of elements, we normalize for different kinds of arguments

var ordargument = function ordargument(arg) {
  return arg.type === "ordgroup" ? arg.body : [arg];
};
;// CONCATENATED MODULE: ./src/buildHTML.js
/**
 * This file does the main work of building a domTree structure from a parse
 * tree. The entry point is the `buildHTML` function, which takes a parse tree.
 * Then, the buildExpression, buildGroup, and various groupBuilders functions
 * are called, to produce a final HTML tree.
 */








var buildHTML_makeSpan = buildCommon.makeSpan; // Binary atoms (first class `mbin`) change into ordinary atoms (`mord`)
// depending on their surroundings. See TeXbook pg. 442-446, Rules 5 and 6,
// and the text before Rule 19.

var binLeftCanceller = ["leftmost", "mbin", "mopen", "mrel", "mop", "mpunct"];
var binRightCanceller = ["rightmost", "mrel", "mclose", "mpunct"];
var styleMap = {
  "display": src_Style.DISPLAY,
  "text": src_Style.TEXT,
  "script": src_Style.SCRIPT,
  "scriptscript": src_Style.SCRIPTSCRIPT
};
var DomEnum = {
  mord: "mord",
  mop: "mop",
  mbin: "mbin",
  mrel: "mrel",
  mopen: "mopen",
  mclose: "mclose",
  mpunct: "mpunct",
  minner: "minner"
};

/**
 * Take a list of nodes, build them in order, and return a list of the built
 * nodes. documentFragments are flattened into their contents, so the
 * returned list contains no fragments. `isRealGroup` is true if `expression`
 * is a real group (no atoms will be added on either side), as opposed to
 * a partial group (e.g. one created by \color). `surrounding` is an array
 * consisting type of nodes that will be added to the left and right.
 */
var buildExpression = function buildExpression(expression, options, isRealGroup, surrounding) {
  if (surrounding === void 0) {
    surrounding = [null, null];
  }

  // Parse expressions into `groups`.
  var groups = [];

  for (var i = 0; i < expression.length; i++) {
    var output = buildGroup(expression[i], options);

    if (output instanceof DocumentFragment) {
      var children = output.children;
      groups.push.apply(groups, children);
    } else {
      groups.push(output);
    }
  } // Combine consecutive domTree.symbolNodes into a single symbolNode.


  buildCommon.tryCombineChars(groups); // If `expression` is a partial group, let the parent handle spacings
  // to avoid processing groups multiple times.

  if (!isRealGroup) {
    return groups;
  }

  var glueOptions = options;

  if (expression.length === 1) {
    var node = expression[0];

    if (node.type === "sizing") {
      glueOptions = options.havingSize(node.size);
    } else if (node.type === "styling") {
      glueOptions = options.havingStyle(styleMap[node.style]);
    }
  } // Dummy spans for determining spacings between surrounding atoms.
  // If `expression` has no atoms on the left or right, class "leftmost"
  // or "rightmost", respectively, is used to indicate it.


  var dummyPrev = buildHTML_makeSpan([surrounding[0] || "leftmost"], [], options);
  var dummyNext = buildHTML_makeSpan([surrounding[1] || "rightmost"], [], options); // TODO: These code assumes that a node's math class is the first element
  // of its `classes` array. A later cleanup should ensure this, for
  // instance by changing the signature of `makeSpan`.
  // Before determining what spaces to insert, perform bin cancellation.
  // Binary operators change to ordinary symbols in some contexts.

  var isRoot = isRealGroup === "root";
  traverseNonSpaceNodes(groups, function (node, prev) {
    var prevType = prev.classes[0];
    var type = node.classes[0];

    if (prevType === "mbin" && utils.contains(binRightCanceller, type)) {
      prev.classes[0] = "mord";
    } else if (type === "mbin" && utils.contains(binLeftCanceller, prevType)) {
      node.classes[0] = "mord";
    }
  }, {
    node: dummyPrev
  }, dummyNext, isRoot);
  traverseNonSpaceNodes(groups, function (node, prev) {
    var prevType = getTypeOfDomTree(prev);
    var type = getTypeOfDomTree(node); // 'mtight' indicates that the node is script or scriptscript style.

    var space = prevType && type ? node.hasClass("mtight") ? tightSpacings[prevType][type] : spacings[prevType][type] : null;

    if (space) {
      // Insert glue (spacing) after the `prev`.
      return buildCommon.makeGlue(space, glueOptions);
    }
  }, {
    node: dummyPrev
  }, dummyNext, isRoot);
  return groups;
}; // Depth-first traverse non-space `nodes`, calling `callback` with the current and
// previous node as arguments, optionally returning a node to insert after the
// previous node. `prev` is an object with the previous node and `insertAfter`
// function to insert after it. `next` is a node that will be added to the right.
// Used for bin cancellation and inserting spacings.

var traverseNonSpaceNodes = function traverseNonSpaceNodes(nodes, callback, prev, next, isRoot) {
  if (next) {
    // temporarily append the right node, if exists
    nodes.push(next);
  }

  var i = 0;

  for (; i < nodes.length; i++) {
    var node = nodes[i];
    var partialGroup = checkPartialGroup(node);

    if (partialGroup) {
      // Recursive DFS
      // $FlowFixMe: make nodes a $ReadOnlyArray by returning a new array
      traverseNonSpaceNodes(partialGroup.children, callback, prev, null, isRoot);
      continue;
    } // Ignore explicit spaces (e.g., \;, \,) when determining what implicit
    // spacing should go between atoms of different classes


    var nonspace = !node.hasClass("mspace");

    if (nonspace) {
      var result = callback(node, prev.node);

      if (result) {
        if (prev.insertAfter) {
          prev.insertAfter(result);
        } else {
          // insert at front
          nodes.unshift(result);
          i++;
        }
      }
    }

    if (nonspace) {
      prev.node = node;
    } else if (isRoot && node.hasClass("newline")) {
      prev.node = buildHTML_makeSpan(["leftmost"]); // treat like beginning of line
    }

    prev.insertAfter = function (index) {
      return function (n) {
        nodes.splice(index + 1, 0, n);
        i++;
      };
    }(i);
  }

  if (next) {
    nodes.pop();
  }
}; // Check if given node is a partial group, i.e., does not affect spacing around.


var checkPartialGroup = function checkPartialGroup(node) {
  if (node instanceof DocumentFragment || node instanceof Anchor || node instanceof Span && node.hasClass("enclosing")) {
    return node;
  }

  return null;
}; // Return the outermost node of a domTree.


var getOutermostNode = function getOutermostNode(node, side) {
  var partialGroup = checkPartialGroup(node);

  if (partialGroup) {
    var children = partialGroup.children;

    if (children.length) {
      if (side === "right") {
        return getOutermostNode(children[children.length - 1], "right");
      } else if (side === "left") {
        return getOutermostNode(children[0], "left");
      }
    }
  }

  return node;
}; // Return math atom class (mclass) of a domTree.
// If `side` is given, it will get the type of the outermost node at given side.


var getTypeOfDomTree = function getTypeOfDomTree(node, side) {
  if (!node) {
    return null;
  }

  if (side) {
    node = getOutermostNode(node, side);
  } // This makes a lot of assumptions as to where the type of atom
  // appears.  We should do a better job of enforcing this.


  return DomEnum[node.classes[0]] || null;
};
var makeNullDelimiter = function makeNullDelimiter(options, classes) {
  var moreClasses = ["nulldelimiter"].concat(options.baseSizingClasses());
  return buildHTML_makeSpan(classes.concat(moreClasses));
};
/**
 * buildGroup is the function that takes a group and calls the correct groupType
 * function for it. It also handles the interaction of size and style changes
 * between parents and children.
 */

var buildGroup = function buildGroup(group, options, baseOptions) {
  if (!group) {
    return buildHTML_makeSpan();
  }

  if (_htmlGroupBuilders[group.type]) {
    // Call the groupBuilders function
    // $FlowFixMe
    var groupNode = _htmlGroupBuilders[group.type](group, options); // If the size changed between the parent and the current group, account
    // for that size difference.

    if (baseOptions && options.size !== baseOptions.size) {
      groupNode = buildHTML_makeSpan(options.sizingClasses(baseOptions), [groupNode], options);
      var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier;
      groupNode.height *= multiplier;
      groupNode.depth *= multiplier;
    }

    return groupNode;
  } else {
    throw new src_ParseError("Got group of unknown type: '" + group.type + "'");
  }
};
/**
 * Combine an array of HTML DOM nodes (e.g., the output of `buildExpression`)
 * into an unbreakable HTML node of class .base, with proper struts to
 * guarantee correct vertical extent.  `buildHTML` calls this repeatedly to
 * make up the entire expression as a sequence of unbreakable units.
 */

function buildHTMLUnbreakable(children, options) {
  // Compute height and depth of this chunk.
  var body = buildHTML_makeSpan(["base"], children, options); // Add strut, which ensures that the top of the HTML element falls at
  // the height of the expression, and the bottom of the HTML element
  // falls at the depth of the expression.

  var strut = buildHTML_makeSpan(["strut"]);
  strut.style.height = body.height + body.depth + "em";
  strut.style.verticalAlign = -body.depth + "em";
  body.children.unshift(strut);
  return body;
}
/**
 * Take an entire parse tree, and build it into an appropriate set of HTML
 * nodes.
 */


function buildHTML(tree, options) {
  // Strip off outer tag wrapper for processing below.
  var tag = null;

  if (tree.length === 1 && tree[0].type === "tag") {
    tag = tree[0].tag;
    tree = tree[0].body;
  } // Build the expression contained in the tree


  var expression = buildExpression(tree, options, "root");
  var eqnNum;

  if (expression.length === 2 && expression[1].hasClass("tag")) {
    // An environment with automatic equation numbers, e.g. {gather}.
    eqnNum = expression.pop();
  }

  var children = []; // Create one base node for each chunk between potential line breaks.
  // The TeXBook [p.173] says "A formula will be broken only after a
  // relation symbol like $=$ or $<$ or $\rightarrow$, or after a binary
  // operation symbol like $+$ or $-$ or $\times$, where the relation or
  // binary operation is on the ``outer level'' of the formula (i.e., not
  // enclosed in {...} and not part of an \over construction)."

  var parts = [];

  for (var i = 0; i < expression.length; i++) {
    parts.push(expression[i]);

    if (expression[i].hasClass("mbin") || expression[i].hasClass("mrel") || expression[i].hasClass("allowbreak")) {
      // Put any post-operator glue on same line as operator.
      // Watch for \nobreak along the way, and stop at \newline.
      var nobreak = false;

      while (i < expression.length - 1 && expression[i + 1].hasClass("mspace") && !expression[i + 1].hasClass("newline")) {
        i++;
        parts.push(expression[i]);

        if (expression[i].hasClass("nobreak")) {
          nobreak = true;
        }
      } // Don't allow break if \nobreak among the post-operator glue.


      if (!nobreak) {
        children.push(buildHTMLUnbreakable(parts, options));
        parts = [];
      }
    } else if (expression[i].hasClass("newline")) {
      // Write the line except the newline
      parts.pop();

      if (parts.length > 0) {
        children.push(buildHTMLUnbreakable(parts, options));
        parts = [];
      } // Put the newline at the top level


      children.push(expression[i]);
    }
  }

  if (parts.length > 0) {
    children.push(buildHTMLUnbreakable(parts, options));
  } // Now, if there was a tag, build it too and append it as a final child.


  var tagChild;

  if (tag) {
    tagChild = buildHTMLUnbreakable(buildExpression(tag, options, true));
    tagChild.classes = ["tag"];
    children.push(tagChild);
  } else if (eqnNum) {
    children.push(eqnNum);
  }

  var htmlNode = buildHTML_makeSpan(["katex-html"], children);
  htmlNode.setAttribute("aria-hidden", "true"); // Adjust the strut of the tag to be the maximum height of all children
  // (the height of the enclosing htmlNode) for proper vertical alignment.

  if (tagChild) {
    var strut = tagChild.children[0];
    strut.style.height = htmlNode.height + htmlNode.depth + "em";
    strut.style.verticalAlign = -htmlNode.depth + "em";
  }

  return htmlNode;
}
;// CONCATENATED MODULE: ./src/mathMLTree.js
/**
 * These objects store data about MathML nodes. This is the MathML equivalent
 * of the types in domTree.js. Since MathML handles its own rendering, and
 * since we're mainly using MathML to improve accessibility, we don't manage
 * any of the styling state that the plain DOM nodes do.
 *
 * The `toNode` and `toMarkup` functions work simlarly to how they do in
 * domTree.js, creating namespaced DOM nodes and HTML text markup respectively.
 */



function newDocumentFragment(children) {
  return new DocumentFragment(children);
}
/**
 * This node represents a general purpose MathML node of any type. The
 * constructor requires the type of node to create (for example, `"mo"` or
 * `"mspace"`, corresponding to `<mo>` and `<mspace>` tags).
 */

var MathNode = /*#__PURE__*/function () {
  function MathNode(type, children, classes) {
    this.type = void 0;
    this.attributes = void 0;
    this.children = void 0;
    this.classes = void 0;
    this.type = type;
    this.attributes = {};
    this.children = children || [];
    this.classes = classes || [];
  }
  /**
   * Sets an attribute on a MathML node. MathML depends on attributes to convey a
   * semantic content, so this is used heavily.
   */


  var _proto = MathNode.prototype;

  _proto.setAttribute = function setAttribute(name, value) {
    this.attributes[name] = value;
  }
  /**
   * Gets an attribute on a MathML node.
   */
  ;

  _proto.getAttribute = function getAttribute(name) {
    return this.attributes[name];
  }
  /**
   * Converts the math node into a MathML-namespaced DOM element.
   */
  ;

  _proto.toNode = function toNode() {
    var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", this.type);

    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        node.setAttribute(attr, this.attributes[attr]);
      }
    }

    if (this.classes.length > 0) {
      node.className = createClass(this.classes);
    }

    for (var i = 0; i < this.children.length; i++) {
      node.appendChild(this.children[i].toNode());
    }

    return node;
  }
  /**
   * Converts the math node into an HTML markup string.
   */
  ;

  _proto.toMarkup = function toMarkup() {
    var markup = "<" + this.type; // Add the attributes

    for (var attr in this.attributes) {
      if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
        markup += " " + attr + "=\"";
        markup += utils.escape(this.attributes[attr]);
        markup += "\"";
      }
    }

    if (this.classes.length > 0) {
      markup += " class =\"" + utils.escape(createClass(this.classes)) + "\"";
    }

    markup += ">";

    for (var i = 0; i < this.children.length; i++) {
      markup += this.children[i].toMarkup();
    }

    markup += "</" + this.type + ">";
    return markup;
  }
  /**
   * Converts the math node into a string, similar to innerText, but escaped.
   */
  ;

  _proto.toText = function toText() {
    return this.children.map(function (child) {
      return child.toText();
    }).join("");
  };

  return MathNode;
}();
/**
 * This node represents a piece of text.
 */

var TextNode = /*#__PURE__*/function () {
  function TextNode(text) {
    this.text = void 0;
    this.text = text;
  }
  /**
   * Converts the text node into a DOM text node.
   */


  var _proto2 = TextNode.prototype;

  _proto2.toNode = function toNode() {
    return document.createTextNode(this.text);
  }
  /**
   * Converts the text node into escaped HTML markup
   * (representing the text itself).
   */
  ;

  _proto2.toMarkup = function toMarkup() {
    return utils.escape(this.toText());
  }
  /**
   * Converts the text node into a string
   * (representing the text iteself).
   */
  ;

  _proto2.toText = function toText() {
    return this.text;
  };

  return TextNode;
}();
/**
 * This node represents a space, but may render as <mspace.../> or as text,
 * depending on the width.
 */

var SpaceNode = /*#__PURE__*/function () {
  /**
   * Create a Space node with width given in CSS ems.
   */
  function SpaceNode(width) {
    this.width = void 0;
    this.character = void 0;
    this.width = width; // See https://www.w3.org/TR/2000/WD-MathML2-20000328/chapter6.html
    // for a table of space-like characters.  We use Unicode
    // representations instead of &LongNames; as it's not clear how to
    // make the latter via document.createTextNode.

    if (width >= 0.05555 && width <= 0.05556) {
      this.character = "\u200A"; // &VeryThinSpace;
    } else if (width >= 0.1666 && width <= 0.1667) {
      this.character = "\u2009"; // &ThinSpace;
    } else if (width >= 0.2222 && width <= 0.2223) {
      this.character = "\u2005"; // &MediumSpace;
    } else if (width >= 0.2777 && width <= 0.2778) {
      this.character = "\u2005\u200A"; // &ThickSpace;
    } else if (width >= -0.05556 && width <= -0.05555) {
      this.character = "\u200A\u2063"; // &NegativeVeryThinSpace;
    } else if (width >= -0.1667 && width <= -0.1666) {
      this.character = "\u2009\u2063"; // &NegativeThinSpace;
    } else if (width >= -0.2223 && width <= -0.2222) {
      this.character = "\u205F\u2063"; // &NegativeMediumSpace;
    } else if (width >= -0.2778 && width <= -0.2777) {
      this.character = "\u2005\u2063"; // &NegativeThickSpace;
    } else {
      this.character = null;
    }
  }
  /**
   * Converts the math node into a MathML-namespaced DOM element.
   */


  var _proto3 = SpaceNode.prototype;

  _proto3.toNode = function toNode() {
    if (this.character) {
      return document.createTextNode(this.character);
    } else {
      var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mspace");
      node.setAttribute("width", this.width + "em");
      return node;
    }
  }
  /**
   * Converts the math node into an HTML markup string.
   */
  ;

  _proto3.toMarkup = function toMarkup() {
    if (this.character) {
      return "<mtext>" + this.character + "</mtext>";
    } else {
      return "<mspace width=\"" + this.width + "em\"/>";
    }
  }
  /**
   * Converts the math node into a string, similar to innerText.
   */
  ;

  _proto3.toText = function toText() {
    if (this.character) {
      return this.character;
    } else {
      return " ";
    }
  };

  return SpaceNode;
}();

/* harmony default export */ var mathMLTree = ({
  MathNode: MathNode,
  TextNode: TextNode,
  SpaceNode: SpaceNode,
  newDocumentFragment: newDocumentFragment
});
;// CONCATENATED MODULE: ./src/buildMathML.js
/**
 * This file converts a parse tree into a cooresponding MathML tree. The main
 * entry point is the `buildMathML` function, which takes a parse tree from the
 * parser.
 */









/**
 * Takes a symbol and converts it into a MathML text node after performing
 * optional replacement from symbols.js.
 */
var makeText = function makeText(text, mode, options) {
  if (src_symbols[mode][text] && src_symbols[mode][text].replace && text.charCodeAt(0) !== 0xD835 && !(ligatures.hasOwnProperty(text) && options && (options.fontFamily && options.fontFamily.substr(4, 2) === "tt" || options.font && options.font.substr(4, 2) === "tt"))) {
    text = src_symbols[mode][text].replace;
  }

  return new mathMLTree.TextNode(text);
};
/**
 * Wrap the given array of nodes in an <mrow> node if needed, i.e.,
 * unless the array has length 1.  Always returns a single node.
 */

var makeRow = function makeRow(body) {
  if (body.length === 1) {
    return body[0];
  } else {
    return new mathMLTree.MathNode("mrow", body);
  }
};
/**
 * Returns the math variant as a string or null if none is required.
 */

var getVariant = function getVariant(group, options) {
  // Handle \text... font specifiers as best we can.
  // MathML has a limited list of allowable mathvariant specifiers; see
  // https://www.w3.org/TR/MathML3/chapter3.html#presm.commatt
  if (options.fontFamily === "texttt") {
    return "monospace";
  } else if (options.fontFamily === "textsf") {
    if (options.fontShape === "textit" && options.fontWeight === "textbf") {
      return "sans-serif-bold-italic";
    } else if (options.fontShape === "textit") {
      return "sans-serif-italic";
    } else if (options.fontWeight === "textbf") {
      return "bold-sans-serif";
    } else {
      return "sans-serif";
    }
  } else if (options.fontShape === "textit" && options.fontWeight === "textbf") {
    return "bold-italic";
  } else if (options.fontShape === "textit") {
    return "italic";
  } else if (options.fontWeight === "textbf") {
    return "bold";
  }

  var font = options.font;

  if (!font || font === "mathnormal") {
    return null;
  }

  var mode = group.mode;

  if (font === "mathit") {
    return "italic";
  } else if (font === "boldsymbol") {
    return group.type === "textord" ? "bold" : "bold-italic";
  } else if (font === "mathbf") {
    return "bold";
  } else if (font === "mathbb") {
    return "double-struck";
  } else if (font === "mathfrak") {
    return "fraktur";
  } else if (font === "mathscr" || font === "mathcal") {
    // MathML makes no distinction between script and caligrahpic
    return "script";
  } else if (font === "mathsf") {
    return "sans-serif";
  } else if (font === "mathtt") {
    return "monospace";
  }

  var text = group.text;

  if (utils.contains(["\\imath", "\\jmath"], text)) {
    return null;
  }

  if (src_symbols[mode][text] && src_symbols[mode][text].replace) {
    text = src_symbols[mode][text].replace;
  }

  var fontName = buildCommon.fontMap[font].fontName;

  if (getCharacterMetrics(text, fontName, mode)) {
    return buildCommon.fontMap[font].variant;
  }

  return null;
};
/**
 * Takes a list of nodes, builds them, and returns a list of the generated
 * MathML nodes.  Also combine consecutive <mtext> outputs into a single
 * <mtext> tag.
 */

var buildMathML_buildExpression = function buildExpression(expression, options, isOrdgroup) {
  if (expression.length === 1) {
    var group = buildMathML_buildGroup(expression[0], options);

    if (isOrdgroup && group instanceof MathNode && group.type === "mo") {
      // When TeX writers want to suppress spacing on an operator,
      // they often put the operator by itself inside braces.
      group.setAttribute("lspace", "0em");
      group.setAttribute("rspace", "0em");
    }

    return [group];
  }

  var groups = [];
  var lastGroup;

  for (var i = 0; i < expression.length; i++) {
    var _group = buildMathML_buildGroup(expression[i], options);

    if (_group instanceof MathNode && lastGroup instanceof MathNode) {
      // Concatenate adjacent <mtext>s
      if (_group.type === 'mtext' && lastGroup.type === 'mtext' && _group.getAttribute('mathvariant') === lastGroup.getAttribute('mathvariant')) {
        var _lastGroup$children;

        (_lastGroup$children = lastGroup.children).push.apply(_lastGroup$children, _group.children);

        continue; // Concatenate adjacent <mn>s
      } else if (_group.type === 'mn' && lastGroup.type === 'mn') {
        var _lastGroup$children2;

        (_lastGroup$children2 = lastGroup.children).push.apply(_lastGroup$children2, _group.children);

        continue; // Concatenate <mn>...</mn> followed by <mi>.</mi>
      } else if (_group.type === 'mi' && _group.children.length === 1 && lastGroup.type === 'mn') {
        var child = _group.children[0];

        if (child instanceof TextNode && child.text === '.') {
          var _lastGroup$children3;

          (_lastGroup$children3 = lastGroup.children).push.apply(_lastGroup$children3, _group.children);

          continue;
        }
      } else if (lastGroup.type === 'mi' && lastGroup.children.length === 1) {
        var lastChild = lastGroup.children[0];

        if (lastChild instanceof TextNode && lastChild.text === "\u0338" && (_group.type === 'mo' || _group.type === 'mi' || _group.type === 'mn')) {
          var _child = _group.children[0];

          if (_child instanceof TextNode && _child.text.length > 0) {
            // Overlay with combining character long solidus
            _child.text = _child.text.slice(0, 1) + "\u0338" + _child.text.slice(1);
            groups.pop();
          }
        }
      }
    }

    groups.push(_group);
    lastGroup = _group;
  }

  return groups;
};
/**
 * Equivalent to buildExpression, but wraps the elements in an <mrow>
 * if there's more than one.  Returns a single node instead of an array.
 */

var buildExpressionRow = function buildExpressionRow(expression, options, isOrdgroup) {
  return makeRow(buildMathML_buildExpression(expression, options, isOrdgroup));
};
/**
 * Takes a group from the parser and calls the appropriate groupBuilders function
 * on it to produce a MathML node.
 */

var buildMathML_buildGroup = function buildGroup(group, options) {
  if (!group) {
    return new mathMLTree.MathNode("mrow");
  }

  if (_mathmlGroupBuilders[group.type]) {
    // Call the groupBuilders function
    // $FlowFixMe
    var result = _mathmlGroupBuilders[group.type](group, options); // $FlowFixMe

    return result;
  } else {
    throw new src_ParseError("Got group of unknown type: '" + group.type + "'");
  }
};
/**
 * Takes a full parse tree and settings and builds a MathML representation of
 * it. In particular, we put the elements from building the parse tree into a
 * <semantics> tag so we can also include that TeX source as an annotation.
 *
 * Note that we actually return a domTree element with a `<math>` inside it so
 * we can do appropriate styling.
 */

function buildMathML(tree, texExpression, options, isDisplayMode, forMathmlOnly) {
  var expression = buildMathML_buildExpression(tree, options); // TODO: Make a pass thru the MathML similar to buildHTML.traverseNonSpaceNodes
  // and add spacing nodes. This is necessary only adjacent to math operators
  // like \sin or \lim or to subsup elements that contain math operators.
  // MathML takes care of the other spacing issues.
  // Wrap up the expression in an mrow so it is presented in the semantics
  // tag correctly, unless it's a single <mrow> or <mtable>.

  var wrapper;

  if (expression.length === 1 && expression[0] instanceof MathNode && utils.contains(["mrow", "mtable"], expression[0].type)) {
    wrapper = expression[0];
  } else {
    wrapper = new mathMLTree.MathNode("mrow", expression);
  } // Build a TeX annotation of the source


  var annotation = new mathMLTree.MathNode("annotation", [new mathMLTree.TextNode(texExpression)]);
  annotation.setAttribute("encoding", "application/x-tex");
  var semantics = new mathMLTree.MathNode("semantics", [wrapper, annotation]);
  var math = new mathMLTree.MathNode("math", [semantics]);
  math.setAttribute("xmlns", "http://www.w3.org/1998/Math/MathML");

  if (isDisplayMode) {
    math.setAttribute("display", "block");
  } // You can't style <math> nodes, so we wrap the node in a span.
  // NOTE: The span class is not typed to have <math> nodes as children, and
  // we don't want to make the children type more generic since the children
  // of span are expected to have more fields in `buildHtml` contexts.


  var wrapperClass = forMathmlOnly ? "katex" : "katex-mathml"; // $FlowFixMe

  return buildCommon.makeSpan([wrapperClass], [math]);
}
;// CONCATENATED MODULE: ./src/buildTree.js







var optionsFromSettings = function optionsFromSettings(settings) {
  return new src_Options({
    style: settings.displayMode ? src_Style.DISPLAY : src_Style.TEXT,
    maxSize: settings.maxSize,
    minRuleThickness: settings.minRuleThickness
  });
};

var displayWrap = function displayWrap(node, settings) {
  if (settings.displayMode) {
    var classes = ["katex-display"];

    if (settings.leqno) {
      classes.push("leqno");
    }

    if (settings.fleqn) {
      classes.push("fleqn");
    }

    node = buildCommon.makeSpan(classes, [node]);
  }

  return node;
};

var buildTree = function buildTree(tree, expression, settings) {
  var options = optionsFromSettings(settings);
  var katexNode;

  if (settings.output === "mathml") {
    return buildMathML(tree, expression, options, settings.displayMode, true);
  } else if (settings.output === "html") {
    var htmlNode = buildHTML(tree, options);
    katexNode = buildCommon.makeSpan(["katex"], [htmlNode]);
  } else {
    var mathMLNode = buildMathML(tree, expression, options, settings.displayMode, false);

    var _htmlNode = buildHTML(tree, options);

    katexNode = buildCommon.makeSpan(["katex"], [mathMLNode, _htmlNode]);
  }

  return displayWrap(katexNode, settings);
};
var buildHTMLTree = function buildHTMLTree(tree, expression, settings) {
  var options = optionsFromSettings(settings);
  var htmlNode = buildHTML(tree, options);
  var katexNode = buildCommon.makeSpan(["katex"], [htmlNode]);
  return displayWrap(katexNode, settings);
};
/* harmony default export */ var src_buildTree = ((/* unused pure expression or super */ null && (0)));
;// CONCATENATED MODULE: ./src/stretchy.js
/**
 * This file provides support to buildMathML.js and buildHTML.js
 * for stretchy wide elements rendered from SVG files
 * and other CSS trickery.
 */




var stretchyCodePoint = {
  widehat: "^",
  widecheck: "ˇ",
  widetilde: "~",
  utilde: "~",
  overleftarrow: "\u2190",
  underleftarrow: "\u2190",
  xleftarrow: "\u2190",
  overrightarrow: "\u2192",
  underrightarrow: "\u2192",
  xrightarrow: "\u2192",
  underbrace: "\u23DF",
  overbrace: "\u23DE",
  overgroup: "\u23E0",
  undergroup: "\u23E1",
  overleftrightarrow: "\u2194",
  underleftrightarrow: "\u2194",
  xleftrightarrow: "\u2194",
  Overrightarrow: "\u21D2",
  xRightarrow: "\u21D2",
  overleftharpoon: "\u21BC",
  xleftharpoonup: "\u21BC",
  overrightharpoon: "\u21C0",
  xrightharpoonup: "\u21C0",
  xLeftarrow: "\u21D0",
  xLeftrightarrow: "\u21D4",
  xhookleftarrow: "\u21A9",
  xhookrightarrow: "\u21AA",
  xmapsto: "\u21A6",
  xrightharpoondown: "\u21C1",
  xleftharpoondown: "\u21BD",
  xrightleftharpoons: "\u21CC",
  xleftrightharpoons: "\u21CB",
  xtwoheadleftarrow: "\u219E",
  xtwoheadrightarrow: "\u21A0",
  xlongequal: "=",
  xtofrom: "\u21C4",
  xrightleftarrows: "\u21C4",
  xrightequilibrium: "\u21CC",
  // Not a perfect match.
  xleftequilibrium: "\u21CB",
  // None better available.
  "\\cdrightarrow": "\u2192",
  "\\cdleftarrow": "\u2190",
  "\\cdlongequal": "="
};

var mathMLnode = function mathMLnode(label) {
  var node = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(stretchyCodePoint[label.replace(/^\\/, '')])]);
  node.setAttribute("stretchy", "true");
  return node;
}; // Many of the KaTeX SVG images have been adapted from glyphs in KaTeX fonts.
// Copyright (c) 2009-2010, Design Science, Inc. (<www.mathjax.org>)
// Copyright (c) 2014-2017 Khan Academy (<www.khanacademy.org>)
// Licensed under the SIL Open Font License, Version 1.1.
// See \nhttp://scripts.sil.org/OFL
// Very Long SVGs
//    Many of the KaTeX stretchy wide elements use a long SVG image and an
//    overflow: hidden tactic to achieve a stretchy image while avoiding
//    distortion of arrowheads or brace corners.
//    The SVG typically contains a very long (400 em) arrow.
//    The SVG is in a container span that has overflow: hidden, so the span
//    acts like a window that exposes only part of the  SVG.
//    The SVG always has a longer, thinner aspect ratio than the container span.
//    After the SVG fills 100% of the height of the container span,
//    there is a long arrow shaft left over. That left-over shaft is not shown.
//    Instead, it is sliced off because the span's CSS has overflow: hidden.
//    Thus, the reader sees an arrow that matches the subject matter width
//    without distortion.
//    Some functions, such as \cancel, need to vary their aspect ratio. These
//    functions do not get the overflow SVG treatment.
// Second Brush Stroke
//    Low resolution monitors struggle to display images in fine detail.
//    So browsers apply anti-aliasing. A long straight arrow shaft therefore
//    will sometimes appear as if it has a blurred edge.
//    To mitigate this, these SVG files contain a second "brush-stroke" on the
//    arrow shafts. That is, a second long thin rectangular SVG path has been
//    written directly on top of each arrow shaft. This reinforcement causes
//    some of the screen pixels to display as black instead of the anti-aliased
//    gray pixel that a  single path would generate. So we get arrow shafts
//    whose edges appear to be sharper.
// In the katexImagesData object just below, the dimensions all
// correspond to path geometry inside the relevant SVG.
// For example, \overrightarrow uses the same arrowhead as glyph U+2192
// from the KaTeX Main font. The scaling factor is 1000.
// That is, inside the font, that arrowhead is 522 units tall, which
// corresponds to 0.522 em inside the document.


var katexImagesData = {
  //   path(s), minWidth, height, align
  overrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
  overleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
  underrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
  underleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
  xrightarrow: [["rightarrow"], 1.469, 522, "xMaxYMin"],
  "\\cdrightarrow": [["rightarrow"], 3.0, 522, "xMaxYMin"],
  // CD minwwidth2.5pc
  xleftarrow: [["leftarrow"], 1.469, 522, "xMinYMin"],
  "\\cdleftarrow": [["leftarrow"], 3.0, 522, "xMinYMin"],
  Overrightarrow: [["doublerightarrow"], 0.888, 560, "xMaxYMin"],
  xRightarrow: [["doublerightarrow"], 1.526, 560, "xMaxYMin"],
  xLeftarrow: [["doubleleftarrow"], 1.526, 560, "xMinYMin"],
  overleftharpoon: [["leftharpoon"], 0.888, 522, "xMinYMin"],
  xleftharpoonup: [["leftharpoon"], 0.888, 522, "xMinYMin"],
  xleftharpoondown: [["leftharpoondown"], 0.888, 522, "xMinYMin"],
  overrightharpoon: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
  xrightharpoonup: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
  xrightharpoondown: [["rightharpoondown"], 0.888, 522, "xMaxYMin"],
  xlongequal: [["longequal"], 0.888, 334, "xMinYMin"],
  "\\cdlongequal": [["longequal"], 3.0, 334, "xMinYMin"],
  xtwoheadleftarrow: [["twoheadleftarrow"], 0.888, 334, "xMinYMin"],
  xtwoheadrightarrow: [["twoheadrightarrow"], 0.888, 334, "xMaxYMin"],
  overleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
  overbrace: [["leftbrace", "midbrace", "rightbrace"], 1.6, 548],
  underbrace: [["leftbraceunder", "midbraceunder", "rightbraceunder"], 1.6, 548],
  underleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
  xleftrightarrow: [["leftarrow", "rightarrow"], 1.75, 522],
  xLeftrightarrow: [["doubleleftarrow", "doublerightarrow"], 1.75, 560],
  xrightleftharpoons: [["leftharpoondownplus", "rightharpoonplus"], 1.75, 716],
  xleftrightharpoons: [["leftharpoonplus", "rightharpoondownplus"], 1.75, 716],
  xhookleftarrow: [["leftarrow", "righthook"], 1.08, 522],
  xhookrightarrow: [["lefthook", "rightarrow"], 1.08, 522],
  overlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
  underlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
  overgroup: [["leftgroup", "rightgroup"], 0.888, 342],
  undergroup: [["leftgroupunder", "rightgroupunder"], 0.888, 342],
  xmapsto: [["leftmapsto", "rightarrow"], 1.5, 522],
  xtofrom: [["leftToFrom", "rightToFrom"], 1.75, 528],
  // The next three arrows are from the mhchem package.
  // In mhchem.sty, min-length is 2.0em. But these arrows might appear in the
  // document as \xrightarrow or \xrightleftharpoons. Those have
  // min-length = 1.75em, so we set min-length on these next three to match.
  xrightleftarrows: [["baraboveleftarrow", "rightarrowabovebar"], 1.75, 901],
  xrightequilibrium: [["baraboveshortleftharpoon", "rightharpoonaboveshortbar"], 1.75, 716],
  xleftequilibrium: [["shortbaraboveleftharpoon", "shortrightharpoonabovebar"], 1.75, 716]
};

var groupLength = function groupLength(arg) {
  if (arg.type === "ordgroup") {
    return arg.body.length;
  } else {
    return 1;
  }
};

var svgSpan = function svgSpan(group, options) {
  // Create a span with inline SVG for the element.
  function buildSvgSpan_() {
    var viewBoxWidth = 400000; // default

    var label = group.label.substr(1);

    if (utils.contains(["widehat", "widecheck", "widetilde", "utilde"], label)) {
      // Each type in the `if` statement corresponds to one of the ParseNode
      // types below. This narrowing is required to access `grp.base`.
      // $FlowFixMe
      var grp = group; // There are four SVG images available for each function.
      // Choose a taller image when there are more characters.

      var numChars = groupLength(grp.base);
      var viewBoxHeight;
      var pathName;

      var _height;

      if (numChars > 5) {
        if (label === "widehat" || label === "widecheck") {
          viewBoxHeight = 420;
          viewBoxWidth = 2364;
          _height = 0.42;
          pathName = label + "4";
        } else {
          viewBoxHeight = 312;
          viewBoxWidth = 2340;
          _height = 0.34;
          pathName = "tilde4";
        }
      } else {
        var imgIndex = [1, 1, 2, 2, 3, 3][numChars];

        if (label === "widehat" || label === "widecheck") {
          viewBoxWidth = [0, 1062, 2364, 2364, 2364][imgIndex];
          viewBoxHeight = [0, 239, 300, 360, 420][imgIndex];
          _height = [0, 0.24, 0.3, 0.3, 0.36, 0.42][imgIndex];
          pathName = label + imgIndex;
        } else {
          viewBoxWidth = [0, 600, 1033, 2339, 2340][imgIndex];
          viewBoxHeight = [0, 260, 286, 306, 312][imgIndex];
          _height = [0, 0.26, 0.286, 0.3, 0.306, 0.34][imgIndex];
          pathName = "tilde" + imgIndex;
        }
      }

      var path = new PathNode(pathName);
      var svgNode = new SvgNode([path], {
        "width": "100%",
        "height": _height + "em",
        "viewBox": "0 0 " + viewBoxWidth + " " + viewBoxHeight,
        "preserveAspectRatio": "none"
      });
      return {
        span: buildCommon.makeSvgSpan([], [svgNode], options),
        minWidth: 0,
        height: _height
      };
    } else {
      var spans = [];
      var data = katexImagesData[label];
      var paths = data[0],
          _minWidth = data[1],
          _viewBoxHeight = data[2];

      var _height2 = _viewBoxHeight / 1000;

      var numSvgChildren = paths.length;
      var widthClasses;
      var aligns;

      if (numSvgChildren === 1) {
        // $FlowFixMe: All these cases must be of the 4-tuple type.
        var align1 = data[3];
        widthClasses = ["hide-tail"];
        aligns = [align1];
      } else if (numSvgChildren === 2) {
        widthClasses = ["halfarrow-left", "halfarrow-right"];
        aligns = ["xMinYMin", "xMaxYMin"];
      } else if (numSvgChildren === 3) {
        widthClasses = ["brace-left", "brace-center", "brace-right"];
        aligns = ["xMinYMin", "xMidYMin", "xMaxYMin"];
      } else {
        throw new Error("Correct katexImagesData or update code here to support\n                    " + numSvgChildren + " children.");
      }

      for (var i = 0; i < numSvgChildren; i++) {
        var _path = new PathNode(paths[i]);

        var _svgNode = new SvgNode([_path], {
          "width": "400em",
          "height": _height2 + "em",
          "viewBox": "0 0 " + viewBoxWidth + " " + _viewBoxHeight,
          "preserveAspectRatio": aligns[i] + " slice"
        });

        var _span = buildCommon.makeSvgSpan([widthClasses[i]], [_svgNode], options);

        if (numSvgChildren === 1) {
          return {
            span: _span,
            minWidth: _minWidth,
            height: _height2
          };
        } else {
          _span.style.height = _height2 + "em";
          spans.push(_span);
        }
      }

      return {
        span: buildCommon.makeSpan(["stretchy"], spans, options),
        minWidth: _minWidth,
        height: _height2
      };
    }
  } // buildSvgSpan_()


  var _buildSvgSpan_ = buildSvgSpan_(),
      span = _buildSvgSpan_.span,
      minWidth = _buildSvgSpan_.minWidth,
      height = _buildSvgSpan_.height; // Note that we are returning span.depth = 0.
  // Any adjustments relative to the baseline must be done in buildHTML.


  span.height = height;
  span.style.height = height + "em";

  if (minWidth > 0) {
    span.style.minWidth = minWidth + "em";
  }

  return span;
};

var encloseSpan = function encloseSpan(inner, label, topPad, bottomPad, options) {
  // Return an image span for \cancel, \bcancel, \xcancel, \fbox, or \angl
  var img;
  var totalHeight = inner.height + inner.depth + topPad + bottomPad;

  if (/fbox|color|angl/.test(label)) {
    img = buildCommon.makeSpan(["stretchy", label], [], options);

    if (label === "fbox") {
      var color = options.color && options.getColor();

      if (color) {
        img.style.borderColor = color;
      }
    }
  } else {
    // \cancel, \bcancel, or \xcancel
    // Since \cancel's SVG is inline and it omits the viewBox attribute,
    // its stroke-width will not vary with span area.
    var lines = [];

    if (/^[bx]cancel$/.test(label)) {
      lines.push(new LineNode({
        "x1": "0",
        "y1": "0",
        "x2": "100%",
        "y2": "100%",
        "stroke-width": "0.046em"
      }));
    }

    if (/^x?cancel$/.test(label)) {
      lines.push(new LineNode({
        "x1": "0",
        "y1": "100%",
        "x2": "100%",
        "y2": "0",
        "stroke-width": "0.046em"
      }));
    }

    var svgNode = new SvgNode(lines, {
      "width": "100%",
      "height": totalHeight + "em"
    });
    img = buildCommon.makeSvgSpan([], [svgNode], options);
  }

  img.height = totalHeight;
  img.style.height = totalHeight + "em";
  return img;
};

/* harmony default export */ var stretchy = ({
  encloseSpan: encloseSpan,
  mathMLnode: mathMLnode,
  svgSpan: svgSpan
});
;// CONCATENATED MODULE: ./src/parseNode.js


/**
 * Asserts that the node is of the given type and returns it with stricter
 * typing. Throws if the node's type does not match.
 */
function assertNodeType(node, type) {
  if (!node || node.type !== type) {
    throw new Error("Expected node of type " + type + ", but got " + (node ? "node of type " + node.type : String(node)));
  } // $FlowFixMe, >=0.125


  return node;
}
/**
 * Returns the node more strictly typed iff it is of the given type. Otherwise,
 * returns null.
 */

function assertSymbolNodeType(node) {
  var typedNode = checkSymbolNodeType(node);

  if (!typedNode) {
    throw new Error("Expected node of symbol group type, but got " + (node ? "node of type " + node.type : String(node)));
  }

  return typedNode;
}
/**
 * Returns the node more strictly typed iff it is of the given type. Otherwise,
 * returns null.
 */

function checkSymbolNodeType(node) {
  if (node && (node.type === "atom" || NON_ATOMS.hasOwnProperty(node.type))) {
    // $FlowFixMe
    return node;
  }

  return null;
}
;// CONCATENATED MODULE: ./src/functions/accent.js









// NOTE: Unlike most `htmlBuilder`s, this one handles not only "accent", but
// also "supsub" since an accent can affect super/subscripting.
var htmlBuilder = function htmlBuilder(grp, options) {
  // Accents are handled in the TeXbook pg. 443, rule 12.
  var base;
  var group;
  var supSubGroup;

  if (grp && grp.type === "supsub") {
    // If our base is a character box, and we have superscripts and
    // subscripts, the supsub will defer to us. In particular, we want
    // to attach the superscripts and subscripts to the inner body (so
    // that the position of the superscripts and subscripts won't be
    // affected by the height of the accent). We accomplish this by
    // sticking the base of the accent into the base of the supsub, and
    // rendering that, while keeping track of where the accent is.
    // The real accent group is the base of the supsub group
    group = assertNodeType(grp.base, "accent"); // The character box is the base of the accent group

    base = group.base; // Stick the character box into the base of the supsub group

    grp.base = base; // Rerender the supsub group with its new base, and store that
    // result.

    supSubGroup = assertSpan(buildGroup(grp, options)); // reset original base

    grp.base = group;
  } else {
    group = assertNodeType(grp, "accent");
    base = group.base;
  } // Build the base group


  var body = buildGroup(base, options.havingCrampedStyle()); // Does the accent need to shift for the skew of a character?

  var mustShift = group.isShifty && utils.isCharacterBox(base); // Calculate the skew of the accent. This is based on the line "If the
  // nucleus is not a single character, let s = 0; otherwise set s to the
  // kern amount for the nucleus followed by the \skewchar of its font."
  // Note that our skew metrics are just the kern between each character
  // and the skewchar.

  var skew = 0;

  if (mustShift) {
    // If the base is a character box, then we want the skew of the
    // innermost character. To do that, we find the innermost character:
    var baseChar = utils.getBaseElem(base); // Then, we render its group to get the symbol inside it

    var baseGroup = buildGroup(baseChar, options.havingCrampedStyle()); // Finally, we pull the skew off of the symbol.

    skew = assertSymbolDomNode(baseGroup).skew; // Note that we now throw away baseGroup, because the layers we
    // removed with getBaseElem might contain things like \color which
    // we can't get rid of.
    // TODO(emily): Find a better way to get the skew
  } // calculate the amount of space between the body and the accent


  var clearance = Math.min(body.height, options.fontMetrics().xHeight); // Build the accent

  var accentBody;

  if (!group.isStretchy) {
    var accent;
    var width;

    if (group.label === "\\vec") {
      // Before version 0.9, \vec used the combining font glyph U+20D7.
      // But browsers, especially Safari, are not consistent in how they
      // render combining characters when not preceded by a character.
      // So now we use an SVG.
      // If Safari reforms, we should consider reverting to the glyph.
      accent = buildCommon.staticSvg("vec", options);
      width = buildCommon.svgData.vec[1];
    } else {
      accent = buildCommon.makeOrd({
        mode: group.mode,
        text: group.label
      }, options, "textord");
      accent = assertSymbolDomNode(accent); // Remove the italic correction of the accent, because it only serves to
      // shift the accent over to a place we don't want.

      accent.italic = 0;
      width = accent.width;
    }

    accentBody = buildCommon.makeSpan(["accent-body"], [accent]); // "Full" accents expand the width of the resulting symbol to be
    // at least the width of the accent, and overlap directly onto the
    // character without any vertical offset.

    var accentFull = group.label === "\\textcircled";

    if (accentFull) {
      accentBody.classes.push('accent-full');
      clearance = body.height;
    } // Shift the accent over by the skew.


    var left = skew; // CSS defines `.katex .accent .accent-body:not(.accent-full) { width: 0 }`
    // so that the accent doesn't contribute to the bounding box.
    // We need to shift the character by its width (effectively half
    // its width) to compensate.

    if (!accentFull) {
      left -= width / 2;
    }

    accentBody.style.left = left + "em"; // \textcircled uses the \bigcirc glyph, so it needs some
    // vertical adjustment to match LaTeX.

    if (group.label === "\\textcircled") {
      accentBody.style.top = ".2em";
    }

    accentBody = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: body
      }, {
        type: "kern",
        size: -clearance
      }, {
        type: "elem",
        elem: accentBody
      }]
    }, options);
  } else {
    accentBody = stretchy.svgSpan(group, options);
    accentBody = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: body
      }, {
        type: "elem",
        elem: accentBody,
        wrapperClasses: ["svg-align"],
        wrapperStyle: skew > 0 ? {
          width: "calc(100% - " + 2 * skew + "em)",
          marginLeft: 2 * skew + "em"
        } : undefined
      }]
    }, options);
  }

  var accentWrap = buildCommon.makeSpan(["mord", "accent"], [accentBody], options);

  if (supSubGroup) {
    // Here, we replace the "base" child of the supsub with our newly
    // generated accent.
    supSubGroup.children[0] = accentWrap; // Since we don't rerun the height calculation after replacing the
    // accent, we manually recalculate height.

    supSubGroup.height = Math.max(accentWrap.height, supSubGroup.height); // Accents should always be ords, even when their innards are not.

    supSubGroup.classes[0] = "mord";
    return supSubGroup;
  } else {
    return accentWrap;
  }
};

var mathmlBuilder = function mathmlBuilder(group, options) {
  var accentNode = group.isStretchy ? stretchy.mathMLnode(group.label) : new mathMLTree.MathNode("mo", [makeText(group.label, group.mode)]);
  var node = new mathMLTree.MathNode("mover", [buildMathML_buildGroup(group.base, options), accentNode]);
  node.setAttribute("accent", "true");
  return node;
};

var NON_STRETCHY_ACCENT_REGEX = new RegExp(["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring"].map(function (accent) {
  return "\\" + accent;
}).join("|")); // Accents

defineFunction({
  type: "accent",
  names: ["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\mathring", "\\widecheck", "\\widehat", "\\widetilde", "\\overrightarrow", "\\overleftarrow", "\\Overrightarrow", "\\overleftrightarrow", "\\overgroup", "\\overlinesegment", "\\overleftharpoon", "\\overrightharpoon"],
  props: {
    numArgs: 1
  },
  handler: function handler(context, args) {
    var base = normalizeArgument(args[0]);
    var isStretchy = !NON_STRETCHY_ACCENT_REGEX.test(context.funcName);
    var isShifty = !isStretchy || context.funcName === "\\widehat" || context.funcName === "\\widetilde" || context.funcName === "\\widecheck";
    return {
      type: "accent",
      mode: context.parser.mode,
      label: context.funcName,
      isStretchy: isStretchy,
      isShifty: isShifty,
      base: base
    };
  },
  htmlBuilder: htmlBuilder,
  mathmlBuilder: mathmlBuilder
}); // Text-mode accents

defineFunction({
  type: "accent",
  names: ["\\'", "\\`", "\\^", "\\~", "\\=", "\\u", "\\.", '\\"', "\\r", "\\H", "\\v", "\\textcircled"],
  props: {
    numArgs: 1,
    allowedInText: true,
    allowedInMath: true,
    // unless in strict mode
    argTypes: ["primitive"]
  },
  handler: function handler(context, args) {
    var base = args[0];
    var mode = context.parser.mode;

    if (mode === "math") {
      context.parser.settings.reportNonstrict("mathVsTextAccents", "LaTeX's accent " + context.funcName + " works only in text mode");
      mode = "text";
    }

    return {
      type: "accent",
      mode: mode,
      label: context.funcName,
      isStretchy: false,
      isShifty: true,
      base: base
    };
  },
  htmlBuilder: htmlBuilder,
  mathmlBuilder: mathmlBuilder
});
;// CONCATENATED MODULE: ./src/functions/accentunder.js
// Horizontal overlap functions






defineFunction({
  type: "accentUnder",
  names: ["\\underleftarrow", "\\underrightarrow", "\\underleftrightarrow", "\\undergroup", "\\underlinesegment", "\\utilde"],
  props: {
    numArgs: 1
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var base = args[0];
    return {
      type: "accentUnder",
      mode: parser.mode,
      label: funcName,
      base: base
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    // Treat under accents much like underlines.
    var innerGroup = buildGroup(group.base, options);
    var accentBody = stretchy.svgSpan(group, options);
    var kern = group.label === "\\utilde" ? 0.12 : 0; // Generate the vlist, with the appropriate kerns

    var vlist = buildCommon.makeVList({
      positionType: "top",
      positionData: innerGroup.height,
      children: [{
        type: "elem",
        elem: accentBody,
        wrapperClasses: ["svg-align"]
      }, {
        type: "kern",
        size: kern
      }, {
        type: "elem",
        elem: innerGroup
      }]
    }, options);
    return buildCommon.makeSpan(["mord", "accentunder"], [vlist], options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var accentNode = stretchy.mathMLnode(group.label);
    var node = new mathMLTree.MathNode("munder", [buildMathML_buildGroup(group.base, options), accentNode]);
    node.setAttribute("accentunder", "true");
    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/arrow.js







// Helper function
var paddedNode = function paddedNode(group) {
  var node = new mathMLTree.MathNode("mpadded", group ? [group] : []);
  node.setAttribute("width", "+0.6em");
  node.setAttribute("lspace", "0.3em");
  return node;
}; // Stretchy arrows with an optional argument


defineFunction({
  type: "xArrow",
  names: ["\\xleftarrow", "\\xrightarrow", "\\xLeftarrow", "\\xRightarrow", "\\xleftrightarrow", "\\xLeftrightarrow", "\\xhookleftarrow", "\\xhookrightarrow", "\\xmapsto", "\\xrightharpoondown", "\\xrightharpoonup", "\\xleftharpoondown", "\\xleftharpoonup", "\\xrightleftharpoons", "\\xleftrightharpoons", "\\xlongequal", "\\xtwoheadrightarrow", "\\xtwoheadleftarrow", "\\xtofrom", // The next 3 functions are here to support the mhchem extension.
  // Direct use of these functions is discouraged and may break someday.
  "\\xrightleftarrows", "\\xrightequilibrium", "\\xleftequilibrium", // The next 3 functions are here only to support the {CD} environment.
  "\\\\cdrightarrow", "\\\\cdleftarrow", "\\\\cdlongequal"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1
  },
  handler: function handler(_ref, args, optArgs) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    return {
      type: "xArrow",
      mode: parser.mode,
      label: funcName,
      body: args[0],
      below: optArgs[0]
    };
  },
  // Flow is unable to correctly infer the type of `group`, even though it's
  // unamibiguously determined from the passed-in `type` above.
  htmlBuilder: function htmlBuilder(group, options) {
    var style = options.style; // Build the argument groups in the appropriate style.
    // Ref: amsmath.dtx:   \hbox{$\scriptstyle\mkern#3mu{#6}\mkern#4mu$}%
    // Some groups can return document fragments.  Handle those by wrapping
    // them in a span.

    var newOptions = options.havingStyle(style.sup());
    var upperGroup = buildCommon.wrapFragment(buildGroup(group.body, newOptions, options), options);
    var arrowPrefix = group.label.slice(0, 2) === "\\x" ? "x" : "cd";
    upperGroup.classes.push(arrowPrefix + "-arrow-pad");
    var lowerGroup;

    if (group.below) {
      // Build the lower group
      newOptions = options.havingStyle(style.sub());
      lowerGroup = buildCommon.wrapFragment(buildGroup(group.below, newOptions, options), options);
      lowerGroup.classes.push(arrowPrefix + "-arrow-pad");
    }

    var arrowBody = stretchy.svgSpan(group, options); // Re shift: Note that stretchy.svgSpan returned arrowBody.depth = 0.
    // The point we want on the math axis is at 0.5 * arrowBody.height.

    var arrowShift = -options.fontMetrics().axisHeight + 0.5 * arrowBody.height; // 2 mu kern. Ref: amsmath.dtx: #7\if0#2\else\mkern#2mu\fi

    var upperShift = -options.fontMetrics().axisHeight - 0.5 * arrowBody.height - 0.111; // 0.111 em = 2 mu

    if (upperGroup.depth > 0.25 || group.label === "\\xleftequilibrium") {
      upperShift -= upperGroup.depth; // shift up if depth encroaches
    } // Generate the vlist


    var vlist;

    if (lowerGroup) {
      var lowerShift = -options.fontMetrics().axisHeight + lowerGroup.height + 0.5 * arrowBody.height + 0.111;
      vlist = buildCommon.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: upperGroup,
          shift: upperShift
        }, {
          type: "elem",
          elem: arrowBody,
          shift: arrowShift
        }, {
          type: "elem",
          elem: lowerGroup,
          shift: lowerShift
        }]
      }, options);
    } else {
      vlist = buildCommon.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: upperGroup,
          shift: upperShift
        }, {
          type: "elem",
          elem: arrowBody,
          shift: arrowShift
        }]
      }, options);
    } // $FlowFixMe: Replace this with passing "svg-align" into makeVList.


    vlist.children[0].children[0].children[1].classes.push("svg-align");
    return buildCommon.makeSpan(["mrel", "x-arrow"], [vlist], options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var arrowNode = stretchy.mathMLnode(group.label);
    arrowNode.setAttribute("minsize", group.label.charAt(0) === "x" ? "1.75em" : "3.0em");
    var node;

    if (group.body) {
      var upperNode = paddedNode(buildMathML_buildGroup(group.body, options));

      if (group.below) {
        var lowerNode = paddedNode(buildMathML_buildGroup(group.below, options));
        node = new mathMLTree.MathNode("munderover", [arrowNode, lowerNode, upperNode]);
      } else {
        node = new mathMLTree.MathNode("mover", [arrowNode, upperNode]);
      }
    } else if (group.below) {
      var _lowerNode = paddedNode(buildMathML_buildGroup(group.below, options));

      node = new mathMLTree.MathNode("munder", [arrowNode, _lowerNode]);
    } else {
      // This should never happen.
      // Parser.js throws an error if there is no argument.
      node = paddedNode();
      node = new mathMLTree.MathNode("mover", [arrowNode, node]);
    }

    return node;
  }
});
;// CONCATENATED MODULE: ./src/environments/cd.js







var cdArrowFunctionName = {
  ">": "\\\\cdrightarrow",
  "<": "\\\\cdleftarrow",
  "=": "\\\\cdlongequal",
  "A": "\\uparrow",
  "V": "\\downarrow",
  "|": "\\Vert",
  ".": "no arrow"
};

var newCell = function newCell() {
  // Create an empty cell, to be filled below with parse nodes.
  // The parseTree from this module must be constructed like the
  // one created by parseArray(), so an empty CD cell must
  // be a ParseNode<"styling">. And CD is always displaystyle.
  // So these values are fixed and flow can do implicit typing.
  return {
    type: "styling",
    body: [],
    mode: "math",
    style: "display"
  };
};

var isStartOfArrow = function isStartOfArrow(node) {
  return node.type === "textord" && node.text === "@";
};

var isLabelEnd = function isLabelEnd(node, endChar) {
  return (node.type === "mathord" || node.type === "atom") && node.text === endChar;
};

function cdArrow(arrowChar, labels, parser) {
  // Return a parse tree of an arrow and its labels.
  // This acts in a way similar to a macro expansion.
  var funcName = cdArrowFunctionName[arrowChar];

  switch (funcName) {
    case "\\\\cdrightarrow":
    case "\\\\cdleftarrow":
      return parser.callFunction(funcName, [labels[0]], [labels[1]]);

    case "\\uparrow":
    case "\\downarrow":
      {
        var leftLabel = parser.callFunction("\\\\cdleft", [labels[0]], []);
        var bareArrow = {
          type: "atom",
          text: funcName,
          mode: "math",
          family: "rel"
        };
        var sizedArrow = parser.callFunction("\\Big", [bareArrow], []);
        var rightLabel = parser.callFunction("\\\\cdright", [labels[1]], []);
        var arrowGroup = {
          type: "ordgroup",
          mode: "math",
          body: [leftLabel, sizedArrow, rightLabel]
        };
        return parser.callFunction("\\\\cdparent", [arrowGroup], []);
      }

    case "\\\\cdlongequal":
      return parser.callFunction("\\\\cdlongequal", [], []);

    case "\\Vert":
      {
        var arrow = {
          type: "textord",
          text: "\\Vert",
          mode: "math"
        };
        return parser.callFunction("\\Big", [arrow], []);
      }

    default:
      return {
        type: "textord",
        text: " ",
        mode: "math"
      };
  }
}

function parseCD(parser) {
  // Get the array's parse nodes with \\ temporarily mapped to \cr.
  var parsedRows = [];
  parser.gullet.beginGroup();
  parser.gullet.macros.set("\\cr", "\\\\\\relax");
  parser.gullet.beginGroup();

  while (true) {
    // eslint-disable-line no-constant-condition
    // Get the parse nodes for the next row.
    parsedRows.push(parser.parseExpression(false, "\\\\"));
    parser.gullet.endGroup();
    parser.gullet.beginGroup();
    var next = parser.fetch().text;

    if (next === "&" || next === "\\\\") {
      parser.consume();
    } else if (next === "\\end") {
      if (parsedRows[parsedRows.length - 1].length === 0) {
        parsedRows.pop(); // final row ended in \\
      }

      break;
    } else {
      throw new src_ParseError("Expected \\\\ or \\cr or \\end", parser.nextToken);
    }
  }

  var row = [];
  var body = [row]; // Loop thru the parse nodes. Collect them into cells and arrows.

  for (var i = 0; i < parsedRows.length; i++) {
    // Start a new row.
    var rowNodes = parsedRows[i]; // Create the first cell.

    var cell = newCell();

    for (var j = 0; j < rowNodes.length; j++) {
      if (!isStartOfArrow(rowNodes[j])) {
        // If a parseNode is not an arrow, it goes into a cell.
        cell.body.push(rowNodes[j]);
      } else {
        // Parse node j is an "@", the start of an arrow.
        // Before starting on the arrow, push the cell into `row`.
        row.push(cell); // Now collect parseNodes into an arrow.
        // The character after "@" defines the arrow type.

        j += 1;
        var arrowChar = assertSymbolNodeType(rowNodes[j]).text; // Create two empty label nodes. We may or may not use them.

        var labels = new Array(2);
        labels[0] = {
          type: "ordgroup",
          mode: "math",
          body: []
        };
        labels[1] = {
          type: "ordgroup",
          mode: "math",
          body: []
        }; // Process the arrow.

        if ("=|.".indexOf(arrowChar) > -1) {// Three "arrows", ``@=`, `@|`, and `@.`, do not take labels.
          // Do nothing here.
        } else if ("<>AV".indexOf(arrowChar) > -1) {
          // Four arrows, `@>>>`, `@<<<`, `@AAA`, and `@VVV`, each take
          // two optional labels. E.g. the right-point arrow syntax is
          // really:  @>{optional label}>{optional label}>
          // Collect parseNodes into labels.
          for (var labelNum = 0; labelNum < 2; labelNum++) {
            var inLabel = true;

            for (var k = j + 1; k < rowNodes.length; k++) {
              if (isLabelEnd(rowNodes[k], arrowChar)) {
                inLabel = false;
                j = k;
                break;
              }

              if (isStartOfArrow(rowNodes[k])) {
                throw new src_ParseError("Missing a " + arrowChar + " character to complete a CD arrow.", rowNodes[k]);
              }

              labels[labelNum].body.push(rowNodes[k]);
            }

            if (inLabel) {
              // isLabelEnd never returned a true.
              throw new src_ParseError("Missing a " + arrowChar + " character to complete a CD arrow.", rowNodes[j]);
            }
          }
        } else {
          throw new src_ParseError("Expected one of \"<>AV=|.\" after @", rowNodes[j]);
        } // Now join the arrow to its labels.


        var arrow = cdArrow(arrowChar, labels, parser); // Wrap the arrow in  ParseNode<"styling">.
        // This is done to match parseArray() behavior.

        var wrappedArrow = {
          type: "styling",
          body: [arrow],
          mode: "math",
          style: "display" // CD is always displaystyle.

        };
        row.push(wrappedArrow); // In CD's syntax, cells are implicit. That is, everything that
        // is not an arrow gets collected into a cell. So create an empty
        // cell now. It will collect upcoming parseNodes.

        cell = newCell();
      }
    }

    if (i % 2 === 0) {
      // Even-numbered rows consist of: cell, arrow, cell, arrow, ... cell
      // The last cell is not yet pushed into `row`, so:
      row.push(cell);
    } else {
      // Odd-numbered rows consist of: vert arrow, empty cell, ... vert arrow
      // Remove the empty cell that was placed at the beginning of `row`.
      row.shift();
    }

    row = [];
    body.push(row);
  } // End row group


  parser.gullet.endGroup(); // End array group defining \\

  parser.gullet.endGroup(); // define column separation.

  var cols = new Array(body[0].length).fill({
    type: "align",
    align: "c",
    pregap: 0.25,
    // CD package sets \enskip between columns.
    postgap: 0.25 // So pre and post each get half an \enskip, i.e. 0.25em.

  });
  return {
    type: "array",
    mode: "math",
    body: body,
    arraystretch: 1,
    addJot: true,
    rowGaps: [null],
    cols: cols,
    colSeparationType: "CD",
    hLinesBeforeRow: new Array(body.length + 1).fill([])
  };
} // The functions below are not available for general use.
// They are here only for internal use by the {CD} environment in placing labels
// next to vertical arrows.
// We don't need any such functions for horizontal arrows because we can reuse
// the functionality that already exists for extensible arrows.

defineFunction({
  type: "cdlabel",
  names: ["\\\\cdleft", "\\\\cdright"],
  props: {
    numArgs: 1
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    return {
      type: "cdlabel",
      mode: parser.mode,
      side: funcName.slice(4),
      label: args[0]
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var newOptions = options.havingStyle(options.style.sup());
    var label = buildCommon.wrapFragment(buildGroup(group.label, newOptions, options), options);
    label.classes.push("cd-label-" + group.side);
    label.style.bottom = 0.8 - label.depth + "em"; // Zero out label height & depth, so vertical align of arrow is set
    // by the arrow height, not by the label.

    label.height = 0;
    label.depth = 0;
    return label;
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var label = new mathMLTree.MathNode("mrow", [buildMathML_buildGroup(group.label, options)]);
    label = new mathMLTree.MathNode("mpadded", [label]);
    label.setAttribute("width", "0");

    if (group.side === "left") {
      label.setAttribute("lspace", "-1width");
    } // We have to guess at vertical alignment. We know the arrow is 1.8em tall,
    // But we don't know the height or depth of the label.


    label.setAttribute("voffset", "0.7em");
    label = new mathMLTree.MathNode("mstyle", [label]);
    label.setAttribute("displaystyle", "false");
    label.setAttribute("scriptlevel", "1");
    return label;
  }
});
defineFunction({
  type: "cdlabelparent",
  names: ["\\\\cdparent"],
  props: {
    numArgs: 1
  },
  handler: function handler(_ref2, args) {
    var parser = _ref2.parser;
    return {
      type: "cdlabelparent",
      mode: parser.mode,
      fragment: args[0]
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    // Wrap the vertical arrow and its labels.
    // The parent gets position: relative. The child gets position: absolute.
    // So CSS can locate the label correctly.
    var parent = buildCommon.wrapFragment(buildGroup(group.fragment, options), options);
    parent.classes.push("cd-vert-arrow");
    return parent;
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    return new mathMLTree.MathNode("mrow", [buildMathML_buildGroup(group.fragment, options)]);
  }
});
;// CONCATENATED MODULE: ./src/functions/char.js


 // \@char is an internal function that takes a grouped decimal argument like
// {123} and converts into symbol with code 123.  It is used by the *macro*
// \char defined in macros.js.

defineFunction({
  type: "textord",
  names: ["\\@char"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    var arg = assertNodeType(args[0], "ordgroup");
    var group = arg.body;
    var number = "";

    for (var i = 0; i < group.length; i++) {
      var node = assertNodeType(group[i], "textord");
      number += node.text;
    }

    var code = parseInt(number);

    if (isNaN(code)) {
      throw new src_ParseError("\\@char has non-numeric argument " + number);
    }

    return {
      type: "textord",
      mode: parser.mode,
      text: String.fromCharCode(code)
    };
  }
});
;// CONCATENATED MODULE: ./src/functions/color.js







var color_htmlBuilder = function htmlBuilder(group, options) {
  var elements = buildExpression(group.body, options.withColor(group.color), false); // \color isn't supposed to affect the type of the elements it contains.
  // To accomplish this, we wrap the results in a fragment, so the inner
  // elements will be able to directly interact with their neighbors. For
  // example, `\color{red}{2 +} 3` has the same spacing as `2 + 3`

  return buildCommon.makeFragment(elements);
};

var color_mathmlBuilder = function mathmlBuilder(group, options) {
  var inner = buildMathML_buildExpression(group.body, options.withColor(group.color));
  var node = new mathMLTree.MathNode("mstyle", inner);
  node.setAttribute("mathcolor", group.color);
  return node;
};

defineFunction({
  type: "color",
  names: ["\\textcolor"],
  props: {
    numArgs: 2,
    allowedInText: true,
    argTypes: ["color", "original"]
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    var color = assertNodeType(args[0], "color-token").color;
    var body = args[1];
    return {
      type: "color",
      mode: parser.mode,
      color: color,
      body: ordargument(body)
    };
  },
  htmlBuilder: color_htmlBuilder,
  mathmlBuilder: color_mathmlBuilder
});
defineFunction({
  type: "color",
  names: ["\\color"],
  props: {
    numArgs: 1,
    allowedInText: true,
    argTypes: ["color"]
  },
  handler: function handler(_ref2, args) {
    var parser = _ref2.parser,
        breakOnTokenText = _ref2.breakOnTokenText;
    var color = assertNodeType(args[0], "color-token").color; // Set macro \current@color in current namespace to store the current
    // color, mimicking the behavior of color.sty.
    // This is currently used just to correctly color a \right
    // that follows a \color command.

    parser.gullet.macros.set("\\current@color", color); // Parse out the implicit body that should be colored.

    var body = parser.parseExpression(true, breakOnTokenText);
    return {
      type: "color",
      mode: parser.mode,
      color: color,
      body: body
    };
  },
  htmlBuilder: color_htmlBuilder,
  mathmlBuilder: color_mathmlBuilder
});
;// CONCATENATED MODULE: ./src/functions/cr.js
// Row breaks within tabular environments, and line breaks at top level




 // \DeclareRobustCommand\\{...\@xnewline}

defineFunction({
  type: "cr",
  names: ["\\\\"],
  props: {
    numArgs: 0,
    numOptionalArgs: 1,
    argTypes: ["size"],
    allowedInText: true
  },
  handler: function handler(_ref, args, optArgs) {
    var parser = _ref.parser;
    var size = optArgs[0];
    var newLine = !parser.settings.displayMode || !parser.settings.useStrictBehavior("newLineInDisplayMode", "In LaTeX, \\\\ or \\newline " + "does nothing in display mode");
    return {
      type: "cr",
      mode: parser.mode,
      newLine: newLine,
      size: size && assertNodeType(size, "size").value
    };
  },
  // The following builders are called only at the top level,
  // not within tabular/array environments.
  htmlBuilder: function htmlBuilder(group, options) {
    var span = buildCommon.makeSpan(["mspace"], [], options);

    if (group.newLine) {
      span.classes.push("newline");

      if (group.size) {
        span.style.marginTop = calculateSize(group.size, options) + "em";
      }
    }

    return span;
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var node = new mathMLTree.MathNode("mspace");

    if (group.newLine) {
      node.setAttribute("linebreak", "newline");

      if (group.size) {
        node.setAttribute("height", calculateSize(group.size, options) + "em");
      }
    }

    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/def.js



var globalMap = {
  "\\global": "\\global",
  "\\long": "\\\\globallong",
  "\\\\globallong": "\\\\globallong",
  "\\def": "\\gdef",
  "\\gdef": "\\gdef",
  "\\edef": "\\xdef",
  "\\xdef": "\\xdef",
  "\\let": "\\\\globallet",
  "\\futurelet": "\\\\globalfuture"
};

var checkControlSequence = function checkControlSequence(tok) {
  var name = tok.text;

  if (/^(?:[\\{}$&#^_]|EOF)$/.test(name)) {
    throw new src_ParseError("Expected a control sequence", tok);
  }

  return name;
};

var getRHS = function getRHS(parser) {
  var tok = parser.gullet.popToken();

  if (tok.text === "=") {
    // consume optional equals
    tok = parser.gullet.popToken();

    if (tok.text === " ") {
      // consume one optional space
      tok = parser.gullet.popToken();
    }
  }

  return tok;
};

var letCommand = function letCommand(parser, name, tok, global) {
  var macro = parser.gullet.macros.get(tok.text);

  if (macro == null) {
    // don't expand it later even if a macro with the same name is defined
    // e.g., \let\foo=\frac \def\frac{\relax} \frac12
    tok.noexpand = true;
    macro = {
      tokens: [tok],
      numArgs: 0,
      // reproduce the same behavior in expansion
      unexpandable: !parser.gullet.isExpandable(tok.text)
    };
  }

  parser.gullet.macros.set(name, macro, global);
}; // <assignment> -> <non-macro assignment>|<macro assignment>
// <non-macro assignment> -> <simple assignment>|\global<non-macro assignment>
// <macro assignment> -> <definition>|<prefix><macro assignment>
// <prefix> -> \global|\long|\outer


defineFunction({
  type: "internal",
  names: ["\\global", "\\long", "\\\\globallong" // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler: function handler(_ref) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    parser.consumeSpaces();
    var token = parser.fetch();

    if (globalMap[token.text]) {
      // KaTeX doesn't have \par, so ignore \long
      if (funcName === "\\global" || funcName === "\\\\globallong") {
        token.text = globalMap[token.text];
      }

      return assertNodeType(parser.parseFunction(), "internal");
    }

    throw new src_ParseError("Invalid token after macro prefix", token);
  }
}); // Basic support for macro definitions: \def, \gdef, \edef, \xdef
// <definition> -> <def><control sequence><definition text>
// <def> -> \def|\gdef|\edef|\xdef
// <definition text> -> <parameter text><left brace><balanced text><right brace>

defineFunction({
  type: "internal",
  names: ["\\def", "\\gdef", "\\edef", "\\xdef"],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler: function handler(_ref2) {
    var parser = _ref2.parser,
        funcName = _ref2.funcName;
    var tok = parser.gullet.popToken();
    var name = tok.text;

    if (/^(?:[\\{}$&#^_]|EOF)$/.test(name)) {
      throw new src_ParseError("Expected a control sequence", tok);
    }

    var numArgs = 0;
    var insert;
    var delimiters = [[]]; // <parameter text> contains no braces

    while (parser.gullet.future().text !== "{") {
      tok = parser.gullet.popToken();

      if (tok.text === "#") {
        // If the very last character of the <parameter text> is #, so that
        // this # is immediately followed by {, TeX will behave as if the {
        // had been inserted at the right end of both the parameter text
        // and the replacement text.
        if (parser.gullet.future().text === "{") {
          insert = parser.gullet.future();
          delimiters[numArgs].push("{");
          break;
        } // A parameter, the first appearance of # must be followed by 1,
        // the next by 2, and so on; up to nine #’s are allowed


        tok = parser.gullet.popToken();

        if (!/^[1-9]$/.test(tok.text)) {
          throw new src_ParseError("Invalid argument number \"" + tok.text + "\"");
        }

        if (parseInt(tok.text) !== numArgs + 1) {
          throw new src_ParseError("Argument number \"" + tok.text + "\" out of order");
        }

        numArgs++;
        delimiters.push([]);
      } else if (tok.text === "EOF") {
        throw new src_ParseError("Expected a macro definition");
      } else {
        delimiters[numArgs].push(tok.text);
      }
    } // replacement text, enclosed in '{' and '}' and properly nested


    var _parser$gullet$consum = parser.gullet.consumeArg(),
        tokens = _parser$gullet$consum.tokens;

    if (insert) {
      tokens.unshift(insert);
    }

    if (funcName === "\\edef" || funcName === "\\xdef") {
      tokens = parser.gullet.expandTokens(tokens);
      tokens.reverse(); // to fit in with stack order
    } // Final arg is the expansion of the macro


    parser.gullet.macros.set(name, {
      tokens: tokens,
      numArgs: numArgs,
      delimiters: delimiters
    }, funcName === globalMap[funcName]);
    return {
      type: "internal",
      mode: parser.mode
    };
  }
}); // <simple assignment> -> <let assignment>
// <let assignment> -> \futurelet<control sequence><token><token>
//     | \let<control sequence><equals><one optional space><token>
// <equals> -> <optional spaces>|<optional spaces>=

defineFunction({
  type: "internal",
  names: ["\\let", "\\\\globallet" // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler: function handler(_ref3) {
    var parser = _ref3.parser,
        funcName = _ref3.funcName;
    var name = checkControlSequence(parser.gullet.popToken());
    parser.gullet.consumeSpaces();
    var tok = getRHS(parser);
    letCommand(parser, name, tok, funcName === "\\\\globallet");
    return {
      type: "internal",
      mode: parser.mode
    };
  }
}); // ref: https://www.tug.org/TUGboat/tb09-3/tb22bechtolsheim.pdf

defineFunction({
  type: "internal",
  names: ["\\futurelet", "\\\\globalfuture" // can’t be entered directly
  ],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler: function handler(_ref4) {
    var parser = _ref4.parser,
        funcName = _ref4.funcName;
    var name = checkControlSequence(parser.gullet.popToken());
    var middle = parser.gullet.popToken();
    var tok = parser.gullet.popToken();
    letCommand(parser, name, tok, funcName === "\\\\globalfuture");
    parser.gullet.pushToken(tok);
    parser.gullet.pushToken(middle);
    return {
      type: "internal",
      mode: parser.mode
    };
  }
});
;// CONCATENATED MODULE: ./src/delimiter.js
/**
 * This file deals with creating delimiters of various sizes. The TeXbook
 * discusses these routines on page 441-442, in the "Another subroutine sets box
 * x to a specified variable delimiter" paragraph.
 *
 * There are three main routines here. `makeSmallDelim` makes a delimiter in the
 * normal font, but in either text, script, or scriptscript style.
 * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,
 * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of
 * smaller pieces that are stacked on top of one another.
 *
 * The functions take a parameter `center`, which determines if the delimiter
 * should be centered around the axis.
 *
 * Then, there are three exposed functions. `sizedDelim` makes a delimiter in
 * one of the given sizes. This is used for things like `\bigl`.
 * `customSizedDelim` makes a delimiter with a given total height+depth. It is
 * called in places like `\sqrt`. `leftRightDelim` makes an appropriate
 * delimiter which surrounds an expression of a given height an depth. It is
 * used in `\left` and `\right`.
 */










/**
 * Get the metrics for a given symbol and font, after transformation (i.e.
 * after following replacement from symbols.js)
 */
var getMetrics = function getMetrics(symbol, font, mode) {
  var replace = src_symbols.math[symbol] && src_symbols.math[symbol].replace;
  var metrics = getCharacterMetrics(replace || symbol, font, mode);

  if (!metrics) {
    throw new Error("Unsupported symbol " + symbol + " and font size " + font + ".");
  }

  return metrics;
};
/**
 * Puts a delimiter span in a given style, and adds appropriate height, depth,
 * and maxFontSizes.
 */


var styleWrap = function styleWrap(delim, toStyle, options, classes) {
  var newOptions = options.havingBaseStyle(toStyle);
  var span = buildCommon.makeSpan(classes.concat(newOptions.sizingClasses(options)), [delim], options);
  var delimSizeMultiplier = newOptions.sizeMultiplier / options.sizeMultiplier;
  span.height *= delimSizeMultiplier;
  span.depth *= delimSizeMultiplier;
  span.maxFontSize = newOptions.sizeMultiplier;
  return span;
};

var centerSpan = function centerSpan(span, options, style) {
  var newOptions = options.havingBaseStyle(style);
  var shift = (1 - options.sizeMultiplier / newOptions.sizeMultiplier) * options.fontMetrics().axisHeight;
  span.classes.push("delimcenter");
  span.style.top = shift + "em";
  span.height -= shift;
  span.depth += shift;
};
/**
 * Makes a small delimiter. This is a delimiter that comes in the Main-Regular
 * font, but is restyled to either be in textstyle, scriptstyle, or
 * scriptscriptstyle.
 */


var makeSmallDelim = function makeSmallDelim(delim, style, center, options, mode, classes) {
  var text = buildCommon.makeSymbol(delim, "Main-Regular", mode, options);
  var span = styleWrap(text, style, options, classes);

  if (center) {
    centerSpan(span, options, style);
  }

  return span;
};
/**
 * Builds a symbol in the given font size (note size is an integer)
 */


var mathrmSize = function mathrmSize(value, size, mode, options) {
  return buildCommon.makeSymbol(value, "Size" + size + "-Regular", mode, options);
};
/**
 * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,
 * Size3, or Size4 fonts. It is always rendered in textstyle.
 */


var makeLargeDelim = function makeLargeDelim(delim, size, center, options, mode, classes) {
  var inner = mathrmSize(delim, size, mode, options);
  var span = styleWrap(buildCommon.makeSpan(["delimsizing", "size" + size], [inner], options), src_Style.TEXT, options, classes);

  if (center) {
    centerSpan(span, options, src_Style.TEXT);
  }

  return span;
};
/**
 * Make a span from a font glyph with the given offset and in the given font.
 * This is used in makeStackedDelim to make the stacking pieces for the delimiter.
 */


var makeGlyphSpan = function makeGlyphSpan(symbol, font, mode) {
  var sizeClass; // Apply the correct CSS class to choose the right font.

  if (font === "Size1-Regular") {
    sizeClass = "delim-size1";
  } else
    /* if (font === "Size4-Regular") */
    {
      sizeClass = "delim-size4";
    }

  var corner = buildCommon.makeSpan(["delimsizinginner", sizeClass], [buildCommon.makeSpan([], [buildCommon.makeSymbol(symbol, font, mode)])]); // Since this will be passed into `makeVList` in the end, wrap the element
  // in the appropriate tag that VList uses.

  return {
    type: "elem",
    elem: corner
  };
};

var makeInner = function makeInner(ch, height, options) {
  // Create a span with inline SVG for the inner part of a tall stacked delimiter.
  var width = fontMetricsData["Size4-Regular"][ch.charCodeAt(0)] ? fontMetricsData["Size4-Regular"][ch.charCodeAt(0)][4].toFixed(3) : fontMetricsData["Size1-Regular"][ch.charCodeAt(0)][4].toFixed(3);
  var path = new PathNode("inner", innerPath(ch, Math.round(1000 * height)));
  var svgNode = new SvgNode([path], {
    "width": width + "em",
    "height": height + "em",
    // Override CSS rule `.katex svg { width: 100% }`
    "style": "width:" + width + "em",
    "viewBox": "0 0 " + 1000 * width + " " + Math.round(1000 * height),
    "preserveAspectRatio": "xMinYMin"
  });
  var span = buildCommon.makeSvgSpan([], [svgNode], options);
  span.height = height;
  span.style.height = height + "em";
  span.style.width = width + "em";
  return {
    type: "elem",
    elem: span
  };
}; // Helpers for makeStackedDelim


var lapInEms = 0.008;
var lap = {
  type: "kern",
  size: -1 * lapInEms
};
var verts = ["|", "\\lvert", "\\rvert", "\\vert"];
var doubleVerts = ["\\|", "\\lVert", "\\rVert", "\\Vert"];
/**
 * Make a stacked delimiter out of a given delimiter, with the total height at
 * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.
 */

var makeStackedDelim = function makeStackedDelim(delim, heightTotal, center, options, mode, classes) {
  // There are four parts, the top, an optional middle, a repeated part, and a
  // bottom.
  var top;
  var middle;
  var repeat;
  var bottom;
  top = repeat = bottom = delim;
  middle = null; // Also keep track of what font the delimiters are in

  var font = "Size1-Regular"; // We set the parts and font based on the symbol. Note that we use
  // '\u23d0' instead of '|' and '\u2016' instead of '\\|' for the
  // repeats of the arrows

  if (delim === "\\uparrow") {
    repeat = bottom = "\u23D0";
  } else if (delim === "\\Uparrow") {
    repeat = bottom = "\u2016";
  } else if (delim === "\\downarrow") {
    top = repeat = "\u23D0";
  } else if (delim === "\\Downarrow") {
    top = repeat = "\u2016";
  } else if (delim === "\\updownarrow") {
    top = "\\uparrow";
    repeat = "\u23D0";
    bottom = "\\downarrow";
  } else if (delim === "\\Updownarrow") {
    top = "\\Uparrow";
    repeat = "\u2016";
    bottom = "\\Downarrow";
  } else if (utils.contains(verts, delim)) {
    repeat = "\u2223";
  } else if (utils.contains(doubleVerts, delim)) {
    repeat = "\u2225";
  } else if (delim === "[" || delim === "\\lbrack") {
    top = "\u23A1";
    repeat = "\u23A2";
    bottom = "\u23A3";
    font = "Size4-Regular";
  } else if (delim === "]" || delim === "\\rbrack") {
    top = "\u23A4";
    repeat = "\u23A5";
    bottom = "\u23A6";
    font = "Size4-Regular";
  } else if (delim === "\\lfloor" || delim === "\u230A") {
    repeat = top = "\u23A2";
    bottom = "\u23A3";
    font = "Size4-Regular";
  } else if (delim === "\\lceil" || delim === "\u2308") {
    top = "\u23A1";
    repeat = bottom = "\u23A2";
    font = "Size4-Regular";
  } else if (delim === "\\rfloor" || delim === "\u230B") {
    repeat = top = "\u23A5";
    bottom = "\u23A6";
    font = "Size4-Regular";
  } else if (delim === "\\rceil" || delim === "\u2309") {
    top = "\u23A4";
    repeat = bottom = "\u23A5";
    font = "Size4-Regular";
  } else if (delim === "(" || delim === "\\lparen") {
    top = "\u239B";
    repeat = "\u239C";
    bottom = "\u239D";
    font = "Size4-Regular";
  } else if (delim === ")" || delim === "\\rparen") {
    top = "\u239E";
    repeat = "\u239F";
    bottom = "\u23A0";
    font = "Size4-Regular";
  } else if (delim === "\\{" || delim === "\\lbrace") {
    top = "\u23A7";
    middle = "\u23A8";
    bottom = "\u23A9";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } else if (delim === "\\}" || delim === "\\rbrace") {
    top = "\u23AB";
    middle = "\u23AC";
    bottom = "\u23AD";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } else if (delim === "\\lgroup" || delim === "\u27EE") {
    top = "\u23A7";
    bottom = "\u23A9";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } else if (delim === "\\rgroup" || delim === "\u27EF") {
    top = "\u23AB";
    bottom = "\u23AD";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } else if (delim === "\\lmoustache" || delim === "\u23B0") {
    top = "\u23A7";
    bottom = "\u23AD";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } else if (delim === "\\rmoustache" || delim === "\u23B1") {
    top = "\u23AB";
    bottom = "\u23A9";
    repeat = "\u23AA";
    font = "Size4-Regular";
  } // Get the metrics of the four sections


  var topMetrics = getMetrics(top, font, mode);
  var topHeightTotal = topMetrics.height + topMetrics.depth;
  var repeatMetrics = getMetrics(repeat, font, mode);
  var repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;
  var bottomMetrics = getMetrics(bottom, font, mode);
  var bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;
  var middleHeightTotal = 0;
  var middleFactor = 1;

  if (middle !== null) {
    var middleMetrics = getMetrics(middle, font, mode);
    middleHeightTotal = middleMetrics.height + middleMetrics.depth;
    middleFactor = 2; // repeat symmetrically above and below middle
  } // Calcuate the minimal height that the delimiter can have.
  // It is at least the size of the top, bottom, and optional middle combined.


  var minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal; // Compute the number of copies of the repeat symbol we will need

  var repeatCount = Math.max(0, Math.ceil((heightTotal - minHeight) / (middleFactor * repeatHeightTotal))); // Compute the total height of the delimiter including all the symbols

  var realHeightTotal = minHeight + repeatCount * middleFactor * repeatHeightTotal; // The center of the delimiter is placed at the center of the axis. Note
  // that in this context, "center" means that the delimiter should be
  // centered around the axis in the current style, while normally it is
  // centered around the axis in textstyle.

  var axisHeight = options.fontMetrics().axisHeight;

  if (center) {
    axisHeight *= options.sizeMultiplier;
  } // Calculate the depth


  var depth = realHeightTotal / 2 - axisHeight; // Now, we start building the pieces that will go into the vlist
  // Keep a list of the pieces of the stacked delimiter

  var stack = []; // Add the bottom symbol

  stack.push(makeGlyphSpan(bottom, font, mode));
  stack.push(lap); // overlap

  if (middle === null) {
    // The middle section will be an SVG. Make it an extra 0.016em tall.
    // We'll overlap by 0.008em at top and bottom.
    var innerHeight = realHeightTotal - topHeightTotal - bottomHeightTotal + 2 * lapInEms;
    stack.push(makeInner(repeat, innerHeight, options));
  } else {
    // When there is a middle bit, we need the middle part and two repeated
    // sections
    var _innerHeight = (realHeightTotal - topHeightTotal - bottomHeightTotal - middleHeightTotal) / 2 + 2 * lapInEms;

    stack.push(makeInner(repeat, _innerHeight, options)); // Now insert the middle of the brace.

    stack.push(lap);
    stack.push(makeGlyphSpan(middle, font, mode));
    stack.push(lap);
    stack.push(makeInner(repeat, _innerHeight, options));
  } // Add the top symbol


  stack.push(lap);
  stack.push(makeGlyphSpan(top, font, mode)); // Finally, build the vlist

  var newOptions = options.havingBaseStyle(src_Style.TEXT);
  var inner = buildCommon.makeVList({
    positionType: "bottom",
    positionData: depth,
    children: stack
  }, newOptions);
  return styleWrap(buildCommon.makeSpan(["delimsizing", "mult"], [inner], newOptions), src_Style.TEXT, options, classes);
}; // All surds have 0.08em padding above the viniculum inside the SVG.
// That keeps browser span height rounding error from pinching the line.


var vbPad = 80; // padding above the surd, measured inside the viewBox.

var emPad = 0.08; // padding, in ems, measured in the document.

var sqrtSvg = function sqrtSvg(sqrtName, height, viewBoxHeight, extraViniculum, options) {
  var path = sqrtPath(sqrtName, extraViniculum, viewBoxHeight);
  var pathNode = new PathNode(sqrtName, path);
  var svg = new SvgNode([pathNode], {
    // Note: 1000:1 ratio of viewBox to document em width.
    "width": "400em",
    "height": height + "em",
    "viewBox": "0 0 400000 " + viewBoxHeight,
    "preserveAspectRatio": "xMinYMin slice"
  });
  return buildCommon.makeSvgSpan(["hide-tail"], [svg], options);
};
/**
 * Make a sqrt image of the given height,
 */


var makeSqrtImage = function makeSqrtImage(height, options) {
  // Define a newOptions that removes the effect of size changes such as \Huge.
  // We don't pick different a height surd for \Huge. For it, we scale up.
  var newOptions = options.havingBaseSizing(); // Pick the desired surd glyph from a sequence of surds.

  var delim = traverseSequence("\\surd", height * newOptions.sizeMultiplier, stackLargeDelimiterSequence, newOptions);
  var sizeMultiplier = newOptions.sizeMultiplier; // default
  // The standard sqrt SVGs each have a 0.04em thick viniculum.
  // If Settings.minRuleThickness is larger than that, we add extraViniculum.

  var extraViniculum = Math.max(0, options.minRuleThickness - options.fontMetrics().sqrtRuleThickness); // Create a span containing an SVG image of a sqrt symbol.

  var span;
  var spanHeight = 0;
  var texHeight = 0;
  var viewBoxHeight = 0;
  var advanceWidth; // We create viewBoxes with 80 units of "padding" above each surd.
  // Then browser rounding error on the parent span height will not
  // encroach on the ink of the viniculum. But that padding is not
  // included in the TeX-like `height` used for calculation of
  // vertical alignment. So texHeight = span.height < span.style.height.

  if (delim.type === "small") {
    // Get an SVG that is derived from glyph U+221A in font KaTeX-Main.
    // 1000 unit normal glyph height.
    viewBoxHeight = 1000 + 1000 * extraViniculum + vbPad;

    if (height < 1.0) {
      sizeMultiplier = 1.0; // mimic a \textfont radical
    } else if (height < 1.4) {
      sizeMultiplier = 0.7; // mimic a \scriptfont radical
    }

    spanHeight = (1.0 + extraViniculum + emPad) / sizeMultiplier;
    texHeight = (1.00 + extraViniculum) / sizeMultiplier;
    span = sqrtSvg("sqrtMain", spanHeight, viewBoxHeight, extraViniculum, options);
    span.style.minWidth = "0.853em";
    advanceWidth = 0.833 / sizeMultiplier; // from the font.
  } else if (delim.type === "large") {
    // These SVGs come from fonts: KaTeX_Size1, _Size2, etc.
    viewBoxHeight = (1000 + vbPad) * sizeToMaxHeight[delim.size];
    texHeight = (sizeToMaxHeight[delim.size] + extraViniculum) / sizeMultiplier;
    spanHeight = (sizeToMaxHeight[delim.size] + extraViniculum + emPad) / sizeMultiplier;
    span = sqrtSvg("sqrtSize" + delim.size, spanHeight, viewBoxHeight, extraViniculum, options);
    span.style.minWidth = "1.02em";
    advanceWidth = 1.0 / sizeMultiplier; // 1.0 from the font.
  } else {
    // Tall sqrt. In TeX, this would be stacked using multiple glyphs.
    // We'll use a single SVG to accomplish the same thing.
    spanHeight = height + extraViniculum + emPad;
    texHeight = height + extraViniculum;
    viewBoxHeight = Math.floor(1000 * height + extraViniculum) + vbPad;
    span = sqrtSvg("sqrtTall", spanHeight, viewBoxHeight, extraViniculum, options);
    span.style.minWidth = "0.742em";
    advanceWidth = 1.056;
  }

  span.height = texHeight;
  span.style.height = spanHeight + "em";
  return {
    span: span,
    advanceWidth: advanceWidth,
    // Calculate the actual line width.
    // This actually should depend on the chosen font -- e.g. \boldmath
    // should use the thicker surd symbols from e.g. KaTeX_Main-Bold, and
    // have thicker rules.
    ruleWidth: (options.fontMetrics().sqrtRuleThickness + extraViniculum) * sizeMultiplier
  };
}; // There are three kinds of delimiters, delimiters that stack when they become
// too large


var stackLargeDelimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\u230A", "\u230B", "\\lceil", "\\rceil", "\u2308", "\u2309", "\\surd"]; // delimiters that always stack

var stackAlwaysDelimiters = ["\\uparrow", "\\downarrow", "\\updownarrow", "\\Uparrow", "\\Downarrow", "\\Updownarrow", "|", "\\|", "\\vert", "\\Vert", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\u27EE", "\u27EF", "\\lmoustache", "\\rmoustache", "\u23B0", "\u23B1"]; // and delimiters that never stack

var stackNeverDelimiters = ["<", ">", "\\langle", "\\rangle", "/", "\\backslash", "\\lt", "\\gt"]; // Metrics of the different sizes. Found by looking at TeX's output of
// $\bigl| // \Bigl| \biggl| \Biggl| \showlists$
// Used to create stacked delimiters of appropriate sizes in makeSizedDelim.

var sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3.0];
/**
 * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.
 */

var makeSizedDelim = function makeSizedDelim(delim, size, options, mode, classes) {
  // < and > turn into \langle and \rangle in delimiters
  if (delim === "<" || delim === "\\lt" || delim === "\u27E8") {
    delim = "\\langle";
  } else if (delim === ">" || delim === "\\gt" || delim === "\u27E9") {
    delim = "\\rangle";
  } // Sized delimiters are never centered.


  if (utils.contains(stackLargeDelimiters, delim) || utils.contains(stackNeverDelimiters, delim)) {
    return makeLargeDelim(delim, size, false, options, mode, classes);
  } else if (utils.contains(stackAlwaysDelimiters, delim)) {
    return makeStackedDelim(delim, sizeToMaxHeight[size], false, options, mode, classes);
  } else {
    throw new src_ParseError("Illegal delimiter: '" + delim + "'");
  }
};
/**
 * There are three different sequences of delimiter sizes that the delimiters
 * follow depending on the kind of delimiter. This is used when creating custom
 * sized delimiters to decide whether to create a small, large, or stacked
 * delimiter.
 *
 * In real TeX, these sequences aren't explicitly defined, but are instead
 * defined inside the font metrics. Since there are only three sequences that
 * are possible for the delimiters that TeX defines, it is easier to just encode
 * them explicitly here.
 */


// Delimiters that never stack try small delimiters and large delimiters only
var stackNeverDelimiterSequence = [{
  type: "small",
  style: src_Style.SCRIPTSCRIPT
}, {
  type: "small",
  style: src_Style.SCRIPT
}, {
  type: "small",
  style: src_Style.TEXT
}, {
  type: "large",
  size: 1
}, {
  type: "large",
  size: 2
}, {
  type: "large",
  size: 3
}, {
  type: "large",
  size: 4
}]; // Delimiters that always stack try the small delimiters first, then stack

var stackAlwaysDelimiterSequence = [{
  type: "small",
  style: src_Style.SCRIPTSCRIPT
}, {
  type: "small",
  style: src_Style.SCRIPT
}, {
  type: "small",
  style: src_Style.TEXT
}, {
  type: "stack"
}]; // Delimiters that stack when large try the small and then large delimiters, and
// stack afterwards

var stackLargeDelimiterSequence = [{
  type: "small",
  style: src_Style.SCRIPTSCRIPT
}, {
  type: "small",
  style: src_Style.SCRIPT
}, {
  type: "small",
  style: src_Style.TEXT
}, {
  type: "large",
  size: 1
}, {
  type: "large",
  size: 2
}, {
  type: "large",
  size: 3
}, {
  type: "large",
  size: 4
}, {
  type: "stack"
}];
/**
 * Get the font used in a delimiter based on what kind of delimiter it is.
 * TODO(#963) Use more specific font family return type once that is introduced.
 */

var delimTypeToFont = function delimTypeToFont(type) {
  if (type.type === "small") {
    return "Main-Regular";
  } else if (type.type === "large") {
    return "Size" + type.size + "-Regular";
  } else if (type.type === "stack") {
    return "Size4-Regular";
  } else {
    throw new Error("Add support for delim type '" + type.type + "' here.");
  }
};
/**
 * Traverse a sequence of types of delimiters to decide what kind of delimiter
 * should be used to create a delimiter of the given height+depth.
 */


var traverseSequence = function traverseSequence(delim, height, sequence, options) {
  // Here, we choose the index we should start at in the sequences. In smaller
  // sizes (which correspond to larger numbers in style.size) we start earlier
  // in the sequence. Thus, scriptscript starts at index 3-3=0, script starts
  // at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2
  var start = Math.min(2, 3 - options.style.size);

  for (var i = start; i < sequence.length; i++) {
    if (sequence[i].type === "stack") {
      // This is always the last delimiter, so we just break the loop now.
      break;
    }

    var metrics = getMetrics(delim, delimTypeToFont(sequence[i]), "math");
    var heightDepth = metrics.height + metrics.depth; // Small delimiters are scaled down versions of the same font, so we
    // account for the style change size.

    if (sequence[i].type === "small") {
      var newOptions = options.havingBaseStyle(sequence[i].style);
      heightDepth *= newOptions.sizeMultiplier;
    } // Check if the delimiter at this size works for the given height.


    if (heightDepth > height) {
      return sequence[i];
    }
  } // If we reached the end of the sequence, return the last sequence element.


  return sequence[sequence.length - 1];
};
/**
 * Make a delimiter of a given height+depth, with optional centering. Here, we
 * traverse the sequences, and create a delimiter that the sequence tells us to.
 */


var makeCustomSizedDelim = function makeCustomSizedDelim(delim, height, center, options, mode, classes) {
  if (delim === "<" || delim === "\\lt" || delim === "\u27E8") {
    delim = "\\langle";
  } else if (delim === ">" || delim === "\\gt" || delim === "\u27E9") {
    delim = "\\rangle";
  } // Decide what sequence to use


  var sequence;

  if (utils.contains(stackNeverDelimiters, delim)) {
    sequence = stackNeverDelimiterSequence;
  } else if (utils.contains(stackLargeDelimiters, delim)) {
    sequence = stackLargeDelimiterSequence;
  } else {
    sequence = stackAlwaysDelimiterSequence;
  } // Look through the sequence


  var delimType = traverseSequence(delim, height, sequence, options); // Get the delimiter from font glyphs.
  // Depending on the sequence element we decided on, call the
  // appropriate function.

  if (delimType.type === "small") {
    return makeSmallDelim(delim, delimType.style, center, options, mode, classes);
  } else if (delimType.type === "large") {
    return makeLargeDelim(delim, delimType.size, center, options, mode, classes);
  } else
    /* if (delimType.type === "stack") */
    {
      return makeStackedDelim(delim, height, center, options, mode, classes);
    }
};
/**
 * Make a delimiter for use with `\left` and `\right`, given a height and depth
 * of an expression that the delimiters surround.
 */


var makeLeftRightDelim = function makeLeftRightDelim(delim, height, depth, options, mode, classes) {
  // We always center \left/\right delimiters, so the axis is always shifted
  var axisHeight = options.fontMetrics().axisHeight * options.sizeMultiplier; // Taken from TeX source, tex.web, function make_left_right

  var delimiterFactor = 901;
  var delimiterExtend = 5.0 / options.fontMetrics().ptPerEm;
  var maxDistFromAxis = Math.max(height - axisHeight, depth + axisHeight);
  var totalHeight = Math.max( // In real TeX, calculations are done using integral values which are
  // 65536 per pt, or 655360 per em. So, the division here truncates in
  // TeX but doesn't here, producing different results. If we wanted to
  // exactly match TeX's calculation, we could do
  //   Math.floor(655360 * maxDistFromAxis / 500) *
  //    delimiterFactor / 655360
  // (To see the difference, compare
  //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
  // in TeX and KaTeX)
  maxDistFromAxis / 500 * delimiterFactor, 2 * maxDistFromAxis - delimiterExtend); // Finally, we defer to `makeCustomSizedDelim` with our calculated total
  // height

  return makeCustomSizedDelim(delim, totalHeight, true, options, mode, classes);
};

/* harmony default export */ var delimiter = ({
  sqrtImage: makeSqrtImage,
  sizedDelim: makeSizedDelim,
  sizeToMaxHeight: sizeToMaxHeight,
  customSizedDelim: makeCustomSizedDelim,
  leftRightDelim: makeLeftRightDelim
});
;// CONCATENATED MODULE: ./src/functions/delimsizing.js









// Extra data needed for the delimiter handler down below
var delimiterSizes = {
  "\\bigl": {
    mclass: "mopen",
    size: 1
  },
  "\\Bigl": {
    mclass: "mopen",
    size: 2
  },
  "\\biggl": {
    mclass: "mopen",
    size: 3
  },
  "\\Biggl": {
    mclass: "mopen",
    size: 4
  },
  "\\bigr": {
    mclass: "mclose",
    size: 1
  },
  "\\Bigr": {
    mclass: "mclose",
    size: 2
  },
  "\\biggr": {
    mclass: "mclose",
    size: 3
  },
  "\\Biggr": {
    mclass: "mclose",
    size: 4
  },
  "\\bigm": {
    mclass: "mrel",
    size: 1
  },
  "\\Bigm": {
    mclass: "mrel",
    size: 2
  },
  "\\biggm": {
    mclass: "mrel",
    size: 3
  },
  "\\Biggm": {
    mclass: "mrel",
    size: 4
  },
  "\\big": {
    mclass: "mord",
    size: 1
  },
  "\\Big": {
    mclass: "mord",
    size: 2
  },
  "\\bigg": {
    mclass: "mord",
    size: 3
  },
  "\\Bigg": {
    mclass: "mord",
    size: 4
  }
};
var delimiters = ["(", "\\lparen", ")", "\\rparen", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\u230A", "\u230B", "\\lceil", "\\rceil", "\u2308", "\u2309", "<", ">", "\\langle", "\u27E8", "\\rangle", "\u27E9", "\\lt", "\\gt", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\u27EE", "\u27EF", "\\lmoustache", "\\rmoustache", "\u23B0", "\u23B1", "/", "\\backslash", "|", "\\vert", "\\|", "\\Vert", "\\uparrow", "\\Uparrow", "\\downarrow", "\\Downarrow", "\\updownarrow", "\\Updownarrow", "."];

// Delimiter functions
function checkDelimiter(delim, context) {
  var symDelim = checkSymbolNodeType(delim);

  if (symDelim && utils.contains(delimiters, symDelim.text)) {
    return symDelim;
  } else if (symDelim) {
    throw new src_ParseError("Invalid delimiter '" + symDelim.text + "' after '" + context.funcName + "'", delim);
  } else {
    throw new src_ParseError("Invalid delimiter type '" + delim.type + "'", delim);
  }
}

defineFunction({
  type: "delimsizing",
  names: ["\\bigl", "\\Bigl", "\\biggl", "\\Biggl", "\\bigr", "\\Bigr", "\\biggr", "\\Biggr", "\\bigm", "\\Bigm", "\\biggm", "\\Biggm", "\\big", "\\Big", "\\bigg", "\\Bigg"],
  props: {
    numArgs: 1,
    argTypes: ["primitive"]
  },
  handler: function handler(context, args) {
    var delim = checkDelimiter(args[0], context);
    return {
      type: "delimsizing",
      mode: context.parser.mode,
      size: delimiterSizes[context.funcName].size,
      mclass: delimiterSizes[context.funcName].mclass,
      delim: delim.text
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    if (group.delim === ".") {
      // Empty delimiters still count as elements, even though they don't
      // show anything.
      return buildCommon.makeSpan([group.mclass]);
    } // Use delimiter.sizedDelim to generate the delimiter.


    return delimiter.sizedDelim(group.delim, group.size, options, group.mode, [group.mclass]);
  },
  mathmlBuilder: function mathmlBuilder(group) {
    var children = [];

    if (group.delim !== ".") {
      children.push(makeText(group.delim, group.mode));
    }

    var node = new mathMLTree.MathNode("mo", children);

    if (group.mclass === "mopen" || group.mclass === "mclose") {
      // Only some of the delimsizing functions act as fences, and they
      // return "mopen" or "mclose" mclass.
      node.setAttribute("fence", "true");
    } else {
      // Explicitly disable fencing if it's not a fence, to override the
      // defaults.
      node.setAttribute("fence", "false");
    }

    node.setAttribute("stretchy", "true");
    node.setAttribute("minsize", delimiter.sizeToMaxHeight[group.size] + "em");
    node.setAttribute("maxsize", delimiter.sizeToMaxHeight[group.size] + "em");
    return node;
  }
});

function assertParsed(group) {
  if (!group.body) {
    throw new Error("Bug: The leftright ParseNode wasn't fully parsed.");
  }
}

defineFunction({
  type: "leftright-right",
  names: ["\\right"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler: function handler(context, args) {
    // \left case below triggers parsing of \right in
    //   `const right = parser.parseFunction();`
    // uses this return value.
    var color = context.parser.gullet.macros.get("\\current@color");

    if (color && typeof color !== "string") {
      throw new src_ParseError("\\current@color set to non-string in \\right");
    }

    return {
      type: "leftright-right",
      mode: context.parser.mode,
      delim: checkDelimiter(args[0], context).text,
      color: color // undefined if not set via \color

    };
  }
});
defineFunction({
  type: "leftright",
  names: ["\\left"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler: function handler(context, args) {
    var delim = checkDelimiter(args[0], context);
    var parser = context.parser; // Parse out the implicit body

    ++parser.leftrightDepth; // parseExpression stops before '\\right'

    var body = parser.parseExpression(false);
    --parser.leftrightDepth; // Check the next token

    parser.expect("\\right", false);
    var right = assertNodeType(parser.parseFunction(), "leftright-right");
    return {
      type: "leftright",
      mode: parser.mode,
      body: body,
      left: delim.text,
      right: right.delim,
      rightColor: right.color
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    assertParsed(group); // Build the inner expression

    var inner = buildExpression(group.body, options, true, ["mopen", "mclose"]);
    var innerHeight = 0;
    var innerDepth = 0;
    var hadMiddle = false; // Calculate its height and depth

    for (var i = 0; i < inner.length; i++) {
      // Property `isMiddle` not defined on `span`. See comment in
      // "middle"'s htmlBuilder.
      // $FlowFixMe
      if (inner[i].isMiddle) {
        hadMiddle = true;
      } else {
        innerHeight = Math.max(inner[i].height, innerHeight);
        innerDepth = Math.max(inner[i].depth, innerDepth);
      }
    } // The size of delimiters is the same, regardless of what style we are
    // in. Thus, to correctly calculate the size of delimiter we need around
    // a group, we scale down the inner size based on the size.


    innerHeight *= options.sizeMultiplier;
    innerDepth *= options.sizeMultiplier;
    var leftDelim;

    if (group.left === ".") {
      // Empty delimiters in \left and \right make null delimiter spaces.
      leftDelim = makeNullDelimiter(options, ["mopen"]);
    } else {
      // Otherwise, use leftRightDelim to generate the correct sized
      // delimiter.
      leftDelim = delimiter.leftRightDelim(group.left, innerHeight, innerDepth, options, group.mode, ["mopen"]);
    } // Add it to the beginning of the expression


    inner.unshift(leftDelim); // Handle middle delimiters

    if (hadMiddle) {
      for (var _i = 1; _i < inner.length; _i++) {
        var middleDelim = inner[_i]; // Property `isMiddle` not defined on `span`. See comment in
        // "middle"'s htmlBuilder.
        // $FlowFixMe

        var isMiddle = middleDelim.isMiddle;

        if (isMiddle) {
          // Apply the options that were active when \middle was called
          inner[_i] = delimiter.leftRightDelim(isMiddle.delim, innerHeight, innerDepth, isMiddle.options, group.mode, []);
        }
      }
    }

    var rightDelim; // Same for the right delimiter, but using color specified by \color

    if (group.right === ".") {
      rightDelim = makeNullDelimiter(options, ["mclose"]);
    } else {
      var colorOptions = group.rightColor ? options.withColor(group.rightColor) : options;
      rightDelim = delimiter.leftRightDelim(group.right, innerHeight, innerDepth, colorOptions, group.mode, ["mclose"]);
    } // Add it to the end of the expression.


    inner.push(rightDelim);
    return buildCommon.makeSpan(["minner"], inner, options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    assertParsed(group);
    var inner = buildMathML_buildExpression(group.body, options);

    if (group.left !== ".") {
      var leftNode = new mathMLTree.MathNode("mo", [makeText(group.left, group.mode)]);
      leftNode.setAttribute("fence", "true");
      inner.unshift(leftNode);
    }

    if (group.right !== ".") {
      var rightNode = new mathMLTree.MathNode("mo", [makeText(group.right, group.mode)]);
      rightNode.setAttribute("fence", "true");

      if (group.rightColor) {
        rightNode.setAttribute("mathcolor", group.rightColor);
      }

      inner.push(rightNode);
    }

    return makeRow(inner);
  }
});
defineFunction({
  type: "middle",
  names: ["\\middle"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler: function handler(context, args) {
    var delim = checkDelimiter(args[0], context);

    if (!context.parser.leftrightDepth) {
      throw new src_ParseError("\\middle without preceding \\left", delim);
    }

    return {
      type: "middle",
      mode: context.parser.mode,
      delim: delim.text
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var middleDelim;

    if (group.delim === ".") {
      middleDelim = makeNullDelimiter(options, []);
    } else {
      middleDelim = delimiter.sizedDelim(group.delim, 1, options, group.mode, []);
      var isMiddle = {
        delim: group.delim,
        options: options
      }; // Property `isMiddle` not defined on `span`. It is only used in
      // this file above.
      // TODO: Fix this violation of the `span` type and possibly rename
      // things since `isMiddle` sounds like a boolean, but is a struct.
      // $FlowFixMe

      middleDelim.isMiddle = isMiddle;
    }

    return middleDelim;
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    // A Firefox \middle will strech a character vertically only if it
    // is in the fence part of the operator dictionary at:
    // https://www.w3.org/TR/MathML3/appendixc.html.
    // So we need to avoid U+2223 and use plain "|" instead.
    var textNode = group.delim === "\\vert" || group.delim === "|" ? makeText("|", "text") : makeText(group.delim, group.mode);
    var middleNode = new mathMLTree.MathNode("mo", [textNode]);
    middleNode.setAttribute("fence", "true"); // MathML gives 5/18em spacing to each <mo> element.
    // \middle should get delimiter spacing instead.

    middleNode.setAttribute("lspace", "0.05em");
    middleNode.setAttribute("rspace", "0.05em");
    return middleNode;
  }
});
;// CONCATENATED MODULE: ./src/functions/enclose.js












var enclose_htmlBuilder = function htmlBuilder(group, options) {
  // \cancel, \bcancel, \xcancel, \sout, \fbox, \colorbox, \fcolorbox, \phase
  // Some groups can return document fragments.  Handle those by wrapping
  // them in a span.
  var inner = buildCommon.wrapFragment(buildGroup(group.body, options), options);
  var label = group.label.substr(1);
  var scale = options.sizeMultiplier;
  var img;
  var imgShift = 0; // In the LaTeX cancel package, line geometry is slightly different
  // depending on whether the subject is wider than it is tall, or vice versa.
  // We don't know the width of a group, so as a proxy, we test if
  // the subject is a single character. This captures most of the
  // subjects that should get the "tall" treatment.

  var isSingleChar = utils.isCharacterBox(group.body);

  if (label === "sout") {
    img = buildCommon.makeSpan(["stretchy", "sout"]);
    img.height = options.fontMetrics().defaultRuleThickness / scale;
    imgShift = -0.5 * options.fontMetrics().xHeight;
  } else if (label === "phase") {
    // Set a couple of dimensions from the steinmetz package.
    var lineWeight = calculateSize({
      number: 0.6,
      unit: "pt"
    }, options);
    var clearance = calculateSize({
      number: 0.35,
      unit: "ex"
    }, options); // Prevent size changes like \Huge from affecting line thickness

    var newOptions = options.havingBaseSizing();
    scale = scale / newOptions.sizeMultiplier;
    var angleHeight = inner.height + inner.depth + lineWeight + clearance; // Reserve a left pad for the angle.

    inner.style.paddingLeft = angleHeight / 2 + lineWeight + "em"; // Create an SVG

    var viewBoxHeight = Math.floor(1000 * angleHeight * scale);
    var path = phasePath(viewBoxHeight);
    var svgNode = new SvgNode([new PathNode("phase", path)], {
      "width": "400em",
      "height": viewBoxHeight / 1000 + "em",
      "viewBox": "0 0 400000 " + viewBoxHeight,
      "preserveAspectRatio": "xMinYMin slice"
    }); // Wrap it in a span with overflow: hidden.

    img = buildCommon.makeSvgSpan(["hide-tail"], [svgNode], options);
    img.style.height = angleHeight + "em";
    imgShift = inner.depth + lineWeight + clearance;
  } else {
    // Add horizontal padding
    if (/cancel/.test(label)) {
      if (!isSingleChar) {
        inner.classes.push("cancel-pad");
      }
    } else if (label === "angl") {
      inner.classes.push("anglpad");
    } else {
      inner.classes.push("boxpad");
    } // Add vertical padding


    var topPad = 0;
    var bottomPad = 0;
    var ruleThickness = 0; // ref: cancel package: \advance\totalheight2\p@ % "+2"

    if (/box/.test(label)) {
      ruleThickness = Math.max(options.fontMetrics().fboxrule, // default
      options.minRuleThickness // User override.
      );
      topPad = options.fontMetrics().fboxsep + (label === "colorbox" ? 0 : ruleThickness);
      bottomPad = topPad;
    } else if (label === "angl") {
      ruleThickness = Math.max(options.fontMetrics().defaultRuleThickness, options.minRuleThickness);
      topPad = 4 * ruleThickness; // gap = 3 × line, plus the line itself.

      bottomPad = Math.max(0, 0.25 - inner.depth);
    } else {
      topPad = isSingleChar ? 0.2 : 0;
      bottomPad = topPad;
    }

    img = stretchy.encloseSpan(inner, label, topPad, bottomPad, options);

    if (/fbox|boxed|fcolorbox/.test(label)) {
      img.style.borderStyle = "solid";
      img.style.borderWidth = ruleThickness + "em";
    } else if (label === "angl" && ruleThickness !== 0.049) {
      img.style.borderTopWidth = ruleThickness + "em";
      img.style.borderRightWidth = ruleThickness + "em";
    }

    imgShift = inner.depth + bottomPad;

    if (group.backgroundColor) {
      img.style.backgroundColor = group.backgroundColor;

      if (group.borderColor) {
        img.style.borderColor = group.borderColor;
      }
    }
  }

  var vlist;

  if (group.backgroundColor) {
    vlist = buildCommon.makeVList({
      positionType: "individualShift",
      children: [// Put the color background behind inner;
      {
        type: "elem",
        elem: img,
        shift: imgShift
      }, {
        type: "elem",
        elem: inner,
        shift: 0
      }]
    }, options);
  } else {
    var classes = /cancel|phase/.test(label) ? ["svg-align"] : [];
    vlist = buildCommon.makeVList({
      positionType: "individualShift",
      children: [// Write the \cancel stroke on top of inner.
      {
        type: "elem",
        elem: inner,
        shift: 0
      }, {
        type: "elem",
        elem: img,
        shift: imgShift,
        wrapperClasses: classes
      }]
    }, options);
  }

  if (/cancel/.test(label)) {
    // The cancel package documentation says that cancel lines add their height
    // to the expression, but tests show that isn't how it actually works.
    vlist.height = inner.height;
    vlist.depth = inner.depth;
  }

  if (/cancel/.test(label) && !isSingleChar) {
    // cancel does not create horiz space for its line extension.
    return buildCommon.makeSpan(["mord", "cancel-lap"], [vlist], options);
  } else {
    return buildCommon.makeSpan(["mord"], [vlist], options);
  }
};

var enclose_mathmlBuilder = function mathmlBuilder(group, options) {
  var fboxsep = 0;
  var node = new mathMLTree.MathNode(group.label.indexOf("colorbox") > -1 ? "mpadded" : "menclose", [buildMathML_buildGroup(group.body, options)]);

  switch (group.label) {
    case "\\cancel":
      node.setAttribute("notation", "updiagonalstrike");
      break;

    case "\\bcancel":
      node.setAttribute("notation", "downdiagonalstrike");
      break;

    case "\\phase":
      node.setAttribute("notation", "phasorangle");
      break;

    case "\\sout":
      node.setAttribute("notation", "horizontalstrike");
      break;

    case "\\fbox":
      node.setAttribute("notation", "box");
      break;

    case "\\angl":
      node.setAttribute("notation", "actuarial");
      break;

    case "\\fcolorbox":
    case "\\colorbox":
      // <menclose> doesn't have a good notation option. So use <mpadded>
      // instead. Set some attributes that come included with <menclose>.
      fboxsep = options.fontMetrics().fboxsep * options.fontMetrics().ptPerEm;
      node.setAttribute("width", "+" + 2 * fboxsep + "pt");
      node.setAttribute("height", "+" + 2 * fboxsep + "pt");
      node.setAttribute("lspace", fboxsep + "pt"); //

      node.setAttribute("voffset", fboxsep + "pt");

      if (group.label === "\\fcolorbox") {
        var thk = Math.max(options.fontMetrics().fboxrule, // default
        options.minRuleThickness // user override
        );
        node.setAttribute("style", "border: " + thk + "em solid " + String(group.borderColor));
      }

      break;

    case "\\xcancel":
      node.setAttribute("notation", "updiagonalstrike downdiagonalstrike");
      break;
  }

  if (group.backgroundColor) {
    node.setAttribute("mathbackground", group.backgroundColor);
  }

  return node;
};

defineFunction({
  type: "enclose",
  names: ["\\colorbox"],
  props: {
    numArgs: 2,
    allowedInText: true,
    argTypes: ["color", "text"]
  },
  handler: function handler(_ref, args, optArgs) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var color = assertNodeType(args[0], "color-token").color;
    var body = args[1];
    return {
      type: "enclose",
      mode: parser.mode,
      label: funcName,
      backgroundColor: color,
      body: body
    };
  },
  htmlBuilder: enclose_htmlBuilder,
  mathmlBuilder: enclose_mathmlBuilder
});
defineFunction({
  type: "enclose",
  names: ["\\fcolorbox"],
  props: {
    numArgs: 3,
    allowedInText: true,
    argTypes: ["color", "color", "text"]
  },
  handler: function handler(_ref2, args, optArgs) {
    var parser = _ref2.parser,
        funcName = _ref2.funcName;
    var borderColor = assertNodeType(args[0], "color-token").color;
    var backgroundColor = assertNodeType(args[1], "color-token").color;
    var body = args[2];
    return {
      type: "enclose",
      mode: parser.mode,
      label: funcName,
      backgroundColor: backgroundColor,
      borderColor: borderColor,
      body: body
    };
  },
  htmlBuilder: enclose_htmlBuilder,
  mathmlBuilder: enclose_mathmlBuilder
});
defineFunction({
  type: "enclose",
  names: ["\\fbox"],
  props: {
    numArgs: 1,
    argTypes: ["hbox"],
    allowedInText: true
  },
  handler: function handler(_ref3, args) {
    var parser = _ref3.parser;
    return {
      type: "enclose",
      mode: parser.mode,
      label: "\\fbox",
      body: args[0]
    };
  }
});
defineFunction({
  type: "enclose",
  names: ["\\cancel", "\\bcancel", "\\xcancel", "\\sout", "\\phase"],
  props: {
    numArgs: 1
  },
  handler: function handler(_ref4, args) {
    var parser = _ref4.parser,
        funcName = _ref4.funcName;
    var body = args[0];
    return {
      type: "enclose",
      mode: parser.mode,
      label: funcName,
      body: body
    };
  },
  htmlBuilder: enclose_htmlBuilder,
  mathmlBuilder: enclose_mathmlBuilder
});
defineFunction({
  type: "enclose",
  names: ["\\angl"],
  props: {
    numArgs: 1,
    argTypes: ["hbox"],
    allowedInText: false
  },
  handler: function handler(_ref5, args) {
    var parser = _ref5.parser;
    return {
      type: "enclose",
      mode: parser.mode,
      label: "\\angl",
      body: args[0]
    };
  }
});
;// CONCATENATED MODULE: ./src/defineEnvironment.js


/**
 * All registered environments.
 * `environments.js` exports this same dictionary again and makes it public.
 * `Parser.js` requires this dictionary via `environments.js`.
 */
var _environments = {};
function defineEnvironment(_ref) {
  var type = _ref.type,
      names = _ref.names,
      props = _ref.props,
      handler = _ref.handler,
      htmlBuilder = _ref.htmlBuilder,
      mathmlBuilder = _ref.mathmlBuilder;
  // Set default values of environments.
  var data = {
    type: type,
    numArgs: props.numArgs || 0,
    allowedInText: false,
    numOptionalArgs: 0,
    handler: handler
  };

  for (var i = 0; i < names.length; ++i) {
    // TODO: The value type of _environments should be a type union of all
    // possible `EnvSpec<>` possibilities instead of `EnvSpec<*>`, which is
    // an existential type.
    _environments[names[i]] = data;
  }

  if (htmlBuilder) {
    _htmlGroupBuilders[type] = htmlBuilder;
  }

  if (mathmlBuilder) {
    _mathmlGroupBuilders[type] = mathmlBuilder;
  }
}
;// CONCATENATED MODULE: ./src/environments/array.js














// Helper functions
function getHLines(parser) {
  // Return an array. The array length = number of hlines.
  // Each element in the array tells if the line is dashed.
  var hlineInfo = [];
  parser.consumeSpaces();
  var nxt = parser.fetch().text;

  while (nxt === "\\hline" || nxt === "\\hdashline") {
    parser.consume();
    hlineInfo.push(nxt === "\\hdashline");
    parser.consumeSpaces();
    nxt = parser.fetch().text;
  }

  return hlineInfo;
}

var validateAmsEnvironmentContext = function validateAmsEnvironmentContext(context) {
  var settings = context.parser.settings;

  if (!settings.displayMode) {
    throw new src_ParseError("{" + context.envName + "} can be used only in" + " display mode.");
  }
};
/**
 * Parse the body of the environment, with rows delimited by \\ and
 * columns delimited by &, and create a nested list in row-major order
 * with one group per cell.  If given an optional argument style
 * ("text", "display", etc.), then each cell is cast into that style.
 */


function parseArray(parser, _ref, style) {
  var hskipBeforeAndAfter = _ref.hskipBeforeAndAfter,
      addJot = _ref.addJot,
      cols = _ref.cols,
      arraystretch = _ref.arraystretch,
      colSeparationType = _ref.colSeparationType,
      addEqnNum = _ref.addEqnNum,
      singleRow = _ref.singleRow,
      emptySingleRow = _ref.emptySingleRow,
      maxNumCols = _ref.maxNumCols,
      leqno = _ref.leqno;
  parser.gullet.beginGroup();

  if (!singleRow) {
    // \cr is equivalent to \\ without the optional size argument (see below)
    // TODO: provide helpful error when \cr is used outside array environment
    parser.gullet.macros.set("\\cr", "\\\\\\relax");
  } // Get current arraystretch if it's not set by the environment


  if (!arraystretch) {
    var stretch = parser.gullet.expandMacroAsText("\\arraystretch");

    if (stretch == null) {
      // Default \arraystretch from lttab.dtx
      arraystretch = 1;
    } else {
      arraystretch = parseFloat(stretch);

      if (!arraystretch || arraystretch < 0) {
        throw new src_ParseError("Invalid \\arraystretch: " + stretch);
      }
    }
  } // Start group for first cell


  parser.gullet.beginGroup();
  var row = [];
  var body = [row];
  var rowGaps = [];
  var hLinesBeforeRow = []; // Test for \hline at the top of the array.

  hLinesBeforeRow.push(getHLines(parser));

  while (true) {
    // eslint-disable-line no-constant-condition
    // Parse each cell in its own group (namespace)
    var cell = parser.parseExpression(false, singleRow ? "\\end" : "\\\\");
    parser.gullet.endGroup();
    parser.gullet.beginGroup();
    cell = {
      type: "ordgroup",
      mode: parser.mode,
      body: cell
    };

    if (style) {
      cell = {
        type: "styling",
        mode: parser.mode,
        style: style,
        body: [cell]
      };
    }

    row.push(cell);
    var next = parser.fetch().text;

    if (next === "&") {
      if (maxNumCols && row.length === maxNumCols) {
        if (singleRow || colSeparationType) {
          // {equation} or {split}
          throw new src_ParseError("Too many tab characters: &", parser.nextToken);
        } else {
          // {array} environment
          parser.settings.reportNonstrict("textEnv", "Too few columns " + "specified in the {array} column argument.");
        }
      }

      parser.consume();
    } else if (next === "\\end") {
      // Arrays terminate newlines with `\crcr` which consumes a `\cr` if
      // the last line is empty.  However, AMS environments keep the
      // empty row if it's the only one.
      // NOTE: Currently, `cell` is the last item added into `row`.
      if (row.length === 1 && cell.type === "styling" && cell.body[0].body.length === 0 && (body.length > 1 || !emptySingleRow)) {
        body.pop();
      }

      if (hLinesBeforeRow.length < body.length + 1) {
        hLinesBeforeRow.push([]);
      }

      break;
    } else if (next === "\\\\") {
      parser.consume();
      var size = void 0; // \def\Let@{\let\\\math@cr}
      // \def\math@cr{...\math@cr@}
      // \def\math@cr@{\new@ifnextchar[\math@cr@@{\math@cr@@[\z@]}}
      // \def\math@cr@@[#1]{...\math@cr@@@...}
      // \def\math@cr@@@{\cr}

      if (parser.gullet.future().text !== " ") {
        size = parser.parseSizeGroup(true);
      }

      rowGaps.push(size ? size.value : null); // check for \hline(s) following the row separator

      hLinesBeforeRow.push(getHLines(parser));
      row = [];
      body.push(row);
    } else {
      throw new src_ParseError("Expected & or \\\\ or \\cr or \\end", parser.nextToken);
    }
  } // End cell group


  parser.gullet.endGroup(); // End array group defining \cr

  parser.gullet.endGroup();
  return {
    type: "array",
    mode: parser.mode,
    addJot: addJot,
    arraystretch: arraystretch,
    body: body,
    cols: cols,
    rowGaps: rowGaps,
    hskipBeforeAndAfter: hskipBeforeAndAfter,
    hLinesBeforeRow: hLinesBeforeRow,
    colSeparationType: colSeparationType,
    addEqnNum: addEqnNum,
    leqno: leqno
  };
} // Decides on a style for cells in an array according to whether the given
// environment name starts with the letter 'd'.


function dCellStyle(envName) {
  if (envName.substr(0, 1) === "d") {
    return "display";
  } else {
    return "text";
  }
}

var array_htmlBuilder = function htmlBuilder(group, options) {
  var r;
  var c;
  var nr = group.body.length;
  var hLinesBeforeRow = group.hLinesBeforeRow;
  var nc = 0;
  var body = new Array(nr);
  var hlines = [];
  var ruleThickness = Math.max( // From LaTeX \showthe\arrayrulewidth. Equals 0.04 em.
  options.fontMetrics().arrayRuleWidth, options.minRuleThickness // User override.
  ); // Horizontal spacing

  var pt = 1 / options.fontMetrics().ptPerEm;
  var arraycolsep = 5 * pt; // default value, i.e. \arraycolsep in article.cls

  if (group.colSeparationType && group.colSeparationType === "small") {
    // We're in a {smallmatrix}. Default column space is \thickspace,
    // i.e. 5/18em = 0.2778em, per amsmath.dtx for {smallmatrix}.
    // But that needs adjustment because LaTeX applies \scriptstyle to the
    // entire array, including the colspace, but this function applies
    // \scriptstyle only inside each element.
    var localMultiplier = options.havingStyle(src_Style.SCRIPT).sizeMultiplier;
    arraycolsep = 0.2778 * (localMultiplier / options.sizeMultiplier);
  } // Vertical spacing


  var baselineskip = group.colSeparationType === "CD" ? calculateSize({
    number: 3,
    unit: "ex"
  }, options) : 12 * pt; // see size10.clo
  // Default \jot from ltmath.dtx
  // TODO(edemaine): allow overriding \jot via \setlength (#687)

  var jot = 3 * pt;
  var arrayskip = group.arraystretch * baselineskip;
  var arstrutHeight = 0.7 * arrayskip; // \strutbox in ltfsstrc.dtx and

  var arstrutDepth = 0.3 * arrayskip; // \@arstrutbox in lttab.dtx

  var totalHeight = 0; // Set a position for \hline(s) at the top of the array, if any.

  function setHLinePos(hlinesInGap) {
    for (var i = 0; i < hlinesInGap.length; ++i) {
      if (i > 0) {
        totalHeight += 0.25;
      }

      hlines.push({
        pos: totalHeight,
        isDashed: hlinesInGap[i]
      });
    }
  }

  setHLinePos(hLinesBeforeRow[0]);

  for (r = 0; r < group.body.length; ++r) {
    var inrow = group.body[r];
    var height = arstrutHeight; // \@array adds an \@arstrut

    var depth = arstrutDepth; // to each tow (via the template)

    if (nc < inrow.length) {
      nc = inrow.length;
    }

    var outrow = new Array(inrow.length);

    for (c = 0; c < inrow.length; ++c) {
      var elt = buildGroup(inrow[c], options);

      if (depth < elt.depth) {
        depth = elt.depth;
      }

      if (height < elt.height) {
        height = elt.height;
      }

      outrow[c] = elt;
    }

    var rowGap = group.rowGaps[r];
    var gap = 0;

    if (rowGap) {
      gap = calculateSize(rowGap, options);

      if (gap > 0) {
        // \@argarraycr
        gap += arstrutDepth;

        if (depth < gap) {
          depth = gap; // \@xargarraycr
        }

        gap = 0;
      }
    } // In AMS multiline environments such as aligned and gathered, rows
    // correspond to lines that have additional \jot added to the
    // \baselineskip via \openup.


    if (group.addJot) {
      depth += jot;
    }

    outrow.height = height;
    outrow.depth = depth;
    totalHeight += height;
    outrow.pos = totalHeight;
    totalHeight += depth + gap; // \@yargarraycr

    body[r] = outrow; // Set a position for \hline(s), if any.

    setHLinePos(hLinesBeforeRow[r + 1]);
  }

  var offset = totalHeight / 2 + options.fontMetrics().axisHeight;
  var colDescriptions = group.cols || [];
  var cols = [];
  var colSep;
  var colDescrNum;
  var eqnNumSpans = [];

  if (group.addEqnNum) {
    // An environment with automatic equation numbers.
    // Create node(s) that will trigger CSS counter increment.
    for (r = 0; r < nr; ++r) {
      var rw = body[r];
      var shift = rw.pos - offset;
      var eqnTag = buildCommon.makeSpan(["eqn-num"], [], options);
      eqnTag.depth = rw.depth;
      eqnTag.height = rw.height;
      eqnNumSpans.push({
        type: "elem",
        elem: eqnTag,
        shift: shift
      });
    }
  }

  for (c = 0, colDescrNum = 0; // Continue while either there are more columns or more column
  // descriptions, so trailing separators don't get lost.
  c < nc || colDescrNum < colDescriptions.length; ++c, ++colDescrNum) {
    var colDescr = colDescriptions[colDescrNum] || {};
    var firstSeparator = true;

    while (colDescr.type === "separator") {
      // If there is more than one separator in a row, add a space
      // between them.
      if (!firstSeparator) {
        colSep = buildCommon.makeSpan(["arraycolsep"], []);
        colSep.style.width = options.fontMetrics().doubleRuleSep + "em";
        cols.push(colSep);
      }

      if (colDescr.separator === "|" || colDescr.separator === ":") {
        var lineType = colDescr.separator === "|" ? "solid" : "dashed";
        var separator = buildCommon.makeSpan(["vertical-separator"], [], options);
        separator.style.height = totalHeight + "em";
        separator.style.borderRightWidth = ruleThickness + "em";
        separator.style.borderRightStyle = lineType;
        separator.style.margin = "0 -" + ruleThickness / 2 + "em";
        separator.style.verticalAlign = -(totalHeight - offset) + "em";
        cols.push(separator);
      } else {
        throw new src_ParseError("Invalid separator type: " + colDescr.separator);
      }

      colDescrNum++;
      colDescr = colDescriptions[colDescrNum] || {};
      firstSeparator = false;
    }

    if (c >= nc) {
      continue;
    }

    var sepwidth = void 0;

    if (c > 0 || group.hskipBeforeAndAfter) {
      sepwidth = utils.deflt(colDescr.pregap, arraycolsep);

      if (sepwidth !== 0) {
        colSep = buildCommon.makeSpan(["arraycolsep"], []);
        colSep.style.width = sepwidth + "em";
        cols.push(colSep);
      }
    }

    var col = [];

    for (r = 0; r < nr; ++r) {
      var row = body[r];
      var elem = row[c];

      if (!elem) {
        continue;
      }

      var _shift = row.pos - offset;

      elem.depth = row.depth;
      elem.height = row.height;
      col.push({
        type: "elem",
        elem: elem,
        shift: _shift
      });
    }

    col = buildCommon.makeVList({
      positionType: "individualShift",
      children: col
    }, options);
    col = buildCommon.makeSpan(["col-align-" + (colDescr.align || "c")], [col]);
    cols.push(col);

    if (c < nc - 1 || group.hskipBeforeAndAfter) {
      sepwidth = utils.deflt(colDescr.postgap, arraycolsep);

      if (sepwidth !== 0) {
        colSep = buildCommon.makeSpan(["arraycolsep"], []);
        colSep.style.width = sepwidth + "em";
        cols.push(colSep);
      }
    }
  }

  body = buildCommon.makeSpan(["mtable"], cols); // Add \hline(s), if any.

  if (hlines.length > 0) {
    var line = buildCommon.makeLineSpan("hline", options, ruleThickness);
    var dashes = buildCommon.makeLineSpan("hdashline", options, ruleThickness);
    var vListElems = [{
      type: "elem",
      elem: body,
      shift: 0
    }];

    while (hlines.length > 0) {
      var hline = hlines.pop();
      var lineShift = hline.pos - offset;

      if (hline.isDashed) {
        vListElems.push({
          type: "elem",
          elem: dashes,
          shift: lineShift
        });
      } else {
        vListElems.push({
          type: "elem",
          elem: line,
          shift: lineShift
        });
      }
    }

    body = buildCommon.makeVList({
      positionType: "individualShift",
      children: vListElems
    }, options);
  }

  if (!group.addEqnNum) {
    return buildCommon.makeSpan(["mord"], [body], options);
  } else {
    var eqnNumCol = buildCommon.makeVList({
      positionType: "individualShift",
      children: eqnNumSpans
    }, options);
    eqnNumCol = buildCommon.makeSpan(["tag"], [eqnNumCol], options);
    return buildCommon.makeFragment([body, eqnNumCol]);
  }
};

var alignMap = {
  c: "center ",
  l: "left ",
  r: "right "
};

var array_mathmlBuilder = function mathmlBuilder(group, options) {
  var tbl = [];
  var glue = new mathMLTree.MathNode("mtd", [], ["mtr-glue"]);
  var tag = new mathMLTree.MathNode("mtd", [], ["mml-eqn-num"]);

  for (var i = 0; i < group.body.length; i++) {
    var rw = group.body[i];
    var row = [];

    for (var j = 0; j < rw.length; j++) {
      row.push(new mathMLTree.MathNode("mtd", [buildMathML_buildGroup(rw[j], options)]));
    }

    if (group.addEqnNum) {
      row.unshift(glue);
      row.push(glue);

      if (group.leqno) {
        row.unshift(tag);
      } else {
        row.push(tag);
      }
    }

    tbl.push(new mathMLTree.MathNode("mtr", row));
  }

  var table = new mathMLTree.MathNode("mtable", tbl); // Set column alignment, row spacing, column spacing, and
  // array lines by setting attributes on the table element.
  // Set the row spacing. In MathML, we specify a gap distance.
  // We do not use rowGap[] because MathML automatically increases
  // cell height with the height/depth of the element content.
  // LaTeX \arraystretch multiplies the row baseline-to-baseline distance.
  // We simulate this by adding (arraystretch - 1)em to the gap. This
  // does a reasonable job of adjusting arrays containing 1 em tall content.
  // The 0.16 and 0.09 values are found emprically. They produce an array
  // similar to LaTeX and in which content does not interfere with \hines.

  var gap = group.arraystretch === 0.5 ? 0.1 // {smallmatrix}, {subarray}
  : 0.16 + group.arraystretch - 1 + (group.addJot ? 0.09 : 0);
  table.setAttribute("rowspacing", gap.toFixed(4) + "em"); // MathML table lines go only between cells.
  // To place a line on an edge we'll use <menclose>, if necessary.

  var menclose = "";
  var align = "";

  if (group.cols && group.cols.length > 0) {
    // Find column alignment, column spacing, and  vertical lines.
    var cols = group.cols;
    var columnLines = "";
    var prevTypeWasAlign = false;
    var iStart = 0;
    var iEnd = cols.length;

    if (cols[0].type === "separator") {
      menclose += "top ";
      iStart = 1;
    }

    if (cols[cols.length - 1].type === "separator") {
      menclose += "bottom ";
      iEnd -= 1;
    }

    for (var _i = iStart; _i < iEnd; _i++) {
      if (cols[_i].type === "align") {
        align += alignMap[cols[_i].align];

        if (prevTypeWasAlign) {
          columnLines += "none ";
        }

        prevTypeWasAlign = true;
      } else if (cols[_i].type === "separator") {
        // MathML accepts only single lines between cells.
        // So we read only the first of consecutive separators.
        if (prevTypeWasAlign) {
          columnLines += cols[_i].separator === "|" ? "solid " : "dashed ";
          prevTypeWasAlign = false;
        }
      }
    }

    table.setAttribute("columnalign", align.trim());

    if (/[sd]/.test(columnLines)) {
      table.setAttribute("columnlines", columnLines.trim());
    }
  } // Set column spacing.


  if (group.colSeparationType === "align") {
    var _cols = group.cols || [];

    var spacing = "";

    for (var _i2 = 1; _i2 < _cols.length; _i2++) {
      spacing += _i2 % 2 ? "0em " : "1em ";
    }

    table.setAttribute("columnspacing", spacing.trim());
  } else if (group.colSeparationType === "alignat" || group.colSeparationType === "gather") {
    table.setAttribute("columnspacing", "0em");
  } else if (group.colSeparationType === "small") {
    table.setAttribute("columnspacing", "0.2778em");
  } else if (group.colSeparationType === "CD") {
    table.setAttribute("columnspacing", "0.5em");
  } else {
    table.setAttribute("columnspacing", "1em");
  } // Address \hline and \hdashline


  var rowLines = "";
  var hlines = group.hLinesBeforeRow;
  menclose += hlines[0].length > 0 ? "left " : "";
  menclose += hlines[hlines.length - 1].length > 0 ? "right " : "";

  for (var _i3 = 1; _i3 < hlines.length - 1; _i3++) {
    rowLines += hlines[_i3].length === 0 ? "none " // MathML accepts only a single line between rows. Read one element.
    : hlines[_i3][0] ? "dashed " : "solid ";
  }

  if (/[sd]/.test(rowLines)) {
    table.setAttribute("rowlines", rowLines.trim());
  }

  if (menclose !== "") {
    table = new mathMLTree.MathNode("menclose", [table]);
    table.setAttribute("notation", menclose.trim());
  }

  if (group.arraystretch && group.arraystretch < 1) {
    // A small array. Wrap in scriptstyle so row gap is not too large.
    table = new mathMLTree.MathNode("mstyle", [table]);
    table.setAttribute("scriptlevel", "1");
  }

  return table;
}; // Convenience function for align, align*, aligned, alignat, alignat*, alignedat.


var alignedHandler = function alignedHandler(context, args) {
  if (context.envName.indexOf("ed") === -1) {
    validateAmsEnvironmentContext(context);
  }

  var cols = [];
  var separationType = context.envName.indexOf("at") > -1 ? "alignat" : "align";
  var res = parseArray(context.parser, {
    cols: cols,
    addJot: true,
    addEqnNum: context.envName === "align" || context.envName === "alignat",
    emptySingleRow: true,
    colSeparationType: separationType,
    maxNumCols: context.envName === "split" ? 2 : undefined,
    leqno: context.parser.settings.leqno
  }, "display"); // Determining number of columns.
  // 1. If the first argument is given, we use it as a number of columns,
  //    and makes sure that each row doesn't exceed that number.
  // 2. Otherwise, just count number of columns = maximum number
  //    of cells in each row ("aligned" mode -- isAligned will be true).
  //
  // At the same time, prepend empty group {} at beginning of every second
  // cell in each row (starting with second cell) so that operators become
  // binary.  This behavior is implemented in amsmath's \start@aligned.

  var numMaths;
  var numCols = 0;
  var emptyGroup = {
    type: "ordgroup",
    mode: context.mode,
    body: []
  };

  if (args[0] && args[0].type === "ordgroup") {
    var arg0 = "";

    for (var i = 0; i < args[0].body.length; i++) {
      var textord = assertNodeType(args[0].body[i], "textord");
      arg0 += textord.text;
    }

    numMaths = Number(arg0);
    numCols = numMaths * 2;
  }

  var isAligned = !numCols;
  res.body.forEach(function (row) {
    for (var _i4 = 1; _i4 < row.length; _i4 += 2) {
      // Modify ordgroup node within styling node
      var styling = assertNodeType(row[_i4], "styling");
      var ordgroup = assertNodeType(styling.body[0], "ordgroup");
      ordgroup.body.unshift(emptyGroup);
    }

    if (!isAligned) {
      // Case 1
      var curMaths = row.length / 2;

      if (numMaths < curMaths) {
        throw new src_ParseError("Too many math in a row: " + ("expected " + numMaths + ", but got " + curMaths), row[0]);
      }
    } else if (numCols < row.length) {
      // Case 2
      numCols = row.length;
    }
  }); // Adjusting alignment.
  // In aligned mode, we add one \qquad between columns;
  // otherwise we add nothing.

  for (var _i5 = 0; _i5 < numCols; ++_i5) {
    var align = "r";
    var pregap = 0;

    if (_i5 % 2 === 1) {
      align = "l";
    } else if (_i5 > 0 && isAligned) {
      // "aligned" mode.
      pregap = 1; // add one \quad
    }

    cols[_i5] = {
      type: "align",
      align: align,
      pregap: pregap,
      postgap: 0
    };
  }

  res.colSeparationType = isAligned ? "align" : "alignat";
  return res;
}; // Arrays are part of LaTeX, defined in lttab.dtx so its documentation
// is part of the source2e.pdf file of LaTeX2e source documentation.
// {darray} is an {array} environment where cells are set in \displaystyle,
// as defined in nccmath.sty.


defineEnvironment({
  type: "array",
  names: ["array", "darray"],
  props: {
    numArgs: 1
  },
  handler: function handler(context, args) {
    // Since no types are specified above, the two possibilities are
    // - The argument is wrapped in {} or [], in which case Parser's
    //   parseGroup() returns an "ordgroup" wrapping some symbol node.
    // - The argument is a bare symbol node.
    var symNode = checkSymbolNodeType(args[0]);
    var colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
    var cols = colalign.map(function (nde) {
      var node = assertSymbolNodeType(nde);
      var ca = node.text;

      if ("lcr".indexOf(ca) !== -1) {
        return {
          type: "align",
          align: ca
        };
      } else if (ca === "|") {
        return {
          type: "separator",
          separator: "|"
        };
      } else if (ca === ":") {
        return {
          type: "separator",
          separator: ":"
        };
      }

      throw new src_ParseError("Unknown column alignment: " + ca, nde);
    });
    var res = {
      cols: cols,
      hskipBeforeAndAfter: true,
      // \@preamble in lttab.dtx
      maxNumCols: cols.length
    };
    return parseArray(context.parser, res, dCellStyle(context.envName));
  },
  htmlBuilder: array_htmlBuilder,
  mathmlBuilder: array_mathmlBuilder
}); // The matrix environments of amsmath builds on the array environment
// of LaTeX, which is discussed above.
// The mathtools package adds starred versions of the same environments.
// These have an optional argument to choose left|center|right justification.

defineEnvironment({
  type: "array",
  names: ["matrix", "pmatrix", "bmatrix", "Bmatrix", "vmatrix", "Vmatrix", "matrix*", "pmatrix*", "bmatrix*", "Bmatrix*", "vmatrix*", "Vmatrix*"],
  props: {
    numArgs: 0
  },
  handler: function handler(context) {
    var delimiters = {
      "matrix": null,
      "pmatrix": ["(", ")"],
      "bmatrix": ["[", "]"],
      "Bmatrix": ["\\{", "\\}"],
      "vmatrix": ["|", "|"],
      "Vmatrix": ["\\Vert", "\\Vert"]
    }[context.envName.replace("*", "")]; // \hskip -\arraycolsep in amsmath

    var colAlign = "c";
    var payload = {
      hskipBeforeAndAfter: false,
      cols: [{
        type: "align",
        align: colAlign
      }]
    };

    if (context.envName.charAt(context.envName.length - 1) === "*") {
      // It's one of the mathtools starred functions.
      // Parse the optional alignment argument.
      var parser = context.parser;
      parser.consumeSpaces();

      if (parser.fetch().text === "[") {
        parser.consume();
        parser.consumeSpaces();
        colAlign = parser.fetch().text;

        if ("lcr".indexOf(colAlign) === -1) {
          throw new src_ParseError("Expected l or c or r", parser.nextToken);
        }

        parser.consume();
        parser.consumeSpaces();
        parser.expect("]");
        parser.consume();
        payload.cols = [{
          type: "align",
          align: colAlign
        }];
      }
    }

    var res = parseArray(context.parser, payload, dCellStyle(context.envName)); // Populate cols with the correct number of column alignment specs.

    var numCols = Math.max.apply(Math, [0].concat(res.body.map(function (row) {
      return row.length;
    })));
    res.cols = new Array(numCols).fill({
      type: "align",
      align: colAlign
    });
    return delimiters ? {
      type: "leftright",
      mode: context.mode,
      body: [res],
      left: delimiters[0],
      right: delimiters[1],
      rightColor: undefined // \right uninfluenced by \color in array

    } : res;
  },
  htmlBuilder: array_htmlBuilder,
  mathmlBuilder: array_mathmlBuilder
});
defineEnvironment({
  type: "array",
  names: ["smallmatrix"],
  props: {
    numArgs: 0
  },
  handler: function handler(context) {
    var payload = {
      arraystretch: 0.5
    };
    var res = parseArray(context.parser, payload, "script");
    res.colSeparationType = "small";
    return res;
  },
  htmlBuilder: array_htmlBuilder,
  mathmlBuilder: array_mathmlBuilder
});
defineEnvironment({
  type: "array",
  names: ["subarray"],
  props: {
    numArgs: 1
  },
  handler: function handler(context, args) {
    // Parsing of {subarray} is similar to {array}
    var symNode = checkSymbolNodeType(args[0]);
    var colalign = symNode ? [args[0]] : assertNodeType(args[0], "ordgroup").body;
    var cols = colalign.map(function (nde) {
      var node = assertSymbolNodeType(nde);
      var ca = node.text; // {subarray} only recognizes "l" & "c"

      if ("lc".indexOf(ca) !== -1) {
        return {
          type: "align",
          align: ca
        };
      }

      throw new src_ParseError("Unknown column alignment: " + ca, nde);
    });

    if (cols.length > 1) {
      throw new src_ParseError("{subarray} can contain only one column");
    }

    var res = {
      cols: cols,
      hskipBeforeAndAfter: false,
      arraystretch: 0.5
    };
    res = parseArray(context.parser, res, "script");

    if (res.body.length > 0 && res.body[0].length > 1) {
      throw new src_ParseError("{subarray} can contain only one column");
    }

    return res;
  },
  htmlBuilder: array_htmlBuilder,
  mathmlBuilder: array_mathmlBuilder
}); // A cases environment (in amsmath.sty) is almost equivalent to
// \def\arraystretch{1.2}%
// \left\{\begin{array}{@{}l@{\quad}l@{}} … \end{array}\right.
// {dcases} is a {cases} environment where cells are set in \displaystyle,
// as defined in mathtools.sty.
// {rcases} is another mathtools environment. It's brace is on the right side.

defineEnvironment({
  type: "array",
  names: ["cases", "dcases", "rcases", "drcases"],
  props: {
    numArgs: 0
  },
  handler: function handler(context) {
    var payload = {
      arraystretch: 1.2,
      cols: [{
        type: "align",
        align: "l",
        pregap: 0,
        // TODO(kevinb) get the current style.
        // For now we use the metrics for TEXT style which is what we were
        // doing before.  Before attempting to get the current style we
        // should look at TeX's behavior especially for \over and matrices.
        postgap: 1.0
        /* 1em quad */

      }, {
        type: "align",
        align: "l",
        pregap: 0,
        postgap: 0
      }]
    };
    var res = parseArray(context.parser, payload, dCellStyle(context.envName));
    return {
      type: "leftright",
      mode: context.mode,
      body: [res],
      left: context.envName.indexOf("r") > -1 ? "." : "\\{",
      right: context.envName.indexOf("r") > -1 ? "\\}" : ".",
      rightColor: undefined
    };
  },
  htmlBuilder: array_htmlBuilder,
  mathmlBuilder: array_mathmlBuilder
}); // In the align environment, one uses ampersands, &, to specify number of
// columns in each row, and to locate spacing between each column.
// align gets automatic numbering. align* and aligned do not.
// The alignedat environment can be used in math mode.
// Note that we assume \nomallineskiplimit to be zero,
// so that \strut@ is the same as \strut.

defineEnvironment({
  type: "array",
  names: ["align", "align*", "aligned", "split"],
  props: {
    numArgs: 0
  },
  handler: alignedHandler,
  htmlBuilder: array_htmlBuilder,
  mathmlBuilder: array_mathmlBuilder
}); // A gathered environment is like an array environment with one centered
// column, but where rows are considered lines so get \jot line spacing
// and contents are set in \displaystyle.

defineEnvironment({
  type: "array",
  names: ["gathered", "gather", "gather*"],
  props: {
    numArgs: 0
  },
  handler: function handler(context) {
    if (utils.contains(["gather", "gather*"], context.envName)) {
      validateAmsEnvironmentContext(context);
    }

    var res = {
      cols: [{
        type: "align",
        align: "c"
      }],
      addJot: true,
      colSeparationType: "gather",
      addEqnNum: context.envName === "gather",
      emptySingleRow: true,
      leqno: context.parser.settings.leqno
    };
    return parseArray(context.parser, res, "display");
  },
  htmlBuilder: array_htmlBuilder,
  mathmlBuilder: array_mathmlBuilder
}); // alignat environment is like an align environment, but one must explicitly
// specify maximum number of columns in each row, and can adjust spacing between
// each columns.

defineEnvironment({
  type: "array",
  names: ["alignat", "alignat*", "alignedat"],
  props: {
    numArgs: 1
  },
  handler: alignedHandler,
  htmlBuilder: array_htmlBuilder,
  mathmlBuilder: array_mathmlBuilder
});
defineEnvironment({
  type: "array",
  names: ["equation", "equation*"],
  props: {
    numArgs: 0
  },
  handler: function handler(context) {
    validateAmsEnvironmentContext(context);
    var res = {
      addEqnNum: context.envName === "equation",
      emptySingleRow: true,
      singleRow: true,
      maxNumCols: 1,
      leqno: context.parser.settings.leqno
    };
    return parseArray(context.parser, res, "display");
  },
  htmlBuilder: array_htmlBuilder,
  mathmlBuilder: array_mathmlBuilder
});
defineEnvironment({
  type: "array",
  names: ["CD"],
  props: {
    numArgs: 0
  },
  handler: function handler(context) {
    validateAmsEnvironmentContext(context);
    return parseCD(context.parser);
  },
  htmlBuilder: array_htmlBuilder,
  mathmlBuilder: array_mathmlBuilder
}); // Catch \hline outside array environment

defineFunction({
  type: "text",
  // Doesn't matter what this is.
  names: ["\\hline", "\\hdashline"],
  props: {
    numArgs: 0,
    allowedInText: true,
    allowedInMath: true
  },
  handler: function handler(context, args) {
    throw new src_ParseError(context.funcName + " valid only within array environment");
  }
});
;// CONCATENATED MODULE: ./src/environments.js

var environments = _environments;
/* harmony default export */ var src_environments = (environments); // All environment definitions should be imported below


;// CONCATENATED MODULE: ./src/functions/environment.js



 // Environment delimiters. HTML/MathML rendering is defined in the corresponding
// defineEnvironment definitions.

defineFunction({
  type: "environment",
  names: ["\\begin", "\\end"],
  props: {
    numArgs: 1,
    argTypes: ["text"]
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var nameGroup = args[0];

    if (nameGroup.type !== "ordgroup") {
      throw new src_ParseError("Invalid environment name", nameGroup);
    }

    var envName = "";

    for (var i = 0; i < nameGroup.body.length; ++i) {
      envName += assertNodeType(nameGroup.body[i], "textord").text;
    }

    if (funcName === "\\begin") {
      // begin...end is similar to left...right
      if (!src_environments.hasOwnProperty(envName)) {
        throw new src_ParseError("No such environment: " + envName, nameGroup);
      } // Build the environment object. Arguments and other information will
      // be made available to the begin and end methods using properties.


      var env = src_environments[envName];

      var _parser$parseArgument = parser.parseArguments("\\begin{" + envName + "}", env),
          _args = _parser$parseArgument.args,
          optArgs = _parser$parseArgument.optArgs;

      var context = {
        mode: parser.mode,
        envName: envName,
        parser: parser
      };
      var result = env.handler(context, _args, optArgs);
      parser.expect("\\end", false);
      var endNameToken = parser.nextToken;
      var end = assertNodeType(parser.parseFunction(), "environment");

      if (end.name !== envName) {
        throw new src_ParseError("Mismatch: \\begin{" + envName + "} matched by \\end{" + end.name + "}", endNameToken);
      } // $FlowFixMe, "environment" handler returns an environment ParseNode


      return result;
    }

    return {
      type: "environment",
      mode: parser.mode,
      name: envName,
      nameGroup: nameGroup
    };
  }
});
;// CONCATENATED MODULE: ./src/functions/mclass.js






var mclass_makeSpan = buildCommon.makeSpan;

function mclass_htmlBuilder(group, options) {
  var elements = buildExpression(group.body, options, true);
  return mclass_makeSpan([group.mclass], elements, options);
}

function mclass_mathmlBuilder(group, options) {
  var node;
  var inner = buildMathML_buildExpression(group.body, options);

  if (group.mclass === "minner") {
    return mathMLTree.newDocumentFragment(inner);
  } else if (group.mclass === "mord") {
    if (group.isCharacterBox) {
      node = inner[0];
      node.type = "mi";
    } else {
      node = new mathMLTree.MathNode("mi", inner);
    }
  } else {
    if (group.isCharacterBox) {
      node = inner[0];
      node.type = "mo";
    } else {
      node = new mathMLTree.MathNode("mo", inner);
    } // Set spacing based on what is the most likely adjacent atom type.
    // See TeXbook p170.


    if (group.mclass === "mbin") {
      node.attributes.lspace = "0.22em"; // medium space

      node.attributes.rspace = "0.22em";
    } else if (group.mclass === "mpunct") {
      node.attributes.lspace = "0em";
      node.attributes.rspace = "0.17em"; // thinspace
    } else if (group.mclass === "mopen" || group.mclass === "mclose") {
      node.attributes.lspace = "0em";
      node.attributes.rspace = "0em";
    } // MathML <mo> default space is 5/18 em, so <mrel> needs no action.
    // Ref: https://developer.mozilla.org/en-US/docs/Web/MathML/Element/mo

  }

  return node;
} // Math class commands except \mathop


defineFunction({
  type: "mclass",
  names: ["\\mathord", "\\mathbin", "\\mathrel", "\\mathopen", "\\mathclose", "\\mathpunct", "\\mathinner"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var body = args[0];
    return {
      type: "mclass",
      mode: parser.mode,
      mclass: "m" + funcName.substr(5),
      // TODO(kevinb): don't prefix with 'm'
      body: ordargument(body),
      isCharacterBox: utils.isCharacterBox(body)
    };
  },
  htmlBuilder: mclass_htmlBuilder,
  mathmlBuilder: mclass_mathmlBuilder
});
var binrelClass = function binrelClass(arg) {
  // \binrel@ spacing varies with (bin|rel|ord) of the atom in the argument.
  // (by rendering separately and with {}s before and after, and measuring
  // the change in spacing).  We'll do roughly the same by detecting the
  // atom type directly.
  var atom = arg.type === "ordgroup" && arg.body.length ? arg.body[0] : arg;

  if (atom.type === "atom" && (atom.family === "bin" || atom.family === "rel")) {
    return "m" + atom.family;
  } else {
    return "mord";
  }
}; // \@binrel{x}{y} renders like y but as mbin/mrel/mord if x is mbin/mrel/mord.
// This is equivalent to \binrel@{x}\binrel@@{y} in AMSTeX.

defineFunction({
  type: "mclass",
  names: ["\\@binrel"],
  props: {
    numArgs: 2
  },
  handler: function handler(_ref2, args) {
    var parser = _ref2.parser;
    return {
      type: "mclass",
      mode: parser.mode,
      mclass: binrelClass(args[0]),
      body: ordargument(args[1]),
      isCharacterBox: utils.isCharacterBox(args[1])
    };
  }
}); // Build a relation or stacked op by placing one symbol on top of another

defineFunction({
  type: "mclass",
  names: ["\\stackrel", "\\overset", "\\underset"],
  props: {
    numArgs: 2
  },
  handler: function handler(_ref3, args) {
    var parser = _ref3.parser,
        funcName = _ref3.funcName;
    var baseArg = args[1];
    var shiftedArg = args[0];
    var mclass;

    if (funcName !== "\\stackrel") {
      // LaTeX applies \binrel spacing to \overset and \underset.
      mclass = binrelClass(baseArg);
    } else {
      mclass = "mrel"; // for \stackrel
    }

    var baseOp = {
      type: "op",
      mode: baseArg.mode,
      limits: true,
      alwaysHandleSupSub: true,
      parentIsSupSub: false,
      symbol: false,
      suppressBaseShift: funcName !== "\\stackrel",
      body: ordargument(baseArg)
    };
    var supsub = {
      type: "supsub",
      mode: shiftedArg.mode,
      base: baseOp,
      sup: funcName === "\\underset" ? null : shiftedArg,
      sub: funcName === "\\underset" ? shiftedArg : null
    };
    return {
      type: "mclass",
      mode: parser.mode,
      mclass: mclass,
      body: [supsub],
      isCharacterBox: utils.isCharacterBox(supsub)
    };
  },
  htmlBuilder: mclass_htmlBuilder,
  mathmlBuilder: mclass_mathmlBuilder
});
;// CONCATENATED MODULE: ./src/functions/font.js
// TODO(kevinb): implement \\sl and \\sc






var font_htmlBuilder = function htmlBuilder(group, options) {
  var font = group.font;
  var newOptions = options.withFont(font);
  return buildGroup(group.body, newOptions);
};

var font_mathmlBuilder = function mathmlBuilder(group, options) {
  var font = group.font;
  var newOptions = options.withFont(font);
  return buildMathML_buildGroup(group.body, newOptions);
};

var fontAliases = {
  "\\Bbb": "\\mathbb",
  "\\bold": "\\mathbf",
  "\\frak": "\\mathfrak",
  "\\bm": "\\boldsymbol"
};
defineFunction({
  type: "font",
  names: [// styles, except \boldsymbol defined below
  "\\mathrm", "\\mathit", "\\mathbf", "\\mathnormal", // families
  "\\mathbb", "\\mathcal", "\\mathfrak", "\\mathscr", "\\mathsf", "\\mathtt", // aliases, except \bm defined below
  "\\Bbb", "\\bold", "\\frak"],
  props: {
    numArgs: 1,
    allowedInArgument: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var body = normalizeArgument(args[0]);
    var func = funcName;

    if (func in fontAliases) {
      func = fontAliases[func];
    }

    return {
      type: "font",
      mode: parser.mode,
      font: func.slice(1),
      body: body
    };
  },
  htmlBuilder: font_htmlBuilder,
  mathmlBuilder: font_mathmlBuilder
});
defineFunction({
  type: "mclass",
  names: ["\\boldsymbol", "\\bm"],
  props: {
    numArgs: 1
  },
  handler: function handler(_ref2, args) {
    var parser = _ref2.parser;
    var body = args[0];
    var isCharacterBox = utils.isCharacterBox(body); // amsbsy.sty's \boldsymbol uses \binrel spacing to inherit the
    // argument's bin|rel|ord status

    return {
      type: "mclass",
      mode: parser.mode,
      mclass: binrelClass(body),
      body: [{
        type: "font",
        mode: parser.mode,
        font: "boldsymbol",
        body: body
      }],
      isCharacterBox: isCharacterBox
    };
  }
}); // Old font changing functions

defineFunction({
  type: "font",
  names: ["\\rm", "\\sf", "\\tt", "\\bf", "\\it", "\\cal"],
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler: function handler(_ref3, args) {
    var parser = _ref3.parser,
        funcName = _ref3.funcName,
        breakOnTokenText = _ref3.breakOnTokenText;
    var mode = parser.mode;
    var body = parser.parseExpression(true, breakOnTokenText);
    var style = "math" + funcName.slice(1);
    return {
      type: "font",
      mode: mode,
      font: style,
      body: {
        type: "ordgroup",
        mode: parser.mode,
        body: body
      }
    };
  },
  htmlBuilder: font_htmlBuilder,
  mathmlBuilder: font_mathmlBuilder
});
;// CONCATENATED MODULE: ./src/functions/genfrac.js











var adjustStyle = function adjustStyle(size, originalStyle) {
  // Figure out what style this fraction should be in based on the
  // function used
  var style = originalStyle;

  if (size === "display") {
    // Get display style as a default.
    // If incoming style is sub/sup, use style.text() to get correct size.
    style = style.id >= src_Style.SCRIPT.id ? style.text() : src_Style.DISPLAY;
  } else if (size === "text" && style.size === src_Style.DISPLAY.size) {
    // We're in a \tfrac but incoming style is displaystyle, so:
    style = src_Style.TEXT;
  } else if (size === "script") {
    style = src_Style.SCRIPT;
  } else if (size === "scriptscript") {
    style = src_Style.SCRIPTSCRIPT;
  }

  return style;
};

var genfrac_htmlBuilder = function htmlBuilder(group, options) {
  // Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).
  var style = adjustStyle(group.size, options.style);
  var nstyle = style.fracNum();
  var dstyle = style.fracDen();
  var newOptions;
  newOptions = options.havingStyle(nstyle);
  var numerm = buildGroup(group.numer, newOptions, options);

  if (group.continued) {
    // \cfrac inserts a \strut into the numerator.
    // Get \strut dimensions from TeXbook page 353.
    var hStrut = 8.5 / options.fontMetrics().ptPerEm;
    var dStrut = 3.5 / options.fontMetrics().ptPerEm;
    numerm.height = numerm.height < hStrut ? hStrut : numerm.height;
    numerm.depth = numerm.depth < dStrut ? dStrut : numerm.depth;
  }

  newOptions = options.havingStyle(dstyle);
  var denomm = buildGroup(group.denom, newOptions, options);
  var rule;
  var ruleWidth;
  var ruleSpacing;

  if (group.hasBarLine) {
    if (group.barSize) {
      ruleWidth = calculateSize(group.barSize, options);
      rule = buildCommon.makeLineSpan("frac-line", options, ruleWidth);
    } else {
      rule = buildCommon.makeLineSpan("frac-line", options);
    }

    ruleWidth = rule.height;
    ruleSpacing = rule.height;
  } else {
    rule = null;
    ruleWidth = 0;
    ruleSpacing = options.fontMetrics().defaultRuleThickness;
  } // Rule 15b


  var numShift;
  var clearance;
  var denomShift;

  if (style.size === src_Style.DISPLAY.size || group.size === "display") {
    numShift = options.fontMetrics().num1;

    if (ruleWidth > 0) {
      clearance = 3 * ruleSpacing;
    } else {
      clearance = 7 * ruleSpacing;
    }

    denomShift = options.fontMetrics().denom1;
  } else {
    if (ruleWidth > 0) {
      numShift = options.fontMetrics().num2;
      clearance = ruleSpacing;
    } else {
      numShift = options.fontMetrics().num3;
      clearance = 3 * ruleSpacing;
    }

    denomShift = options.fontMetrics().denom2;
  }

  var frac;

  if (!rule) {
    // Rule 15c
    var candidateClearance = numShift - numerm.depth - (denomm.height - denomShift);

    if (candidateClearance < clearance) {
      numShift += 0.5 * (clearance - candidateClearance);
      denomShift += 0.5 * (clearance - candidateClearance);
    }

    frac = buildCommon.makeVList({
      positionType: "individualShift",
      children: [{
        type: "elem",
        elem: denomm,
        shift: denomShift
      }, {
        type: "elem",
        elem: numerm,
        shift: -numShift
      }]
    }, options);
  } else {
    // Rule 15d
    var axisHeight = options.fontMetrics().axisHeight;

    if (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth) < clearance) {
      numShift += clearance - (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth));
    }

    if (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift) < clearance) {
      denomShift += clearance - (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift));
    }

    var midShift = -(axisHeight - 0.5 * ruleWidth);
    frac = buildCommon.makeVList({
      positionType: "individualShift",
      children: [{
        type: "elem",
        elem: denomm,
        shift: denomShift
      }, {
        type: "elem",
        elem: rule,
        shift: midShift
      }, {
        type: "elem",
        elem: numerm,
        shift: -numShift
      }]
    }, options);
  } // Since we manually change the style sometimes (with \dfrac or \tfrac),
  // account for the possible size change here.


  newOptions = options.havingStyle(style);
  frac.height *= newOptions.sizeMultiplier / options.sizeMultiplier;
  frac.depth *= newOptions.sizeMultiplier / options.sizeMultiplier; // Rule 15e

  var delimSize;

  if (style.size === src_Style.DISPLAY.size) {
    delimSize = options.fontMetrics().delim1;
  } else if (style.size === src_Style.SCRIPTSCRIPT.size) {
    delimSize = options.havingStyle(src_Style.SCRIPT).fontMetrics().delim2;
  } else {
    delimSize = options.fontMetrics().delim2;
  }

  var leftDelim;
  var rightDelim;

  if (group.leftDelim == null) {
    leftDelim = makeNullDelimiter(options, ["mopen"]);
  } else {
    leftDelim = delimiter.customSizedDelim(group.leftDelim, delimSize, true, options.havingStyle(style), group.mode, ["mopen"]);
  }

  if (group.continued) {
    rightDelim = buildCommon.makeSpan([]); // zero width for \cfrac
  } else if (group.rightDelim == null) {
    rightDelim = makeNullDelimiter(options, ["mclose"]);
  } else {
    rightDelim = delimiter.customSizedDelim(group.rightDelim, delimSize, true, options.havingStyle(style), group.mode, ["mclose"]);
  }

  return buildCommon.makeSpan(["mord"].concat(newOptions.sizingClasses(options)), [leftDelim, buildCommon.makeSpan(["mfrac"], [frac]), rightDelim], options);
};

var genfrac_mathmlBuilder = function mathmlBuilder(group, options) {
  var node = new mathMLTree.MathNode("mfrac", [buildMathML_buildGroup(group.numer, options), buildMathML_buildGroup(group.denom, options)]);

  if (!group.hasBarLine) {
    node.setAttribute("linethickness", "0px");
  } else if (group.barSize) {
    var ruleWidth = calculateSize(group.barSize, options);
    node.setAttribute("linethickness", ruleWidth + "em");
  }

  var style = adjustStyle(group.size, options.style);

  if (style.size !== options.style.size) {
    node = new mathMLTree.MathNode("mstyle", [node]);
    var isDisplay = style.size === src_Style.DISPLAY.size ? "true" : "false";
    node.setAttribute("displaystyle", isDisplay);
    node.setAttribute("scriptlevel", "0");
  }

  if (group.leftDelim != null || group.rightDelim != null) {
    var withDelims = [];

    if (group.leftDelim != null) {
      var leftOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.leftDelim.replace("\\", ""))]);
      leftOp.setAttribute("fence", "true");
      withDelims.push(leftOp);
    }

    withDelims.push(node);

    if (group.rightDelim != null) {
      var rightOp = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode(group.rightDelim.replace("\\", ""))]);
      rightOp.setAttribute("fence", "true");
      withDelims.push(rightOp);
    }

    return makeRow(withDelims);
  }

  return node;
};

defineFunction({
  type: "genfrac",
  names: ["\\dfrac", "\\frac", "\\tfrac", "\\dbinom", "\\binom", "\\tbinom", "\\\\atopfrac", // can’t be entered directly
  "\\\\bracefrac", "\\\\brackfrac" // ditto
  ],
  props: {
    numArgs: 2,
    allowedInArgument: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var numer = args[0];
    var denom = args[1];
    var hasBarLine;
    var leftDelim = null;
    var rightDelim = null;
    var size = "auto";

    switch (funcName) {
      case "\\dfrac":
      case "\\frac":
      case "\\tfrac":
        hasBarLine = true;
        break;

      case "\\\\atopfrac":
        hasBarLine = false;
        break;

      case "\\dbinom":
      case "\\binom":
      case "\\tbinom":
        hasBarLine = false;
        leftDelim = "(";
        rightDelim = ")";
        break;

      case "\\\\bracefrac":
        hasBarLine = false;
        leftDelim = "\\{";
        rightDelim = "\\}";
        break;

      case "\\\\brackfrac":
        hasBarLine = false;
        leftDelim = "[";
        rightDelim = "]";
        break;

      default:
        throw new Error("Unrecognized genfrac command");
    }

    switch (funcName) {
      case "\\dfrac":
      case "\\dbinom":
        size = "display";
        break;

      case "\\tfrac":
      case "\\tbinom":
        size = "text";
        break;
    }

    return {
      type: "genfrac",
      mode: parser.mode,
      continued: false,
      numer: numer,
      denom: denom,
      hasBarLine: hasBarLine,
      leftDelim: leftDelim,
      rightDelim: rightDelim,
      size: size,
      barSize: null
    };
  },
  htmlBuilder: genfrac_htmlBuilder,
  mathmlBuilder: genfrac_mathmlBuilder
});
defineFunction({
  type: "genfrac",
  names: ["\\cfrac"],
  props: {
    numArgs: 2
  },
  handler: function handler(_ref2, args) {
    var parser = _ref2.parser,
        funcName = _ref2.funcName;
    var numer = args[0];
    var denom = args[1];
    return {
      type: "genfrac",
      mode: parser.mode,
      continued: true,
      numer: numer,
      denom: denom,
      hasBarLine: true,
      leftDelim: null,
      rightDelim: null,
      size: "display",
      barSize: null
    };
  }
}); // Infix generalized fractions -- these are not rendered directly, but replaced
// immediately by one of the variants above.

defineFunction({
  type: "infix",
  names: ["\\over", "\\choose", "\\atop", "\\brace", "\\brack"],
  props: {
    numArgs: 0,
    infix: true
  },
  handler: function handler(_ref3) {
    var parser = _ref3.parser,
        funcName = _ref3.funcName,
        token = _ref3.token;
    var replaceWith;

    switch (funcName) {
      case "\\over":
        replaceWith = "\\frac";
        break;

      case "\\choose":
        replaceWith = "\\binom";
        break;

      case "\\atop":
        replaceWith = "\\\\atopfrac";
        break;

      case "\\brace":
        replaceWith = "\\\\bracefrac";
        break;

      case "\\brack":
        replaceWith = "\\\\brackfrac";
        break;

      default:
        throw new Error("Unrecognized infix genfrac command");
    }

    return {
      type: "infix",
      mode: parser.mode,
      replaceWith: replaceWith,
      token: token
    };
  }
});
var stylArray = ["display", "text", "script", "scriptscript"];

var delimFromValue = function delimFromValue(delimString) {
  var delim = null;

  if (delimString.length > 0) {
    delim = delimString;
    delim = delim === "." ? null : delim;
  }

  return delim;
};

defineFunction({
  type: "genfrac",
  names: ["\\genfrac"],
  props: {
    numArgs: 6,
    allowedInArgument: true,
    argTypes: ["math", "math", "size", "text", "math", "math"]
  },
  handler: function handler(_ref4, args) {
    var parser = _ref4.parser;
    var numer = args[4];
    var denom = args[5]; // Look into the parse nodes to get the desired delimiters.

    var leftNode = normalizeArgument(args[0]);
    var leftDelim = leftNode.type === "atom" && leftNode.family === "open" ? delimFromValue(leftNode.text) : null;
    var rightNode = normalizeArgument(args[1]);
    var rightDelim = rightNode.type === "atom" && rightNode.family === "close" ? delimFromValue(rightNode.text) : null;
    var barNode = assertNodeType(args[2], "size");
    var hasBarLine;
    var barSize = null;

    if (barNode.isBlank) {
      // \genfrac acts differently than \above.
      // \genfrac treats an empty size group as a signal to use a
      // standard bar size. \above would see size = 0 and omit the bar.
      hasBarLine = true;
    } else {
      barSize = barNode.value;
      hasBarLine = barSize.number > 0;
    } // Find out if we want displaystyle, textstyle, etc.


    var size = "auto";
    var styl = args[3];

    if (styl.type === "ordgroup") {
      if (styl.body.length > 0) {
        var textOrd = assertNodeType(styl.body[0], "textord");
        size = stylArray[Number(textOrd.text)];
      }
    } else {
      styl = assertNodeType(styl, "textord");
      size = stylArray[Number(styl.text)];
    }

    return {
      type: "genfrac",
      mode: parser.mode,
      numer: numer,
      denom: denom,
      continued: false,
      hasBarLine: hasBarLine,
      barSize: barSize,
      leftDelim: leftDelim,
      rightDelim: rightDelim,
      size: size
    };
  },
  htmlBuilder: genfrac_htmlBuilder,
  mathmlBuilder: genfrac_mathmlBuilder
}); // \above is an infix fraction that also defines a fraction bar size.

defineFunction({
  type: "infix",
  names: ["\\above"],
  props: {
    numArgs: 1,
    argTypes: ["size"],
    infix: true
  },
  handler: function handler(_ref5, args) {
    var parser = _ref5.parser,
        funcName = _ref5.funcName,
        token = _ref5.token;
    return {
      type: "infix",
      mode: parser.mode,
      replaceWith: "\\\\abovefrac",
      size: assertNodeType(args[0], "size").value,
      token: token
    };
  }
});
defineFunction({
  type: "genfrac",
  names: ["\\\\abovefrac"],
  props: {
    numArgs: 3,
    argTypes: ["math", "size", "math"]
  },
  handler: function handler(_ref6, args) {
    var parser = _ref6.parser,
        funcName = _ref6.funcName;
    var numer = args[0];
    var barSize = assert(assertNodeType(args[1], "infix").size);
    var denom = args[2];
    var hasBarLine = barSize.number > 0;
    return {
      type: "genfrac",
      mode: parser.mode,
      numer: numer,
      denom: denom,
      continued: false,
      hasBarLine: hasBarLine,
      barSize: barSize,
      leftDelim: null,
      rightDelim: null,
      size: "auto"
    };
  },
  htmlBuilder: genfrac_htmlBuilder,
  mathmlBuilder: genfrac_mathmlBuilder
});
;// CONCATENATED MODULE: ./src/functions/horizBrace.js








// NOTE: Unlike most `htmlBuilder`s, this one handles not only "horizBrace", but
// also "supsub" since an over/underbrace can affect super/subscripting.
var horizBrace_htmlBuilder = function htmlBuilder(grp, options) {
  var style = options.style; // Pull out the `ParseNode<"horizBrace">` if `grp` is a "supsub" node.

  var supSubGroup;
  var group;

  if (grp.type === "supsub") {
    // Ref: LaTeX source2e: }}}}\limits}
    // i.e. LaTeX treats the brace similar to an op and passes it
    // with \limits, so we need to assign supsub style.
    supSubGroup = grp.sup ? buildGroup(grp.sup, options.havingStyle(style.sup()), options) : buildGroup(grp.sub, options.havingStyle(style.sub()), options);
    group = assertNodeType(grp.base, "horizBrace");
  } else {
    group = assertNodeType(grp, "horizBrace");
  } // Build the base group


  var body = buildGroup(group.base, options.havingBaseStyle(src_Style.DISPLAY)); // Create the stretchy element

  var braceBody = stretchy.svgSpan(group, options); // Generate the vlist, with the appropriate kerns        ┏━━━━━━━━┓
  // This first vlist contains the content and the brace:   equation

  var vlist;

  if (group.isOver) {
    vlist = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: body
      }, {
        type: "kern",
        size: 0.1
      }, {
        type: "elem",
        elem: braceBody
      }]
    }, options); // $FlowFixMe: Replace this with passing "svg-align" into makeVList.

    vlist.children[0].children[0].children[1].classes.push("svg-align");
  } else {
    vlist = buildCommon.makeVList({
      positionType: "bottom",
      positionData: body.depth + 0.1 + braceBody.height,
      children: [{
        type: "elem",
        elem: braceBody
      }, {
        type: "kern",
        size: 0.1
      }, {
        type: "elem",
        elem: body
      }]
    }, options); // $FlowFixMe: Replace this with passing "svg-align" into makeVList.

    vlist.children[0].children[0].children[0].classes.push("svg-align");
  }

  if (supSubGroup) {
    // To write the supsub, wrap the first vlist in another vlist:
    // They can't all go in the same vlist, because the note might be
    // wider than the equation. We want the equation to control the
    // brace width.
    //      note          long note           long note
    //   ┏━━━━━━━━┓   or    ┏━━━┓     not    ┏━━━━━━━━━┓
    //    equation           eqn                 eqn
    var vSpan = buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);

    if (group.isOver) {
      vlist = buildCommon.makeVList({
        positionType: "firstBaseline",
        children: [{
          type: "elem",
          elem: vSpan
        }, {
          type: "kern",
          size: 0.2
        }, {
          type: "elem",
          elem: supSubGroup
        }]
      }, options);
    } else {
      vlist = buildCommon.makeVList({
        positionType: "bottom",
        positionData: vSpan.depth + 0.2 + supSubGroup.height + supSubGroup.depth,
        children: [{
          type: "elem",
          elem: supSubGroup
        }, {
          type: "kern",
          size: 0.2
        }, {
          type: "elem",
          elem: vSpan
        }]
      }, options);
    }
  }

  return buildCommon.makeSpan(["mord", group.isOver ? "mover" : "munder"], [vlist], options);
};

var horizBrace_mathmlBuilder = function mathmlBuilder(group, options) {
  var accentNode = stretchy.mathMLnode(group.label);
  return new mathMLTree.MathNode(group.isOver ? "mover" : "munder", [buildMathML_buildGroup(group.base, options), accentNode]);
}; // Horizontal stretchy braces


defineFunction({
  type: "horizBrace",
  names: ["\\overbrace", "\\underbrace"],
  props: {
    numArgs: 1
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    return {
      type: "horizBrace",
      mode: parser.mode,
      label: funcName,
      isOver: /^\\over/.test(funcName),
      base: args[0]
    };
  },
  htmlBuilder: horizBrace_htmlBuilder,
  mathmlBuilder: horizBrace_mathmlBuilder
});
;// CONCATENATED MODULE: ./src/functions/href.js






defineFunction({
  type: "href",
  names: ["\\href"],
  props: {
    numArgs: 2,
    argTypes: ["url", "original"],
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    var body = args[1];
    var href = assertNodeType(args[0], "url").url;

    if (!parser.settings.isTrusted({
      command: "\\href",
      url: href
    })) {
      return parser.formatUnsupportedCmd("\\href");
    }

    return {
      type: "href",
      mode: parser.mode,
      href: href,
      body: ordargument(body)
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var elements = buildExpression(group.body, options, false);
    return buildCommon.makeAnchor(group.href, [], elements, options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var math = buildExpressionRow(group.body, options);

    if (!(math instanceof MathNode)) {
      math = new MathNode("mrow", [math]);
    }

    math.setAttribute("href", group.href);
    return math;
  }
});
defineFunction({
  type: "href",
  names: ["\\url"],
  props: {
    numArgs: 1,
    argTypes: ["url"],
    allowedInText: true
  },
  handler: function handler(_ref2, args) {
    var parser = _ref2.parser;
    var href = assertNodeType(args[0], "url").url;

    if (!parser.settings.isTrusted({
      command: "\\url",
      url: href
    })) {
      return parser.formatUnsupportedCmd("\\url");
    }

    var chars = [];

    for (var i = 0; i < href.length; i++) {
      var c = href[i];

      if (c === "~") {
        c = "\\textasciitilde";
      }

      chars.push({
        type: "textord",
        mode: "text",
        text: c
      });
    }

    var body = {
      type: "text",
      mode: parser.mode,
      font: "\\texttt",
      body: chars
    };
    return {
      type: "href",
      mode: parser.mode,
      href: href,
      body: ordargument(body)
    };
  }
});
;// CONCATENATED MODULE: ./src/functions/hbox.js




 // \hbox is provided for compatibility with LaTeX \vcenter.
// In LaTeX, \vcenter can act only on a box, as in
// \vcenter{\hbox{$\frac{a+b}{\dfrac{c}{d}}$}}
// This function by itself doesn't do anything but prevent a soft line break.

defineFunction({
  type: "hbox",
  names: ["\\hbox"],
  props: {
    numArgs: 1,
    argTypes: ["text"],
    allowedInText: true,
    primitive: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    return {
      type: "hbox",
      mode: parser.mode,
      body: ordargument(args[0])
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var elements = buildExpression(group.body, options, false);
    return buildCommon.makeFragment(elements);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    return new mathMLTree.MathNode("mrow", buildMathML_buildExpression(group.body, options));
  }
});
;// CONCATENATED MODULE: ./src/functions/html.js






defineFunction({
  type: "html",
  names: ["\\htmlClass", "\\htmlId", "\\htmlStyle", "\\htmlData"],
  props: {
    numArgs: 2,
    argTypes: ["raw", "original"],
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName,
        token = _ref.token;
    var value = assertNodeType(args[0], "raw").string;
    var body = args[1];

    if (parser.settings.strict) {
      parser.settings.reportNonstrict("htmlExtension", "HTML extension is disabled on strict mode");
    }

    var trustContext;
    var attributes = {};

    switch (funcName) {
      case "\\htmlClass":
        attributes.class = value;
        trustContext = {
          command: "\\htmlClass",
          class: value
        };
        break;

      case "\\htmlId":
        attributes.id = value;
        trustContext = {
          command: "\\htmlId",
          id: value
        };
        break;

      case "\\htmlStyle":
        attributes.style = value;
        trustContext = {
          command: "\\htmlStyle",
          style: value
        };
        break;

      case "\\htmlData":
        {
          var data = value.split(",");

          for (var i = 0; i < data.length; i++) {
            var keyVal = data[i].split("=");

            if (keyVal.length !== 2) {
              throw new src_ParseError("Error parsing key-value for \\htmlData");
            }

            attributes["data-" + keyVal[0].trim()] = keyVal[1].trim();
          }

          trustContext = {
            command: "\\htmlData",
            attributes: attributes
          };
          break;
        }

      default:
        throw new Error("Unrecognized html command");
    }

    if (!parser.settings.isTrusted(trustContext)) {
      return parser.formatUnsupportedCmd(funcName);
    }

    return {
      type: "html",
      mode: parser.mode,
      attributes: attributes,
      body: ordargument(body)
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var elements = buildExpression(group.body, options, false);
    var classes = ["enclosing"];

    if (group.attributes.class) {
      classes.push.apply(classes, group.attributes.class.trim().split(/\s+/));
    }

    var span = buildCommon.makeSpan(classes, elements, options);

    for (var attr in group.attributes) {
      if (attr !== "class" && group.attributes.hasOwnProperty(attr)) {
        span.setAttribute(attr, group.attributes[attr]);
      }
    }

    return span;
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    return buildExpressionRow(group.body, options);
  }
});
;// CONCATENATED MODULE: ./src/functions/htmlmathml.js




defineFunction({
  type: "htmlmathml",
  names: ["\\html@mathml"],
  props: {
    numArgs: 2,
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    return {
      type: "htmlmathml",
      mode: parser.mode,
      html: ordargument(args[0]),
      mathml: ordargument(args[1])
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var elements = buildExpression(group.html, options, false);
    return buildCommon.makeFragment(elements);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    return buildExpressionRow(group.mathml, options);
  }
});
;// CONCATENATED MODULE: ./src/functions/includegraphics.js







var sizeData = function sizeData(str) {
  if (/^[-+]? *(\d+(\.\d*)?|\.\d+)$/.test(str)) {
    // str is a number with no unit specified.
    // default unit is bp, per graphix package.
    return {
      number: +str,
      unit: "bp"
    };
  } else {
    var match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(str);

    if (!match) {
      throw new src_ParseError("Invalid size: '" + str + "' in \\includegraphics");
    }

    var data = {
      number: +(match[1] + match[2]),
      // sign + magnitude, cast to number
      unit: match[3]
    };

    if (!validUnit(data)) {
      throw new src_ParseError("Invalid unit: '" + data.unit + "' in \\includegraphics.");
    }

    return data;
  }
};

defineFunction({
  type: "includegraphics",
  names: ["\\includegraphics"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1,
    argTypes: ["raw", "url"],
    allowedInText: false
  },
  handler: function handler(_ref, args, optArgs) {
    var parser = _ref.parser;
    var width = {
      number: 0,
      unit: "em"
    };
    var height = {
      number: 0.9,
      unit: "em"
    }; // sorta character sized.

    var totalheight = {
      number: 0,
      unit: "em"
    };
    var alt = "";

    if (optArgs[0]) {
      var attributeStr = assertNodeType(optArgs[0], "raw").string; // Parser.js does not parse key/value pairs. We get a string.

      var attributes = attributeStr.split(",");

      for (var i = 0; i < attributes.length; i++) {
        var keyVal = attributes[i].split("=");

        if (keyVal.length === 2) {
          var str = keyVal[1].trim();

          switch (keyVal[0].trim()) {
            case "alt":
              alt = str;
              break;

            case "width":
              width = sizeData(str);
              break;

            case "height":
              height = sizeData(str);
              break;

            case "totalheight":
              totalheight = sizeData(str);
              break;

            default:
              throw new src_ParseError("Invalid key: '" + keyVal[0] + "' in \\includegraphics.");
          }
        }
      }
    }

    var src = assertNodeType(args[0], "url").url;

    if (alt === "") {
      // No alt given. Use the file name. Strip away the path.
      alt = src;
      alt = alt.replace(/^.*[\\/]/, '');
      alt = alt.substring(0, alt.lastIndexOf('.'));
    }

    if (!parser.settings.isTrusted({
      command: "\\includegraphics",
      url: src
    })) {
      return parser.formatUnsupportedCmd("\\includegraphics");
    }

    return {
      type: "includegraphics",
      mode: parser.mode,
      alt: alt,
      width: width,
      height: height,
      totalheight: totalheight,
      src: src
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var height = calculateSize(group.height, options);
    var depth = 0;

    if (group.totalheight.number > 0) {
      depth = calculateSize(group.totalheight, options) - height;
      depth = Number(depth.toFixed(2));
    }

    var width = 0;

    if (group.width.number > 0) {
      width = calculateSize(group.width, options);
    }

    var style = {
      height: height + depth + "em"
    };

    if (width > 0) {
      style.width = width + "em";
    }

    if (depth > 0) {
      style.verticalAlign = -depth + "em";
    }

    var node = new Img(group.src, group.alt, style);
    node.height = height;
    node.depth = depth;
    return node;
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var node = new mathMLTree.MathNode("mglyph", []);
    node.setAttribute("alt", group.alt);
    var height = calculateSize(group.height, options);
    var depth = 0;

    if (group.totalheight.number > 0) {
      depth = calculateSize(group.totalheight, options) - height;
      depth = depth.toFixed(2);
      node.setAttribute("valign", "-" + depth + "em");
    }

    node.setAttribute("height", height + depth + "em");

    if (group.width.number > 0) {
      var width = calculateSize(group.width, options);
      node.setAttribute("width", width + "em");
    }

    node.setAttribute("src", group.src);
    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/kern.js
// Horizontal spacing commands




 // TODO: \hskip and \mskip should support plus and minus in lengths

defineFunction({
  type: "kern",
  names: ["\\kern", "\\mkern", "\\hskip", "\\mskip"],
  props: {
    numArgs: 1,
    argTypes: ["size"],
    primitive: true,
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var size = assertNodeType(args[0], "size");

    if (parser.settings.strict) {
      var mathFunction = funcName[1] === 'm'; // \mkern, \mskip

      var muUnit = size.value.unit === 'mu';

      if (mathFunction) {
        if (!muUnit) {
          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " supports only mu units, " + ("not " + size.value.unit + " units"));
        }

        if (parser.mode !== "math") {
          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " works only in math mode");
        }
      } else {
        // !mathFunction
        if (muUnit) {
          parser.settings.reportNonstrict("mathVsTextUnits", "LaTeX's " + funcName + " doesn't support mu units");
        }
      }
    }

    return {
      type: "kern",
      mode: parser.mode,
      dimension: size.value
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    return buildCommon.makeGlue(group.dimension, options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var dimension = calculateSize(group.dimension, options);
    return new mathMLTree.SpaceNode(dimension);
  }
});
;// CONCATENATED MODULE: ./src/functions/lap.js
// Horizontal overlap functions





defineFunction({
  type: "lap",
  names: ["\\mathllap", "\\mathrlap", "\\mathclap"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var body = args[0];
    return {
      type: "lap",
      mode: parser.mode,
      alignment: funcName.slice(5),
      body: body
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    // mathllap, mathrlap, mathclap
    var inner;

    if (group.alignment === "clap") {
      // ref: https://www.math.lsu.edu/~aperlis/publications/mathclap/
      inner = buildCommon.makeSpan([], [buildGroup(group.body, options)]); // wrap, since CSS will center a .clap > .inner > span

      inner = buildCommon.makeSpan(["inner"], [inner], options);
    } else {
      inner = buildCommon.makeSpan(["inner"], [buildGroup(group.body, options)]);
    }

    var fix = buildCommon.makeSpan(["fix"], []);
    var node = buildCommon.makeSpan([group.alignment], [inner, fix], options); // At this point, we have correctly set horizontal alignment of the
    // two items involved in the lap.
    // Next, use a strut to set the height of the HTML bounding box.
    // Otherwise, a tall argument may be misplaced.
    // This code resolved issue #1153

    var strut = buildCommon.makeSpan(["strut"]);
    strut.style.height = node.height + node.depth + "em";
    strut.style.verticalAlign = -node.depth + "em";
    node.children.unshift(strut); // Next, prevent vertical misplacement when next to something tall.
    // This code resolves issue #1234

    node = buildCommon.makeSpan(["thinbox"], [node], options);
    return buildCommon.makeSpan(["mord", "vbox"], [node], options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    // mathllap, mathrlap, mathclap
    var node = new mathMLTree.MathNode("mpadded", [buildMathML_buildGroup(group.body, options)]);

    if (group.alignment !== "rlap") {
      var offset = group.alignment === "llap" ? "-1" : "-0.5";
      node.setAttribute("lspace", offset + "width");
    }

    node.setAttribute("width", "0px");
    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/math.js

 // Switching from text mode back to math mode

defineFunction({
  type: "styling",
  names: ["\\(", "$"],
  props: {
    numArgs: 0,
    allowedInText: true,
    allowedInMath: false
  },
  handler: function handler(_ref, args) {
    var funcName = _ref.funcName,
        parser = _ref.parser;
    var outerMode = parser.mode;
    parser.switchMode("math");
    var close = funcName === "\\(" ? "\\)" : "$";
    var body = parser.parseExpression(false, close);
    parser.expect(close);
    parser.switchMode(outerMode);
    return {
      type: "styling",
      mode: parser.mode,
      style: "text",
      body: body
    };
  }
}); // Check for extra closing math delimiters

defineFunction({
  type: "text",
  // Doesn't matter what this is.
  names: ["\\)", "\\]"],
  props: {
    numArgs: 0,
    allowedInText: true,
    allowedInMath: false
  },
  handler: function handler(context, args) {
    throw new src_ParseError("Mismatched " + context.funcName);
  }
});
;// CONCATENATED MODULE: ./src/functions/mathchoice.js






var chooseMathStyle = function chooseMathStyle(group, options) {
  switch (options.style.size) {
    case src_Style.DISPLAY.size:
      return group.display;

    case src_Style.TEXT.size:
      return group.text;

    case src_Style.SCRIPT.size:
      return group.script;

    case src_Style.SCRIPTSCRIPT.size:
      return group.scriptscript;

    default:
      return group.text;
  }
};

defineFunction({
  type: "mathchoice",
  names: ["\\mathchoice"],
  props: {
    numArgs: 4,
    primitive: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    return {
      type: "mathchoice",
      mode: parser.mode,
      display: ordargument(args[0]),
      text: ordargument(args[1]),
      script: ordargument(args[2]),
      scriptscript: ordargument(args[3])
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var body = chooseMathStyle(group, options);
    var elements = buildExpression(body, options, false);
    return buildCommon.makeFragment(elements);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var body = chooseMathStyle(group, options);
    return buildExpressionRow(body, options);
  }
});
;// CONCATENATED MODULE: ./src/functions/utils/assembleSupSub.js



// For an operator with limits, assemble the base, sup, and sub into a span.
var assembleSupSub = function assembleSupSub(base, supGroup, subGroup, options, style, slant, baseShift) {
  base = buildCommon.makeSpan([], [base]);
  var subIsSingleCharacter = subGroup && utils.isCharacterBox(subGroup);
  var sub;
  var sup; // We manually have to handle the superscripts and subscripts. This,
  // aside from the kern calculations, is copied from supsub.

  if (supGroup) {
    var elem = buildGroup(supGroup, options.havingStyle(style.sup()), options);
    sup = {
      elem: elem,
      kern: Math.max(options.fontMetrics().bigOpSpacing1, options.fontMetrics().bigOpSpacing3 - elem.depth)
    };
  }

  if (subGroup) {
    var _elem = buildGroup(subGroup, options.havingStyle(style.sub()), options);

    sub = {
      elem: _elem,
      kern: Math.max(options.fontMetrics().bigOpSpacing2, options.fontMetrics().bigOpSpacing4 - _elem.height)
    };
  } // Build the final group as a vlist of the possible subscript, base,
  // and possible superscript.


  var finalGroup;

  if (sup && sub) {
    var bottom = options.fontMetrics().bigOpSpacing5 + sub.elem.height + sub.elem.depth + sub.kern + base.depth + baseShift;
    finalGroup = buildCommon.makeVList({
      positionType: "bottom",
      positionData: bottom,
      children: [{
        type: "kern",
        size: options.fontMetrics().bigOpSpacing5
      }, {
        type: "elem",
        elem: sub.elem,
        marginLeft: -slant + "em"
      }, {
        type: "kern",
        size: sub.kern
      }, {
        type: "elem",
        elem: base
      }, {
        type: "kern",
        size: sup.kern
      }, {
        type: "elem",
        elem: sup.elem,
        marginLeft: slant + "em"
      }, {
        type: "kern",
        size: options.fontMetrics().bigOpSpacing5
      }]
    }, options);
  } else if (sub) {
    var top = base.height - baseShift; // Shift the limits by the slant of the symbol. Note
    // that we are supposed to shift the limits by 1/2 of the slant,
    // but since we are centering the limits adding a full slant of
    // margin will shift by 1/2 that.

    finalGroup = buildCommon.makeVList({
      positionType: "top",
      positionData: top,
      children: [{
        type: "kern",
        size: options.fontMetrics().bigOpSpacing5
      }, {
        type: "elem",
        elem: sub.elem,
        marginLeft: -slant + "em"
      }, {
        type: "kern",
        size: sub.kern
      }, {
        type: "elem",
        elem: base
      }]
    }, options);
  } else if (sup) {
    var _bottom = base.depth + baseShift;

    finalGroup = buildCommon.makeVList({
      positionType: "bottom",
      positionData: _bottom,
      children: [{
        type: "elem",
        elem: base
      }, {
        type: "kern",
        size: sup.kern
      }, {
        type: "elem",
        elem: sup.elem,
        marginLeft: slant + "em"
      }, {
        type: "kern",
        size: options.fontMetrics().bigOpSpacing5
      }]
    }, options);
  } else {
    // This case probably shouldn't occur (this would mean the
    // supsub was sending us a group with no superscript or
    // subscript) but be safe.
    return base;
  }

  var parts = [finalGroup];

  if (sub && slant !== 0 && !subIsSingleCharacter) {
    // A negative margin-left was applied to the lower limit.
    // Avoid an overlap by placing a spacer on the left on the group.
    var spacer = buildCommon.makeSpan(["mspace"], [], options);
    spacer.style.marginRight = slant + "em";
    parts.unshift(spacer);
  }

  return buildCommon.makeSpan(["mop", "op-limits"], parts, options);
};
;// CONCATENATED MODULE: ./src/functions/op.js
// Limits, symbols










// Most operators have a large successor symbol, but these don't.
var noSuccessor = ["\\smallint"]; // NOTE: Unlike most `htmlBuilder`s, this one handles not only "op", but also
// "supsub" since some of them (like \int) can affect super/subscripting.

var op_htmlBuilder = function htmlBuilder(grp, options) {
  // Operators are handled in the TeXbook pg. 443-444, rule 13(a).
  var supGroup;
  var subGroup;
  var hasLimits = false;
  var group;

  if (grp.type === "supsub") {
    // If we have limits, supsub will pass us its group to handle. Pull
    // out the superscript and subscript and set the group to the op in
    // its base.
    supGroup = grp.sup;
    subGroup = grp.sub;
    group = assertNodeType(grp.base, "op");
    hasLimits = true;
  } else {
    group = assertNodeType(grp, "op");
  }

  var style = options.style;
  var large = false;

  if (style.size === src_Style.DISPLAY.size && group.symbol && !utils.contains(noSuccessor, group.name)) {
    // Most symbol operators get larger in displaystyle (rule 13)
    large = true;
  }

  var base;

  if (group.symbol) {
    // If this is a symbol, create the symbol.
    var fontName = large ? "Size2-Regular" : "Size1-Regular";
    var stash = "";

    if (group.name === "\\oiint" || group.name === "\\oiiint") {
      // No font glyphs yet, so use a glyph w/o the oval.
      // TODO: When font glyphs are available, delete this code.
      stash = group.name.substr(1);
      group.name = stash === "oiint" ? "\\iint" : "\\iiint";
    }

    base = buildCommon.makeSymbol(group.name, fontName, "math", options, ["mop", "op-symbol", large ? "large-op" : "small-op"]);

    if (stash.length > 0) {
      // We're in \oiint or \oiiint. Overlay the oval.
      // TODO: When font glyphs are available, delete this code.
      var italic = base.italic;
      var oval = buildCommon.staticSvg(stash + "Size" + (large ? "2" : "1"), options);
      base = buildCommon.makeVList({
        positionType: "individualShift",
        children: [{
          type: "elem",
          elem: base,
          shift: 0
        }, {
          type: "elem",
          elem: oval,
          shift: large ? 0.08 : 0
        }]
      }, options);
      group.name = "\\" + stash;
      base.classes.unshift("mop"); // $FlowFixMe

      base.italic = italic;
    }
  } else if (group.body) {
    // If this is a list, compose that list.
    var inner = buildExpression(group.body, options, true);

    if (inner.length === 1 && inner[0] instanceof SymbolNode) {
      base = inner[0];
      base.classes[0] = "mop"; // replace old mclass
    } else {
      base = buildCommon.makeSpan(["mop"], inner, options);
    }
  } else {
    // Otherwise, this is a text operator. Build the text from the
    // operator's name.
    var output = [];

    for (var i = 1; i < group.name.length; i++) {
      output.push(buildCommon.mathsym(group.name[i], group.mode, options));
    }

    base = buildCommon.makeSpan(["mop"], output, options);
  } // If content of op is a single symbol, shift it vertically.


  var baseShift = 0;
  var slant = 0;

  if ((base instanceof SymbolNode || group.name === "\\oiint" || group.name === "\\oiiint") && !group.suppressBaseShift) {
    // We suppress the shift of the base of \overset and \underset. Otherwise,
    // shift the symbol so its center lies on the axis (rule 13). It
    // appears that our fonts have the centers of the symbols already
    // almost on the axis, so these numbers are very small. Note we
    // don't actually apply this here, but instead it is used either in
    // the vlist creation or separately when there are no limits.
    baseShift = (base.height - base.depth) / 2 - options.fontMetrics().axisHeight; // The slant of the symbol is just its italic correction.
    // $FlowFixMe

    slant = base.italic;
  }

  if (hasLimits) {
    return assembleSupSub(base, supGroup, subGroup, options, style, slant, baseShift);
  } else {
    if (baseShift) {
      base.style.position = "relative";
      base.style.top = baseShift + "em";
    }

    return base;
  }
};

var op_mathmlBuilder = function mathmlBuilder(group, options) {
  var node;

  if (group.symbol) {
    // This is a symbol. Just add the symbol.
    node = new MathNode("mo", [makeText(group.name, group.mode)]);

    if (utils.contains(noSuccessor, group.name)) {
      node.setAttribute("largeop", "false");
    }
  } else if (group.body) {
    // This is an operator with children. Add them.
    node = new MathNode("mo", buildMathML_buildExpression(group.body, options));
  } else {
    // This is a text operator. Add all of the characters from the
    // operator's name.
    node = new MathNode("mi", [new TextNode(group.name.slice(1))]); // Append an <mo>&ApplyFunction;</mo>.
    // ref: https://www.w3.org/TR/REC-MathML/chap3_2.html#sec3.2.4

    var operator = new MathNode("mo", [makeText("\u2061", "text")]);

    if (group.parentIsSupSub) {
      node = new MathNode("mrow", [node, operator]);
    } else {
      node = newDocumentFragment([node, operator]);
    }
  }

  return node;
};

var singleCharBigOps = {
  "\u220F": "\\prod",
  "\u2210": "\\coprod",
  "\u2211": "\\sum",
  "\u22C0": "\\bigwedge",
  "\u22C1": "\\bigvee",
  "\u22C2": "\\bigcap",
  "\u22C3": "\\bigcup",
  "\u2A00": "\\bigodot",
  "\u2A01": "\\bigoplus",
  "\u2A02": "\\bigotimes",
  "\u2A04": "\\biguplus",
  "\u2A06": "\\bigsqcup"
};
defineFunction({
  type: "op",
  names: ["\\coprod", "\\bigvee", "\\bigwedge", "\\biguplus", "\\bigcap", "\\bigcup", "\\intop", "\\prod", "\\sum", "\\bigotimes", "\\bigoplus", "\\bigodot", "\\bigsqcup", "\\smallint", "\u220F", "\u2210", "\u2211", "\u22C0", "\u22C1", "\u22C2", "\u22C3", "\u2A00", "\u2A01", "\u2A02", "\u2A04", "\u2A06"],
  props: {
    numArgs: 0
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var fName = funcName;

    if (fName.length === 1) {
      fName = singleCharBigOps[fName];
    }

    return {
      type: "op",
      mode: parser.mode,
      limits: true,
      parentIsSupSub: false,
      symbol: true,
      name: fName
    };
  },
  htmlBuilder: op_htmlBuilder,
  mathmlBuilder: op_mathmlBuilder
}); // Note: calling defineFunction with a type that's already been defined only
// works because the same htmlBuilder and mathmlBuilder are being used.

defineFunction({
  type: "op",
  names: ["\\mathop"],
  props: {
    numArgs: 1,
    primitive: true
  },
  handler: function handler(_ref2, args) {
    var parser = _ref2.parser;
    var body = args[0];
    return {
      type: "op",
      mode: parser.mode,
      limits: false,
      parentIsSupSub: false,
      symbol: false,
      body: ordargument(body)
    };
  },
  htmlBuilder: op_htmlBuilder,
  mathmlBuilder: op_mathmlBuilder
}); // There are 2 flags for operators; whether they produce limits in
// displaystyle, and whether they are symbols and should grow in
// displaystyle. These four groups cover the four possible choices.

var singleCharIntegrals = {
  "\u222B": "\\int",
  "\u222C": "\\iint",
  "\u222D": "\\iiint",
  "\u222E": "\\oint",
  "\u222F": "\\oiint",
  "\u2230": "\\oiiint"
}; // No limits, not symbols

defineFunction({
  type: "op",
  names: ["\\arcsin", "\\arccos", "\\arctan", "\\arctg", "\\arcctg", "\\arg", "\\ch", "\\cos", "\\cosec", "\\cosh", "\\cot", "\\cotg", "\\coth", "\\csc", "\\ctg", "\\cth", "\\deg", "\\dim", "\\exp", "\\hom", "\\ker", "\\lg", "\\ln", "\\log", "\\sec", "\\sin", "\\sinh", "\\sh", "\\tan", "\\tanh", "\\tg", "\\th"],
  props: {
    numArgs: 0
  },
  handler: function handler(_ref3) {
    var parser = _ref3.parser,
        funcName = _ref3.funcName;
    return {
      type: "op",
      mode: parser.mode,
      limits: false,
      parentIsSupSub: false,
      symbol: false,
      name: funcName
    };
  },
  htmlBuilder: op_htmlBuilder,
  mathmlBuilder: op_mathmlBuilder
}); // Limits, not symbols

defineFunction({
  type: "op",
  names: ["\\det", "\\gcd", "\\inf", "\\lim", "\\max", "\\min", "\\Pr", "\\sup"],
  props: {
    numArgs: 0
  },
  handler: function handler(_ref4) {
    var parser = _ref4.parser,
        funcName = _ref4.funcName;
    return {
      type: "op",
      mode: parser.mode,
      limits: true,
      parentIsSupSub: false,
      symbol: false,
      name: funcName
    };
  },
  htmlBuilder: op_htmlBuilder,
  mathmlBuilder: op_mathmlBuilder
}); // No limits, symbols

defineFunction({
  type: "op",
  names: ["\\int", "\\iint", "\\iiint", "\\oint", "\\oiint", "\\oiiint", "\u222B", "\u222C", "\u222D", "\u222E", "\u222F", "\u2230"],
  props: {
    numArgs: 0
  },
  handler: function handler(_ref5) {
    var parser = _ref5.parser,
        funcName = _ref5.funcName;
    var fName = funcName;

    if (fName.length === 1) {
      fName = singleCharIntegrals[fName];
    }

    return {
      type: "op",
      mode: parser.mode,
      limits: false,
      parentIsSupSub: false,
      symbol: true,
      name: fName
    };
  },
  htmlBuilder: op_htmlBuilder,
  mathmlBuilder: op_mathmlBuilder
});
;// CONCATENATED MODULE: ./src/macros.js
/**
 * Predefined macros for KaTeX.
 * This can be used to define some commands in terms of others.
 */






var builtinMacros = {};
/* harmony default export */ var macros = (builtinMacros); // This function might one day accept an additional argument and do more things.

function defineMacro(name, body) {
  builtinMacros[name] = body;
} //////////////////////////////////////////////////////////////////////
// macro tools

defineMacro("\\noexpand", function (context) {
  // The expansion is the token itself; but that token is interpreted
  // as if its meaning were ‘\relax’ if it is a control sequence that
  // would ordinarily be expanded by TeX’s expansion rules.
  var t = context.popToken();

  if (context.isExpandable(t.text)) {
    t.noexpand = true;
    t.treatAsRelax = true;
  }

  return {
    tokens: [t],
    numArgs: 0
  };
});
defineMacro("\\expandafter", function (context) {
  // TeX first reads the token that comes immediately after \expandafter,
  // without expanding it; let’s call this token t. Then TeX reads the
  // token that comes after t (and possibly more tokens, if that token
  // has an argument), replacing it by its expansion. Finally TeX puts
  // t back in front of that expansion.
  var t = context.popToken();
  context.expandOnce(true); // expand only an expandable token

  return {
    tokens: [t],
    numArgs: 0
  };
}); // LaTeX's \@firstoftwo{#1}{#2} expands to #1, skipping #2
// TeX source: \long\def\@firstoftwo#1#2{#1}

defineMacro("\\@firstoftwo", function (context) {
  var args = context.consumeArgs(2);
  return {
    tokens: args[0],
    numArgs: 0
  };
}); // LaTeX's \@secondoftwo{#1}{#2} expands to #2, skipping #1
// TeX source: \long\def\@secondoftwo#1#2{#2}

defineMacro("\\@secondoftwo", function (context) {
  var args = context.consumeArgs(2);
  return {
    tokens: args[1],
    numArgs: 0
  };
}); // LaTeX's \@ifnextchar{#1}{#2}{#3} looks ahead to the next (unexpanded)
// symbol that isn't a space, consuming any spaces but not consuming the
// first nonspace character.  If that nonspace character matches #1, then
// the macro expands to #2; otherwise, it expands to #3.

defineMacro("\\@ifnextchar", function (context) {
  var args = context.consumeArgs(3); // symbol, if, else

  context.consumeSpaces();
  var nextToken = context.future();

  if (args[0].length === 1 && args[0][0].text === nextToken.text) {
    return {
      tokens: args[1],
      numArgs: 0
    };
  } else {
    return {
      tokens: args[2],
      numArgs: 0
    };
  }
}); // LaTeX's \@ifstar{#1}{#2} looks ahead to the next (unexpanded) symbol.
// If it is `*`, then it consumes the symbol, and the macro expands to #1;
// otherwise, the macro expands to #2 (without consuming the symbol).
// TeX source: \def\@ifstar#1{\@ifnextchar *{\@firstoftwo{#1}}}

defineMacro("\\@ifstar", "\\@ifnextchar *{\\@firstoftwo{#1}}"); // LaTeX's \TextOrMath{#1}{#2} expands to #1 in text mode, #2 in math mode

defineMacro("\\TextOrMath", function (context) {
  var args = context.consumeArgs(2);

  if (context.mode === 'text') {
    return {
      tokens: args[0],
      numArgs: 0
    };
  } else {
    return {
      tokens: args[1],
      numArgs: 0
    };
  }
}); // Lookup table for parsing numbers in base 8 through 16

var digitToNumber = {
  "0": 0,
  "1": 1,
  "2": 2,
  "3": 3,
  "4": 4,
  "5": 5,
  "6": 6,
  "7": 7,
  "8": 8,
  "9": 9,
  "a": 10,
  "A": 10,
  "b": 11,
  "B": 11,
  "c": 12,
  "C": 12,
  "d": 13,
  "D": 13,
  "e": 14,
  "E": 14,
  "f": 15,
  "F": 15
}; // TeX \char makes a literal character (catcode 12) using the following forms:
// (see The TeXBook, p. 43)
//   \char123  -- decimal
//   \char'123 -- octal
//   \char"123 -- hex
//   \char`x   -- character that can be written (i.e. isn't active)
//   \char`\x  -- character that cannot be written (e.g. %)
// These all refer to characters from the font, so we turn them into special
// calls to a function \@char dealt with in the Parser.

defineMacro("\\char", function (context) {
  var token = context.popToken();
  var base;
  var number = '';

  if (token.text === "'") {
    base = 8;
    token = context.popToken();
  } else if (token.text === '"') {
    base = 16;
    token = context.popToken();
  } else if (token.text === "`") {
    token = context.popToken();

    if (token.text[0] === "\\") {
      number = token.text.charCodeAt(1);
    } else if (token.text === "EOF") {
      throw new src_ParseError("\\char` missing argument");
    } else {
      number = token.text.charCodeAt(0);
    }
  } else {
    base = 10;
  }

  if (base) {
    // Parse a number in the given base, starting with first `token`.
    number = digitToNumber[token.text];

    if (number == null || number >= base) {
      throw new src_ParseError("Invalid base-" + base + " digit " + token.text);
    }

    var digit;

    while ((digit = digitToNumber[context.future().text]) != null && digit < base) {
      number *= base;
      number += digit;
      context.popToken();
    }
  }

  return "\\@char{" + number + "}";
}); // \newcommand{\macro}[args]{definition}
// \renewcommand{\macro}[args]{definition}
// TODO: Optional arguments: \newcommand{\macro}[args][default]{definition}

var newcommand = function newcommand(context, existsOK, nonexistsOK) {
  var arg = context.consumeArg().tokens;

  if (arg.length !== 1) {
    throw new src_ParseError("\\newcommand's first argument must be a macro name");
  }

  var name = arg[0].text;
  var exists = context.isDefined(name);

  if (exists && !existsOK) {
    throw new src_ParseError("\\newcommand{" + name + "} attempting to redefine " + (name + "; use \\renewcommand"));
  }

  if (!exists && !nonexistsOK) {
    throw new src_ParseError("\\renewcommand{" + name + "} when command " + name + " " + "does not yet exist; use \\newcommand");
  }

  var numArgs = 0;
  arg = context.consumeArg().tokens;

  if (arg.length === 1 && arg[0].text === "[") {
    var argText = '';
    var token = context.expandNextToken();

    while (token.text !== "]" && token.text !== "EOF") {
      // TODO: Should properly expand arg, e.g., ignore {}s
      argText += token.text;
      token = context.expandNextToken();
    }

    if (!argText.match(/^\s*[0-9]+\s*$/)) {
      throw new src_ParseError("Invalid number of arguments: " + argText);
    }

    numArgs = parseInt(argText);
    arg = context.consumeArg().tokens;
  } // Final arg is the expansion of the macro


  context.macros.set(name, {
    tokens: arg,
    numArgs: numArgs
  });
  return '';
};

defineMacro("\\newcommand", function (context) {
  return newcommand(context, false, true);
});
defineMacro("\\renewcommand", function (context) {
  return newcommand(context, true, false);
});
defineMacro("\\providecommand", function (context) {
  return newcommand(context, true, true);
}); // terminal (console) tools

defineMacro("\\message", function (context) {
  var arg = context.consumeArgs(1)[0]; // eslint-disable-next-line no-console

  console.log(arg.reverse().map(function (token) {
    return token.text;
  }).join(""));
  return '';
});
defineMacro("\\errmessage", function (context) {
  var arg = context.consumeArgs(1)[0]; // eslint-disable-next-line no-console

  console.error(arg.reverse().map(function (token) {
    return token.text;
  }).join(""));
  return '';
});
defineMacro("\\show", function (context) {
  var tok = context.popToken();
  var name = tok.text; // eslint-disable-next-line no-console

  console.log(tok, context.macros.get(name), src_functions[name], src_symbols.math[name], src_symbols.text[name]);
  return '';
}); //////////////////////////////////////////////////////////////////////
// Grouping
// \let\bgroup={ \let\egroup=}

defineMacro("\\bgroup", "{");
defineMacro("\\egroup", "}"); // Symbols from latex.ltx:
// \def~{\nobreakspace{}}
// \def\lq{`}
// \def\rq{'}
// \def \aa {\r a}
// \def \AA {\r A}

defineMacro("~", "\\nobreakspace");
defineMacro("\\lq", "`");
defineMacro("\\rq", "'");
defineMacro("\\aa", "\\r a");
defineMacro("\\AA", "\\r A"); // Copyright (C) and registered (R) symbols. Use raw symbol in MathML.
// \DeclareTextCommandDefault{\textcopyright}{\textcircled{c}}
// \DeclareTextCommandDefault{\textregistered}{\textcircled{%
//      \check@mathfonts\fontsize\sf@size\z@\math@fontsfalse\selectfont R}}
// \DeclareRobustCommand{\copyright}{%
//    \ifmmode{\nfss@text{\textcopyright}}\else\textcopyright\fi}

defineMacro("\\textcopyright", "\\html@mathml{\\textcircled{c}}{\\char`©}");
defineMacro("\\copyright", "\\TextOrMath{\\textcopyright}{\\text{\\textcopyright}}");
defineMacro("\\textregistered", "\\html@mathml{\\textcircled{\\scriptsize R}}{\\char`®}"); // Characters omitted from Unicode range 1D400–1D7FF

defineMacro("\u212C", "\\mathscr{B}"); // script

defineMacro("\u2130", "\\mathscr{E}");
defineMacro("\u2131", "\\mathscr{F}");
defineMacro("\u210B", "\\mathscr{H}");
defineMacro("\u2110", "\\mathscr{I}");
defineMacro("\u2112", "\\mathscr{L}");
defineMacro("\u2133", "\\mathscr{M}");
defineMacro("\u211B", "\\mathscr{R}");
defineMacro("\u212D", "\\mathfrak{C}"); // Fraktur

defineMacro("\u210C", "\\mathfrak{H}");
defineMacro("\u2128", "\\mathfrak{Z}"); // Define \Bbbk with a macro that works in both HTML and MathML.

defineMacro("\\Bbbk", "\\Bbb{k}"); // Unicode middle dot
// The KaTeX fonts do not contain U+00B7. Instead, \cdotp displays
// the dot at U+22C5 and gives it punct spacing.

defineMacro("\xB7", "\\cdotp"); // \llap and \rlap render their contents in text mode

defineMacro("\\llap", "\\mathllap{\\textrm{#1}}");
defineMacro("\\rlap", "\\mathrlap{\\textrm{#1}}");
defineMacro("\\clap", "\\mathclap{\\textrm{#1}}"); // \mathstrut from the TeXbook, p 360

defineMacro("\\mathstrut", "\\vphantom{(}"); // \underbar from TeXbook p 353

defineMacro("\\underbar", "\\underline{\\text{#1}}"); // \not is defined by base/fontmath.ltx via
// \DeclareMathSymbol{\not}{\mathrel}{symbols}{"36}
// It's thus treated like a \mathrel, but defined by a symbol that has zero
// width but extends to the right.  We use \rlap to get that spacing.
// For MathML we write U+0338 here. buildMathML.js will then do the overlay.

defineMacro("\\not", '\\html@mathml{\\mathrel{\\mathrlap\\@not}}{\\char"338}'); // Negated symbols from base/fontmath.ltx:
// \def\neq{\not=} \let\ne=\neq
// \DeclareRobustCommand
//   \notin{\mathrel{\m@th\mathpalette\c@ncel\in}}
// \def\c@ncel#1#2{\m@th\ooalign{$\hfil#1\mkern1mu/\hfil$\crcr$#1#2$}}

defineMacro("\\neq", "\\html@mathml{\\mathrel{\\not=}}{\\mathrel{\\char`≠}}");
defineMacro("\\ne", "\\neq");
defineMacro("\u2260", "\\neq");
defineMacro("\\notin", "\\html@mathml{\\mathrel{{\\in}\\mathllap{/\\mskip1mu}}}" + "{\\mathrel{\\char`∉}}");
defineMacro("\u2209", "\\notin"); // Unicode stacked relations

defineMacro("\u2258", "\\html@mathml{" + "\\mathrel{=\\kern{-1em}\\raisebox{0.4em}{$\\scriptsize\\frown$}}" + "}{\\mathrel{\\char`\u2258}}");
defineMacro("\u2259", "\\html@mathml{\\stackrel{\\tiny\\wedge}{=}}{\\mathrel{\\char`\u2258}}");
defineMacro("\u225A", "\\html@mathml{\\stackrel{\\tiny\\vee}{=}}{\\mathrel{\\char`\u225A}}");
defineMacro("\u225B", "\\html@mathml{\\stackrel{\\scriptsize\\star}{=}}" + "{\\mathrel{\\char`\u225B}}");
defineMacro("\u225D", "\\html@mathml{\\stackrel{\\tiny\\mathrm{def}}{=}}" + "{\\mathrel{\\char`\u225D}}");
defineMacro("\u225E", "\\html@mathml{\\stackrel{\\tiny\\mathrm{m}}{=}}" + "{\\mathrel{\\char`\u225E}}");
defineMacro("\u225F", "\\html@mathml{\\stackrel{\\tiny?}{=}}{\\mathrel{\\char`\u225F}}"); // Misc Unicode

defineMacro("\u27C2", "\\perp");
defineMacro("\u203C", "\\mathclose{!\\mkern-0.8mu!}");
defineMacro("\u220C", "\\notni");
defineMacro("\u231C", "\\ulcorner");
defineMacro("\u231D", "\\urcorner");
defineMacro("\u231E", "\\llcorner");
defineMacro("\u231F", "\\lrcorner");
defineMacro("\xA9", "\\copyright");
defineMacro("\xAE", "\\textregistered");
defineMacro("\uFE0F", "\\textregistered"); // The KaTeX fonts have corners at codepoints that don't match Unicode.
// For MathML purposes, use the Unicode code point.

defineMacro("\\ulcorner", "\\html@mathml{\\@ulcorner}{\\mathop{\\char\"231c}}");
defineMacro("\\urcorner", "\\html@mathml{\\@urcorner}{\\mathop{\\char\"231d}}");
defineMacro("\\llcorner", "\\html@mathml{\\@llcorner}{\\mathop{\\char\"231e}}");
defineMacro("\\lrcorner", "\\html@mathml{\\@lrcorner}{\\mathop{\\char\"231f}}"); //////////////////////////////////////////////////////////////////////
// LaTeX_2ε
// \vdots{\vbox{\baselineskip4\p@  \lineskiplimit\z@
// \kern6\p@\hbox{.}\hbox{.}\hbox{.}}}
// We'll call \varvdots, which gets a glyph from symbols.js.
// The zero-width rule gets us an equivalent to the vertical 6pt kern.

defineMacro("\\vdots", "\\mathord{\\varvdots\\rule{0pt}{15pt}}");
defineMacro("\u22EE", "\\vdots"); //////////////////////////////////////////////////////////////////////
// amsmath.sty
// http://mirrors.concertpass.com/tex-archive/macros/latex/required/amsmath/amsmath.pdf
// Italic Greek capital letters.  AMS defines these with \DeclareMathSymbol,
// but they are equivalent to \mathit{\Letter}.

defineMacro("\\varGamma", "\\mathit{\\Gamma}");
defineMacro("\\varDelta", "\\mathit{\\Delta}");
defineMacro("\\varTheta", "\\mathit{\\Theta}");
defineMacro("\\varLambda", "\\mathit{\\Lambda}");
defineMacro("\\varXi", "\\mathit{\\Xi}");
defineMacro("\\varPi", "\\mathit{\\Pi}");
defineMacro("\\varSigma", "\\mathit{\\Sigma}");
defineMacro("\\varUpsilon", "\\mathit{\\Upsilon}");
defineMacro("\\varPhi", "\\mathit{\\Phi}");
defineMacro("\\varPsi", "\\mathit{\\Psi}");
defineMacro("\\varOmega", "\\mathit{\\Omega}"); //\newcommand{\substack}[1]{\subarray{c}#1\endsubarray}

defineMacro("\\substack", "\\begin{subarray}{c}#1\\end{subarray}"); // \renewcommand{\colon}{\nobreak\mskip2mu\mathpunct{}\nonscript
// \mkern-\thinmuskip{:}\mskip6muplus1mu\relax}

defineMacro("\\colon", "\\nobreak\\mskip2mu\\mathpunct{}" + "\\mathchoice{\\mkern-3mu}{\\mkern-3mu}{}{}{:}\\mskip6mu"); // \newcommand{\boxed}[1]{\fbox{\m@th$\displaystyle#1$}}

defineMacro("\\boxed", "\\fbox{$\\displaystyle{#1}$}"); // \def\iff{\DOTSB\;\Longleftrightarrow\;}
// \def\implies{\DOTSB\;\Longrightarrow\;}
// \def\impliedby{\DOTSB\;\Longleftarrow\;}

defineMacro("\\iff", "\\DOTSB\\;\\Longleftrightarrow\\;");
defineMacro("\\implies", "\\DOTSB\\;\\Longrightarrow\\;");
defineMacro("\\impliedby", "\\DOTSB\\;\\Longleftarrow\\;"); // AMSMath's automatic \dots, based on \mdots@@ macro.

var dotsByToken = {
  ',': '\\dotsc',
  '\\not': '\\dotsb',
  // \keybin@ checks for the following:
  '+': '\\dotsb',
  '=': '\\dotsb',
  '<': '\\dotsb',
  '>': '\\dotsb',
  '-': '\\dotsb',
  '*': '\\dotsb',
  ':': '\\dotsb',
  // Symbols whose definition starts with \DOTSB:
  '\\DOTSB': '\\dotsb',
  '\\coprod': '\\dotsb',
  '\\bigvee': '\\dotsb',
  '\\bigwedge': '\\dotsb',
  '\\biguplus': '\\dotsb',
  '\\bigcap': '\\dotsb',
  '\\bigcup': '\\dotsb',
  '\\prod': '\\dotsb',
  '\\sum': '\\dotsb',
  '\\bigotimes': '\\dotsb',
  '\\bigoplus': '\\dotsb',
  '\\bigodot': '\\dotsb',
  '\\bigsqcup': '\\dotsb',
  '\\And': '\\dotsb',
  '\\longrightarrow': '\\dotsb',
  '\\Longrightarrow': '\\dotsb',
  '\\longleftarrow': '\\dotsb',
  '\\Longleftarrow': '\\dotsb',
  '\\longleftrightarrow': '\\dotsb',
  '\\Longleftrightarrow': '\\dotsb',
  '\\mapsto': '\\dotsb',
  '\\longmapsto': '\\dotsb',
  '\\hookrightarrow': '\\dotsb',
  '\\doteq': '\\dotsb',
  // Symbols whose definition starts with \mathbin:
  '\\mathbin': '\\dotsb',
  // Symbols whose definition starts with \mathrel:
  '\\mathrel': '\\dotsb',
  '\\relbar': '\\dotsb',
  '\\Relbar': '\\dotsb',
  '\\xrightarrow': '\\dotsb',
  '\\xleftarrow': '\\dotsb',
  // Symbols whose definition starts with \DOTSI:
  '\\DOTSI': '\\dotsi',
  '\\int': '\\dotsi',
  '\\oint': '\\dotsi',
  '\\iint': '\\dotsi',
  '\\iiint': '\\dotsi',
  '\\iiiint': '\\dotsi',
  '\\idotsint': '\\dotsi',
  // Symbols whose definition starts with \DOTSX:
  '\\DOTSX': '\\dotsx'
};
defineMacro("\\dots", function (context) {
  // TODO: If used in text mode, should expand to \textellipsis.
  // However, in KaTeX, \textellipsis and \ldots behave the same
  // (in text mode), and it's unlikely we'd see any of the math commands
  // that affect the behavior of \dots when in text mode.  So fine for now
  // (until we support \ifmmode ... \else ... \fi).
  var thedots = '\\dotso';
  var next = context.expandAfterFuture().text;

  if (next in dotsByToken) {
    thedots = dotsByToken[next];
  } else if (next.substr(0, 4) === '\\not') {
    thedots = '\\dotsb';
  } else if (next in src_symbols.math) {
    if (utils.contains(['bin', 'rel'], src_symbols.math[next].group)) {
      thedots = '\\dotsb';
    }
  }

  return thedots;
});
var spaceAfterDots = {
  // \rightdelim@ checks for the following:
  ')': true,
  ']': true,
  '\\rbrack': true,
  '\\}': true,
  '\\rbrace': true,
  '\\rangle': true,
  '\\rceil': true,
  '\\rfloor': true,
  '\\rgroup': true,
  '\\rmoustache': true,
  '\\right': true,
  '\\bigr': true,
  '\\biggr': true,
  '\\Bigr': true,
  '\\Biggr': true,
  // \extra@ also tests for the following:
  '$': true,
  // \extrap@ checks for the following:
  ';': true,
  '.': true,
  ',': true
};
defineMacro("\\dotso", function (context) {
  var next = context.future().text;

  if (next in spaceAfterDots) {
    return "\\ldots\\,";
  } else {
    return "\\ldots";
  }
});
defineMacro("\\dotsc", function (context) {
  var next = context.future().text; // \dotsc uses \extra@ but not \extrap@, instead specially checking for
  // ';' and '.', but doesn't check for ','.

  if (next in spaceAfterDots && next !== ',') {
    return "\\ldots\\,";
  } else {
    return "\\ldots";
  }
});
defineMacro("\\cdots", function (context) {
  var next = context.future().text;

  if (next in spaceAfterDots) {
    return "\\@cdots\\,";
  } else {
    return "\\@cdots";
  }
});
defineMacro("\\dotsb", "\\cdots");
defineMacro("\\dotsm", "\\cdots");
defineMacro("\\dotsi", "\\!\\cdots"); // amsmath doesn't actually define \dotsx, but \dots followed by a macro
// starting with \DOTSX implies \dotso, and then \extra@ detects this case
// and forces the added `\,`.

defineMacro("\\dotsx", "\\ldots\\,"); // \let\DOTSI\relax
// \let\DOTSB\relax
// \let\DOTSX\relax

defineMacro("\\DOTSI", "\\relax");
defineMacro("\\DOTSB", "\\relax");
defineMacro("\\DOTSX", "\\relax"); // Spacing, based on amsmath.sty's override of LaTeX defaults
// \DeclareRobustCommand{\tmspace}[3]{%
//   \ifmmode\mskip#1#2\else\kern#1#3\fi\relax}

defineMacro("\\tmspace", "\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax"); // \renewcommand{\,}{\tmspace+\thinmuskip{.1667em}}
// TODO: math mode should use \thinmuskip

defineMacro("\\,", "\\tmspace+{3mu}{.1667em}"); // \let\thinspace\,

defineMacro("\\thinspace", "\\,"); // \def\>{\mskip\medmuskip}
// \renewcommand{\:}{\tmspace+\medmuskip{.2222em}}
// TODO: \> and math mode of \: should use \medmuskip = 4mu plus 2mu minus 4mu

defineMacro("\\>", "\\mskip{4mu}");
defineMacro("\\:", "\\tmspace+{4mu}{.2222em}"); // \let\medspace\:

defineMacro("\\medspace", "\\:"); // \renewcommand{\;}{\tmspace+\thickmuskip{.2777em}}
// TODO: math mode should use \thickmuskip = 5mu plus 5mu

defineMacro("\\;", "\\tmspace+{5mu}{.2777em}"); // \let\thickspace\;

defineMacro("\\thickspace", "\\;"); // \renewcommand{\!}{\tmspace-\thinmuskip{.1667em}}
// TODO: math mode should use \thinmuskip

defineMacro("\\!", "\\tmspace-{3mu}{.1667em}"); // \let\negthinspace\!

defineMacro("\\negthinspace", "\\!"); // \newcommand{\negmedspace}{\tmspace-\medmuskip{.2222em}}
// TODO: math mode should use \medmuskip

defineMacro("\\negmedspace", "\\tmspace-{4mu}{.2222em}"); // \newcommand{\negthickspace}{\tmspace-\thickmuskip{.2777em}}
// TODO: math mode should use \thickmuskip

defineMacro("\\negthickspace", "\\tmspace-{5mu}{.277em}"); // \def\enspace{\kern.5em }

defineMacro("\\enspace", "\\kern.5em "); // \def\enskip{\hskip.5em\relax}

defineMacro("\\enskip", "\\hskip.5em\\relax"); // \def\quad{\hskip1em\relax}

defineMacro("\\quad", "\\hskip1em\\relax"); // \def\qquad{\hskip2em\relax}

defineMacro("\\qquad", "\\hskip2em\\relax"); // \tag@in@display form of \tag

defineMacro("\\tag", "\\@ifstar\\tag@literal\\tag@paren");
defineMacro("\\tag@paren", "\\tag@literal{({#1})}");
defineMacro("\\tag@literal", function (context) {
  if (context.macros.get("\\df@tag")) {
    throw new src_ParseError("Multiple \\tag");
  }

  return "\\gdef\\df@tag{\\text{#1}}";
}); // \renewcommand{\bmod}{\nonscript\mskip-\medmuskip\mkern5mu\mathbin
//   {\operator@font mod}\penalty900
//   \mkern5mu\nonscript\mskip-\medmuskip}
// \newcommand{\pod}[1]{\allowbreak
//   \if@display\mkern18mu\else\mkern8mu\fi(#1)}
// \renewcommand{\pmod}[1]{\pod{{\operator@font mod}\mkern6mu#1}}
// \newcommand{\mod}[1]{\allowbreak\if@display\mkern18mu
//   \else\mkern12mu\fi{\operator@font mod}\,\,#1}
// TODO: math mode should use \medmuskip = 4mu plus 2mu minus 4mu

defineMacro("\\bmod", "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}" + "\\mathbin{\\rm mod}" + "\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}");
defineMacro("\\pod", "\\allowbreak" + "\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)");
defineMacro("\\pmod", "\\pod{{\\rm mod}\\mkern6mu#1}");
defineMacro("\\mod", "\\allowbreak" + "\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}" + "{\\rm mod}\\,\\,#1"); // \pmb    --   A simulation of bold.
// The version in ambsy.sty works by typesetting three copies of the argument
// with small offsets. We use two copies. We omit the vertical offset because
// of rendering problems that makeVList encounters in Safari.

defineMacro("\\pmb", "\\html@mathml{" + "\\@binrel{#1}{\\mathrlap{#1}\\kern0.5px#1}}" + "{\\mathbf{#1}}"); //////////////////////////////////////////////////////////////////////
// LaTeX source2e
// \expandafter\let\expandafter\@normalcr
//     \csname\expandafter\@gobble\string\\ \endcsname
// \DeclareRobustCommand\newline{\@normalcr\relax}

defineMacro("\\newline", "\\\\\\relax"); // \def\TeX{T\kern-.1667em\lower.5ex\hbox{E}\kern-.125emX\@}
// TODO: Doesn't normally work in math mode because \@ fails.  KaTeX doesn't
// support \@ yet, so that's omitted, and we add \text so that the result
// doesn't look funny in math mode.

defineMacro("\\TeX", "\\textrm{\\html@mathml{" + "T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX" + "}{TeX}}"); // \DeclareRobustCommand{\LaTeX}{L\kern-.36em%
//         {\sbox\z@ T%
//          \vbox to\ht\z@{\hbox{\check@mathfonts
//                               \fontsize\sf@size\z@
//                               \math@fontsfalse\selectfont
//                               A}%
//                         \vss}%
//         }%
//         \kern-.15em%
//         \TeX}
// This code aligns the top of the A with the T (from the perspective of TeX's
// boxes, though visually the A appears to extend above slightly).
// We compute the corresponding \raisebox when A is rendered in \normalsize
// \scriptstyle, which has a scale factor of 0.7 (see Options.js).

var latexRaiseA = fontMetricsData["Main-Regular"]["T".charCodeAt(0)][1] - 0.7 * fontMetricsData["Main-Regular"]["A".charCodeAt(0)][1] + "em";
defineMacro("\\LaTeX", "\\textrm{\\html@mathml{" + ("L\\kern-.36em\\raisebox{" + latexRaiseA + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{LaTeX}}"); // New KaTeX logo based on tweaking LaTeX logo

defineMacro("\\KaTeX", "\\textrm{\\html@mathml{" + ("K\\kern-.17em\\raisebox{" + latexRaiseA + "}{\\scriptstyle A}") + "\\kern-.15em\\TeX}{KaTeX}}"); // \DeclareRobustCommand\hspace{\@ifstar\@hspacer\@hspace}
// \def\@hspace#1{\hskip  #1\relax}
// \def\@hspacer#1{\vrule \@width\z@\nobreak
//                 \hskip #1\hskip \z@skip}

defineMacro("\\hspace", "\\@ifstar\\@hspacer\\@hspace");
defineMacro("\\@hspace", "\\hskip #1\\relax");
defineMacro("\\@hspacer", "\\rule{0pt}{0pt}\\hskip #1\\relax"); //////////////////////////////////////////////////////////////////////
// mathtools.sty
//\providecommand\ordinarycolon{:}

defineMacro("\\ordinarycolon", ":"); //\def\vcentcolon{\mathrel{\mathop\ordinarycolon}}
//TODO(edemaine): Not yet centered. Fix via \raisebox or #726

defineMacro("\\vcentcolon", "\\mathrel{\\mathop\\ordinarycolon}"); // \providecommand*\dblcolon{\vcentcolon\mathrel{\mkern-.9mu}\vcentcolon}

defineMacro("\\dblcolon", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon}}" + "{\\mathop{\\char\"2237}}"); // \providecommand*\coloneqq{\vcentcolon\mathrel{\mkern-1.2mu}=}

defineMacro("\\coloneqq", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}=}}" + "{\\mathop{\\char\"2254}}"); // ≔
// \providecommand*\Coloneqq{\dblcolon\mathrel{\mkern-1.2mu}=}

defineMacro("\\Coloneqq", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}=}}" + "{\\mathop{\\char\"2237\\char\"3d}}"); // \providecommand*\coloneq{\vcentcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

defineMacro("\\coloneq", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}" + "{\\mathop{\\char\"3a\\char\"2212}}"); // \providecommand*\Coloneq{\dblcolon\mathrel{\mkern-1.2mu}\mathrel{-}}

defineMacro("\\Coloneq", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}" + "{\\mathop{\\char\"2237\\char\"2212}}"); // \providecommand*\eqqcolon{=\mathrel{\mkern-1.2mu}\vcentcolon}

defineMacro("\\eqqcolon", "\\html@mathml{" + "\\mathrel{=\\mathrel{\\mkern-1.2mu}\\vcentcolon}}" + "{\\mathop{\\char\"2255}}"); // ≕
// \providecommand*\Eqqcolon{=\mathrel{\mkern-1.2mu}\dblcolon}

defineMacro("\\Eqqcolon", "\\html@mathml{" + "\\mathrel{=\\mathrel{\\mkern-1.2mu}\\dblcolon}}" + "{\\mathop{\\char\"3d\\char\"2237}}"); // \providecommand*\eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\vcentcolon}

defineMacro("\\eqcolon", "\\html@mathml{" + "\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon}}" + "{\\mathop{\\char\"2239}}"); // \providecommand*\Eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\dblcolon}

defineMacro("\\Eqcolon", "\\html@mathml{" + "\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon}}" + "{\\mathop{\\char\"2212\\char\"2237}}"); // \providecommand*\colonapprox{\vcentcolon\mathrel{\mkern-1.2mu}\approx}

defineMacro("\\colonapprox", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx}}" + "{\\mathop{\\char\"3a\\char\"2248}}"); // \providecommand*\Colonapprox{\dblcolon\mathrel{\mkern-1.2mu}\approx}

defineMacro("\\Colonapprox", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx}}" + "{\\mathop{\\char\"2237\\char\"2248}}"); // \providecommand*\colonsim{\vcentcolon\mathrel{\mkern-1.2mu}\sim}

defineMacro("\\colonsim", "\\html@mathml{" + "\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim}}" + "{\\mathop{\\char\"3a\\char\"223c}}"); // \providecommand*\Colonsim{\dblcolon\mathrel{\mkern-1.2mu}\sim}

defineMacro("\\Colonsim", "\\html@mathml{" + "\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim}}" + "{\\mathop{\\char\"2237\\char\"223c}}"); // Some Unicode characters are implemented with macros to mathtools functions.

defineMacro("\u2237", "\\dblcolon"); // ::

defineMacro("\u2239", "\\eqcolon"); // -:

defineMacro("\u2254", "\\coloneqq"); // :=

defineMacro("\u2255", "\\eqqcolon"); // =:

defineMacro("\u2A74", "\\Coloneqq"); // ::=
//////////////////////////////////////////////////////////////////////
// colonequals.sty
// Alternate names for mathtools's macros:

defineMacro("\\ratio", "\\vcentcolon");
defineMacro("\\coloncolon", "\\dblcolon");
defineMacro("\\colonequals", "\\coloneqq");
defineMacro("\\coloncolonequals", "\\Coloneqq");
defineMacro("\\equalscolon", "\\eqqcolon");
defineMacro("\\equalscoloncolon", "\\Eqqcolon");
defineMacro("\\colonminus", "\\coloneq");
defineMacro("\\coloncolonminus", "\\Coloneq");
defineMacro("\\minuscolon", "\\eqcolon");
defineMacro("\\minuscoloncolon", "\\Eqcolon"); // \colonapprox name is same in mathtools and colonequals.

defineMacro("\\coloncolonapprox", "\\Colonapprox"); // \colonsim name is same in mathtools and colonequals.

defineMacro("\\coloncolonsim", "\\Colonsim"); // Additional macros, implemented by analogy with mathtools definitions:

defineMacro("\\simcolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
defineMacro("\\simcoloncolon", "\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon}");
defineMacro("\\approxcolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon}");
defineMacro("\\approxcoloncolon", "\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon}"); // Present in newtxmath, pxfonts and txfonts

defineMacro("\\notni", "\\html@mathml{\\not\\ni}{\\mathrel{\\char`\u220C}}");
defineMacro("\\limsup", "\\DOTSB\\operatorname*{lim\\,sup}");
defineMacro("\\liminf", "\\DOTSB\\operatorname*{lim\\,inf}"); //////////////////////////////////////////////////////////////////////
// From amsopn.sty

defineMacro("\\injlim", "\\DOTSB\\operatorname*{inj\\,lim}");
defineMacro("\\projlim", "\\DOTSB\\operatorname*{proj\\,lim}");
defineMacro("\\varlimsup", "\\DOTSB\\operatorname*{\\overline{lim}}");
defineMacro("\\varliminf", "\\DOTSB\\operatorname*{\\underline{lim}}");
defineMacro("\\varinjlim", "\\DOTSB\\operatorname*{\\underrightarrow{lim}}");
defineMacro("\\varprojlim", "\\DOTSB\\operatorname*{\\underleftarrow{lim}}"); //////////////////////////////////////////////////////////////////////
// MathML alternates for KaTeX glyphs in the Unicode private area

defineMacro("\\gvertneqq", "\\html@mathml{\\@gvertneqq}{\u2269}");
defineMacro("\\lvertneqq", "\\html@mathml{\\@lvertneqq}{\u2268}");
defineMacro("\\ngeqq", "\\html@mathml{\\@ngeqq}{\u2271}");
defineMacro("\\ngeqslant", "\\html@mathml{\\@ngeqslant}{\u2271}");
defineMacro("\\nleqq", "\\html@mathml{\\@nleqq}{\u2270}");
defineMacro("\\nleqslant", "\\html@mathml{\\@nleqslant}{\u2270}");
defineMacro("\\nshortmid", "\\html@mathml{\\@nshortmid}{∤}");
defineMacro("\\nshortparallel", "\\html@mathml{\\@nshortparallel}{∦}");
defineMacro("\\nsubseteqq", "\\html@mathml{\\@nsubseteqq}{\u2288}");
defineMacro("\\nsupseteqq", "\\html@mathml{\\@nsupseteqq}{\u2289}");
defineMacro("\\varsubsetneq", "\\html@mathml{\\@varsubsetneq}{⊊}");
defineMacro("\\varsubsetneqq", "\\html@mathml{\\@varsubsetneqq}{⫋}");
defineMacro("\\varsupsetneq", "\\html@mathml{\\@varsupsetneq}{⊋}");
defineMacro("\\varsupsetneqq", "\\html@mathml{\\@varsupsetneqq}{⫌}");
defineMacro("\\imath", "\\html@mathml{\\@imath}{\u0131}");
defineMacro("\\jmath", "\\html@mathml{\\@jmath}{\u0237}"); //////////////////////////////////////////////////////////////////////
// stmaryrd and semantic
// The stmaryrd and semantic packages render the next four items by calling a
// glyph. Those glyphs do not exist in the KaTeX fonts. Hence the macros.

defineMacro("\\llbracket", "\\html@mathml{" + "\\mathopen{[\\mkern-3.2mu[}}" + "{\\mathopen{\\char`\u27E6}}");
defineMacro("\\rrbracket", "\\html@mathml{" + "\\mathclose{]\\mkern-3.2mu]}}" + "{\\mathclose{\\char`\u27E7}}");
defineMacro("\u27E6", "\\llbracket"); // blackboard bold [

defineMacro("\u27E7", "\\rrbracket"); // blackboard bold ]

defineMacro("\\lBrace", "\\html@mathml{" + "\\mathopen{\\{\\mkern-3.2mu[}}" + "{\\mathopen{\\char`\u2983}}");
defineMacro("\\rBrace", "\\html@mathml{" + "\\mathclose{]\\mkern-3.2mu\\}}}" + "{\\mathclose{\\char`\u2984}}");
defineMacro("\u2983", "\\lBrace"); // blackboard bold {

defineMacro("\u2984", "\\rBrace"); // blackboard bold }
// TODO: Create variable sized versions of the last two items. I believe that
// will require new font glyphs.
// The stmaryrd function `\minuso` provides a "Plimsoll" symbol that
// superimposes the characters \circ and \mathminus. Used in chemistry.

defineMacro("\\minuso", "\\mathbin{\\html@mathml{" + "{\\mathrlap{\\mathchoice{\\kern{0.145em}}{\\kern{0.145em}}" + "{\\kern{0.1015em}}{\\kern{0.0725em}}\\circ}{-}}}" + "{\\char`⦵}}");
defineMacro("⦵", "\\minuso"); //////////////////////////////////////////////////////////////////////
// texvc.sty
// The texvc package contains macros available in mediawiki pages.
// We omit the functions deprecated at
// https://en.wikipedia.org/wiki/Help:Displaying_a_formula#Deprecated_syntax
// We also omit texvc's \O, which conflicts with \text{\O}

defineMacro("\\darr", "\\downarrow");
defineMacro("\\dArr", "\\Downarrow");
defineMacro("\\Darr", "\\Downarrow");
defineMacro("\\lang", "\\langle");
defineMacro("\\rang", "\\rangle");
defineMacro("\\uarr", "\\uparrow");
defineMacro("\\uArr", "\\Uparrow");
defineMacro("\\Uarr", "\\Uparrow");
defineMacro("\\N", "\\mathbb{N}");
defineMacro("\\R", "\\mathbb{R}");
defineMacro("\\Z", "\\mathbb{Z}");
defineMacro("\\alef", "\\aleph");
defineMacro("\\alefsym", "\\aleph");
defineMacro("\\Alpha", "\\mathrm{A}");
defineMacro("\\Beta", "\\mathrm{B}");
defineMacro("\\bull", "\\bullet");
defineMacro("\\Chi", "\\mathrm{X}");
defineMacro("\\clubs", "\\clubsuit");
defineMacro("\\cnums", "\\mathbb{C}");
defineMacro("\\Complex", "\\mathbb{C}");
defineMacro("\\Dagger", "\\ddagger");
defineMacro("\\diamonds", "\\diamondsuit");
defineMacro("\\empty", "\\emptyset");
defineMacro("\\Epsilon", "\\mathrm{E}");
defineMacro("\\Eta", "\\mathrm{H}");
defineMacro("\\exist", "\\exists");
defineMacro("\\harr", "\\leftrightarrow");
defineMacro("\\hArr", "\\Leftrightarrow");
defineMacro("\\Harr", "\\Leftrightarrow");
defineMacro("\\hearts", "\\heartsuit");
defineMacro("\\image", "\\Im");
defineMacro("\\infin", "\\infty");
defineMacro("\\Iota", "\\mathrm{I}");
defineMacro("\\isin", "\\in");
defineMacro("\\Kappa", "\\mathrm{K}");
defineMacro("\\larr", "\\leftarrow");
defineMacro("\\lArr", "\\Leftarrow");
defineMacro("\\Larr", "\\Leftarrow");
defineMacro("\\lrarr", "\\leftrightarrow");
defineMacro("\\lrArr", "\\Leftrightarrow");
defineMacro("\\Lrarr", "\\Leftrightarrow");
defineMacro("\\Mu", "\\mathrm{M}");
defineMacro("\\natnums", "\\mathbb{N}");
defineMacro("\\Nu", "\\mathrm{N}");
defineMacro("\\Omicron", "\\mathrm{O}");
defineMacro("\\plusmn", "\\pm");
defineMacro("\\rarr", "\\rightarrow");
defineMacro("\\rArr", "\\Rightarrow");
defineMacro("\\Rarr", "\\Rightarrow");
defineMacro("\\real", "\\Re");
defineMacro("\\reals", "\\mathbb{R}");
defineMacro("\\Reals", "\\mathbb{R}");
defineMacro("\\Rho", "\\mathrm{P}");
defineMacro("\\sdot", "\\cdot");
defineMacro("\\sect", "\\S");
defineMacro("\\spades", "\\spadesuit");
defineMacro("\\sub", "\\subset");
defineMacro("\\sube", "\\subseteq");
defineMacro("\\supe", "\\supseteq");
defineMacro("\\Tau", "\\mathrm{T}");
defineMacro("\\thetasym", "\\vartheta"); // TODO: defineMacro("\\varcoppa", "\\\mbox{\\coppa}");

defineMacro("\\weierp", "\\wp");
defineMacro("\\Zeta", "\\mathrm{Z}"); //////////////////////////////////////////////////////////////////////
// statmath.sty
// https://ctan.math.illinois.edu/macros/latex/contrib/statmath/statmath.pdf

defineMacro("\\argmin", "\\DOTSB\\operatorname*{arg\\,min}");
defineMacro("\\argmax", "\\DOTSB\\operatorname*{arg\\,max}");
defineMacro("\\plim", "\\DOTSB\\mathop{\\operatorname{plim}}\\limits"); //////////////////////////////////////////////////////////////////////
// braket.sty
// http://ctan.math.washington.edu/tex-archive/macros/latex/contrib/braket/braket.pdf

defineMacro("\\bra", "\\mathinner{\\langle{#1}|}");
defineMacro("\\ket", "\\mathinner{|{#1}\\rangle}");
defineMacro("\\braket", "\\mathinner{\\langle{#1}\\rangle}");
defineMacro("\\Bra", "\\left\\langle#1\\right|");
defineMacro("\\Ket", "\\left|#1\\right\\rangle"); //////////////////////////////////////////////////////////////////////
// actuarialangle.dtx

defineMacro("\\angln", "{\\angl n}"); // Custom Khan Academy colors, should be moved to an optional package

defineMacro("\\blue", "\\textcolor{##6495ed}{#1}");
defineMacro("\\orange", "\\textcolor{##ffa500}{#1}");
defineMacro("\\pink", "\\textcolor{##ff00af}{#1}");
defineMacro("\\red", "\\textcolor{##df0030}{#1}");
defineMacro("\\green", "\\textcolor{##28ae7b}{#1}");
defineMacro("\\gray", "\\textcolor{gray}{#1}");
defineMacro("\\purple", "\\textcolor{##9d38bd}{#1}");
defineMacro("\\blueA", "\\textcolor{##ccfaff}{#1}");
defineMacro("\\blueB", "\\textcolor{##80f6ff}{#1}");
defineMacro("\\blueC", "\\textcolor{##63d9ea}{#1}");
defineMacro("\\blueD", "\\textcolor{##11accd}{#1}");
defineMacro("\\blueE", "\\textcolor{##0c7f99}{#1}");
defineMacro("\\tealA", "\\textcolor{##94fff5}{#1}");
defineMacro("\\tealB", "\\textcolor{##26edd5}{#1}");
defineMacro("\\tealC", "\\textcolor{##01d1c1}{#1}");
defineMacro("\\tealD", "\\textcolor{##01a995}{#1}");
defineMacro("\\tealE", "\\textcolor{##208170}{#1}");
defineMacro("\\greenA", "\\textcolor{##b6ffb0}{#1}");
defineMacro("\\greenB", "\\textcolor{##8af281}{#1}");
defineMacro("\\greenC", "\\textcolor{##74cf70}{#1}");
defineMacro("\\greenD", "\\textcolor{##1fab54}{#1}");
defineMacro("\\greenE", "\\textcolor{##0d923f}{#1}");
defineMacro("\\goldA", "\\textcolor{##ffd0a9}{#1}");
defineMacro("\\goldB", "\\textcolor{##ffbb71}{#1}");
defineMacro("\\goldC", "\\textcolor{##ff9c39}{#1}");
defineMacro("\\goldD", "\\textcolor{##e07d10}{#1}");
defineMacro("\\goldE", "\\textcolor{##a75a05}{#1}");
defineMacro("\\redA", "\\textcolor{##fca9a9}{#1}");
defineMacro("\\redB", "\\textcolor{##ff8482}{#1}");
defineMacro("\\redC", "\\textcolor{##f9685d}{#1}");
defineMacro("\\redD", "\\textcolor{##e84d39}{#1}");
defineMacro("\\redE", "\\textcolor{##bc2612}{#1}");
defineMacro("\\maroonA", "\\textcolor{##ffbde0}{#1}");
defineMacro("\\maroonB", "\\textcolor{##ff92c6}{#1}");
defineMacro("\\maroonC", "\\textcolor{##ed5fa6}{#1}");
defineMacro("\\maroonD", "\\textcolor{##ca337c}{#1}");
defineMacro("\\maroonE", "\\textcolor{##9e034e}{#1}");
defineMacro("\\purpleA", "\\textcolor{##ddd7ff}{#1}");
defineMacro("\\purpleB", "\\textcolor{##c6b9fc}{#1}");
defineMacro("\\purpleC", "\\textcolor{##aa87ff}{#1}");
defineMacro("\\purpleD", "\\textcolor{##7854ab}{#1}");
defineMacro("\\purpleE", "\\textcolor{##543b78}{#1}");
defineMacro("\\mintA", "\\textcolor{##f5f9e8}{#1}");
defineMacro("\\mintB", "\\textcolor{##edf2df}{#1}");
defineMacro("\\mintC", "\\textcolor{##e0e5cc}{#1}");
defineMacro("\\grayA", "\\textcolor{##f6f7f7}{#1}");
defineMacro("\\grayB", "\\textcolor{##f0f1f2}{#1}");
defineMacro("\\grayC", "\\textcolor{##e3e5e6}{#1}");
defineMacro("\\grayD", "\\textcolor{##d6d8da}{#1}");
defineMacro("\\grayE", "\\textcolor{##babec2}{#1}");
defineMacro("\\grayF", "\\textcolor{##888d93}{#1}");
defineMacro("\\grayG", "\\textcolor{##626569}{#1}");
defineMacro("\\grayH", "\\textcolor{##3b3e40}{#1}");
defineMacro("\\grayI", "\\textcolor{##21242c}{#1}");
defineMacro("\\kaBlue", "\\textcolor{##314453}{#1}");
defineMacro("\\kaGreen", "\\textcolor{##71B307}{#1}");
;// CONCATENATED MODULE: ./src/functions/operatorname.js









// NOTE: Unlike most `htmlBuilder`s, this one handles not only
// "operatorname", but also  "supsub" since \operatorname* can
// affect super/subscripting.
var operatorname_htmlBuilder = function htmlBuilder(grp, options) {
  // Operators are handled in the TeXbook pg. 443-444, rule 13(a).
  var supGroup;
  var subGroup;
  var hasLimits = false;
  var group;

  if (grp.type === "supsub") {
    // If we have limits, supsub will pass us its group to handle. Pull
    // out the superscript and subscript and set the group to the op in
    // its base.
    supGroup = grp.sup;
    subGroup = grp.sub;
    group = assertNodeType(grp.base, "operatorname");
    hasLimits = true;
  } else {
    group = assertNodeType(grp, "operatorname");
  }

  var base;

  if (group.body.length > 0) {
    var body = group.body.map(function (child) {
      // $FlowFixMe: Check if the node has a string `text` property.
      var childText = child.text;

      if (typeof childText === "string") {
        return {
          type: "textord",
          mode: child.mode,
          text: childText
        };
      } else {
        return child;
      }
    }); // Consolidate function names into symbol characters.

    var expression = buildExpression(body, options.withFont("mathrm"), true);

    for (var i = 0; i < expression.length; i++) {
      var child = expression[i];

      if (child instanceof SymbolNode) {
        // Per amsopn package,
        // change minus to hyphen and \ast to asterisk
        child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
      }
    }

    base = buildCommon.makeSpan(["mop"], expression, options);
  } else {
    base = buildCommon.makeSpan(["mop"], [], options);
  }

  if (hasLimits) {
    return assembleSupSub(base, supGroup, subGroup, options, options.style, 0, 0);
  } else {
    return base;
  }
};

var operatorname_mathmlBuilder = function mathmlBuilder(group, options) {
  // The steps taken here are similar to the html version.
  var expression = buildMathML_buildExpression(group.body, options.withFont("mathrm")); // Is expression a string or has it something like a fraction?

  var isAllString = true; // default

  for (var i = 0; i < expression.length; i++) {
    var node = expression[i];

    if (node instanceof mathMLTree.SpaceNode) {// Do nothing
    } else if (node instanceof mathMLTree.MathNode) {
      switch (node.type) {
        case "mi":
        case "mn":
        case "ms":
        case "mspace":
        case "mtext":
          break;
        // Do nothing yet.

        case "mo":
          {
            var child = node.children[0];

            if (node.children.length === 1 && child instanceof mathMLTree.TextNode) {
              child.text = child.text.replace(/\u2212/, "-").replace(/\u2217/, "*");
            } else {
              isAllString = false;
            }

            break;
          }

        default:
          isAllString = false;
      }
    } else {
      isAllString = false;
    }
  }

  if (isAllString) {
    // Write a single TextNode instead of multiple nested tags.
    var word = expression.map(function (node) {
      return node.toText();
    }).join("");
    expression = [new mathMLTree.TextNode(word)];
  }

  var identifier = new mathMLTree.MathNode("mi", expression);
  identifier.setAttribute("mathvariant", "normal"); // \u2061 is the same as &ApplyFunction;
  // ref: https://www.w3schools.com/charsets/ref_html_entities_a.asp

  var operator = new mathMLTree.MathNode("mo", [makeText("\u2061", "text")]);

  if (group.parentIsSupSub) {
    return new mathMLTree.MathNode("mrow", [identifier, operator]);
  } else {
    return mathMLTree.newDocumentFragment([identifier, operator]);
  }
}; // \operatorname
// amsopn.dtx: \mathop{#1\kern\z@\operator@font#3}\newmcodes@


defineFunction({
  type: "operatorname",
  names: ["\\operatorname@", "\\operatornamewithlimits"],
  props: {
    numArgs: 1
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var body = args[0];
    return {
      type: "operatorname",
      mode: parser.mode,
      body: ordargument(body),
      alwaysHandleSupSub: funcName === "\\operatornamewithlimits",
      limits: false,
      parentIsSupSub: false
    };
  },
  htmlBuilder: operatorname_htmlBuilder,
  mathmlBuilder: operatorname_mathmlBuilder
});
defineMacro("\\operatorname", "\\@ifstar\\operatornamewithlimits\\operatorname@");
;// CONCATENATED MODULE: ./src/functions/ordgroup.js




defineFunctionBuilders({
  type: "ordgroup",
  htmlBuilder: function htmlBuilder(group, options) {
    if (group.semisimple) {
      return buildCommon.makeFragment(buildExpression(group.body, options, false));
    }

    return buildCommon.makeSpan(["mord"], buildExpression(group.body, options, true), options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    return buildExpressionRow(group.body, options, true);
  }
});
;// CONCATENATED MODULE: ./src/functions/overline.js





defineFunction({
  type: "overline",
  names: ["\\overline"],
  props: {
    numArgs: 1
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    var body = args[0];
    return {
      type: "overline",
      mode: parser.mode,
      body: body
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    // Overlines are handled in the TeXbook pg 443, Rule 9.
    // Build the inner group in the cramped style.
    var innerGroup = buildGroup(group.body, options.havingCrampedStyle()); // Create the line above the body

    var line = buildCommon.makeLineSpan("overline-line", options); // Generate the vlist, with the appropriate kerns

    var defaultRuleThickness = options.fontMetrics().defaultRuleThickness;
    var vlist = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: innerGroup
      }, {
        type: "kern",
        size: 3 * defaultRuleThickness
      }, {
        type: "elem",
        elem: line
      }, {
        type: "kern",
        size: defaultRuleThickness
      }]
    }, options);
    return buildCommon.makeSpan(["mord", "overline"], [vlist], options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("\u203E")]);
    operator.setAttribute("stretchy", "true");
    var node = new mathMLTree.MathNode("mover", [buildMathML_buildGroup(group.body, options), operator]);
    node.setAttribute("accent", "true");
    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/phantom.js





defineFunction({
  type: "phantom",
  names: ["\\phantom"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    var body = args[0];
    return {
      type: "phantom",
      mode: parser.mode,
      body: ordargument(body)
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var elements = buildExpression(group.body, options.withPhantom(), false); // \phantom isn't supposed to affect the elements it contains.
    // See "color" for more details.

    return buildCommon.makeFragment(elements);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var inner = buildMathML_buildExpression(group.body, options);
    return new mathMLTree.MathNode("mphantom", inner);
  }
});
defineFunction({
  type: "hphantom",
  names: ["\\hphantom"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: function handler(_ref2, args) {
    var parser = _ref2.parser;
    var body = args[0];
    return {
      type: "hphantom",
      mode: parser.mode,
      body: body
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var node = buildCommon.makeSpan([], [buildGroup(group.body, options.withPhantom())]);
    node.height = 0;
    node.depth = 0;

    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        node.children[i].height = 0;
        node.children[i].depth = 0;
      }
    } // See smash for comment re: use of makeVList


    node = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: node
      }]
    }, options); // For spacing, TeX treats \smash as a math group (same spacing as ord).

    return buildCommon.makeSpan(["mord"], [node], options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var inner = buildMathML_buildExpression(ordargument(group.body), options);
    var phantom = new mathMLTree.MathNode("mphantom", inner);
    var node = new mathMLTree.MathNode("mpadded", [phantom]);
    node.setAttribute("height", "0px");
    node.setAttribute("depth", "0px");
    return node;
  }
});
defineFunction({
  type: "vphantom",
  names: ["\\vphantom"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: function handler(_ref3, args) {
    var parser = _ref3.parser;
    var body = args[0];
    return {
      type: "vphantom",
      mode: parser.mode,
      body: body
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var inner = buildCommon.makeSpan(["inner"], [buildGroup(group.body, options.withPhantom())]);
    var fix = buildCommon.makeSpan(["fix"], []);
    return buildCommon.makeSpan(["mord", "rlap"], [inner, fix], options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var inner = buildMathML_buildExpression(ordargument(group.body), options);
    var phantom = new mathMLTree.MathNode("mphantom", inner);
    var node = new mathMLTree.MathNode("mpadded", [phantom]);
    node.setAttribute("width", "0px");
    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/raisebox.js






 // Box manipulation

defineFunction({
  type: "raisebox",
  names: ["\\raisebox"],
  props: {
    numArgs: 2,
    argTypes: ["size", "hbox"],
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    var amount = assertNodeType(args[0], "size").value;
    var body = args[1];
    return {
      type: "raisebox",
      mode: parser.mode,
      dy: amount,
      body: body
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var body = buildGroup(group.body, options);
    var dy = calculateSize(group.dy, options);
    return buildCommon.makeVList({
      positionType: "shift",
      positionData: -dy,
      children: [{
        type: "elem",
        elem: body
      }]
    }, options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var node = new mathMLTree.MathNode("mpadded", [buildMathML_buildGroup(group.body, options)]);
    var dy = group.dy.number + group.dy.unit;
    node.setAttribute("voffset", dy);
    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/rule.js





defineFunction({
  type: "rule",
  names: ["\\rule"],
  props: {
    numArgs: 2,
    numOptionalArgs: 1,
    argTypes: ["size", "size", "size"]
  },
  handler: function handler(_ref, args, optArgs) {
    var parser = _ref.parser;
    var shift = optArgs[0];
    var width = assertNodeType(args[0], "size");
    var height = assertNodeType(args[1], "size");
    return {
      type: "rule",
      mode: parser.mode,
      shift: shift && assertNodeType(shift, "size").value,
      width: width.value,
      height: height.value
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    // Make an empty span for the rule
    var rule = buildCommon.makeSpan(["mord", "rule"], [], options); // Calculate the shift, width, and height of the rule, and account for units

    var width = calculateSize(group.width, options);
    var height = calculateSize(group.height, options);
    var shift = group.shift ? calculateSize(group.shift, options) : 0; // Style the rule to the right size

    rule.style.borderRightWidth = width + "em";
    rule.style.borderTopWidth = height + "em";
    rule.style.bottom = shift + "em"; // Record the height and width

    rule.width = width;
    rule.height = height + shift;
    rule.depth = -shift; // Font size is the number large enough that the browser will
    // reserve at least `absHeight` space above the baseline.
    // The 1.125 factor was empirically determined

    rule.maxFontSize = height * 1.125 * options.sizeMultiplier;
    return rule;
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var width = calculateSize(group.width, options);
    var height = calculateSize(group.height, options);
    var shift = group.shift ? calculateSize(group.shift, options) : 0;
    var color = options.color && options.getColor() || "black";
    var rule = new mathMLTree.MathNode("mspace");
    rule.setAttribute("mathbackground", color);
    rule.setAttribute("width", width + "em");
    rule.setAttribute("height", height + "em");
    var wrapper = new mathMLTree.MathNode("mpadded", [rule]);

    if (shift >= 0) {
      wrapper.setAttribute("height", "+" + shift + "em");
    } else {
      wrapper.setAttribute("height", shift + "em");
      wrapper.setAttribute("depth", "+" + -shift + "em");
    }

    wrapper.setAttribute("voffset", shift + "em");
    return wrapper;
  }
});
;// CONCATENATED MODULE: ./src/functions/sizing.js





function sizingGroup(value, options, baseOptions) {
  var inner = buildExpression(value, options, false);
  var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier; // Add size-resetting classes to the inner list and set maxFontSize
  // manually. Handle nested size changes.

  for (var i = 0; i < inner.length; i++) {
    var pos = inner[i].classes.indexOf("sizing");

    if (pos < 0) {
      Array.prototype.push.apply(inner[i].classes, options.sizingClasses(baseOptions));
    } else if (inner[i].classes[pos + 1] === "reset-size" + options.size) {
      // This is a nested size change: e.g., inner[i] is the "b" in
      // `\Huge a \small b`. Override the old size (the `reset-` class)
      // but not the new size.
      inner[i].classes[pos + 1] = "reset-size" + baseOptions.size;
    }

    inner[i].height *= multiplier;
    inner[i].depth *= multiplier;
  }

  return buildCommon.makeFragment(inner);
}
var sizeFuncs = ["\\tiny", "\\sixptsize", "\\scriptsize", "\\footnotesize", "\\small", "\\normalsize", "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"];
var sizing_htmlBuilder = function htmlBuilder(group, options) {
  // Handle sizing operators like \Huge. Real TeX doesn't actually allow
  // these functions inside of math expressions, so we do some special
  // handling.
  var newOptions = options.havingSize(group.size);
  return sizingGroup(group.body, newOptions, options);
};
defineFunction({
  type: "sizing",
  names: sizeFuncs,
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var breakOnTokenText = _ref.breakOnTokenText,
        funcName = _ref.funcName,
        parser = _ref.parser;
    var body = parser.parseExpression(false, breakOnTokenText);
    return {
      type: "sizing",
      mode: parser.mode,
      // Figure out what size to use based on the list of functions above
      size: sizeFuncs.indexOf(funcName) + 1,
      body: body
    };
  },
  htmlBuilder: sizing_htmlBuilder,
  mathmlBuilder: function mathmlBuilder(group, options) {
    var newOptions = options.havingSize(group.size);
    var inner = buildMathML_buildExpression(group.body, newOptions);
    var node = new mathMLTree.MathNode("mstyle", inner); // TODO(emily): This doesn't produce the correct size for nested size
    // changes, because we don't keep state of what style we're currently
    // in, so we can't reset the size to normal before changing it.  Now
    // that we're passing an options parameter we should be able to fix
    // this.

    node.setAttribute("mathsize", newOptions.sizeMultiplier + "em");
    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/smash.js
// smash, with optional [tb], as in AMS






defineFunction({
  type: "smash",
  names: ["\\smash"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1,
    allowedInText: true
  },
  handler: function handler(_ref, args, optArgs) {
    var parser = _ref.parser;
    var smashHeight = false;
    var smashDepth = false;
    var tbArg = optArgs[0] && assertNodeType(optArgs[0], "ordgroup");

    if (tbArg) {
      // Optional [tb] argument is engaged.
      // ref: amsmath: \renewcommand{\smash}[1][tb]{%
      //               def\mb@t{\ht}\def\mb@b{\dp}\def\mb@tb{\ht\z@\z@\dp}%
      var letter = "";

      for (var i = 0; i < tbArg.body.length; ++i) {
        var node = tbArg.body[i]; // $FlowFixMe: Not every node type has a `text` property.

        letter = node.text;

        if (letter === "t") {
          smashHeight = true;
        } else if (letter === "b") {
          smashDepth = true;
        } else {
          smashHeight = false;
          smashDepth = false;
          break;
        }
      }
    } else {
      smashHeight = true;
      smashDepth = true;
    }

    var body = args[0];
    return {
      type: "smash",
      mode: parser.mode,
      body: body,
      smashHeight: smashHeight,
      smashDepth: smashDepth
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var node = buildCommon.makeSpan([], [buildGroup(group.body, options)]);

    if (!group.smashHeight && !group.smashDepth) {
      return node;
    }

    if (group.smashHeight) {
      node.height = 0; // In order to influence makeVList, we have to reset the children.

      if (node.children) {
        for (var i = 0; i < node.children.length; i++) {
          node.children[i].height = 0;
        }
      }
    }

    if (group.smashDepth) {
      node.depth = 0;

      if (node.children) {
        for (var _i = 0; _i < node.children.length; _i++) {
          node.children[_i].depth = 0;
        }
      }
    } // At this point, we've reset the TeX-like height and depth values.
    // But the span still has an HTML line height.
    // makeVList applies "display: table-cell", which prevents the browser
    // from acting on that line height. So we'll call makeVList now.


    var smashedNode = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: node
      }]
    }, options); // For spacing, TeX treats \hphantom as a math group (same spacing as ord).

    return buildCommon.makeSpan(["mord"], [smashedNode], options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var node = new mathMLTree.MathNode("mpadded", [buildMathML_buildGroup(group.body, options)]);

    if (group.smashHeight) {
      node.setAttribute("height", "0px");
    }

    if (group.smashDepth) {
      node.setAttribute("depth", "0px");
    }

    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/sqrt.js







defineFunction({
  type: "sqrt",
  names: ["\\sqrt"],
  props: {
    numArgs: 1,
    numOptionalArgs: 1
  },
  handler: function handler(_ref, args, optArgs) {
    var parser = _ref.parser;
    var index = optArgs[0];
    var body = args[0];
    return {
      type: "sqrt",
      mode: parser.mode,
      body: body,
      index: index
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    // Square roots are handled in the TeXbook pg. 443, Rule 11.
    // First, we do the same steps as in overline to build the inner group
    // and line
    var inner = buildGroup(group.body, options.havingCrampedStyle());

    if (inner.height === 0) {
      // Render a small surd.
      inner.height = options.fontMetrics().xHeight;
    } // Some groups can return document fragments.  Handle those by wrapping
    // them in a span.


    inner = buildCommon.wrapFragment(inner, options); // Calculate the minimum size for the \surd delimiter

    var metrics = options.fontMetrics();
    var theta = metrics.defaultRuleThickness;
    var phi = theta;

    if (options.style.id < src_Style.TEXT.id) {
      phi = options.fontMetrics().xHeight;
    } // Calculate the clearance between the body and line


    var lineClearance = theta + phi / 4;
    var minDelimiterHeight = inner.height + inner.depth + lineClearance + theta; // Create a sqrt SVG of the required minimum size

    var _delimiter$sqrtImage = delimiter.sqrtImage(minDelimiterHeight, options),
        img = _delimiter$sqrtImage.span,
        ruleWidth = _delimiter$sqrtImage.ruleWidth,
        advanceWidth = _delimiter$sqrtImage.advanceWidth;

    var delimDepth = img.height - ruleWidth; // Adjust the clearance based on the delimiter size

    if (delimDepth > inner.height + inner.depth + lineClearance) {
      lineClearance = (lineClearance + delimDepth - inner.height - inner.depth) / 2;
    } // Shift the sqrt image


    var imgShift = img.height - inner.height - lineClearance - ruleWidth;
    inner.style.paddingLeft = advanceWidth + "em"; // Overlay the image and the argument.

    var body = buildCommon.makeVList({
      positionType: "firstBaseline",
      children: [{
        type: "elem",
        elem: inner,
        wrapperClasses: ["svg-align"]
      }, {
        type: "kern",
        size: -(inner.height + imgShift)
      }, {
        type: "elem",
        elem: img
      }, {
        type: "kern",
        size: ruleWidth
      }]
    }, options);

    if (!group.index) {
      return buildCommon.makeSpan(["mord", "sqrt"], [body], options);
    } else {
      // Handle the optional root index
      // The index is always in scriptscript style
      var newOptions = options.havingStyle(src_Style.SCRIPTSCRIPT);
      var rootm = buildGroup(group.index, newOptions, options); // The amount the index is shifted by. This is taken from the TeX
      // source, in the definition of `\r@@t`.

      var toShift = 0.6 * (body.height - body.depth); // Build a VList with the superscript shifted up correctly

      var rootVList = buildCommon.makeVList({
        positionType: "shift",
        positionData: -toShift,
        children: [{
          type: "elem",
          elem: rootm
        }]
      }, options); // Add a class surrounding it so we can add on the appropriate
      // kerning

      var rootVListWrap = buildCommon.makeSpan(["root"], [rootVList]);
      return buildCommon.makeSpan(["mord", "sqrt"], [rootVListWrap, body], options);
    }
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var body = group.body,
        index = group.index;
    return index ? new mathMLTree.MathNode("mroot", [buildMathML_buildGroup(body, options), buildMathML_buildGroup(index, options)]) : new mathMLTree.MathNode("msqrt", [buildMathML_buildGroup(body, options)]);
  }
});
;// CONCATENATED MODULE: ./src/functions/styling.js





var styling_styleMap = {
  "display": src_Style.DISPLAY,
  "text": src_Style.TEXT,
  "script": src_Style.SCRIPT,
  "scriptscript": src_Style.SCRIPTSCRIPT
};
defineFunction({
  type: "styling",
  names: ["\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle"],
  props: {
    numArgs: 0,
    allowedInText: true,
    primitive: true
  },
  handler: function handler(_ref, args) {
    var breakOnTokenText = _ref.breakOnTokenText,
        funcName = _ref.funcName,
        parser = _ref.parser;
    // parse out the implicit body
    var body = parser.parseExpression(true, breakOnTokenText); // TODO: Refactor to avoid duplicating styleMap in multiple places (e.g.
    // here and in buildHTML and de-dupe the enumeration of all the styles).
    // $FlowFixMe: The names above exactly match the styles.

    var style = funcName.slice(1, funcName.length - 5);
    return {
      type: "styling",
      mode: parser.mode,
      // Figure out what style to use by pulling out the style from
      // the function name
      style: style,
      body: body
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    // Style changes are handled in the TeXbook on pg. 442, Rule 3.
    var newStyle = styling_styleMap[group.style];
    var newOptions = options.havingStyle(newStyle).withFont('');
    return sizingGroup(group.body, newOptions, options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    // Figure out what style we're changing to.
    var newStyle = styling_styleMap[group.style];
    var newOptions = options.havingStyle(newStyle);
    var inner = buildMathML_buildExpression(group.body, newOptions);
    var node = new mathMLTree.MathNode("mstyle", inner);
    var styleAttributes = {
      "display": ["0", "true"],
      "text": ["0", "false"],
      "script": ["1", "false"],
      "scriptscript": ["2", "false"]
    };
    var attr = styleAttributes[group.style];
    node.setAttribute("scriptlevel", attr[0]);
    node.setAttribute("displaystyle", attr[1]);
    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/supsub.js













/**
 * Sometimes, groups perform special rules when they have superscripts or
 * subscripts attached to them. This function lets the `supsub` group know that
 * Sometimes, groups perform special rules when they have superscripts or
 * its inner element should handle the superscripts and subscripts instead of
 * handling them itself.
 */
var htmlBuilderDelegate = function htmlBuilderDelegate(group, options) {
  var base = group.base;

  if (!base) {
    return null;
  } else if (base.type === "op") {
    // Operators handle supsubs differently when they have limits
    // (e.g. `\displaystyle\sum_2^3`)
    var delegate = base.limits && (options.style.size === src_Style.DISPLAY.size || base.alwaysHandleSupSub);
    return delegate ? op_htmlBuilder : null;
  } else if (base.type === "operatorname") {
    var _delegate = base.alwaysHandleSupSub && (options.style.size === src_Style.DISPLAY.size || base.limits);

    return _delegate ? operatorname_htmlBuilder : null;
  } else if (base.type === "accent") {
    return utils.isCharacterBox(base.base) ? htmlBuilder : null;
  } else if (base.type === "horizBrace") {
    var isSup = !group.sub;
    return isSup === base.isOver ? horizBrace_htmlBuilder : null;
  } else {
    return null;
  }
}; // Super scripts and subscripts, whose precise placement can depend on other
// functions that precede them.


defineFunctionBuilders({
  type: "supsub",
  htmlBuilder: function htmlBuilder(group, options) {
    // Superscript and subscripts are handled in the TeXbook on page
    // 445-446, rules 18(a-f).
    // Here is where we defer to the inner group if it should handle
    // superscripts and subscripts itself.
    var builderDelegate = htmlBuilderDelegate(group, options);

    if (builderDelegate) {
      return builderDelegate(group, options);
    }

    var valueBase = group.base,
        valueSup = group.sup,
        valueSub = group.sub;
    var base = buildGroup(valueBase, options);
    var supm;
    var subm;
    var metrics = options.fontMetrics(); // Rule 18a

    var supShift = 0;
    var subShift = 0;
    var isCharacterBox = valueBase && utils.isCharacterBox(valueBase);

    if (valueSup) {
      var newOptions = options.havingStyle(options.style.sup());
      supm = buildGroup(valueSup, newOptions, options);

      if (!isCharacterBox) {
        supShift = base.height - newOptions.fontMetrics().supDrop * newOptions.sizeMultiplier / options.sizeMultiplier;
      }
    }

    if (valueSub) {
      var _newOptions = options.havingStyle(options.style.sub());

      subm = buildGroup(valueSub, _newOptions, options);

      if (!isCharacterBox) {
        subShift = base.depth + _newOptions.fontMetrics().subDrop * _newOptions.sizeMultiplier / options.sizeMultiplier;
      }
    } // Rule 18c


    var minSupShift;

    if (options.style === src_Style.DISPLAY) {
      minSupShift = metrics.sup1;
    } else if (options.style.cramped) {
      minSupShift = metrics.sup3;
    } else {
      minSupShift = metrics.sup2;
    } // scriptspace is a font-size-independent size, so scale it
    // appropriately for use as the marginRight.


    var multiplier = options.sizeMultiplier;
    var marginRight = 0.5 / metrics.ptPerEm / multiplier + "em";
    var marginLeft = null;

    if (subm) {
      // Subscripts shouldn't be shifted by the base's italic correction.
      // Account for that by shifting the subscript back the appropriate
      // amount. Note we only do this when the base is a single symbol.
      var isOiint = group.base && group.base.type === "op" && group.base.name && (group.base.name === "\\oiint" || group.base.name === "\\oiiint");

      if (base instanceof SymbolNode || isOiint) {
        // $FlowFixMe
        marginLeft = -base.italic + "em";
      }
    }

    var supsub;

    if (supm && subm) {
      supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
      subShift = Math.max(subShift, metrics.sub2);
      var ruleWidth = metrics.defaultRuleThickness; // Rule 18e

      var maxWidth = 4 * ruleWidth;

      if (supShift - supm.depth - (subm.height - subShift) < maxWidth) {
        subShift = maxWidth - (supShift - supm.depth) + subm.height;
        var psi = 0.8 * metrics.xHeight - (supShift - supm.depth);

        if (psi > 0) {
          supShift += psi;
          subShift -= psi;
        }
      }

      var vlistElem = [{
        type: "elem",
        elem: subm,
        shift: subShift,
        marginRight: marginRight,
        marginLeft: marginLeft
      }, {
        type: "elem",
        elem: supm,
        shift: -supShift,
        marginRight: marginRight
      }];
      supsub = buildCommon.makeVList({
        positionType: "individualShift",
        children: vlistElem
      }, options);
    } else if (subm) {
      // Rule 18b
      subShift = Math.max(subShift, metrics.sub1, subm.height - 0.8 * metrics.xHeight);
      var _vlistElem = [{
        type: "elem",
        elem: subm,
        marginLeft: marginLeft,
        marginRight: marginRight
      }];
      supsub = buildCommon.makeVList({
        positionType: "shift",
        positionData: subShift,
        children: _vlistElem
      }, options);
    } else if (supm) {
      // Rule 18c, d
      supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
      supsub = buildCommon.makeVList({
        positionType: "shift",
        positionData: -supShift,
        children: [{
          type: "elem",
          elem: supm,
          marginRight: marginRight
        }]
      }, options);
    } else {
      throw new Error("supsub must have either sup or sub.");
    } // Wrap the supsub vlist in a span.msupsub to reset text-align.


    var mclass = getTypeOfDomTree(base, "right") || "mord";
    return buildCommon.makeSpan([mclass], [base, buildCommon.makeSpan(["msupsub"], [supsub])], options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    // Is the inner group a relevant horizonal brace?
    var isBrace = false;
    var isOver;
    var isSup;

    if (group.base && group.base.type === "horizBrace") {
      isSup = !!group.sup;

      if (isSup === group.base.isOver) {
        isBrace = true;
        isOver = group.base.isOver;
      }
    }

    if (group.base && (group.base.type === "op" || group.base.type === "operatorname")) {
      group.base.parentIsSupSub = true;
    }

    var children = [buildMathML_buildGroup(group.base, options)];

    if (group.sub) {
      children.push(buildMathML_buildGroup(group.sub, options));
    }

    if (group.sup) {
      children.push(buildMathML_buildGroup(group.sup, options));
    }

    var nodeType;

    if (isBrace) {
      nodeType = isOver ? "mover" : "munder";
    } else if (!group.sub) {
      var base = group.base;

      if (base && base.type === "op" && base.limits && (options.style === src_Style.DISPLAY || base.alwaysHandleSupSub)) {
        nodeType = "mover";
      } else if (base && base.type === "operatorname" && base.alwaysHandleSupSub && (base.limits || options.style === src_Style.DISPLAY)) {
        nodeType = "mover";
      } else {
        nodeType = "msup";
      }
    } else if (!group.sup) {
      var _base = group.base;

      if (_base && _base.type === "op" && _base.limits && (options.style === src_Style.DISPLAY || _base.alwaysHandleSupSub)) {
        nodeType = "munder";
      } else if (_base && _base.type === "operatorname" && _base.alwaysHandleSupSub && (_base.limits || options.style === src_Style.DISPLAY)) {
        nodeType = "munder";
      } else {
        nodeType = "msub";
      }
    } else {
      var _base2 = group.base;

      if (_base2 && _base2.type === "op" && _base2.limits && options.style === src_Style.DISPLAY) {
        nodeType = "munderover";
      } else if (_base2 && _base2.type === "operatorname" && _base2.alwaysHandleSupSub && (options.style === src_Style.DISPLAY || _base2.limits)) {
        nodeType = "munderover";
      } else {
        nodeType = "msubsup";
      }
    }

    return new mathMLTree.MathNode(nodeType, children);
  }
});
;// CONCATENATED MODULE: ./src/functions/symbolsOp.js



 // Operator ParseNodes created in Parser.js from symbol Groups in src/symbols.js.

defineFunctionBuilders({
  type: "atom",
  htmlBuilder: function htmlBuilder(group, options) {
    return buildCommon.mathsym(group.text, group.mode, options, ["m" + group.family]);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var node = new mathMLTree.MathNode("mo", [makeText(group.text, group.mode)]);

    if (group.family === "bin") {
      var variant = getVariant(group, options);

      if (variant === "bold-italic") {
        node.setAttribute("mathvariant", variant);
      }
    } else if (group.family === "punct") {
      node.setAttribute("separator", "true");
    } else if (group.family === "open" || group.family === "close") {
      // Delims built here should not stretch vertically.
      // See delimsizing.js for stretchy delims.
      node.setAttribute("stretchy", "false");
    }

    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/symbolsOrd.js




// "mathord" and "textord" ParseNodes created in Parser.js from symbol Groups in
// src/symbols.js.
var defaultVariant = {
  "mi": "italic",
  "mn": "normal",
  "mtext": "normal"
};
defineFunctionBuilders({
  type: "mathord",
  htmlBuilder: function htmlBuilder(group, options) {
    return buildCommon.makeOrd(group, options, "mathord");
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var node = new mathMLTree.MathNode("mi", [makeText(group.text, group.mode, options)]);
    var variant = getVariant(group, options) || "italic";

    if (variant !== defaultVariant[node.type]) {
      node.setAttribute("mathvariant", variant);
    }

    return node;
  }
});
defineFunctionBuilders({
  type: "textord",
  htmlBuilder: function htmlBuilder(group, options) {
    return buildCommon.makeOrd(group, options, "textord");
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var text = makeText(group.text, group.mode, options);
    var variant = getVariant(group, options) || "normal";
    var node;

    if (group.mode === 'text') {
      node = new mathMLTree.MathNode("mtext", [text]);
    } else if (/[0-9]/.test(group.text)) {
      node = new mathMLTree.MathNode("mn", [text]);
    } else if (group.text === "\\prime") {
      node = new mathMLTree.MathNode("mo", [text]);
    } else {
      node = new mathMLTree.MathNode("mi", [text]);
    }

    if (variant !== defaultVariant[node.type]) {
      node.setAttribute("mathvariant", variant);
    }

    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/symbolsSpacing.js



 // A map of CSS-based spacing functions to their CSS class.

var cssSpace = {
  "\\nobreak": "nobreak",
  "\\allowbreak": "allowbreak"
}; // A lookup table to determine whether a spacing function/symbol should be
// treated like a regular space character.  If a symbol or command is a key
// in this table, then it should be a regular space character.  Furthermore,
// the associated value may have a `className` specifying an extra CSS class
// to add to the created `span`.

var regularSpace = {
  " ": {},
  "\\ ": {},
  "~": {
    className: "nobreak"
  },
  "\\space": {},
  "\\nobreakspace": {
    className: "nobreak"
  }
}; // ParseNode<"spacing"> created in Parser.js from the "spacing" symbol Groups in
// src/symbols.js.

defineFunctionBuilders({
  type: "spacing",
  htmlBuilder: function htmlBuilder(group, options) {
    if (regularSpace.hasOwnProperty(group.text)) {
      var className = regularSpace[group.text].className || ""; // Spaces are generated by adding an actual space. Each of these
      // things has an entry in the symbols table, so these will be turned
      // into appropriate outputs.

      if (group.mode === "text") {
        var ord = buildCommon.makeOrd(group, options, "textord");
        ord.classes.push(className);
        return ord;
      } else {
        return buildCommon.makeSpan(["mspace", className], [buildCommon.mathsym(group.text, group.mode, options)], options);
      }
    } else if (cssSpace.hasOwnProperty(group.text)) {
      // Spaces based on just a CSS class.
      return buildCommon.makeSpan(["mspace", cssSpace[group.text]], [], options);
    } else {
      throw new src_ParseError("Unknown type of space \"" + group.text + "\"");
    }
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var node;

    if (regularSpace.hasOwnProperty(group.text)) {
      node = new mathMLTree.MathNode("mtext", [new mathMLTree.TextNode("\xA0")]);
    } else if (cssSpace.hasOwnProperty(group.text)) {
      // CSS-based MathML spaces (\nobreak, \allowbreak) are ignored
      return new mathMLTree.MathNode("mspace");
    } else {
      throw new src_ParseError("Unknown type of space \"" + group.text + "\"");
    }

    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/tag.js




var pad = function pad() {
  var padNode = new mathMLTree.MathNode("mtd", []);
  padNode.setAttribute("width", "50%");
  return padNode;
};

defineFunctionBuilders({
  type: "tag",
  mathmlBuilder: function mathmlBuilder(group, options) {
    var table = new mathMLTree.MathNode("mtable", [new mathMLTree.MathNode("mtr", [pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.body, options)]), pad(), new mathMLTree.MathNode("mtd", [buildExpressionRow(group.tag, options)])])]);
    table.setAttribute("width", "100%");
    return table; // TODO: Left-aligned tags.
    // Currently, the group and options passed here do not contain
    // enough info to set tag alignment. `leqno` is in Settings but it is
    // not passed to Options. On the HTML side, leqno is
    // set by a CSS class applied in buildTree.js. That would have worked
    // in MathML if browsers supported <mlabeledtr>. Since they don't, we
    // need to rewrite the way this function is called.
  }
});
;// CONCATENATED MODULE: ./src/functions/text.js



 // Non-mathy text, possibly in a font

var textFontFamilies = {
  "\\text": undefined,
  "\\textrm": "textrm",
  "\\textsf": "textsf",
  "\\texttt": "texttt",
  "\\textnormal": "textrm"
};
var textFontWeights = {
  "\\textbf": "textbf",
  "\\textmd": "textmd"
};
var textFontShapes = {
  "\\textit": "textit",
  "\\textup": "textup"
};

var optionsWithFont = function optionsWithFont(group, options) {
  var font = group.font; // Checks if the argument is a font family or a font style.

  if (!font) {
    return options;
  } else if (textFontFamilies[font]) {
    return options.withTextFontFamily(textFontFamilies[font]);
  } else if (textFontWeights[font]) {
    return options.withTextFontWeight(textFontWeights[font]);
  } else {
    return options.withTextFontShape(textFontShapes[font]);
  }
};

defineFunction({
  type: "text",
  names: [// Font families
  "\\text", "\\textrm", "\\textsf", "\\texttt", "\\textnormal", // Font weights
  "\\textbf", "\\textmd", // Font Shapes
  "\\textit", "\\textup"],
  props: {
    numArgs: 1,
    argTypes: ["text"],
    allowedInArgument: true,
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser,
        funcName = _ref.funcName;
    var body = args[0];
    return {
      type: "text",
      mode: parser.mode,
      body: ordargument(body),
      font: funcName
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var newOptions = optionsWithFont(group, options);
    var inner = buildExpression(group.body, newOptions, true);
    return buildCommon.makeSpan(["mord", "text"], inner, newOptions);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var newOptions = optionsWithFont(group, options);
    return buildExpressionRow(group.body, newOptions);
  }
});
;// CONCATENATED MODULE: ./src/functions/underline.js





defineFunction({
  type: "underline",
  names: ["\\underline"],
  props: {
    numArgs: 1,
    allowedInText: true
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    return {
      type: "underline",
      mode: parser.mode,
      body: args[0]
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    // Underlines are handled in the TeXbook pg 443, Rule 10.
    // Build the inner group.
    var innerGroup = buildGroup(group.body, options); // Create the line to go below the body

    var line = buildCommon.makeLineSpan("underline-line", options); // Generate the vlist, with the appropriate kerns

    var defaultRuleThickness = options.fontMetrics().defaultRuleThickness;
    var vlist = buildCommon.makeVList({
      positionType: "top",
      positionData: innerGroup.height,
      children: [{
        type: "kern",
        size: defaultRuleThickness
      }, {
        type: "elem",
        elem: line
      }, {
        type: "kern",
        size: 3 * defaultRuleThickness
      }, {
        type: "elem",
        elem: innerGroup
      }]
    }, options);
    return buildCommon.makeSpan(["mord", "underline"], [vlist], options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var operator = new mathMLTree.MathNode("mo", [new mathMLTree.TextNode("\u203E")]);
    operator.setAttribute("stretchy", "true");
    var node = new mathMLTree.MathNode("munder", [buildMathML_buildGroup(group.body, options), operator]);
    node.setAttribute("accentunder", "true");
    return node;
  }
});
;// CONCATENATED MODULE: ./src/functions/vcenter.js




 // \vcenter:  Vertically center the argument group on the math axis.

defineFunction({
  type: "vcenter",
  names: ["\\vcenter"],
  props: {
    numArgs: 1,
    argTypes: ["original"],
    // In LaTeX, \vcenter can act only on a box.
    allowedInText: false
  },
  handler: function handler(_ref, args) {
    var parser = _ref.parser;
    return {
      type: "vcenter",
      mode: parser.mode,
      body: args[0]
    };
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var body = buildGroup(group.body, options);
    var axisHeight = options.fontMetrics().axisHeight;
    var dy = 0.5 * (body.height - axisHeight - (body.depth + axisHeight));
    return buildCommon.makeVList({
      positionType: "shift",
      positionData: dy,
      children: [{
        type: "elem",
        elem: body
      }]
    }, options);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    // There is no way to do this in MathML.
    // Write a class as a breadcrumb in case some post-processor wants
    // to perform a vcenter adjustment.
    return new mathMLTree.MathNode("mpadded", [buildMathML_buildGroup(group.body, options)], ["vcenter"]);
  }
});
;// CONCATENATED MODULE: ./src/functions/verb.js




defineFunction({
  type: "verb",
  names: ["\\verb"],
  props: {
    numArgs: 0,
    allowedInText: true
  },
  handler: function handler(context, args, optArgs) {
    // \verb and \verb* are dealt with directly in Parser.js.
    // If we end up here, it's because of a failure to match the two delimiters
    // in the regex in Lexer.js.  LaTeX raises the following error when \verb is
    // terminated by end of line (or file).
    throw new src_ParseError("\\verb ended by end of line instead of matching delimiter");
  },
  htmlBuilder: function htmlBuilder(group, options) {
    var text = makeVerb(group);
    var body = []; // \verb enters text mode and therefore is sized like \textstyle

    var newOptions = options.havingStyle(options.style.text());

    for (var i = 0; i < text.length; i++) {
      var c = text[i];

      if (c === '~') {
        c = '\\textasciitilde';
      }

      body.push(buildCommon.makeSymbol(c, "Typewriter-Regular", group.mode, newOptions, ["mord", "texttt"]));
    }

    return buildCommon.makeSpan(["mord", "text"].concat(newOptions.sizingClasses(options)), buildCommon.tryCombineChars(body), newOptions);
  },
  mathmlBuilder: function mathmlBuilder(group, options) {
    var text = new mathMLTree.TextNode(makeVerb(group));
    var node = new mathMLTree.MathNode("mtext", [text]);
    node.setAttribute("mathvariant", "monospace");
    return node;
  }
});
/**
 * Converts verb group into body string.
 *
 * \verb* replaces each space with an open box \u2423
 * \verb replaces each space with a no-break space \xA0
 */

var makeVerb = function makeVerb(group) {
  return group.body.replace(/ /g, group.star ? "\u2423" : '\xA0');
};
;// CONCATENATED MODULE: ./src/functions.js
/** Include this to ensure that all functions are defined. */

var functions = _functions;
/* harmony default export */ var src_functions = (functions); // TODO(kevinb): have functions return an object and call defineFunction with
// that object in this file instead of relying on side-effects.













































;// CONCATENATED MODULE: ./src/SourceLocation.js
/**
 * Lexing or parsing positional information for error reporting.
 * This object is immutable.
 */
var SourceLocation = /*#__PURE__*/function () {
  // The + prefix indicates that these fields aren't writeable
  // Lexer holding the input string.
  // Start offset, zero-based inclusive.
  // End offset, zero-based exclusive.
  function SourceLocation(lexer, start, end) {
    this.lexer = void 0;
    this.start = void 0;
    this.end = void 0;
    this.lexer = lexer;
    this.start = start;
    this.end = end;
  }
  /**
   * Merges two `SourceLocation`s from location providers, given they are
   * provided in order of appearance.
   * - Returns the first one's location if only the first is provided.
   * - Returns a merged range of the first and the last if both are provided
   *   and their lexers match.
   * - Otherwise, returns null.
   */


  SourceLocation.range = function range(first, second) {
    if (!second) {
      return first && first.loc;
    } else if (!first || !first.loc || !second.loc || first.loc.lexer !== second.loc.lexer) {
      return null;
    } else {
      return new SourceLocation(first.loc.lexer, first.loc.start, second.loc.end);
    }
  };

  return SourceLocation;
}();


;// CONCATENATED MODULE: ./src/Token.js

/**
 * Interface required to break circular dependency between Token, Lexer, and
 * ParseError.
 */

/**
 * The resulting token returned from `lex`.
 *
 * It consists of the token text plus some position information.
 * The position information is essentially a range in an input string,
 * but instead of referencing the bare input string, we refer to the lexer.
 * That way it is possible to attach extra metadata to the input string,
 * like for example a file name or similar.
 *
 * The position information is optional, so it is OK to construct synthetic
 * tokens if appropriate. Not providing available position information may
 * lead to degraded error reporting, though.
 */
var Token = /*#__PURE__*/function () {
  // don't expand the token
  // used in \noexpand
  function Token(text, // the text of this token
  loc) {
    this.text = void 0;
    this.loc = void 0;
    this.noexpand = void 0;
    this.treatAsRelax = void 0;
    this.text = text;
    this.loc = loc;
  }
  /**
   * Given a pair of tokens (this and endToken), compute a `Token` encompassing
   * the whole input range enclosed by these two.
   */


  var _proto = Token.prototype;

  _proto.range = function range(endToken, // last token of the range, inclusive
  text) {
    return new Token(text, SourceLocation.range(this, endToken));
  };

  return Token;
}();
;// CONCATENATED MODULE: ./src/Lexer.js
/**
 * The Lexer class handles tokenizing the input in various ways. Since our
 * parser expects us to be able to backtrack, the lexer allows lexing from any
 * given starting point.
 *
 * Its main exposed function is the `lex` function, which takes a position to
 * lex from and a type of token to lex. It defers to the appropriate `_innerLex`
 * function.
 *
 * The various `_innerLex` functions perform the actual lexing of different
 * kinds.
 */




/* The following tokenRegex
 * - matches typical whitespace (but not NBSP etc.) using its first group
 * - does not match any control character \x00-\x1f except whitespace
 * - does not match a bare backslash
 * - matches any ASCII character except those just mentioned
 * - does not match the BMP private use area \uE000-\uF8FF
 * - does not match bare surrogate code units
 * - matches any BMP character except for those just described
 * - matches any valid Unicode surrogate pair
 * - matches a backslash followed by one or more whitespace characters
 * - matches a backslash followed by one or more letters then whitespace
 * - matches a backslash followed by any BMP character
 * Capturing groups:
 *   [1] regular whitespace
 *   [2] backslash followed by whitespace
 *   [3] anything else, which may include:
 *     [4] left character of \verb*
 *     [5] left character of \verb
 *     [6] backslash followed by word, excluding any trailing whitespace
 * Just because the Lexer matches something doesn't mean it's valid input:
 * If there is no matching function or symbol definition, the Parser will
 * still reject the input.
 */
var spaceRegexString = "[ \r\n\t]";
var controlWordRegexString = "\\\\[a-zA-Z@]+";
var controlSymbolRegexString = "\\\\[^\uD800-\uDFFF]";
var controlWordWhitespaceRegexString = "(" + controlWordRegexString + ")" + spaceRegexString + "*";
var controlSpaceRegexString = "\\\\(\n|[ \r\t]+\n?)[ \r\t]*";
var combiningDiacriticalMarkString = "[\u0300-\u036F]";
var combiningDiacriticalMarksEndRegex = new RegExp(combiningDiacriticalMarkString + "+$");
var tokenRegexString = "(" + spaceRegexString + "+)|" + ( // whitespace
controlSpaceRegexString + "|") + // \whitespace
"([!-\\[\\]-\u2027\u202A-\uD7FF\uF900-\uFFFF]" + ( // single codepoint
combiningDiacriticalMarkString + "*") + // ...plus accents
"|[\uD800-\uDBFF][\uDC00-\uDFFF]" + ( // surrogate pair
combiningDiacriticalMarkString + "*") + // ...plus accents
"|\\\\verb\\*([^]).*?\\4" + // \verb*
"|\\\\verb([^*a-zA-Z]).*?\\5" + ( // \verb unstarred
"|" + controlWordWhitespaceRegexString) + ( // \macroName + spaces
"|" + controlSymbolRegexString + ")"); // \\, \', etc.

/** Main Lexer class */

var Lexer = /*#__PURE__*/function () {
  // Category codes. The lexer only supports comment characters (14) for now.
  // MacroExpander additionally distinguishes active (13).
  function Lexer(input, settings) {
    this.input = void 0;
    this.settings = void 0;
    this.tokenRegex = void 0;
    this.catcodes = void 0;
    // Separate accents from characters
    this.input = input;
    this.settings = settings;
    this.tokenRegex = new RegExp(tokenRegexString, 'g');
    this.catcodes = {
      "%": 14,
      // comment character
      "~": 13 // active character

    };
  }

  var _proto = Lexer.prototype;

  _proto.setCatcode = function setCatcode(char, code) {
    this.catcodes[char] = code;
  }
  /**
   * This function lexes a single token.
   */
  ;

  _proto.lex = function lex() {
    var input = this.input;
    var pos = this.tokenRegex.lastIndex;

    if (pos === input.length) {
      return new Token("EOF", new SourceLocation(this, pos, pos));
    }

    var match = this.tokenRegex.exec(input);

    if (match === null || match.index !== pos) {
      throw new src_ParseError("Unexpected character: '" + input[pos] + "'", new Token(input[pos], new SourceLocation(this, pos, pos + 1)));
    }

    var text = match[6] || match[3] || (match[2] ? "\\ " : " ");

    if (this.catcodes[text] === 14) {
      // comment character
      var nlIndex = input.indexOf('\n', this.tokenRegex.lastIndex);

      if (nlIndex === -1) {
        this.tokenRegex.lastIndex = input.length; // EOF

        this.settings.reportNonstrict("commentAtEnd", "% comment has no terminating newline; LaTeX would " + "fail because of commenting the end of math mode (e.g. $)");
      } else {
        this.tokenRegex.lastIndex = nlIndex + 1;
      }

      return this.lex();
    }

    return new Token(text, new SourceLocation(this, pos, this.tokenRegex.lastIndex));
  };

  return Lexer;
}();


;// CONCATENATED MODULE: ./src/Namespace.js
/**
 * A `Namespace` refers to a space of nameable things like macros or lengths,
 * which can be `set` either globally or local to a nested group, using an
 * undo stack similar to how TeX implements this functionality.
 * Performance-wise, `get` and local `set` take constant time, while global
 * `set` takes time proportional to the depth of group nesting.
 */


var Namespace = /*#__PURE__*/function () {
  /**
   * Both arguments are optional.  The first argument is an object of
   * built-in mappings which never change.  The second argument is an object
   * of initial (global-level) mappings, which will constantly change
   * according to any global/top-level `set`s done.
   */
  function Namespace(builtins, globalMacros) {
    if (builtins === void 0) {
      builtins = {};
    }

    if (globalMacros === void 0) {
      globalMacros = {};
    }

    this.current = void 0;
    this.builtins = void 0;
    this.undefStack = void 0;
    this.current = globalMacros;
    this.builtins = builtins;
    this.undefStack = [];
  }
  /**
   * Start a new nested group, affecting future local `set`s.
   */


  var _proto = Namespace.prototype;

  _proto.beginGroup = function beginGroup() {
    this.undefStack.push({});
  }
  /**
   * End current nested group, restoring values before the group began.
   */
  ;

  _proto.endGroup = function endGroup() {
    if (this.undefStack.length === 0) {
      throw new src_ParseError("Unbalanced namespace destruction: attempt " + "to pop global namespace; please report this as a bug");
    }

    var undefs = this.undefStack.pop();

    for (var undef in undefs) {
      if (undefs.hasOwnProperty(undef)) {
        if (undefs[undef] === undefined) {
          delete this.current[undef];
        } else {
          this.current[undef] = undefs[undef];
        }
      }
    }
  }
  /**
   * Detect whether `name` has a definition.  Equivalent to
   * `get(name) != null`.
   */
  ;

  _proto.has = function has(name) {
    return this.current.hasOwnProperty(name) || this.builtins.hasOwnProperty(name);
  }
  /**
   * Get the current value of a name, or `undefined` if there is no value.
   *
   * Note: Do not use `if (namespace.get(...))` to detect whether a macro
   * is defined, as the definition may be the empty string which evaluates
   * to `false` in JavaScript.  Use `if (namespace.get(...) != null)` or
   * `if (namespace.has(...))`.
   */
  ;

  _proto.get = function get(name) {
    if (this.current.hasOwnProperty(name)) {
      return this.current[name];
    } else {
      return this.builtins[name];
    }
  }
  /**
   * Set the current value of a name, and optionally set it globally too.
   * Local set() sets the current value and (when appropriate) adds an undo
   * operation to the undo stack.  Global set() may change the undo
   * operation at every level, so takes time linear in their number.
   */
  ;

  _proto.set = function set(name, value, global) {
    if (global === void 0) {
      global = false;
    }

    if (global) {
      // Global set is equivalent to setting in all groups.  Simulate this
      // by destroying any undos currently scheduled for this name,
      // and adding an undo with the *new* value (in case it later gets
      // locally reset within this environment).
      for (var i = 0; i < this.undefStack.length; i++) {
        delete this.undefStack[i][name];
      }

      if (this.undefStack.length > 0) {
        this.undefStack[this.undefStack.length - 1][name] = value;
      }
    } else {
      // Undo this set at end of this group (possibly to `undefined`),
      // unless an undo is already in place, in which case that older
      // value is the correct one.
      var top = this.undefStack[this.undefStack.length - 1];

      if (top && !top.hasOwnProperty(name)) {
        top[name] = this.current[name];
      }
    }

    this.current[name] = value;
  };

  return Namespace;
}();


;// CONCATENATED MODULE: ./src/MacroExpander.js
/**
 * This file contains the “gullet” where macros are expanded
 * until only non-macro tokens remain.
 */







// List of commands that act like macros but aren't defined as a macro,
// function, or symbol.  Used in `isDefined`.
var implicitCommands = {
  "\\relax": true,
  // MacroExpander.js
  "^": true,
  // Parser.js
  "_": true,
  // Parser.js
  "\\limits": true,
  // Parser.js
  "\\nolimits": true // Parser.js

};

var MacroExpander = /*#__PURE__*/function () {
  function MacroExpander(input, settings, mode) {
    this.settings = void 0;
    this.expansionCount = void 0;
    this.lexer = void 0;
    this.macros = void 0;
    this.stack = void 0;
    this.mode = void 0;
    this.settings = settings;
    this.expansionCount = 0;
    this.feed(input); // Make new global namespace

    this.macros = new Namespace(macros, settings.macros);
    this.mode = mode;
    this.stack = []; // contains tokens in REVERSE order
  }
  /**
   * Feed a new input string to the same MacroExpander
   * (with existing macros etc.).
   */


  var _proto = MacroExpander.prototype;

  _proto.feed = function feed(input) {
    this.lexer = new Lexer(input, this.settings);
  }
  /**
   * Switches between "text" and "math" modes.
   */
  ;

  _proto.switchMode = function switchMode(newMode) {
    this.mode = newMode;
  }
  /**
   * Start a new group nesting within all namespaces.
   */
  ;

  _proto.beginGroup = function beginGroup() {
    this.macros.beginGroup();
  }
  /**
   * End current group nesting within all namespaces.
   */
  ;

  _proto.endGroup = function endGroup() {
    this.macros.endGroup();
  }
  /**
   * Returns the topmost token on the stack, without expanding it.
   * Similar in behavior to TeX's `\futurelet`.
   */
  ;

  _proto.future = function future() {
    if (this.stack.length === 0) {
      this.pushToken(this.lexer.lex());
    }

    return this.stack[this.stack.length - 1];
  }
  /**
   * Remove and return the next unexpanded token.
   */
  ;

  _proto.popToken = function popToken() {
    this.future(); // ensure non-empty stack

    return this.stack.pop();
  }
  /**
   * Add a given token to the token stack.  In particular, this get be used
   * to put back a token returned from one of the other methods.
   */
  ;

  _proto.pushToken = function pushToken(token) {
    this.stack.push(token);
  }
  /**
   * Append an array of tokens to the token stack.
   */
  ;

  _proto.pushTokens = function pushTokens(tokens) {
    var _this$stack;

    (_this$stack = this.stack).push.apply(_this$stack, tokens);
  }
  /**
   * Find an macro argument without expanding tokens and append the array of
   * tokens to the token stack. Uses Token as a container for the result.
   */
  ;

  _proto.scanArgument = function scanArgument(isOptional) {
    var start;
    var end;
    var tokens;

    if (isOptional) {
      this.consumeSpaces(); // \@ifnextchar gobbles any space following it

      if (this.future().text !== "[") {
        return null;
      }

      start = this.popToken(); // don't include [ in tokens

      var _this$consumeArg = this.consumeArg(["]"]);

      tokens = _this$consumeArg.tokens;
      end = _this$consumeArg.end;
    } else {
      var _this$consumeArg2 = this.consumeArg();

      tokens = _this$consumeArg2.tokens;
      start = _this$consumeArg2.start;
      end = _this$consumeArg2.end;
    } // indicate the end of an argument


    this.pushToken(new Token("EOF", end.loc));
    this.pushTokens(tokens);
    return start.range(end, "");
  }
  /**
   * Consume all following space tokens, without expansion.
   */
  ;

  _proto.consumeSpaces = function consumeSpaces() {
    for (;;) {
      var token = this.future();

      if (token.text === " ") {
        this.stack.pop();
      } else {
        break;
      }
    }
  }
  /**
   * Consume an argument from the token stream, and return the resulting array
   * of tokens and start/end token.
   */
  ;

  _proto.consumeArg = function consumeArg(delims) {
    // The argument for a delimited parameter is the shortest (possibly
    // empty) sequence of tokens with properly nested {...} groups that is
    // followed ... by this particular list of non-parameter tokens.
    // The argument for an undelimited parameter is the next nonblank
    // token, unless that token is ‘{’, when the argument will be the
    // entire {...} group that follows.
    var tokens = [];
    var isDelimited = delims && delims.length > 0;

    if (!isDelimited) {
      // Ignore spaces between arguments.  As the TeXbook says:
      // "After you have said ‘\def\row#1#2{...}’, you are allowed to
      //  put spaces between the arguments (e.g., ‘\row x n’), because
      //  TeX doesn’t use single spaces as undelimited arguments."
      this.consumeSpaces();
    }

    var start = this.future();
    var tok;
    var depth = 0;
    var match = 0;

    do {
      tok = this.popToken();
      tokens.push(tok);

      if (tok.text === "{") {
        ++depth;
      } else if (tok.text === "}") {
        --depth;

        if (depth === -1) {
          throw new src_ParseError("Extra }", tok);
        }
      } else if (tok.text === "EOF") {
        throw new src_ParseError("Unexpected end of input in a macro argument" + ", expected '" + (delims && isDelimited ? delims[match] : "}") + "'", tok);
      }

      if (delims && isDelimited) {
        if ((depth === 0 || depth === 1 && delims[match] === "{") && tok.text === delims[match]) {
          ++match;

          if (match === delims.length) {
            // don't include delims in tokens
            tokens.splice(-match, match);
            break;
          }
        } else {
          match = 0;
        }
      }
    } while (depth !== 0 || isDelimited); // If the argument found ... has the form ‘{<nested tokens>}’,
    // ... the outermost braces enclosing the argument are removed


    if (start.text === "{" && tokens[tokens.length - 1].text === "}") {
      tokens.pop();
      tokens.shift();
    }

    tokens.reverse(); // to fit in with stack order

    return {
      tokens: tokens,
      start: start,
      end: tok
    };
  }
  /**
   * Consume the specified number of (delimited) arguments from the token
   * stream and return the resulting array of arguments.
   */
  ;

  _proto.consumeArgs = function consumeArgs(numArgs, delimiters) {
    if (delimiters) {
      if (delimiters.length !== numArgs + 1) {
        throw new src_ParseError("The length of delimiters doesn't match the number of args!");
      }

      var delims = delimiters[0];

      for (var i = 0; i < delims.length; i++) {
        var tok = this.popToken();

        if (delims[i] !== tok.text) {
          throw new src_ParseError("Use of the macro doesn't match its definition", tok);
        }
      }
    }

    var args = [];

    for (var _i = 0; _i < numArgs; _i++) {
      args.push(this.consumeArg(delimiters && delimiters[_i + 1]).tokens);
    }

    return args;
  }
  /**
   * Expand the next token only once if possible.
   *
   * If the token is expanded, the resulting tokens will be pushed onto
   * the stack in reverse order and will be returned as an array,
   * also in reverse order.
   *
   * If not, the next token will be returned without removing it
   * from the stack.  This case can be detected by a `Token` return value
   * instead of an `Array` return value.
   *
   * In either case, the next token will be on the top of the stack,
   * or the stack will be empty.
   *
   * Used to implement `expandAfterFuture` and `expandNextToken`.
   *
   * If expandableOnly, only expandable tokens are expanded and
   * an undefined control sequence results in an error.
   */
  ;

  _proto.expandOnce = function expandOnce(expandableOnly) {
    var topToken = this.popToken();
    var name = topToken.text;
    var expansion = !topToken.noexpand ? this._getExpansion(name) : null;

    if (expansion == null || expandableOnly && expansion.unexpandable) {
      if (expandableOnly && expansion == null && name[0] === "\\" && !this.isDefined(name)) {
        throw new src_ParseError("Undefined control sequence: " + name);
      }

      this.pushToken(topToken);
      return topToken;
    }

    this.expansionCount++;

    if (this.expansionCount > this.settings.maxExpand) {
      throw new src_ParseError("Too many expansions: infinite loop or " + "need to increase maxExpand setting");
    }

    var tokens = expansion.tokens;
    var args = this.consumeArgs(expansion.numArgs, expansion.delimiters);

    if (expansion.numArgs) {
      // paste arguments in place of the placeholders
      tokens = tokens.slice(); // make a shallow copy

      for (var i = tokens.length - 1; i >= 0; --i) {
        var tok = tokens[i];

        if (tok.text === "#") {
          if (i === 0) {
            throw new src_ParseError("Incomplete placeholder at end of macro body", tok);
          }

          tok = tokens[--i]; // next token on stack

          if (tok.text === "#") {
            // ## → #
            tokens.splice(i + 1, 1); // drop first #
          } else if (/^[1-9]$/.test(tok.text)) {
            var _tokens;

            // replace the placeholder with the indicated argument
            (_tokens = tokens).splice.apply(_tokens, [i, 2].concat(args[+tok.text - 1]));
          } else {
            throw new src_ParseError("Not a valid argument number", tok);
          }
        }
      }
    } // Concatenate expansion onto top of stack.


    this.pushTokens(tokens);
    return tokens;
  }
  /**
   * Expand the next token only once (if possible), and return the resulting
   * top token on the stack (without removing anything from the stack).
   * Similar in behavior to TeX's `\expandafter\futurelet`.
   * Equivalent to expandOnce() followed by future().
   */
  ;

  _proto.expandAfterFuture = function expandAfterFuture() {
    this.expandOnce();
    return this.future();
  }
  /**
   * Recursively expand first token, then return first non-expandable token.
   */
  ;

  _proto.expandNextToken = function expandNextToken() {
    for (;;) {
      var expanded = this.expandOnce(); // expandOnce returns Token if and only if it's fully expanded.

      if (expanded instanceof Token) {
        // \relax stops the expansion, but shouldn't get returned (a
        // null return value couldn't get implemented as a function).
        // the token after \noexpand is interpreted as if its meaning
        // were ‘\relax’
        if (expanded.text === "\\relax" || expanded.treatAsRelax) {
          this.stack.pop();
        } else {
          return this.stack.pop(); // === expanded
        }
      }
    } // Flow unable to figure out that this pathway is impossible.
    // https://github.com/facebook/flow/issues/4808


    throw new Error(); // eslint-disable-line no-unreachable
  }
  /**
   * Fully expand the given macro name and return the resulting list of
   * tokens, or return `undefined` if no such macro is defined.
   */
  ;

  _proto.expandMacro = function expandMacro(name) {
    return this.macros.has(name) ? this.expandTokens([new Token(name)]) : undefined;
  }
  /**
   * Fully expand the given token stream and return the resulting list of tokens
   */
  ;

  _proto.expandTokens = function expandTokens(tokens) {
    var output = [];
    var oldStackLength = this.stack.length;
    this.pushTokens(tokens);

    while (this.stack.length > oldStackLength) {
      var expanded = this.expandOnce(true); // expand only expandable tokens
      // expandOnce returns Token if and only if it's fully expanded.

      if (expanded instanceof Token) {
        if (expanded.treatAsRelax) {
          // the expansion of \noexpand is the token itself
          expanded.noexpand = false;
          expanded.treatAsRelax = false;
        }

        output.push(this.stack.pop());
      }
    }

    return output;
  }
  /**
   * Fully expand the given macro name and return the result as a string,
   * or return `undefined` if no such macro is defined.
   */
  ;

  _proto.expandMacroAsText = function expandMacroAsText(name) {
    var tokens = this.expandMacro(name);

    if (tokens) {
      return tokens.map(function (token) {
        return token.text;
      }).join("");
    } else {
      return tokens;
    }
  }
  /**
   * Returns the expanded macro as a reversed array of tokens and a macro
   * argument count.  Or returns `null` if no such macro.
   */
  ;

  _proto._getExpansion = function _getExpansion(name) {
    var definition = this.macros.get(name);

    if (definition == null) {
      // mainly checking for undefined here
      return definition;
    } // If a single character has an associated catcode other than 13
    // (active character), then don't expand it.


    if (name.length === 1) {
      var catcode = this.lexer.catcodes[name];

      if (catcode != null && catcode !== 13) {
        return;
      }
    }

    var expansion = typeof definition === "function" ? definition(this) : definition;

    if (typeof expansion === "string") {
      var numArgs = 0;

      if (expansion.indexOf("#") !== -1) {
        var stripped = expansion.replace(/##/g, "");

        while (stripped.indexOf("#" + (numArgs + 1)) !== -1) {
          ++numArgs;
        }
      }

      var bodyLexer = new Lexer(expansion, this.settings);
      var tokens = [];
      var tok = bodyLexer.lex();

      while (tok.text !== "EOF") {
        tokens.push(tok);
        tok = bodyLexer.lex();
      }

      tokens.reverse(); // to fit in with stack using push and pop

      var expanded = {
        tokens: tokens,
        numArgs: numArgs
      };
      return expanded;
    }

    return expansion;
  }
  /**
   * Determine whether a command is currently "defined" (has some
   * functionality), meaning that it's a macro (in the current group),
   * a function, a symbol, or one of the special commands listed in
   * `implicitCommands`.
   */
  ;

  _proto.isDefined = function isDefined(name) {
    return this.macros.has(name) || src_functions.hasOwnProperty(name) || src_symbols.math.hasOwnProperty(name) || src_symbols.text.hasOwnProperty(name) || implicitCommands.hasOwnProperty(name);
  }
  /**
   * Determine whether a command is expandable.
   */
  ;

  _proto.isExpandable = function isExpandable(name) {
    var macro = this.macros.get(name);
    return macro != null ? typeof macro === "string" || typeof macro === "function" || !macro.unexpandable : src_functions.hasOwnProperty(name) && !src_functions[name].primitive;
  };

  return MacroExpander;
}();


;// CONCATENATED MODULE: ./src/Parser.js
/* eslint no-constant-condition:0 */









 // Pre-evaluate both modules as unicodeSymbols require String.normalize()

var unicodeAccents = {
  "́": {
    "text": "\\'",
    "math": "\\acute"
  },
  "̀": {
    "text": "\\`",
    "math": "\\grave"
  },
  "̈": {
    "text": "\\\"",
    "math": "\\ddot"
  },
  "̃": {
    "text": "\\~",
    "math": "\\tilde"
  },
  "̄": {
    "text": "\\=",
    "math": "\\bar"
  },
  "̆": {
    "text": "\\u",
    "math": "\\breve"
  },
  "̌": {
    "text": "\\v",
    "math": "\\check"
  },
  "̂": {
    "text": "\\^",
    "math": "\\hat"
  },
  "̇": {
    "text": "\\.",
    "math": "\\dot"
  },
  "̊": {
    "text": "\\r",
    "math": "\\mathring"
  },
  "̋": {
    "text": "\\H"
  }
};
var unicodeSymbols = {
  "á": "á",
  "à": "à",
  "ä": "ä",
  "ǟ": "ǟ",
  "ã": "ã",
  "ā": "ā",
  "ă": "ă",
  "ắ": "ắ",
  "ằ": "ằ",
  "ẵ": "ẵ",
  "ǎ": "ǎ",
  "â": "â",
  "ấ": "ấ",
  "ầ": "ầ",
  "ẫ": "ẫ",
  "ȧ": "ȧ",
  "ǡ": "ǡ",
  "å": "å",
  "ǻ": "ǻ",
  "ḃ": "ḃ",
  "ć": "ć",
  "č": "č",
  "ĉ": "ĉ",
  "ċ": "ċ",
  "ď": "ď",
  "ḋ": "ḋ",
  "é": "é",
  "è": "è",
  "ë": "ë",
  "ẽ": "ẽ",
  "ē": "ē",
  "ḗ": "ḗ",
  "ḕ": "ḕ",
  "ĕ": "ĕ",
  "ě": "ě",
  "ê": "ê",
  "ế": "ế",
  "ề": "ề",
  "ễ": "ễ",
  "ė": "ė",
  "ḟ": "ḟ",
  "ǵ": "ǵ",
  "ḡ": "ḡ",
  "ğ": "ğ",
  "ǧ": "ǧ",
  "ĝ": "ĝ",
  "ġ": "ġ",
  "ḧ": "ḧ",
  "ȟ": "ȟ",
  "ĥ": "ĥ",
  "ḣ": "ḣ",
  "í": "í",
  "ì": "ì",
  "ï": "ï",
  "ḯ": "ḯ",
  "ĩ": "ĩ",
  "ī": "ī",
  "ĭ": "ĭ",
  "ǐ": "ǐ",
  "î": "î",
  "ǰ": "ǰ",
  "ĵ": "ĵ",
  "ḱ": "ḱ",
  "ǩ": "ǩ",
  "ĺ": "ĺ",
  "ľ": "ľ",
  "ḿ": "ḿ",
  "ṁ": "ṁ",
  "ń": "ń",
  "ǹ": "ǹ",
  "ñ": "ñ",
  "ň": "ň",
  "ṅ": "ṅ",
  "ó": "ó",
  "ò": "ò",
  "ö": "ö",
  "ȫ": "ȫ",
  "õ": "õ",
  "ṍ": "ṍ",
  "ṏ": "ṏ",
  "ȭ": "ȭ",
  "ō": "ō",
  "ṓ": "ṓ",
  "ṑ": "ṑ",
  "ŏ": "ŏ",
  "ǒ": "ǒ",
  "ô": "ô",
  "ố": "ố",
  "ồ": "ồ",
  "ỗ": "ỗ",
  "ȯ": "ȯ",
  "ȱ": "ȱ",
  "ő": "ő",
  "ṕ": "ṕ",
  "ṗ": "ṗ",
  "ŕ": "ŕ",
  "ř": "ř",
  "ṙ": "ṙ",
  "ś": "ś",
  "ṥ": "ṥ",
  "š": "š",
  "ṧ": "ṧ",
  "ŝ": "ŝ",
  "ṡ": "ṡ",
  "ẗ": "ẗ",
  "ť": "ť",
  "ṫ": "ṫ",
  "ú": "ú",
  "ù": "ù",
  "ü": "ü",
  "ǘ": "ǘ",
  "ǜ": "ǜ",
  "ǖ": "ǖ",
  "ǚ": "ǚ",
  "ũ": "ũ",
  "ṹ": "ṹ",
  "ū": "ū",
  "ṻ": "ṻ",
  "ŭ": "ŭ",
  "ǔ": "ǔ",
  "û": "û",
  "ů": "ů",
  "ű": "ű",
  "ṽ": "ṽ",
  "ẃ": "ẃ",
  "ẁ": "ẁ",
  "ẅ": "ẅ",
  "ŵ": "ŵ",
  "ẇ": "ẇ",
  "ẘ": "ẘ",
  "ẍ": "ẍ",
  "ẋ": "ẋ",
  "ý": "ý",
  "ỳ": "ỳ",
  "ÿ": "ÿ",
  "ỹ": "ỹ",
  "ȳ": "ȳ",
  "ŷ": "ŷ",
  "ẏ": "ẏ",
  "ẙ": "ẙ",
  "ź": "ź",
  "ž": "ž",
  "ẑ": "ẑ",
  "ż": "ż",
  "Á": "Á",
  "À": "À",
  "Ä": "Ä",
  "Ǟ": "Ǟ",
  "Ã": "Ã",
  "Ā": "Ā",
  "Ă": "Ă",
  "Ắ": "Ắ",
  "Ằ": "Ằ",
  "Ẵ": "Ẵ",
  "Ǎ": "Ǎ",
  "Â": "Â",
  "Ấ": "Ấ",
  "Ầ": "Ầ",
  "Ẫ": "Ẫ",
  "Ȧ": "Ȧ",
  "Ǡ": "Ǡ",
  "Å": "Å",
  "Ǻ": "Ǻ",
  "Ḃ": "Ḃ",
  "Ć": "Ć",
  "Č": "Č",
  "Ĉ": "Ĉ",
  "Ċ": "Ċ",
  "Ď": "Ď",
  "Ḋ": "Ḋ",
  "É": "É",
  "È": "È",
  "Ë": "Ë",
  "Ẽ": "Ẽ",
  "Ē": "Ē",
  "Ḗ": "Ḗ",
  "Ḕ": "Ḕ",
  "Ĕ": "Ĕ",
  "Ě": "Ě",
  "Ê": "Ê",
  "Ế": "Ế",
  "Ề": "Ề",
  "Ễ": "Ễ",
  "Ė": "Ė",
  "Ḟ": "Ḟ",
  "Ǵ": "Ǵ",
  "Ḡ": "Ḡ",
  "Ğ": "Ğ",
  "Ǧ": "Ǧ",
  "Ĝ": "Ĝ",
  "Ġ": "Ġ",
  "Ḧ": "Ḧ",
  "Ȟ": "Ȟ",
  "Ĥ": "Ĥ",
  "Ḣ": "Ḣ",
  "Í": "Í",
  "Ì": "Ì",
  "Ï": "Ï",
  "Ḯ": "Ḯ",
  "Ĩ": "Ĩ",
  "Ī": "Ī",
  "Ĭ": "Ĭ",
  "Ǐ": "Ǐ",
  "Î": "Î",
  "İ": "İ",
  "Ĵ": "Ĵ",
  "Ḱ": "Ḱ",
  "Ǩ": "Ǩ",
  "Ĺ": "Ĺ",
  "Ľ": "Ľ",
  "Ḿ": "Ḿ",
  "Ṁ": "Ṁ",
  "Ń": "Ń",
  "Ǹ": "Ǹ",
  "Ñ": "Ñ",
  "Ň": "Ň",
  "Ṅ": "Ṅ",
  "Ó": "Ó",
  "Ò": "Ò",
  "Ö": "Ö",
  "Ȫ": "Ȫ",
  "Õ": "Õ",
  "Ṍ": "Ṍ",
  "Ṏ": "Ṏ",
  "Ȭ": "Ȭ",
  "Ō": "Ō",
  "Ṓ": "Ṓ",
  "Ṑ": "Ṑ",
  "Ŏ": "Ŏ",
  "Ǒ": "Ǒ",
  "Ô": "Ô",
  "Ố": "Ố",
  "Ồ": "Ồ",
  "Ỗ": "Ỗ",
  "Ȯ": "Ȯ",
  "Ȱ": "Ȱ",
  "Ő": "Ő",
  "Ṕ": "Ṕ",
  "Ṗ": "Ṗ",
  "Ŕ": "Ŕ",
  "Ř": "Ř",
  "Ṙ": "Ṙ",
  "Ś": "Ś",
  "Ṥ": "Ṥ",
  "Š": "Š",
  "Ṧ": "Ṧ",
  "Ŝ": "Ŝ",
  "Ṡ": "Ṡ",
  "Ť": "Ť",
  "Ṫ": "Ṫ",
  "Ú": "Ú",
  "Ù": "Ù",
  "Ü": "Ü",
  "Ǘ": "Ǘ",
  "Ǜ": "Ǜ",
  "Ǖ": "Ǖ",
  "Ǚ": "Ǚ",
  "Ũ": "Ũ",
  "Ṹ": "Ṹ",
  "Ū": "Ū",
  "Ṻ": "Ṻ",
  "Ŭ": "Ŭ",
  "Ǔ": "Ǔ",
  "Û": "Û",
  "Ů": "Ů",
  "Ű": "Ű",
  "Ṽ": "Ṽ",
  "Ẃ": "Ẃ",
  "Ẁ": "Ẁ",
  "Ẅ": "Ẅ",
  "Ŵ": "Ŵ",
  "Ẇ": "Ẇ",
  "Ẍ": "Ẍ",
  "Ẋ": "Ẋ",
  "Ý": "Ý",
  "Ỳ": "Ỳ",
  "Ÿ": "Ÿ",
  "Ỹ": "Ỹ",
  "Ȳ": "Ȳ",
  "Ŷ": "Ŷ",
  "Ẏ": "Ẏ",
  "Ź": "Ź",
  "Ž": "Ž",
  "Ẑ": "Ẑ",
  "Ż": "Ż",
  "ά": "ά",
  "ὰ": "ὰ",
  "ᾱ": "ᾱ",
  "ᾰ": "ᾰ",
  "έ": "έ",
  "ὲ": "ὲ",
  "ή": "ή",
  "ὴ": "ὴ",
  "ί": "ί",
  "ὶ": "ὶ",
  "ϊ": "ϊ",
  "ΐ": "ΐ",
  "ῒ": "ῒ",
  "ῑ": "ῑ",
  "ῐ": "ῐ",
  "ό": "ό",
  "ὸ": "ὸ",
  "ύ": "ύ",
  "ὺ": "ὺ",
  "ϋ": "ϋ",
  "ΰ": "ΰ",
  "ῢ": "ῢ",
  "ῡ": "ῡ",
  "ῠ": "ῠ",
  "ώ": "ώ",
  "ὼ": "ὼ",
  "Ύ": "Ύ",
  "Ὺ": "Ὺ",
  "Ϋ": "Ϋ",
  "Ῡ": "Ῡ",
  "Ῠ": "Ῠ",
  "Ώ": "Ώ",
  "Ὼ": "Ὼ"
};

/**
 * This file contains the parser used to parse out a TeX expression from the
 * input. Since TeX isn't context-free, standard parsers don't work particularly
 * well.
 *
 * The strategy of this parser is as such:
 *
 * The main functions (the `.parse...` ones) take a position in the current
 * parse string to parse tokens from. The lexer (found in Lexer.js, stored at
 * this.gullet.lexer) also supports pulling out tokens at arbitrary places. When
 * individual tokens are needed at a position, the lexer is called to pull out a
 * token, which is then used.
 *
 * The parser has a property called "mode" indicating the mode that
 * the parser is currently in. Currently it has to be one of "math" or
 * "text", which denotes whether the current environment is a math-y
 * one or a text-y one (e.g. inside \text). Currently, this serves to
 * limit the functions which can be used in text mode.
 *
 * The main functions then return an object which contains the useful data that
 * was parsed at its given point, and a new position at the end of the parsed
 * data. The main functions can call each other and continue the parsing by
 * using the returned position as a new starting point.
 *
 * There are also extra `.handle...` functions, which pull out some reused
 * functionality into self-contained functions.
 *
 * The functions return ParseNodes.
 */
var Parser = /*#__PURE__*/function () {
  function Parser(input, settings) {
    this.mode = void 0;
    this.gullet = void 0;
    this.settings = void 0;
    this.leftrightDepth = void 0;
    this.nextToken = void 0;
    // Start in math mode
    this.mode = "math"; // Create a new macro expander (gullet) and (indirectly via that) also a
    // new lexer (mouth) for this parser (stomach, in the language of TeX)

    this.gullet = new MacroExpander(input, settings, this.mode); // Store the settings for use in parsing

    this.settings = settings; // Count leftright depth (for \middle errors)

    this.leftrightDepth = 0;
  }
  /**
   * Checks a result to make sure it has the right type, and throws an
   * appropriate error otherwise.
   */


  var _proto = Parser.prototype;

  _proto.expect = function expect(text, consume) {
    if (consume === void 0) {
      consume = true;
    }

    if (this.fetch().text !== text) {
      throw new src_ParseError("Expected '" + text + "', got '" + this.fetch().text + "'", this.fetch());
    }

    if (consume) {
      this.consume();
    }
  }
  /**
   * Discards the current lookahead token, considering it consumed.
   */
  ;

  _proto.consume = function consume() {
    this.nextToken = null;
  }
  /**
   * Return the current lookahead token, or if there isn't one (at the
   * beginning, or if the previous lookahead token was consume()d),
   * fetch the next token as the new lookahead token and return it.
   */
  ;

  _proto.fetch = function fetch() {
    if (this.nextToken == null) {
      this.nextToken = this.gullet.expandNextToken();
    }

    return this.nextToken;
  }
  /**
   * Switches between "text" and "math" modes.
   */
  ;

  _proto.switchMode = function switchMode(newMode) {
    this.mode = newMode;
    this.gullet.switchMode(newMode);
  }
  /**
   * Main parsing function, which parses an entire input.
   */
  ;

  _proto.parse = function parse() {
    if (!this.settings.globalGroup) {
      // Create a group namespace for the math expression.
      // (LaTeX creates a new group for every $...$, $$...$$, \[...\].)
      this.gullet.beginGroup();
    } // Use old \color behavior (same as LaTeX's \textcolor) if requested.
    // We do this within the group for the math expression, so it doesn't
    // pollute settings.macros.


    if (this.settings.colorIsTextColor) {
      this.gullet.macros.set("\\color", "\\textcolor");
    } // Try to parse the input


    var parse = this.parseExpression(false); // If we succeeded, make sure there's an EOF at the end

    this.expect("EOF"); // End the group namespace for the expression

    if (!this.settings.globalGroup) {
      this.gullet.endGroup();
    }

    return parse;
  };

  /**
   * Parses an "expression", which is a list of atoms.
   *
   * `breakOnInfix`: Should the parsing stop when we hit infix nodes? This
   *                 happens when functions have higher precendence han infix
   *                 nodes in implicit parses.
   *
   * `breakOnTokenText`: The text of the token that the expression should end
   *                     with, or `null` if something else should end the
   *                     expression.
   */
  _proto.parseExpression = function parseExpression(breakOnInfix, breakOnTokenText) {
    var body = []; // Keep adding atoms to the body until we can't parse any more atoms (either
    // we reached the end, a }, or a \right)

    while (true) {
      // Ignore spaces in math mode
      if (this.mode === "math") {
        this.consumeSpaces();
      }

      var lex = this.fetch();

      if (Parser.endOfExpression.indexOf(lex.text) !== -1) {
        break;
      }

      if (breakOnTokenText && lex.text === breakOnTokenText) {
        break;
      }

      if (breakOnInfix && src_functions[lex.text] && src_functions[lex.text].infix) {
        break;
      }

      var atom = this.parseAtom(breakOnTokenText);

      if (!atom) {
        break;
      } else if (atom.type === "internal") {
        continue;
      }

      body.push(atom);
    }

    if (this.mode === "text") {
      this.formLigatures(body);
    }

    return this.handleInfixNodes(body);
  }
  /**
   * Rewrites infix operators such as \over with corresponding commands such
   * as \frac.
   *
   * There can only be one infix operator per group.  If there's more than one
   * then the expression is ambiguous.  This can be resolved by adding {}.
   */
  ;

  _proto.handleInfixNodes = function handleInfixNodes(body) {
    var overIndex = -1;
    var funcName;

    for (var i = 0; i < body.length; i++) {
      if (body[i].type === "infix") {
        if (overIndex !== -1) {
          throw new src_ParseError("only one infix operator per group", body[i].token);
        }

        overIndex = i;
        funcName = body[i].replaceWith;
      }
    }

    if (overIndex !== -1 && funcName) {
      var numerNode;
      var denomNode;
      var numerBody = body.slice(0, overIndex);
      var denomBody = body.slice(overIndex + 1);

      if (numerBody.length === 1 && numerBody[0].type === "ordgroup") {
        numerNode = numerBody[0];
      } else {
        numerNode = {
          type: "ordgroup",
          mode: this.mode,
          body: numerBody
        };
      }

      if (denomBody.length === 1 && denomBody[0].type === "ordgroup") {
        denomNode = denomBody[0];
      } else {
        denomNode = {
          type: "ordgroup",
          mode: this.mode,
          body: denomBody
        };
      }

      var node;

      if (funcName === "\\\\abovefrac") {
        node = this.callFunction(funcName, [numerNode, body[overIndex], denomNode], []);
      } else {
        node = this.callFunction(funcName, [numerNode, denomNode], []);
      }

      return [node];
    } else {
      return body;
    }
  }
  /**
   * Handle a subscript or superscript with nice errors.
   */
  ;

  _proto.handleSupSubscript = function handleSupSubscript(name) {
    var symbolToken = this.fetch();
    var symbol = symbolToken.text;
    this.consume();
    this.consumeSpaces(); // ignore spaces before sup/subscript argument

    var group = this.parseGroup(name);

    if (!group) {
      throw new src_ParseError("Expected group after '" + symbol + "'", symbolToken);
    }

    return group;
  }
  /**
   * Converts the textual input of an unsupported command into a text node
   * contained within a color node whose color is determined by errorColor
   */
  ;

  _proto.formatUnsupportedCmd = function formatUnsupportedCmd(text) {
    var textordArray = [];

    for (var i = 0; i < text.length; i++) {
      textordArray.push({
        type: "textord",
        mode: "text",
        text: text[i]
      });
    }

    var textNode = {
      type: "text",
      mode: this.mode,
      body: textordArray
    };
    var colorNode = {
      type: "color",
      mode: this.mode,
      color: this.settings.errorColor,
      body: [textNode]
    };
    return colorNode;
  }
  /**
   * Parses a group with optional super/subscripts.
   */
  ;

  _proto.parseAtom = function parseAtom(breakOnTokenText) {
    // The body of an atom is an implicit group, so that things like
    // \left(x\right)^2 work correctly.
    var base = this.parseGroup("atom", breakOnTokenText); // In text mode, we don't have superscripts or subscripts

    if (this.mode === "text") {
      return base;
    } // Note that base may be empty (i.e. null) at this point.


    var superscript;
    var subscript;

    while (true) {
      // Guaranteed in math mode, so eat any spaces first.
      this.consumeSpaces(); // Lex the first token

      var lex = this.fetch();

      if (lex.text === "\\limits" || lex.text === "\\nolimits") {
        // We got a limit control
        if (base && base.type === "op") {
          var limits = lex.text === "\\limits";
          base.limits = limits;
          base.alwaysHandleSupSub = true;
        } else if (base && base.type === "operatorname") {
          if (base.alwaysHandleSupSub) {
            base.limits = lex.text === "\\limits";
          }
        } else {
          throw new src_ParseError("Limit controls must follow a math operator", lex);
        }

        this.consume();
      } else if (lex.text === "^") {
        // We got a superscript start
        if (superscript) {
          throw new src_ParseError("Double superscript", lex);
        }

        superscript = this.handleSupSubscript("superscript");
      } else if (lex.text === "_") {
        // We got a subscript start
        if (subscript) {
          throw new src_ParseError("Double subscript", lex);
        }

        subscript = this.handleSupSubscript("subscript");
      } else if (lex.text === "'") {
        // We got a prime
        if (superscript) {
          throw new src_ParseError("Double superscript", lex);
        }

        var prime = {
          type: "textord",
          mode: this.mode,
          text: "\\prime"
        }; // Many primes can be grouped together, so we handle this here

        var primes = [prime];
        this.consume(); // Keep lexing tokens until we get something that's not a prime

        while (this.fetch().text === "'") {
          // For each one, add another prime to the list
          primes.push(prime);
          this.consume();
        } // If there's a superscript following the primes, combine that
        // superscript in with the primes.


        if (this.fetch().text === "^") {
          primes.push(this.handleSupSubscript("superscript"));
        } // Put everything into an ordgroup as the superscript


        superscript = {
          type: "ordgroup",
          mode: this.mode,
          body: primes
        };
      } else {
        // If it wasn't ^, _, or ', stop parsing super/subscripts
        break;
      }
    } // Base must be set if superscript or subscript are set per logic above,
    // but need to check here for type check to pass.


    if (superscript || subscript) {
      // If we got either a superscript or subscript, create a supsub
      return {
        type: "supsub",
        mode: this.mode,
        base: base,
        sup: superscript,
        sub: subscript
      };
    } else {
      // Otherwise return the original body
      return base;
    }
  }
  /**
   * Parses an entire function, including its base and all of its arguments.
   */
  ;

  _proto.parseFunction = function parseFunction(breakOnTokenText, name) {
    var token = this.fetch();
    var func = token.text;
    var funcData = src_functions[func];

    if (!funcData) {
      return null;
    }

    this.consume(); // consume command token

    if (name && name !== "atom" && !funcData.allowedInArgument) {
      throw new src_ParseError("Got function '" + func + "' with no arguments" + (name ? " as " + name : ""), token);
    } else if (this.mode === "text" && !funcData.allowedInText) {
      throw new src_ParseError("Can't use function '" + func + "' in text mode", token);
    } else if (this.mode === "math" && funcData.allowedInMath === false) {
      throw new src_ParseError("Can't use function '" + func + "' in math mode", token);
    }

    var _this$parseArguments = this.parseArguments(func, funcData),
        args = _this$parseArguments.args,
        optArgs = _this$parseArguments.optArgs;

    return this.callFunction(func, args, optArgs, token, breakOnTokenText);
  }
  /**
   * Call a function handler with a suitable context and arguments.
   */
  ;

  _proto.callFunction = function callFunction(name, args, optArgs, token, breakOnTokenText) {
    var context = {
      funcName: name,
      parser: this,
      token: token,
      breakOnTokenText: breakOnTokenText
    };
    var func = src_functions[name];

    if (func && func.handler) {
      return func.handler(context, args, optArgs);
    } else {
      throw new src_ParseError("No function handler for " + name);
    }
  }
  /**
   * Parses the arguments of a function or environment
   */
  ;

  _proto.parseArguments = function parseArguments(func, // Should look like "\name" or "\begin{name}".
  funcData) {
    var totalArgs = funcData.numArgs + funcData.numOptionalArgs;

    if (totalArgs === 0) {
      return {
        args: [],
        optArgs: []
      };
    }

    var args = [];
    var optArgs = [];

    for (var i = 0; i < totalArgs; i++) {
      var argType = funcData.argTypes && funcData.argTypes[i];
      var isOptional = i < funcData.numOptionalArgs;

      if (funcData.primitive && argType == null || // \sqrt expands into primitive if optional argument doesn't exist
      funcData.type === "sqrt" && i === 1 && optArgs[0] == null) {
        argType = "primitive";
      }

      var arg = this.parseGroupOfType("argument to '" + func + "'", argType, isOptional);

      if (isOptional) {
        optArgs.push(arg);
      } else if (arg != null) {
        args.push(arg);
      } else {
        // should be unreachable
        throw new src_ParseError("Null argument, please report this as a bug");
      }
    }

    return {
      args: args,
      optArgs: optArgs
    };
  }
  /**
   * Parses a group when the mode is changing.
   */
  ;

  _proto.parseGroupOfType = function parseGroupOfType(name, type, optional) {
    switch (type) {
      case "color":
        return this.parseColorGroup(optional);

      case "size":
        return this.parseSizeGroup(optional);

      case "url":
        return this.parseUrlGroup(optional);

      case "math":
      case "text":
        return this.parseArgumentGroup(optional, type);

      case "hbox":
        {
          // hbox argument type wraps the argument in the equivalent of
          // \hbox, which is like \text but switching to \textstyle size.
          var group = this.parseArgumentGroup(optional, "text");
          return group != null ? {
            type: "styling",
            mode: group.mode,
            body: [group],
            style: "text" // simulate \textstyle

          } : null;
        }

      case "raw":
        {
          var token = this.parseStringGroup("raw", optional);
          return token != null ? {
            type: "raw",
            mode: "text",
            string: token.text
          } : null;
        }

      case "primitive":
        {
          if (optional) {
            throw new src_ParseError("A primitive argument cannot be optional");
          }

          var _group = this.parseGroup(name);

          if (_group == null) {
            throw new src_ParseError("Expected group as " + name, this.fetch());
          }

          return _group;
        }

      case "original":
      case null:
      case undefined:
        return this.parseArgumentGroup(optional);

      default:
        throw new src_ParseError("Unknown group type as " + name, this.fetch());
    }
  }
  /**
   * Discard any space tokens, fetching the next non-space token.
   */
  ;

  _proto.consumeSpaces = function consumeSpaces() {
    while (this.fetch().text === " ") {
      this.consume();
    }
  }
  /**
   * Parses a group, essentially returning the string formed by the
   * brace-enclosed tokens plus some position information.
   */
  ;

  _proto.parseStringGroup = function parseStringGroup(modeName, // Used to describe the mode in error messages.
  optional) {
    var argToken = this.gullet.scanArgument(optional);

    if (argToken == null) {
      return null;
    }

    var str = "";
    var nextToken;

    while ((nextToken = this.fetch()).text !== "EOF") {
      str += nextToken.text;
      this.consume();
    }

    this.consume(); // consume the end of the argument

    argToken.text = str;
    return argToken;
  }
  /**
   * Parses a regex-delimited group: the largest sequence of tokens
   * whose concatenated strings match `regex`. Returns the string
   * formed by the tokens plus some position information.
   */
  ;

  _proto.parseRegexGroup = function parseRegexGroup(regex, modeName) {
    var firstToken = this.fetch();
    var lastToken = firstToken;
    var str = "";
    var nextToken;

    while ((nextToken = this.fetch()).text !== "EOF" && regex.test(str + nextToken.text)) {
      lastToken = nextToken;
      str += lastToken.text;
      this.consume();
    }

    if (str === "") {
      throw new src_ParseError("Invalid " + modeName + ": '" + firstToken.text + "'", firstToken);
    }

    return firstToken.range(lastToken, str);
  }
  /**
   * Parses a color description.
   */
  ;

  _proto.parseColorGroup = function parseColorGroup(optional) {
    var res = this.parseStringGroup("color", optional);

    if (res == null) {
      return null;
    }

    var match = /^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i.exec(res.text);

    if (!match) {
      throw new src_ParseError("Invalid color: '" + res.text + "'", res);
    }

    var color = match[0];

    if (/^[0-9a-f]{6}$/i.test(color)) {
      // We allow a 6-digit HTML color spec without a leading "#".
      // This follows the xcolor package's HTML color model.
      // Predefined color names are all missed by this RegEx pattern.
      color = "#" + color;
    }

    return {
      type: "color-token",
      mode: this.mode,
      color: color
    };
  }
  /**
   * Parses a size specification, consisting of magnitude and unit.
   */
  ;

  _proto.parseSizeGroup = function parseSizeGroup(optional) {
    var res;
    var isBlank = false; // don't expand before parseStringGroup

    this.gullet.consumeSpaces();

    if (!optional && this.gullet.future().text !== "{") {
      res = this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/, "size");
    } else {
      res = this.parseStringGroup("size", optional);
    }

    if (!res) {
      return null;
    }

    if (!optional && res.text.length === 0) {
      // Because we've tested for what is !optional, this block won't
      // affect \kern, \hspace, etc. It will capture the mandatory arguments
      // to \genfrac and \above.
      res.text = "0pt"; // Enable \above{}

      isBlank = true; // This is here specifically for \genfrac
    }

    var match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(res.text);

    if (!match) {
      throw new src_ParseError("Invalid size: '" + res.text + "'", res);
    }

    var data = {
      number: +(match[1] + match[2]),
      // sign + magnitude, cast to number
      unit: match[3]
    };

    if (!validUnit(data)) {
      throw new src_ParseError("Invalid unit: '" + data.unit + "'", res);
    }

    return {
      type: "size",
      mode: this.mode,
      value: data,
      isBlank: isBlank
    };
  }
  /**
   * Parses an URL, checking escaped letters and allowed protocols,
   * and setting the catcode of % as an active character (as in \hyperref).
   */
  ;

  _proto.parseUrlGroup = function parseUrlGroup(optional) {
    this.gullet.lexer.setCatcode("%", 13); // active character

    this.gullet.lexer.setCatcode("~", 12); // other character

    var res = this.parseStringGroup("url", optional);
    this.gullet.lexer.setCatcode("%", 14); // comment character

    this.gullet.lexer.setCatcode("~", 13); // active character

    if (res == null) {
      return null;
    } // hyperref package allows backslashes alone in href, but doesn't
    // generate valid links in such cases; we interpret this as
    // "undefined" behaviour, and keep them as-is. Some browser will
    // replace backslashes with forward slashes.


    var url = res.text.replace(/\\([#$%&~_^{}])/g, '$1');
    return {
      type: "url",
      mode: this.mode,
      url: url
    };
  }
  /**
   * Parses an argument with the mode specified.
   */
  ;

  _proto.parseArgumentGroup = function parseArgumentGroup(optional, mode) {
    var argToken = this.gullet.scanArgument(optional);

    if (argToken == null) {
      return null;
    }

    var outerMode = this.mode;

    if (mode) {
      // Switch to specified mode
      this.switchMode(mode);
    }

    this.gullet.beginGroup();
    var expression = this.parseExpression(false, "EOF"); // TODO: find an alternative way to denote the end

    this.expect("EOF"); // expect the end of the argument

    this.gullet.endGroup();
    var result = {
      type: "ordgroup",
      mode: this.mode,
      loc: argToken.loc,
      body: expression
    };

    if (mode) {
      // Switch mode back
      this.switchMode(outerMode);
    }

    return result;
  }
  /**
   * Parses an ordinary group, which is either a single nucleus (like "x")
   * or an expression in braces (like "{x+y}") or an implicit group, a group
   * that starts at the current position, and ends right before a higher explicit
   * group ends, or at EOF.
   */
  ;

  _proto.parseGroup = function parseGroup(name, // For error reporting.
  breakOnTokenText) {
    var firstToken = this.fetch();
    var text = firstToken.text;
    var result; // Try to parse an open brace or \begingroup

    if (text === "{" || text === "\\begingroup") {
      this.consume();
      var groupEnd = text === "{" ? "}" : "\\endgroup";
      this.gullet.beginGroup(); // If we get a brace, parse an expression

      var expression = this.parseExpression(false, groupEnd);
      var lastToken = this.fetch();
      this.expect(groupEnd); // Check that we got a matching closing brace

      this.gullet.endGroup();
      result = {
        type: "ordgroup",
        mode: this.mode,
        loc: SourceLocation.range(firstToken, lastToken),
        body: expression,
        // A group formed by \begingroup...\endgroup is a semi-simple group
        // which doesn't affect spacing in math mode, i.e., is transparent.
        // https://tex.stackexchange.com/questions/1930/when-should-one-
        // use-begingroup-instead-of-bgroup
        semisimple: text === "\\begingroup" || undefined
      };
    } else {
      // If there exists a function with this name, parse the function.
      // Otherwise, just return a nucleus
      result = this.parseFunction(breakOnTokenText, name) || this.parseSymbol();

      if (result == null && text[0] === "\\" && !implicitCommands.hasOwnProperty(text)) {
        if (this.settings.throwOnError) {
          throw new src_ParseError("Undefined control sequence: " + text, firstToken);
        }

        result = this.formatUnsupportedCmd(text);
        this.consume();
      }
    }

    return result;
  }
  /**
   * Form ligature-like combinations of characters for text mode.
   * This includes inputs like "--", "---", "``" and "''".
   * The result will simply replace multiple textord nodes with a single
   * character in each value by a single textord node having multiple
   * characters in its value.  The representation is still ASCII source.
   * The group will be modified in place.
   */
  ;

  _proto.formLigatures = function formLigatures(group) {
    var n = group.length - 1;

    for (var i = 0; i < n; ++i) {
      var a = group[i]; // $FlowFixMe: Not every node type has a `text` property.

      var v = a.text;

      if (v === "-" && group[i + 1].text === "-") {
        if (i + 1 < n && group[i + 2].text === "-") {
          group.splice(i, 3, {
            type: "textord",
            mode: "text",
            loc: SourceLocation.range(a, group[i + 2]),
            text: "---"
          });
          n -= 2;
        } else {
          group.splice(i, 2, {
            type: "textord",
            mode: "text",
            loc: SourceLocation.range(a, group[i + 1]),
            text: "--"
          });
          n -= 1;
        }
      }

      if ((v === "'" || v === "`") && group[i + 1].text === v) {
        group.splice(i, 2, {
          type: "textord",
          mode: "text",
          loc: SourceLocation.range(a, group[i + 1]),
          text: v + v
        });
        n -= 1;
      }
    }
  }
  /**
   * Parse a single symbol out of the string. Here, we handle single character
   * symbols and special functions like \verb.
   */
  ;

  _proto.parseSymbol = function parseSymbol() {
    var nucleus = this.fetch();
    var text = nucleus.text;

    if (/^\\verb[^a-zA-Z]/.test(text)) {
      this.consume();
      var arg = text.slice(5);
      var star = arg.charAt(0) === "*";

      if (star) {
        arg = arg.slice(1);
      } // Lexer's tokenRegex is constructed to always have matching
      // first/last characters.


      if (arg.length < 2 || arg.charAt(0) !== arg.slice(-1)) {
        throw new src_ParseError("\\verb assertion failed --\n                    please report what input caused this bug");
      }

      arg = arg.slice(1, -1); // remove first and last char

      return {
        type: "verb",
        mode: "text",
        body: arg,
        star: star
      };
    } // At this point, we should have a symbol, possibly with accents.
    // First expand any accented base symbol according to unicodeSymbols.


    if (unicodeSymbols.hasOwnProperty(text[0]) && !src_symbols[this.mode][text[0]]) {
      // This behavior is not strict (XeTeX-compatible) in math mode.
      if (this.settings.strict && this.mode === "math") {
        this.settings.reportNonstrict("unicodeTextInMathMode", "Accented Unicode text character \"" + text[0] + "\" used in " + "math mode", nucleus);
      }

      text = unicodeSymbols[text[0]] + text.substr(1);
    } // Strip off any combining characters


    var match = combiningDiacriticalMarksEndRegex.exec(text);

    if (match) {
      text = text.substring(0, match.index);

      if (text === 'i') {
        text = "\u0131"; // dotless i, in math and text mode
      } else if (text === 'j') {
        text = "\u0237"; // dotless j, in math and text mode
      }
    } // Recognize base symbol


    var symbol;

    if (src_symbols[this.mode][text]) {
      if (this.settings.strict && this.mode === 'math' && extraLatin.indexOf(text) >= 0) {
        this.settings.reportNonstrict("unicodeTextInMathMode", "Latin-1/Unicode text character \"" + text[0] + "\" used in " + "math mode", nucleus);
      }

      var group = src_symbols[this.mode][text].group;
      var loc = SourceLocation.range(nucleus);
      var s;

      if (ATOMS.hasOwnProperty(group)) {
        // $FlowFixMe
        var family = group;
        s = {
          type: "atom",
          mode: this.mode,
          family: family,
          loc: loc,
          text: text
        };
      } else {
        // $FlowFixMe
        s = {
          type: group,
          mode: this.mode,
          loc: loc,
          text: text
        };
      } // $FlowFixMe


      symbol = s;
    } else if (text.charCodeAt(0) >= 0x80) {
      // no symbol for e.g. ^
      if (this.settings.strict) {
        if (!supportedCodepoint(text.charCodeAt(0))) {
          this.settings.reportNonstrict("unknownSymbol", "Unrecognized Unicode character \"" + text[0] + "\"" + (" (" + text.charCodeAt(0) + ")"), nucleus);
        } else if (this.mode === "math") {
          this.settings.reportNonstrict("unicodeTextInMathMode", "Unicode text character \"" + text[0] + "\" used in math mode", nucleus);
        }
      } // All nonmathematical Unicode characters are rendered as if they
      // are in text mode (wrapped in \text) because that's what it
      // takes to render them in LaTeX.  Setting `mode: this.mode` is
      // another natural choice (the user requested math mode), but
      // this makes it more difficult for getCharacterMetrics() to
      // distinguish Unicode characters without metrics and those for
      // which we want to simulate the letter M.


      symbol = {
        type: "textord",
        mode: "text",
        loc: SourceLocation.range(nucleus),
        text: text
      };
    } else {
      return null; // EOF, ^, _, {, }, etc.
    }

    this.consume(); // Transform combining characters into accents

    if (match) {
      for (var i = 0; i < match[0].length; i++) {
        var accent = match[0][i];

        if (!unicodeAccents[accent]) {
          throw new src_ParseError("Unknown accent ' " + accent + "'", nucleus);
        }

        var command = unicodeAccents[accent][this.mode];

        if (!command) {
          throw new src_ParseError("Accent " + accent + " unsupported in " + this.mode + " mode", nucleus);
        }

        symbol = {
          type: "accent",
          mode: this.mode,
          loc: SourceLocation.range(nucleus),
          label: command,
          isStretchy: false,
          isShifty: true,
          // $FlowFixMe
          base: symbol
        };
      }
    } // $FlowFixMe


    return symbol;
  };

  return Parser;
}();

Parser.endOfExpression = ["}", "\\endgroup", "\\end", "\\right", "&"];

;// CONCATENATED MODULE: ./src/parseTree.js
/**
 * Provides a single function for parsing an expression using a Parser
 * TODO(emily): Remove this
 */



/**
 * Parses an expression using a Parser, then returns the parsed result.
 */
var parseTree = function parseTree(toParse, settings) {
  if (!(typeof toParse === 'string' || toParse instanceof String)) {
    throw new TypeError('KaTeX can only parse string typed expression');
  }

  var parser = new Parser(toParse, settings); // Blank out any \df@tag to avoid spurious "Duplicate \tag" errors

  delete parser.gullet.macros.current["\\df@tag"];
  var tree = parser.parse(); // Prevent a color definition from persisting between calls to katex.render().

  delete parser.gullet.macros.current["\\current@color"];
  delete parser.gullet.macros.current["\\color"]; // If the input used \tag, it will set the \df@tag macro to the tag.
  // In this case, we separately parse the tag and wrap the tree.

  if (parser.gullet.macros.get("\\df@tag")) {
    if (!settings.displayMode) {
      throw new src_ParseError("\\tag works only in display equations");
    }

    parser.gullet.feed("\\df@tag");
    tree = [{
      type: "tag",
      mode: "text",
      body: tree,
      tag: parser.parse()
    }];
  }

  return tree;
};

/* harmony default export */ var src_parseTree = (parseTree);
;// CONCATENATED MODULE: ./katex.js
/* eslint no-console:0 */

/**
 * This is the main entry point for KaTeX. Here, we expose functions for
 * rendering expressions either to DOM nodes or to markup strings.
 *
 * We also expose the ParseError class to check if errors thrown from KaTeX are
 * errors in the expression, or errors in javascript handling.
 */










/**
 * Parse and build an expression, and place that expression in the DOM node
 * given.
 */
var render = function render(expression, baseNode, options) {
  baseNode.textContent = "";
  var node = renderToDomTree(expression, options).toNode();
  baseNode.appendChild(node);
}; // KaTeX's styles don't work properly in quirks mode. Print out an error, and
// disable rendering.


if (typeof document !== "undefined") {
  if (document.compatMode !== "CSS1Compat") {
    typeof console !== "undefined" && console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your " + "website has a suitable doctype.");

    render = function render() {
      throw new src_ParseError("KaTeX doesn't work in quirks mode.");
    };
  }
}
/**
 * Parse and build an expression, and return the markup for that.
 */


var renderToString = function renderToString(expression, options) {
  var markup = renderToDomTree(expression, options).toMarkup();
  return markup;
};
/**
 * Parse an expression and return the parse tree.
 */


var generateParseTree = function generateParseTree(expression, options) {
  var settings = new Settings(options);
  return src_parseTree(expression, settings);
};
/**
 * If the given error is a KaTeX ParseError and options.throwOnError is false,
 * renders the invalid LaTeX as a span with hover title giving the KaTeX
 * error message.  Otherwise, simply throws the error.
 */


var renderError = function renderError(error, expression, options) {
  if (options.throwOnError || !(error instanceof src_ParseError)) {
    throw error;
  }

  var node = buildCommon.makeSpan(["katex-error"], [new SymbolNode(expression)]);
  node.setAttribute("title", error.toString());
  node.setAttribute("style", "color:" + options.errorColor);
  return node;
};
/**
 * Generates and returns the katex build tree. This is used for advanced
 * use cases (like rendering to custom output).
 */


var renderToDomTree = function renderToDomTree(expression, options) {
  var settings = new Settings(options);

  try {
    var tree = src_parseTree(expression, settings);
    return buildTree(tree, expression, settings);
  } catch (error) {
    return renderError(error, expression, settings);
  }
};
/**
 * Generates and returns the katex build tree, with just HTML (no MathML).
 * This is used for advanced use cases (like rendering to custom output).
 */


var renderToHTMLTree = function renderToHTMLTree(expression, options) {
  var settings = new Settings(options);

  try {
    var tree = src_parseTree(expression, settings);
    return buildHTMLTree(tree, expression, settings);
  } catch (error) {
    return renderError(error, expression, settings);
  }
};

/* harmony default export */ var katex = ({
  /**
   * Current KaTeX version
   */
  version: "0.13.13",

  /**
   * Renders the given LaTeX into an HTML+MathML combination, and adds
   * it as a child to the specified DOM node.
   */
  render: render,

  /**
   * Renders the given LaTeX into an HTML+MathML combination string,
   * for sending to the client.
   */
  renderToString: renderToString,

  /**
   * KaTeX error, usually during parsing.
   */
  ParseError: src_ParseError,

  /**
   * Parses the given LaTeX into KaTeX's internal parse tree structure,
   * without rendering to HTML or MathML.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */
  __parse: generateParseTree,

  /**
   * Renders the given LaTeX into an HTML+MathML internal DOM tree
   * representation, without flattening that representation to a string.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */
  __renderToDomTree: renderToDomTree,

  /**
   * Renders the given LaTeX into an HTML internal DOM tree representation,
   * without MathML and without flattening that representation to a string.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */
  __renderToHTMLTree: renderToHTMLTree,

  /**
   * extends internal font metrics object with a new object
   * each key in the new object represents a font name
  */
  __setFontMetrics: setFontMetrics,

  /**
   * adds a new symbol to builtin symbols table
   */
  __defineSymbol: defineSymbol,

  /**
   * adds a new macro to builtin macro list
   */
  __defineMacro: defineMacro,

  /**
   * Expose the dom tree node types, which can be useful for type checking nodes.
   *
   * NOTE: This method is not currently recommended for public use.
   * The internal tree representation is unstable and is very likely
   * to change. Use at your own risk.
   */
  __domTree: {
    Span: Span,
    Anchor: Anchor,
    SymbolNode: SymbolNode,
    SvgNode: SvgNode,
    PathNode: PathNode,
    LineNode: LineNode
  }
});
;// CONCATENATED MODULE: ./katex.webpack.js
/**
 * This is the webpack entry point for KaTeX. As ECMAScript, flow[1] and jest[2]
 * doesn't support CSS modules natively, a separate entry point is used and
 * it is not flowtyped.
 *
 * [1] https://gist.github.com/lambdahands/d19e0da96285b749f0ef
 * [2] https://facebook.github.io/jest/docs/en/webpack.html
 */


/* harmony default export */ var katex_webpack = (katex);
__webpack_exports__ = __webpack_exports__.default;
/******/ 	return __webpack_exports__;
/******/ })()
;
});

/***/ }),

/***/ "./node_modules/mithril/api/mount-redraw.js":
/*!**************************************************!*\
  !*** ./node_modules/mithril/api/mount-redraw.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Vnode = __webpack_require__(/*! ../render/vnode */ "./node_modules/mithril/render/vnode.js")

module.exports = function(render, schedule, console) {
	var subscriptions = []
	var rendering = false
	var pending = false

	function sync() {
		if (rendering) throw new Error("Nested m.redraw.sync() call")
		rendering = true
		for (var i = 0; i < subscriptions.length; i += 2) {
			try { render(subscriptions[i], Vnode(subscriptions[i + 1]), redraw) }
			catch (e) { console.error(e) }
		}
		rendering = false
	}

	function redraw() {
		if (!pending) {
			pending = true
			schedule(function() {
				pending = false
				sync()
			})
		}
	}

	redraw.sync = sync

	function mount(root, component) {
		if (component != null && component.view == null && typeof component !== "function") {
			throw new TypeError("m.mount(element, component) expects a component, not a vnode")
		}

		var index = subscriptions.indexOf(root)
		if (index >= 0) {
			subscriptions.splice(index, 2)
			render(root, [], redraw)
		}

		if (component != null) {
			subscriptions.push(root, component)
			render(root, Vnode(component), redraw)
		}
	}

	return {mount: mount, redraw: redraw}
}


/***/ }),

/***/ "./node_modules/mithril/api/router.js":
/*!********************************************!*\
  !*** ./node_modules/mithril/api/router.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Vnode = __webpack_require__(/*! ../render/vnode */ "./node_modules/mithril/render/vnode.js")
var m = __webpack_require__(/*! ../render/hyperscript */ "./node_modules/mithril/render/hyperscript.js")
var Promise = __webpack_require__(/*! ../promise/promise */ "./node_modules/mithril/promise/promise.js")

var buildPathname = __webpack_require__(/*! ../pathname/build */ "./node_modules/mithril/pathname/build.js")
var parsePathname = __webpack_require__(/*! ../pathname/parse */ "./node_modules/mithril/pathname/parse.js")
var compileTemplate = __webpack_require__(/*! ../pathname/compileTemplate */ "./node_modules/mithril/pathname/compileTemplate.js")
var assign = __webpack_require__(/*! ../pathname/assign */ "./node_modules/mithril/pathname/assign.js")

var sentinel = {}

module.exports = function($window, mountRedraw) {
	var fireAsync

	function setPath(path, data, options) {
		path = buildPathname(path, data)
		if (fireAsync != null) {
			fireAsync()
			var state = options ? options.state : null
			var title = options ? options.title : null
			if (options && options.replace) $window.history.replaceState(state, title, route.prefix + path)
			else $window.history.pushState(state, title, route.prefix + path)
		}
		else {
			$window.location.href = route.prefix + path
		}
	}

	var currentResolver = sentinel, component, attrs, currentPath, lastUpdate

	var SKIP = route.SKIP = {}

	function route(root, defaultRoute, routes) {
		if (root == null) throw new Error("Ensure the DOM element that was passed to `m.route` is not undefined")
		// 0 = start
		// 1 = init
		// 2 = ready
		var state = 0

		var compiled = Object.keys(routes).map(function(route) {
			if (route[0] !== "/") throw new SyntaxError("Routes must start with a `/`")
			if ((/:([^\/\.-]+)(\.{3})?:/).test(route)) {
				throw new SyntaxError("Route parameter names must be separated with either `/`, `.`, or `-`")
			}
			return {
				route: route,
				component: routes[route],
				check: compileTemplate(route),
			}
		})
		var callAsync = typeof setImmediate === "function" ? setImmediate : setTimeout
		var p = Promise.resolve()
		var scheduled = false
		var onremove

		fireAsync = null

		if (defaultRoute != null) {
			var defaultData = parsePathname(defaultRoute)

			if (!compiled.some(function (i) { return i.check(defaultData) })) {
				throw new ReferenceError("Default route doesn't match any known routes")
			}
		}

		function resolveRoute() {
			scheduled = false
			// Consider the pathname holistically. The prefix might even be invalid,
			// but that's not our problem.
			var prefix = $window.location.hash
			if (route.prefix[0] !== "#") {
				prefix = $window.location.search + prefix
				if (route.prefix[0] !== "?") {
					prefix = $window.location.pathname + prefix
					if (prefix[0] !== "/") prefix = "/" + prefix
				}
			}
			// This seemingly useless `.concat()` speeds up the tests quite a bit,
			// since the representation is consistently a relatively poorly
			// optimized cons string.
			var path = prefix.concat()
				.replace(/(?:%[a-f89][a-f0-9])+/gim, decodeURIComponent)
				.slice(route.prefix.length)
			var data = parsePathname(path)

			assign(data.params, $window.history.state)

			function fail() {
				if (path === defaultRoute) throw new Error("Could not resolve default route " + defaultRoute)
				setPath(defaultRoute, null, {replace: true})
			}

			loop(0)
			function loop(i) {
				// 0 = init
				// 1 = scheduled
				// 2 = done
				for (; i < compiled.length; i++) {
					if (compiled[i].check(data)) {
						var payload = compiled[i].component
						var matchedRoute = compiled[i].route
						var localComp = payload
						var update = lastUpdate = function(comp) {
							if (update !== lastUpdate) return
							if (comp === SKIP) return loop(i + 1)
							component = comp != null && (typeof comp.view === "function" || typeof comp === "function")? comp : "div"
							attrs = data.params, currentPath = path, lastUpdate = null
							currentResolver = payload.render ? payload : null
							if (state === 2) mountRedraw.redraw()
							else {
								state = 2
								mountRedraw.redraw.sync()
							}
						}
						// There's no understating how much I *wish* I could
						// use `async`/`await` here...
						if (payload.view || typeof payload === "function") {
							payload = {}
							update(localComp)
						}
						else if (payload.onmatch) {
							p.then(function () {
								return payload.onmatch(data.params, path, matchedRoute)
							}).then(update, fail)
						}
						else update("div")
						return
					}
				}
				fail()
			}
		}

		// Set it unconditionally so `m.route.set` and `m.route.Link` both work,
		// even if neither `pushState` nor `hashchange` are supported. It's
		// cleared if `hashchange` is used, since that makes it automatically
		// async.
		fireAsync = function() {
			if (!scheduled) {
				scheduled = true
				callAsync(resolveRoute)
			}
		}

		if (typeof $window.history.pushState === "function") {
			onremove = function() {
				$window.removeEventListener("popstate", fireAsync, false)
			}
			$window.addEventListener("popstate", fireAsync, false)
		} else if (route.prefix[0] === "#") {
			fireAsync = null
			onremove = function() {
				$window.removeEventListener("hashchange", resolveRoute, false)
			}
			$window.addEventListener("hashchange", resolveRoute, false)
		}

		return mountRedraw.mount(root, {
			onbeforeupdate: function() {
				state = state ? 2 : 1
				return !(!state || sentinel === currentResolver)
			},
			oncreate: resolveRoute,
			onremove: onremove,
			view: function() {
				if (!state || sentinel === currentResolver) return
				// Wrap in a fragment to preserve existing key semantics
				var vnode = [Vnode(component, attrs.key, attrs)]
				if (currentResolver) vnode = currentResolver.render(vnode[0])
				return vnode
			},
		})
	}
	route.set = function(path, data, options) {
		if (lastUpdate != null) {
			options = options || {}
			options.replace = true
		}
		lastUpdate = null
		setPath(path, data, options)
	}
	route.get = function() {return currentPath}
	route.prefix = "#!"
	route.Link = {
		view: function(vnode) {
			var options = vnode.attrs.options
			// Remove these so they don't get overwritten
			var attrs = {}, onclick, href
			assign(attrs, vnode.attrs)
			// The first two are internal, but the rest are magic attributes
			// that need censored to not screw up rendering.
			attrs.selector = attrs.options = attrs.key = attrs.oninit =
			attrs.oncreate = attrs.onbeforeupdate = attrs.onupdate =
			attrs.onbeforeremove = attrs.onremove = null

			// Do this now so we can get the most current `href` and `disabled`.
			// Those attributes may also be specified in the selector, and we
			// should honor that.
			var child = m(vnode.attrs.selector || "a", attrs, vnode.children)

			// Let's provide a *right* way to disable a route link, rather than
			// letting people screw up accessibility on accident.
			//
			// The attribute is coerced so users don't get surprised over
			// `disabled: 0` resulting in a button that's somehow routable
			// despite being visibly disabled.
			if (child.attrs.disabled = Boolean(child.attrs.disabled)) {
				child.attrs.href = null
				child.attrs["aria-disabled"] = "true"
				// If you *really* do want to do this on a disabled link, use
				// an `oncreate` hook to add it.
				child.attrs.onclick = null
			} else {
				onclick = child.attrs.onclick
				href = child.attrs.href
				child.attrs.href = route.prefix + href
				child.attrs.onclick = function(e) {
					var result
					if (typeof onclick === "function") {
						result = onclick.call(e.currentTarget, e)
					} else if (onclick == null || typeof onclick !== "object") {
						// do nothing
					} else if (typeof onclick.handleEvent === "function") {
						onclick.handleEvent(e)
					}

					// Adapted from React Router's implementation:
					// https://github.com/ReactTraining/react-router/blob/520a0acd48ae1b066eb0b07d6d4d1790a1d02482/packages/react-router-dom/modules/Link.js
					//
					// Try to be flexible and intuitive in how we handle links.
					// Fun fact: links aren't as obvious to get right as you
					// would expect. There's a lot more valid ways to click a
					// link than this, and one might want to not simply click a
					// link, but right click or command-click it to copy the
					// link target, etc. Nope, this isn't just for blind people.
					if (
						// Skip if `onclick` prevented default
						result !== false && !e.defaultPrevented &&
						// Ignore everything but left clicks
						(e.button === 0 || e.which === 0 || e.which === 1) &&
						// Let the browser handle `target=_blank`, etc.
						(!e.currentTarget.target || e.currentTarget.target === "_self") &&
						// No modifier keys
						!e.ctrlKey && !e.metaKey && !e.shiftKey && !e.altKey
					) {
						e.preventDefault()
						e.redraw = false
						route.set(href, null, options)
					}
				}
			}
			return child
		},
	}
	route.param = function(key) {
		return attrs && key != null ? attrs[key] : attrs
	}

	return route
}


/***/ }),

/***/ "./node_modules/mithril/hyperscript.js":
/*!*********************************************!*\
  !*** ./node_modules/mithril/hyperscript.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hyperscript = __webpack_require__(/*! ./render/hyperscript */ "./node_modules/mithril/render/hyperscript.js")

hyperscript.trust = __webpack_require__(/*! ./render/trust */ "./node_modules/mithril/render/trust.js")
hyperscript.fragment = __webpack_require__(/*! ./render/fragment */ "./node_modules/mithril/render/fragment.js")

module.exports = hyperscript


/***/ }),

/***/ "./node_modules/mithril/index.js":
/*!***************************************!*\
  !*** ./node_modules/mithril/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hyperscript = __webpack_require__(/*! ./hyperscript */ "./node_modules/mithril/hyperscript.js")
var request = __webpack_require__(/*! ./request */ "./node_modules/mithril/request.js")
var mountRedraw = __webpack_require__(/*! ./mount-redraw */ "./node_modules/mithril/mount-redraw.js")

var m = function m() { return hyperscript.apply(this, arguments) }
m.m = hyperscript
m.trust = hyperscript.trust
m.fragment = hyperscript.fragment
m.mount = mountRedraw.mount
m.route = __webpack_require__(/*! ./route */ "./node_modules/mithril/route.js")
m.render = __webpack_require__(/*! ./render */ "./node_modules/mithril/render.js")
m.redraw = mountRedraw.redraw
m.request = request.request
m.jsonp = request.jsonp
m.parseQueryString = __webpack_require__(/*! ./querystring/parse */ "./node_modules/mithril/querystring/parse.js")
m.buildQueryString = __webpack_require__(/*! ./querystring/build */ "./node_modules/mithril/querystring/build.js")
m.parsePathname = __webpack_require__(/*! ./pathname/parse */ "./node_modules/mithril/pathname/parse.js")
m.buildPathname = __webpack_require__(/*! ./pathname/build */ "./node_modules/mithril/pathname/build.js")
m.vnode = __webpack_require__(/*! ./render/vnode */ "./node_modules/mithril/render/vnode.js")
m.PromisePolyfill = __webpack_require__(/*! ./promise/polyfill */ "./node_modules/mithril/promise/polyfill.js")

module.exports = m


/***/ }),

/***/ "./node_modules/mithril/mount-redraw.js":
/*!**********************************************!*\
  !*** ./node_modules/mithril/mount-redraw.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var render = __webpack_require__(/*! ./render */ "./node_modules/mithril/render.js")

module.exports = __webpack_require__(/*! ./api/mount-redraw */ "./node_modules/mithril/api/mount-redraw.js")(render, requestAnimationFrame, console)


/***/ }),

/***/ "./node_modules/mithril/pathname/assign.js":
/*!*************************************************!*\
  !*** ./node_modules/mithril/pathname/assign.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";


module.exports = Object.assign || function(target, source) {
	if(source) Object.keys(source).forEach(function(key) { target[key] = source[key] })
}


/***/ }),

/***/ "./node_modules/mithril/pathname/build.js":
/*!************************************************!*\
  !*** ./node_modules/mithril/pathname/build.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var buildQueryString = __webpack_require__(/*! ../querystring/build */ "./node_modules/mithril/querystring/build.js")
var assign = __webpack_require__(/*! ./assign */ "./node_modules/mithril/pathname/assign.js")

// Returns `path` from `template` + `params`
module.exports = function(template, params) {
	if ((/:([^\/\.-]+)(\.{3})?:/).test(template)) {
		throw new SyntaxError("Template parameter names *must* be separated")
	}
	if (params == null) return template
	var queryIndex = template.indexOf("?")
	var hashIndex = template.indexOf("#")
	var queryEnd = hashIndex < 0 ? template.length : hashIndex
	var pathEnd = queryIndex < 0 ? queryEnd : queryIndex
	var path = template.slice(0, pathEnd)
	var query = {}

	assign(query, params)

	var resolved = path.replace(/:([^\/\.-]+)(\.{3})?/g, function(m, key, variadic) {
		delete query[key]
		// If no such parameter exists, don't interpolate it.
		if (params[key] == null) return m
		// Escape normal parameters, but not variadic ones.
		return variadic ? params[key] : encodeURIComponent(String(params[key]))
	})

	// In case the template substitution adds new query/hash parameters.
	var newQueryIndex = resolved.indexOf("?")
	var newHashIndex = resolved.indexOf("#")
	var newQueryEnd = newHashIndex < 0 ? resolved.length : newHashIndex
	var newPathEnd = newQueryIndex < 0 ? newQueryEnd : newQueryIndex
	var result = resolved.slice(0, newPathEnd)

	if (queryIndex >= 0) result += template.slice(queryIndex, queryEnd)
	if (newQueryIndex >= 0) result += (queryIndex < 0 ? "?" : "&") + resolved.slice(newQueryIndex, newQueryEnd)
	var querystring = buildQueryString(query)
	if (querystring) result += (queryIndex < 0 && newQueryIndex < 0 ? "?" : "&") + querystring
	if (hashIndex >= 0) result += template.slice(hashIndex)
	if (newHashIndex >= 0) result += (hashIndex < 0 ? "" : "&") + resolved.slice(newHashIndex)
	return result
}


/***/ }),

/***/ "./node_modules/mithril/pathname/compileTemplate.js":
/*!**********************************************************!*\
  !*** ./node_modules/mithril/pathname/compileTemplate.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var parsePathname = __webpack_require__(/*! ./parse */ "./node_modules/mithril/pathname/parse.js")

// Compiles a template into a function that takes a resolved path (without query
// strings) and returns an object containing the template parameters with their
// parsed values. This expects the input of the compiled template to be the
// output of `parsePathname`. Note that it does *not* remove query parameters
// specified in the template.
module.exports = function(template) {
	var templateData = parsePathname(template)
	var templateKeys = Object.keys(templateData.params)
	var keys = []
	var regexp = new RegExp("^" + templateData.path.replace(
		// I escape literal text so people can use things like `:file.:ext` or
		// `:lang-:locale` in routes. This is all merged into one pass so I
		// don't also accidentally escape `-` and make it harder to detect it to
		// ban it from template parameters.
		/:([^\/.-]+)(\.{3}|\.(?!\.)|-)?|[\\^$*+.()|\[\]{}]/g,
		function(m, key, extra) {
			if (key == null) return "\\" + m
			keys.push({k: key, r: extra === "..."})
			if (extra === "...") return "(.*)"
			if (extra === ".") return "([^/]+)\\."
			return "([^/]+)" + (extra || "")
		}
	) + "$")
	return function(data) {
		// First, check the params. Usually, there isn't any, and it's just
		// checking a static set.
		for (var i = 0; i < templateKeys.length; i++) {
			if (templateData.params[templateKeys[i]] !== data.params[templateKeys[i]]) return false
		}
		// If no interpolations exist, let's skip all the ceremony
		if (!keys.length) return regexp.test(data.path)
		var values = regexp.exec(data.path)
		if (values == null) return false
		for (var i = 0; i < keys.length; i++) {
			data.params[keys[i].k] = keys[i].r ? values[i + 1] : decodeURIComponent(values[i + 1])
		}
		return true
	}
}


/***/ }),

/***/ "./node_modules/mithril/pathname/parse.js":
/*!************************************************!*\
  !*** ./node_modules/mithril/pathname/parse.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var parseQueryString = __webpack_require__(/*! ../querystring/parse */ "./node_modules/mithril/querystring/parse.js")

// Returns `{path, params}` from `url`
module.exports = function(url) {
	var queryIndex = url.indexOf("?")
	var hashIndex = url.indexOf("#")
	var queryEnd = hashIndex < 0 ? url.length : hashIndex
	var pathEnd = queryIndex < 0 ? queryEnd : queryIndex
	var path = url.slice(0, pathEnd).replace(/\/{2,}/g, "/")

	if (!path) path = "/"
	else {
		if (path[0] !== "/") path = "/" + path
		if (path.length > 1 && path[path.length - 1] === "/") path = path.slice(0, -1)
	}
	return {
		path: path,
		params: queryIndex < 0
			? {}
			: parseQueryString(url.slice(queryIndex + 1, queryEnd)),
	}
}


/***/ }),

/***/ "./node_modules/mithril/promise/polyfill.js":
/*!**************************************************!*\
  !*** ./node_modules/mithril/promise/polyfill.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";

/** @constructor */
var PromisePolyfill = function(executor) {
	if (!(this instanceof PromisePolyfill)) throw new Error("Promise must be called with `new`")
	if (typeof executor !== "function") throw new TypeError("executor must be a function")

	var self = this, resolvers = [], rejectors = [], resolveCurrent = handler(resolvers, true), rejectCurrent = handler(rejectors, false)
	var instance = self._instance = {resolvers: resolvers, rejectors: rejectors}
	var callAsync = typeof setImmediate === "function" ? setImmediate : setTimeout
	function handler(list, shouldAbsorb) {
		return function execute(value) {
			var then
			try {
				if (shouldAbsorb && value != null && (typeof value === "object" || typeof value === "function") && typeof (then = value.then) === "function") {
					if (value === self) throw new TypeError("Promise can't be resolved w/ itself")
					executeOnce(then.bind(value))
				}
				else {
					callAsync(function() {
						if (!shouldAbsorb && list.length === 0) console.error("Possible unhandled promise rejection:", value)
						for (var i = 0; i < list.length; i++) list[i](value)
						resolvers.length = 0, rejectors.length = 0
						instance.state = shouldAbsorb
						instance.retry = function() {execute(value)}
					})
				}
			}
			catch (e) {
				rejectCurrent(e)
			}
		}
	}
	function executeOnce(then) {
		var runs = 0
		function run(fn) {
			return function(value) {
				if (runs++ > 0) return
				fn(value)
			}
		}
		var onerror = run(rejectCurrent)
		try {then(run(resolveCurrent), onerror)} catch (e) {onerror(e)}
	}

	executeOnce(executor)
}
PromisePolyfill.prototype.then = function(onFulfilled, onRejection) {
	var self = this, instance = self._instance
	function handle(callback, list, next, state) {
		list.push(function(value) {
			if (typeof callback !== "function") next(value)
			else try {resolveNext(callback(value))} catch (e) {if (rejectNext) rejectNext(e)}
		})
		if (typeof instance.retry === "function" && state === instance.state) instance.retry()
	}
	var resolveNext, rejectNext
	var promise = new PromisePolyfill(function(resolve, reject) {resolveNext = resolve, rejectNext = reject})
	handle(onFulfilled, instance.resolvers, resolveNext, true), handle(onRejection, instance.rejectors, rejectNext, false)
	return promise
}
PromisePolyfill.prototype.catch = function(onRejection) {
	return this.then(null, onRejection)
}
PromisePolyfill.prototype.finally = function(callback) {
	return this.then(
		function(value) {
			return PromisePolyfill.resolve(callback()).then(function() {
				return value
			})
		},
		function(reason) {
			return PromisePolyfill.resolve(callback()).then(function() {
				return PromisePolyfill.reject(reason);
			})
		}
	)
}
PromisePolyfill.resolve = function(value) {
	if (value instanceof PromisePolyfill) return value
	return new PromisePolyfill(function(resolve) {resolve(value)})
}
PromisePolyfill.reject = function(value) {
	return new PromisePolyfill(function(resolve, reject) {reject(value)})
}
PromisePolyfill.all = function(list) {
	return new PromisePolyfill(function(resolve, reject) {
		var total = list.length, count = 0, values = []
		if (list.length === 0) resolve([])
		else for (var i = 0; i < list.length; i++) {
			(function(i) {
				function consume(value) {
					count++
					values[i] = value
					if (count === total) resolve(values)
				}
				if (list[i] != null && (typeof list[i] === "object" || typeof list[i] === "function") && typeof list[i].then === "function") {
					list[i].then(consume, reject)
				}
				else consume(list[i])
			})(i)
		}
	})
}
PromisePolyfill.race = function(list) {
	return new PromisePolyfill(function(resolve, reject) {
		for (var i = 0; i < list.length; i++) {
			list[i].then(resolve, reject)
		}
	})
}

module.exports = PromisePolyfill


/***/ }),

/***/ "./node_modules/mithril/promise/promise.js":
/*!*************************************************!*\
  !*** ./node_modules/mithril/promise/promise.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var PromisePolyfill = __webpack_require__(/*! ./polyfill */ "./node_modules/mithril/promise/polyfill.js")

if (typeof window !== "undefined") {
	if (typeof window.Promise === "undefined") {
		window.Promise = PromisePolyfill
	} else if (!window.Promise.prototype.finally) {
		window.Promise.prototype.finally = PromisePolyfill.prototype.finally
	}
	module.exports = window.Promise
} else if (typeof __webpack_require__.g !== "undefined") {
	if (typeof __webpack_require__.g.Promise === "undefined") {
		__webpack_require__.g.Promise = PromisePolyfill
	} else if (!__webpack_require__.g.Promise.prototype.finally) {
		__webpack_require__.g.Promise.prototype.finally = PromisePolyfill.prototype.finally
	}
	module.exports = __webpack_require__.g.Promise
} else {
	module.exports = PromisePolyfill
}


/***/ }),

/***/ "./node_modules/mithril/querystring/build.js":
/*!***************************************************!*\
  !*** ./node_modules/mithril/querystring/build.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


module.exports = function(object) {
	if (Object.prototype.toString.call(object) !== "[object Object]") return ""

	var args = []
	for (var key in object) {
		destructure(key, object[key])
	}

	return args.join("&")

	function destructure(key, value) {
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				destructure(key + "[" + i + "]", value[i])
			}
		}
		else if (Object.prototype.toString.call(value) === "[object Object]") {
			for (var i in value) {
				destructure(key + "[" + i + "]", value[i])
			}
		}
		else args.push(encodeURIComponent(key) + (value != null && value !== "" ? "=" + encodeURIComponent(value) : ""))
	}
}


/***/ }),

/***/ "./node_modules/mithril/querystring/parse.js":
/*!***************************************************!*\
  !*** ./node_modules/mithril/querystring/parse.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


module.exports = function(string) {
	if (string === "" || string == null) return {}
	if (string.charAt(0) === "?") string = string.slice(1)

	var entries = string.split("&"), counters = {}, data = {}
	for (var i = 0; i < entries.length; i++) {
		var entry = entries[i].split("=")
		var key = decodeURIComponent(entry[0])
		var value = entry.length === 2 ? decodeURIComponent(entry[1]) : ""

		if (value === "true") value = true
		else if (value === "false") value = false

		var levels = key.split(/\]\[?|\[/)
		var cursor = data
		if (key.indexOf("[") > -1) levels.pop()
		for (var j = 0; j < levels.length; j++) {
			var level = levels[j], nextLevel = levels[j + 1]
			var isNumber = nextLevel == "" || !isNaN(parseInt(nextLevel, 10))
			if (level === "") {
				var key = levels.slice(0, j).join()
				if (counters[key] == null) {
					counters[key] = Array.isArray(cursor) ? cursor.length : 0
				}
				level = counters[key]++
			}
			// Disallow direct prototype pollution
			else if (level === "__proto__") break
			if (j === levels.length - 1) cursor[level] = value
			else {
				// Read own properties exclusively to disallow indirect
				// prototype pollution
				var desc = Object.getOwnPropertyDescriptor(cursor, level)
				if (desc != null) desc = desc.value
				if (desc == null) cursor[level] = desc = isNumber ? [] : {}
				cursor = desc
			}
		}
	}
	return data
}


/***/ }),

/***/ "./node_modules/mithril/render.js":
/*!****************************************!*\
  !*** ./node_modules/mithril/render.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


module.exports = __webpack_require__(/*! ./render/render */ "./node_modules/mithril/render/render.js")(window)


/***/ }),

/***/ "./node_modules/mithril/render/fragment.js":
/*!*************************************************!*\
  !*** ./node_modules/mithril/render/fragment.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Vnode = __webpack_require__(/*! ../render/vnode */ "./node_modules/mithril/render/vnode.js")
var hyperscriptVnode = __webpack_require__(/*! ./hyperscriptVnode */ "./node_modules/mithril/render/hyperscriptVnode.js")

module.exports = function() {
	var vnode = hyperscriptVnode.apply(0, arguments)

	vnode.tag = "["
	vnode.children = Vnode.normalizeChildren(vnode.children)
	return vnode
}


/***/ }),

/***/ "./node_modules/mithril/render/hyperscript.js":
/*!****************************************************!*\
  !*** ./node_modules/mithril/render/hyperscript.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Vnode = __webpack_require__(/*! ../render/vnode */ "./node_modules/mithril/render/vnode.js")
var hyperscriptVnode = __webpack_require__(/*! ./hyperscriptVnode */ "./node_modules/mithril/render/hyperscriptVnode.js")

var selectorParser = /(?:(^|#|\.)([^#\.\[\]]+))|(\[(.+?)(?:\s*=\s*("|'|)((?:\\["'\]]|.)*?)\5)?\])/g
var selectorCache = {}
var hasOwn = {}.hasOwnProperty

function isEmpty(object) {
	for (var key in object) if (hasOwn.call(object, key)) return false
	return true
}

function compileSelector(selector) {
	var match, tag = "div", classes = [], attrs = {}
	while (match = selectorParser.exec(selector)) {
		var type = match[1], value = match[2]
		if (type === "" && value !== "") tag = value
		else if (type === "#") attrs.id = value
		else if (type === ".") classes.push(value)
		else if (match[3][0] === "[") {
			var attrValue = match[6]
			if (attrValue) attrValue = attrValue.replace(/\\(["'])/g, "$1").replace(/\\\\/g, "\\")
			if (match[4] === "class") classes.push(attrValue)
			else attrs[match[4]] = attrValue === "" ? attrValue : attrValue || true
		}
	}
	if (classes.length > 0) attrs.className = classes.join(" ")
	return selectorCache[selector] = {tag: tag, attrs: attrs}
}

function execSelector(state, vnode) {
	var attrs = vnode.attrs
	var children = Vnode.normalizeChildren(vnode.children)
	var hasClass = hasOwn.call(attrs, "class")
	var className = hasClass ? attrs.class : attrs.className

	vnode.tag = state.tag
	vnode.attrs = null
	vnode.children = undefined

	if (!isEmpty(state.attrs) && !isEmpty(attrs)) {
		var newAttrs = {}

		for (var key in attrs) {
			if (hasOwn.call(attrs, key)) newAttrs[key] = attrs[key]
		}

		attrs = newAttrs
	}

	for (var key in state.attrs) {
		if (hasOwn.call(state.attrs, key) && key !== "className" && !hasOwn.call(attrs, key)){
			attrs[key] = state.attrs[key]
		}
	}
	if (className != null || state.attrs.className != null) attrs.className =
		className != null
			? state.attrs.className != null
				? String(state.attrs.className) + " " + String(className)
				: className
			: state.attrs.className != null
				? state.attrs.className
				: null

	if (hasClass) attrs.class = null

	for (var key in attrs) {
		if (hasOwn.call(attrs, key) && key !== "key") {
			vnode.attrs = attrs
			break
		}
	}

	if (Array.isArray(children) && children.length === 1 && children[0] != null && children[0].tag === "#") {
		vnode.text = children[0].children
	} else {
		vnode.children = children
	}

	return vnode
}

function hyperscript(selector) {
	if (selector == null || typeof selector !== "string" && typeof selector !== "function" && typeof selector.view !== "function") {
		throw Error("The selector must be either a string or a component.");
	}

	var vnode = hyperscriptVnode.apply(1, arguments)

	if (typeof selector === "string") {
		vnode.children = Vnode.normalizeChildren(vnode.children)
		if (selector !== "[") return execSelector(selectorCache[selector] || compileSelector(selector), vnode)
	}

	vnode.tag = selector
	return vnode
}

module.exports = hyperscript


/***/ }),

/***/ "./node_modules/mithril/render/hyperscriptVnode.js":
/*!*********************************************************!*\
  !*** ./node_modules/mithril/render/hyperscriptVnode.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Vnode = __webpack_require__(/*! ../render/vnode */ "./node_modules/mithril/render/vnode.js")

// Call via `hyperscriptVnode.apply(startOffset, arguments)`
//
// The reason I do it this way, forwarding the arguments and passing the start
// offset in `this`, is so I don't have to create a temporary array in a
// performance-critical path.
//
// In native ES6, I'd instead add a final `...args` parameter to the
// `hyperscript` and `fragment` factories and define this as
// `hyperscriptVnode(...args)`, since modern engines do optimize that away. But
// ES5 (what Mithril requires thanks to IE support) doesn't give me that luxury,
// and engines aren't nearly intelligent enough to do either of these:
//
// 1. Elide the allocation for `[].slice.call(arguments, 1)` when it's passed to
//    another function only to be indexed.
// 2. Elide an `arguments` allocation when it's passed to any function other
//    than `Function.prototype.apply` or `Reflect.apply`.
//
// In ES6, it'd probably look closer to this (I'd need to profile it, though):
// module.exports = function(attrs, ...children) {
//     if (attrs == null || typeof attrs === "object" && attrs.tag == null && !Array.isArray(attrs)) {
//         if (children.length === 1 && Array.isArray(children[0])) children = children[0]
//     } else {
//         children = children.length === 0 && Array.isArray(attrs) ? attrs : [attrs, ...children]
//         attrs = undefined
//     }
//
//     if (attrs == null) attrs = {}
//     return Vnode("", attrs.key, attrs, children)
// }
module.exports = function() {
	var attrs = arguments[this], start = this + 1, children

	if (attrs == null) {
		attrs = {}
	} else if (typeof attrs !== "object" || attrs.tag != null || Array.isArray(attrs)) {
		attrs = {}
		start = this
	}

	if (arguments.length === start + 1) {
		children = arguments[start]
		if (!Array.isArray(children)) children = [children]
	} else {
		children = []
		while (start < arguments.length) children.push(arguments[start++])
	}

	return Vnode("", attrs.key, attrs, children)
}


/***/ }),

/***/ "./node_modules/mithril/render/render.js":
/*!***********************************************!*\
  !*** ./node_modules/mithril/render/render.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Vnode = __webpack_require__(/*! ../render/vnode */ "./node_modules/mithril/render/vnode.js")

module.exports = function($window) {
	var $doc = $window && $window.document
	var currentRedraw

	var nameSpace = {
		svg: "http://www.w3.org/2000/svg",
		math: "http://www.w3.org/1998/Math/MathML"
	}

	function getNameSpace(vnode) {
		return vnode.attrs && vnode.attrs.xmlns || nameSpace[vnode.tag]
	}

	//sanity check to discourage people from doing `vnode.state = ...`
	function checkState(vnode, original) {
		if (vnode.state !== original) throw new Error("`vnode.state` must not be modified")
	}

	//Note: the hook is passed as the `this` argument to allow proxying the
	//arguments without requiring a full array allocation to do so. It also
	//takes advantage of the fact the current `vnode` is the first argument in
	//all lifecycle methods.
	function callHook(vnode) {
		var original = vnode.state
		try {
			return this.apply(original, arguments)
		} finally {
			checkState(vnode, original)
		}
	}

	// IE11 (at least) throws an UnspecifiedError when accessing document.activeElement when
	// inside an iframe. Catch and swallow this error, and heavy-handidly return null.
	function activeElement() {
		try {
			return $doc.activeElement
		} catch (e) {
			return null
		}
	}
	//create
	function createNodes(parent, vnodes, start, end, hooks, nextSibling, ns) {
		for (var i = start; i < end; i++) {
			var vnode = vnodes[i]
			if (vnode != null) {
				createNode(parent, vnode, hooks, ns, nextSibling)
			}
		}
	}
	function createNode(parent, vnode, hooks, ns, nextSibling) {
		var tag = vnode.tag
		if (typeof tag === "string") {
			vnode.state = {}
			if (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)
			switch (tag) {
				case "#": createText(parent, vnode, nextSibling); break
				case "<": createHTML(parent, vnode, ns, nextSibling); break
				case "[": createFragment(parent, vnode, hooks, ns, nextSibling); break
				default: createElement(parent, vnode, hooks, ns, nextSibling)
			}
		}
		else createComponent(parent, vnode, hooks, ns, nextSibling)
	}
	function createText(parent, vnode, nextSibling) {
		vnode.dom = $doc.createTextNode(vnode.children)
		insertNode(parent, vnode.dom, nextSibling)
	}
	var possibleParents = {caption: "table", thead: "table", tbody: "table", tfoot: "table", tr: "tbody", th: "tr", td: "tr", colgroup: "table", col: "colgroup"}
	function createHTML(parent, vnode, ns, nextSibling) {
		var match = vnode.children.match(/^\s*?<(\w+)/im) || []
		// not using the proper parent makes the child element(s) vanish.
		//     var div = document.createElement("div")
		//     div.innerHTML = "<td>i</td><td>j</td>"
		//     console.log(div.innerHTML)
		// --> "ij", no <td> in sight.
		var temp = $doc.createElement(possibleParents[match[1]] || "div")
		if (ns === "http://www.w3.org/2000/svg") {
			temp.innerHTML = "<svg xmlns=\"http://www.w3.org/2000/svg\">" + vnode.children + "</svg>"
			temp = temp.firstChild
		} else {
			temp.innerHTML = vnode.children
		}
		vnode.dom = temp.firstChild
		vnode.domSize = temp.childNodes.length
		// Capture nodes to remove, so we don't confuse them.
		vnode.instance = []
		var fragment = $doc.createDocumentFragment()
		var child
		while (child = temp.firstChild) {
			vnode.instance.push(child)
			fragment.appendChild(child)
		}
		insertNode(parent, fragment, nextSibling)
	}
	function createFragment(parent, vnode, hooks, ns, nextSibling) {
		var fragment = $doc.createDocumentFragment()
		if (vnode.children != null) {
			var children = vnode.children
			createNodes(fragment, children, 0, children.length, hooks, null, ns)
		}
		vnode.dom = fragment.firstChild
		vnode.domSize = fragment.childNodes.length
		insertNode(parent, fragment, nextSibling)
	}
	function createElement(parent, vnode, hooks, ns, nextSibling) {
		var tag = vnode.tag
		var attrs = vnode.attrs
		var is = attrs && attrs.is

		ns = getNameSpace(vnode) || ns

		var element = ns ?
			is ? $doc.createElementNS(ns, tag, {is: is}) : $doc.createElementNS(ns, tag) :
			is ? $doc.createElement(tag, {is: is}) : $doc.createElement(tag)
		vnode.dom = element

		if (attrs != null) {
			setAttrs(vnode, attrs, ns)
		}

		insertNode(parent, element, nextSibling)

		if (!maybeSetContentEditable(vnode)) {
			if (vnode.text != null) {
				if (vnode.text !== "") element.textContent = vnode.text
				else vnode.children = [Vnode("#", undefined, undefined, vnode.text, undefined, undefined)]
			}
			if (vnode.children != null) {
				var children = vnode.children
				createNodes(element, children, 0, children.length, hooks, null, ns)
				if (vnode.tag === "select" && attrs != null) setLateSelectAttrs(vnode, attrs)
			}
		}
	}
	function initComponent(vnode, hooks) {
		var sentinel
		if (typeof vnode.tag.view === "function") {
			vnode.state = Object.create(vnode.tag)
			sentinel = vnode.state.view
			if (sentinel.$$reentrantLock$$ != null) return
			sentinel.$$reentrantLock$$ = true
		} else {
			vnode.state = void 0
			sentinel = vnode.tag
			if (sentinel.$$reentrantLock$$ != null) return
			sentinel.$$reentrantLock$$ = true
			vnode.state = (vnode.tag.prototype != null && typeof vnode.tag.prototype.view === "function") ? new vnode.tag(vnode) : vnode.tag(vnode)
		}
		initLifecycle(vnode.state, vnode, hooks)
		if (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)
		vnode.instance = Vnode.normalize(callHook.call(vnode.state.view, vnode))
		if (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument")
		sentinel.$$reentrantLock$$ = null
	}
	function createComponent(parent, vnode, hooks, ns, nextSibling) {
		initComponent(vnode, hooks)
		if (vnode.instance != null) {
			createNode(parent, vnode.instance, hooks, ns, nextSibling)
			vnode.dom = vnode.instance.dom
			vnode.domSize = vnode.dom != null ? vnode.instance.domSize : 0
		}
		else {
			vnode.domSize = 0
		}
	}

	//update
	/**
	 * @param {Element|Fragment} parent - the parent element
	 * @param {Vnode[] | null} old - the list of vnodes of the last `render()` call for
	 *                               this part of the tree
	 * @param {Vnode[] | null} vnodes - as above, but for the current `render()` call.
	 * @param {Function[]} hooks - an accumulator of post-render hooks (oncreate/onupdate)
	 * @param {Element | null} nextSibling - the next DOM node if we're dealing with a
	 *                                       fragment that is not the last item in its
	 *                                       parent
	 * @param {'svg' | 'math' | String | null} ns) - the current XML namespace, if any
	 * @returns void
	 */
	// This function diffs and patches lists of vnodes, both keyed and unkeyed.
	//
	// We will:
	//
	// 1. describe its general structure
	// 2. focus on the diff algorithm optimizations
	// 3. discuss DOM node operations.

	// ## Overview:
	//
	// The updateNodes() function:
	// - deals with trivial cases
	// - determines whether the lists are keyed or unkeyed based on the first non-null node
	//   of each list.
	// - diffs them and patches the DOM if needed (that's the brunt of the code)
	// - manages the leftovers: after diffing, are there:
	//   - old nodes left to remove?
	// 	 - new nodes to insert?
	// 	 deal with them!
	//
	// The lists are only iterated over once, with an exception for the nodes in `old` that
	// are visited in the fourth part of the diff and in the `removeNodes` loop.

	// ## Diffing
	//
	// Reading https://github.com/localvoid/ivi/blob/ddc09d06abaef45248e6133f7040d00d3c6be853/packages/ivi/src/vdom/implementation.ts#L617-L837
	// may be good for context on longest increasing subsequence-based logic for moving nodes.
	//
	// In order to diff keyed lists, one has to
	//
	// 1) match nodes in both lists, per key, and update them accordingly
	// 2) create the nodes present in the new list, but absent in the old one
	// 3) remove the nodes present in the old list, but absent in the new one
	// 4) figure out what nodes in 1) to move in order to minimize the DOM operations.
	//
	// To achieve 1) one can create a dictionary of keys => index (for the old list), then iterate
	// over the new list and for each new vnode, find the corresponding vnode in the old list using
	// the map.
	// 2) is achieved in the same step: if a new node has no corresponding entry in the map, it is new
	// and must be created.
	// For the removals, we actually remove the nodes that have been updated from the old list.
	// The nodes that remain in that list after 1) and 2) have been performed can be safely removed.
	// The fourth step is a bit more complex and relies on the longest increasing subsequence (LIS)
	// algorithm.
	//
	// the longest increasing subsequence is the list of nodes that can remain in place. Imagine going
	// from `1,2,3,4,5` to `4,5,1,2,3` where the numbers are not necessarily the keys, but the indices
	// corresponding to the keyed nodes in the old list (keyed nodes `e,d,c,b,a` => `b,a,e,d,c` would
	//  match the above lists, for example).
	//
	// In there are two increasing subsequences: `4,5` and `1,2,3`, the latter being the longest. We
	// can update those nodes without moving them, and only call `insertNode` on `4` and `5`.
	//
	// @localvoid adapted the algo to also support node deletions and insertions (the `lis` is actually
	// the longest increasing subsequence *of old nodes still present in the new list*).
	//
	// It is a general algorithm that is fireproof in all circumstances, but it requires the allocation
	// and the construction of a `key => oldIndex` map, and three arrays (one with `newIndex => oldIndex`,
	// the `LIS` and a temporary one to create the LIS).
	//
	// So we cheat where we can: if the tails of the lists are identical, they are guaranteed to be part of
	// the LIS and can be updated without moving them.
	//
	// If two nodes are swapped, they are guaranteed not to be part of the LIS, and must be moved (with
	// the exception of the last node if the list is fully reversed).
	//
	// ## Finding the next sibling.
	//
	// `updateNode()` and `createNode()` expect a nextSibling parameter to perform DOM operations.
	// When the list is being traversed top-down, at any index, the DOM nodes up to the previous
	// vnode reflect the content of the new list, whereas the rest of the DOM nodes reflect the old
	// list. The next sibling must be looked for in the old list using `getNextSibling(... oldStart + 1 ...)`.
	//
	// In the other scenarios (swaps, upwards traversal, map-based diff),
	// the new vnodes list is traversed upwards. The DOM nodes at the bottom of the list reflect the
	// bottom part of the new vnodes list, and we can use the `v.dom`  value of the previous node
	// as the next sibling (cached in the `nextSibling` variable).


	// ## DOM node moves
	//
	// In most scenarios `updateNode()` and `createNode()` perform the DOM operations. However,
	// this is not the case if the node moved (second and fourth part of the diff algo). We move
	// the old DOM nodes before updateNode runs because it enables us to use the cached `nextSibling`
	// variable rather than fetching it using `getNextSibling()`.
	//
	// The fourth part of the diff currently inserts nodes unconditionally, leading to issues
	// like #1791 and #1999. We need to be smarter about those situations where adjascent old
	// nodes remain together in the new list in a way that isn't covered by parts one and
	// three of the diff algo.

	function updateNodes(parent, old, vnodes, hooks, nextSibling, ns) {
		if (old === vnodes || old == null && vnodes == null) return
		else if (old == null || old.length === 0) createNodes(parent, vnodes, 0, vnodes.length, hooks, nextSibling, ns)
		else if (vnodes == null || vnodes.length === 0) removeNodes(parent, old, 0, old.length)
		else {
			var isOldKeyed = old[0] != null && old[0].key != null
			var isKeyed = vnodes[0] != null && vnodes[0].key != null
			var start = 0, oldStart = 0
			if (!isOldKeyed) while (oldStart < old.length && old[oldStart] == null) oldStart++
			if (!isKeyed) while (start < vnodes.length && vnodes[start] == null) start++
			if (isKeyed === null && isOldKeyed == null) return // both lists are full of nulls
			if (isOldKeyed !== isKeyed) {
				removeNodes(parent, old, oldStart, old.length)
				createNodes(parent, vnodes, start, vnodes.length, hooks, nextSibling, ns)
			} else if (!isKeyed) {
				// Don't index past the end of either list (causes deopts).
				var commonLength = old.length < vnodes.length ? old.length : vnodes.length
				// Rewind if necessary to the first non-null index on either side.
				// We could alternatively either explicitly create or remove nodes when `start !== oldStart`
				// but that would be optimizing for sparse lists which are more rare than dense ones.
				start = start < oldStart ? start : oldStart
				for (; start < commonLength; start++) {
					o = old[start]
					v = vnodes[start]
					if (o === v || o == null && v == null) continue
					else if (o == null) createNode(parent, v, hooks, ns, getNextSibling(old, start + 1, nextSibling))
					else if (v == null) removeNode(parent, o)
					else updateNode(parent, o, v, hooks, getNextSibling(old, start + 1, nextSibling), ns)
				}
				if (old.length > commonLength) removeNodes(parent, old, start, old.length)
				if (vnodes.length > commonLength) createNodes(parent, vnodes, start, vnodes.length, hooks, nextSibling, ns)
			} else {
				// keyed diff
				var oldEnd = old.length - 1, end = vnodes.length - 1, map, o, v, oe, ve, topSibling

				// bottom-up
				while (oldEnd >= oldStart && end >= start) {
					oe = old[oldEnd]
					ve = vnodes[end]
					if (oe.key !== ve.key) break
					if (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns)
					if (ve.dom != null) nextSibling = ve.dom
					oldEnd--, end--
				}
				// top-down
				while (oldEnd >= oldStart && end >= start) {
					o = old[oldStart]
					v = vnodes[start]
					if (o.key !== v.key) break
					oldStart++, start++
					if (o !== v) updateNode(parent, o, v, hooks, getNextSibling(old, oldStart, nextSibling), ns)
				}
				// swaps and list reversals
				while (oldEnd >= oldStart && end >= start) {
					if (start === end) break
					if (o.key !== ve.key || oe.key !== v.key) break
					topSibling = getNextSibling(old, oldStart, nextSibling)
					moveNodes(parent, oe, topSibling)
					if (oe !== v) updateNode(parent, oe, v, hooks, topSibling, ns)
					if (++start <= --end) moveNodes(parent, o, nextSibling)
					if (o !== ve) updateNode(parent, o, ve, hooks, nextSibling, ns)
					if (ve.dom != null) nextSibling = ve.dom
					oldStart++; oldEnd--
					oe = old[oldEnd]
					ve = vnodes[end]
					o = old[oldStart]
					v = vnodes[start]
				}
				// bottom up once again
				while (oldEnd >= oldStart && end >= start) {
					if (oe.key !== ve.key) break
					if (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns)
					if (ve.dom != null) nextSibling = ve.dom
					oldEnd--, end--
					oe = old[oldEnd]
					ve = vnodes[end]
				}
				if (start > end) removeNodes(parent, old, oldStart, oldEnd + 1)
				else if (oldStart > oldEnd) createNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns)
				else {
					// inspired by ivi https://github.com/ivijs/ivi/ by Boris Kaul
					var originalNextSibling = nextSibling, vnodesLength = end - start + 1, oldIndices = new Array(vnodesLength), li=0, i=0, pos = 2147483647, matched = 0, map, lisIndices
					for (i = 0; i < vnodesLength; i++) oldIndices[i] = -1
					for (i = end; i >= start; i--) {
						if (map == null) map = getKeyMap(old, oldStart, oldEnd + 1)
						ve = vnodes[i]
						var oldIndex = map[ve.key]
						if (oldIndex != null) {
							pos = (oldIndex < pos) ? oldIndex : -1 // becomes -1 if nodes were re-ordered
							oldIndices[i-start] = oldIndex
							oe = old[oldIndex]
							old[oldIndex] = null
							if (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns)
							if (ve.dom != null) nextSibling = ve.dom
							matched++
						}
					}
					nextSibling = originalNextSibling
					if (matched !== oldEnd - oldStart + 1) removeNodes(parent, old, oldStart, oldEnd + 1)
					if (matched === 0) createNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns)
					else {
						if (pos === -1) {
							// the indices of the indices of the items that are part of the
							// longest increasing subsequence in the oldIndices list
							lisIndices = makeLisIndices(oldIndices)
							li = lisIndices.length - 1
							for (i = end; i >= start; i--) {
								v = vnodes[i]
								if (oldIndices[i-start] === -1) createNode(parent, v, hooks, ns, nextSibling)
								else {
									if (lisIndices[li] === i - start) li--
									else moveNodes(parent, v, nextSibling)
								}
								if (v.dom != null) nextSibling = vnodes[i].dom
							}
						} else {
							for (i = end; i >= start; i--) {
								v = vnodes[i]
								if (oldIndices[i-start] === -1) createNode(parent, v, hooks, ns, nextSibling)
								if (v.dom != null) nextSibling = vnodes[i].dom
							}
						}
					}
				}
			}
		}
	}
	function updateNode(parent, old, vnode, hooks, nextSibling, ns) {
		var oldTag = old.tag, tag = vnode.tag
		if (oldTag === tag) {
			vnode.state = old.state
			vnode.events = old.events
			if (shouldNotUpdate(vnode, old)) return
			if (typeof oldTag === "string") {
				if (vnode.attrs != null) {
					updateLifecycle(vnode.attrs, vnode, hooks)
				}
				switch (oldTag) {
					case "#": updateText(old, vnode); break
					case "<": updateHTML(parent, old, vnode, ns, nextSibling); break
					case "[": updateFragment(parent, old, vnode, hooks, nextSibling, ns); break
					default: updateElement(old, vnode, hooks, ns)
				}
			}
			else updateComponent(parent, old, vnode, hooks, nextSibling, ns)
		}
		else {
			removeNode(parent, old)
			createNode(parent, vnode, hooks, ns, nextSibling)
		}
	}
	function updateText(old, vnode) {
		if (old.children.toString() !== vnode.children.toString()) {
			old.dom.nodeValue = vnode.children
		}
		vnode.dom = old.dom
	}
	function updateHTML(parent, old, vnode, ns, nextSibling) {
		if (old.children !== vnode.children) {
			removeHTML(parent, old)
			createHTML(parent, vnode, ns, nextSibling)
		}
		else {
			vnode.dom = old.dom
			vnode.domSize = old.domSize
			vnode.instance = old.instance
		}
	}
	function updateFragment(parent, old, vnode, hooks, nextSibling, ns) {
		updateNodes(parent, old.children, vnode.children, hooks, nextSibling, ns)
		var domSize = 0, children = vnode.children
		vnode.dom = null
		if (children != null) {
			for (var i = 0; i < children.length; i++) {
				var child = children[i]
				if (child != null && child.dom != null) {
					if (vnode.dom == null) vnode.dom = child.dom
					domSize += child.domSize || 1
				}
			}
			if (domSize !== 1) vnode.domSize = domSize
		}
	}
	function updateElement(old, vnode, hooks, ns) {
		var element = vnode.dom = old.dom
		ns = getNameSpace(vnode) || ns

		if (vnode.tag === "textarea") {
			if (vnode.attrs == null) vnode.attrs = {}
			if (vnode.text != null) {
				vnode.attrs.value = vnode.text //FIXME handle multiple children
				vnode.text = undefined
			}
		}
		updateAttrs(vnode, old.attrs, vnode.attrs, ns)
		if (!maybeSetContentEditable(vnode)) {
			if (old.text != null && vnode.text != null && vnode.text !== "") {
				if (old.text.toString() !== vnode.text.toString()) old.dom.firstChild.nodeValue = vnode.text
			}
			else {
				if (old.text != null) old.children = [Vnode("#", undefined, undefined, old.text, undefined, old.dom.firstChild)]
				if (vnode.text != null) vnode.children = [Vnode("#", undefined, undefined, vnode.text, undefined, undefined)]
				updateNodes(element, old.children, vnode.children, hooks, null, ns)
			}
		}
	}
	function updateComponent(parent, old, vnode, hooks, nextSibling, ns) {
		vnode.instance = Vnode.normalize(callHook.call(vnode.state.view, vnode))
		if (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument")
		updateLifecycle(vnode.state, vnode, hooks)
		if (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks)
		if (vnode.instance != null) {
			if (old.instance == null) createNode(parent, vnode.instance, hooks, ns, nextSibling)
			else updateNode(parent, old.instance, vnode.instance, hooks, nextSibling, ns)
			vnode.dom = vnode.instance.dom
			vnode.domSize = vnode.instance.domSize
		}
		else if (old.instance != null) {
			removeNode(parent, old.instance)
			vnode.dom = undefined
			vnode.domSize = 0
		}
		else {
			vnode.dom = old.dom
			vnode.domSize = old.domSize
		}
	}
	function getKeyMap(vnodes, start, end) {
		var map = Object.create(null)
		for (; start < end; start++) {
			var vnode = vnodes[start]
			if (vnode != null) {
				var key = vnode.key
				if (key != null) map[key] = start
			}
		}
		return map
	}
	// Lifted from ivi https://github.com/ivijs/ivi/
	// takes a list of unique numbers (-1 is special and can
	// occur multiple times) and returns an array with the indices
	// of the items that are part of the longest increasing
	// subsequece
	var lisTemp = []
	function makeLisIndices(a) {
		var result = [0]
		var u = 0, v = 0, i = 0
		var il = lisTemp.length = a.length
		for (var i = 0; i < il; i++) lisTemp[i] = a[i]
		for (var i = 0; i < il; ++i) {
			if (a[i] === -1) continue
			var j = result[result.length - 1]
			if (a[j] < a[i]) {
				lisTemp[i] = j
				result.push(i)
				continue
			}
			u = 0
			v = result.length - 1
			while (u < v) {
				// Fast integer average without overflow.
				// eslint-disable-next-line no-bitwise
				var c = (u >>> 1) + (v >>> 1) + (u & v & 1)
				if (a[result[c]] < a[i]) {
					u = c + 1
				}
				else {
					v = c
				}
			}
			if (a[i] < a[result[u]]) {
				if (u > 0) lisTemp[i] = result[u - 1]
				result[u] = i
			}
		}
		u = result.length
		v = result[u - 1]
		while (u-- > 0) {
			result[u] = v
			v = lisTemp[v]
		}
		lisTemp.length = 0
		return result
	}

	function getNextSibling(vnodes, i, nextSibling) {
		for (; i < vnodes.length; i++) {
			if (vnodes[i] != null && vnodes[i].dom != null) return vnodes[i].dom
		}
		return nextSibling
	}

	// This covers a really specific edge case:
	// - Parent node is keyed and contains child
	// - Child is removed, returns unresolved promise in `onbeforeremove`
	// - Parent node is moved in keyed diff
	// - Remaining children still need moved appropriately
	//
	// Ideally, I'd track removed nodes as well, but that introduces a lot more
	// complexity and I'm not exactly interested in doing that.
	function moveNodes(parent, vnode, nextSibling) {
		var frag = $doc.createDocumentFragment()
		moveChildToFrag(parent, frag, vnode)
		insertNode(parent, frag, nextSibling)
	}
	function moveChildToFrag(parent, frag, vnode) {
		// Dodge the recursion overhead in a few of the most common cases.
		while (vnode.dom != null && vnode.dom.parentNode === parent) {
			if (typeof vnode.tag !== "string") {
				vnode = vnode.instance
				if (vnode != null) continue
			} else if (vnode.tag === "<") {
				for (var i = 0; i < vnode.instance.length; i++) {
					frag.appendChild(vnode.instance[i])
				}
			} else if (vnode.tag !== "[") {
				// Don't recurse for text nodes *or* elements, just fragments
				frag.appendChild(vnode.dom)
			} else if (vnode.children.length === 1) {
				vnode = vnode.children[0]
				if (vnode != null) continue
			} else {
				for (var i = 0; i < vnode.children.length; i++) {
					var child = vnode.children[i]
					if (child != null) moveChildToFrag(parent, frag, child)
				}
			}
			break
		}
	}

	function insertNode(parent, dom, nextSibling) {
		if (nextSibling != null) parent.insertBefore(dom, nextSibling)
		else parent.appendChild(dom)
	}

	function maybeSetContentEditable(vnode) {
		if (vnode.attrs == null || (
			vnode.attrs.contenteditable == null && // attribute
			vnode.attrs.contentEditable == null // property
		)) return false
		var children = vnode.children
		if (children != null && children.length === 1 && children[0].tag === "<") {
			var content = children[0].children
			if (vnode.dom.innerHTML !== content) vnode.dom.innerHTML = content
		}
		else if (vnode.text != null || children != null && children.length !== 0) throw new Error("Child node of a contenteditable must be trusted")
		return true
	}

	//remove
	function removeNodes(parent, vnodes, start, end) {
		for (var i = start; i < end; i++) {
			var vnode = vnodes[i]
			if (vnode != null) removeNode(parent, vnode)
		}
	}
	function removeNode(parent, vnode) {
		var mask = 0
		var original = vnode.state
		var stateResult, attrsResult
		if (typeof vnode.tag !== "string" && typeof vnode.state.onbeforeremove === "function") {
			var result = callHook.call(vnode.state.onbeforeremove, vnode)
			if (result != null && typeof result.then === "function") {
				mask = 1
				stateResult = result
			}
		}
		if (vnode.attrs && typeof vnode.attrs.onbeforeremove === "function") {
			var result = callHook.call(vnode.attrs.onbeforeremove, vnode)
			if (result != null && typeof result.then === "function") {
				// eslint-disable-next-line no-bitwise
				mask |= 2
				attrsResult = result
			}
		}
		checkState(vnode, original)

		// If we can, try to fast-path it and avoid all the overhead of awaiting
		if (!mask) {
			onremove(vnode)
			removeChild(parent, vnode)
		} else {
			if (stateResult != null) {
				var next = function () {
					// eslint-disable-next-line no-bitwise
					if (mask & 1) { mask &= 2; if (!mask) reallyRemove() }
				}
				stateResult.then(next, next)
			}
			if (attrsResult != null) {
				var next = function () {
					// eslint-disable-next-line no-bitwise
					if (mask & 2) { mask &= 1; if (!mask) reallyRemove() }
				}
				attrsResult.then(next, next)
			}
		}

		function reallyRemove() {
			checkState(vnode, original)
			onremove(vnode)
			removeChild(parent, vnode)
		}
	}
	function removeHTML(parent, vnode) {
		for (var i = 0; i < vnode.instance.length; i++) {
			parent.removeChild(vnode.instance[i])
		}
	}
	function removeChild(parent, vnode) {
		// Dodge the recursion overhead in a few of the most common cases.
		while (vnode.dom != null && vnode.dom.parentNode === parent) {
			if (typeof vnode.tag !== "string") {
				vnode = vnode.instance
				if (vnode != null) continue
			} else if (vnode.tag === "<") {
				removeHTML(parent, vnode)
			} else {
				if (vnode.tag !== "[") {
					parent.removeChild(vnode.dom)
					if (!Array.isArray(vnode.children)) break
				}
				if (vnode.children.length === 1) {
					vnode = vnode.children[0]
					if (vnode != null) continue
				} else {
					for (var i = 0; i < vnode.children.length; i++) {
						var child = vnode.children[i]
						if (child != null) removeChild(parent, child)
					}
				}
			}
			break
		}
	}
	function onremove(vnode) {
		if (typeof vnode.tag !== "string" && typeof vnode.state.onremove === "function") callHook.call(vnode.state.onremove, vnode)
		if (vnode.attrs && typeof vnode.attrs.onremove === "function") callHook.call(vnode.attrs.onremove, vnode)
		if (typeof vnode.tag !== "string") {
			if (vnode.instance != null) onremove(vnode.instance)
		} else {
			var children = vnode.children
			if (Array.isArray(children)) {
				for (var i = 0; i < children.length; i++) {
					var child = children[i]
					if (child != null) onremove(child)
				}
			}
		}
	}

	//attrs
	function setAttrs(vnode, attrs, ns) {
		for (var key in attrs) {
			setAttr(vnode, key, null, attrs[key], ns)
		}
	}
	function setAttr(vnode, key, old, value, ns) {
		if (key === "key" || key === "is" || value == null || isLifecycleMethod(key) || (old === value && !isFormAttribute(vnode, key)) && typeof value !== "object") return
		if (key[0] === "o" && key[1] === "n") return updateEvent(vnode, key, value)
		if (key.slice(0, 6) === "xlink:") vnode.dom.setAttributeNS("http://www.w3.org/1999/xlink", key.slice(6), value)
		else if (key === "style") updateStyle(vnode.dom, old, value)
		else if (hasPropertyKey(vnode, key, ns)) {
			if (key === "value") {
				// Only do the coercion if we're actually going to check the value.
				/* eslint-disable no-implicit-coercion */
				//setting input[value] to same value by typing on focused element moves cursor to end in Chrome
				if ((vnode.tag === "input" || vnode.tag === "textarea") && vnode.dom.value === "" + value && vnode.dom === activeElement()) return
				//setting select[value] to same value while having select open blinks select dropdown in Chrome
				if (vnode.tag === "select" && old !== null && vnode.dom.value === "" + value) return
				//setting option[value] to same value while having select open blinks select dropdown in Chrome
				if (vnode.tag === "option" && old !== null && vnode.dom.value === "" + value) return
				/* eslint-enable no-implicit-coercion */
			}
			// If you assign an input type that is not supported by IE 11 with an assignment expression, an error will occur.
			if (vnode.tag === "input" && key === "type") vnode.dom.setAttribute(key, value)
			else vnode.dom[key] = value
		} else {
			if (typeof value === "boolean") {
				if (value) vnode.dom.setAttribute(key, "")
				else vnode.dom.removeAttribute(key)
			}
			else vnode.dom.setAttribute(key === "className" ? "class" : key, value)
		}
	}
	function removeAttr(vnode, key, old, ns) {
		if (key === "key" || key === "is" || old == null || isLifecycleMethod(key)) return
		if (key[0] === "o" && key[1] === "n" && !isLifecycleMethod(key)) updateEvent(vnode, key, undefined)
		else if (key === "style") updateStyle(vnode.dom, old, null)
		else if (
			hasPropertyKey(vnode, key, ns)
			&& key !== "className"
			&& !(key === "value" && (
				vnode.tag === "option"
				|| vnode.tag === "select" && vnode.dom.selectedIndex === -1 && vnode.dom === activeElement()
			))
			&& !(vnode.tag === "input" && key === "type")
		) {
			vnode.dom[key] = null
		} else {
			var nsLastIndex = key.indexOf(":")
			if (nsLastIndex !== -1) key = key.slice(nsLastIndex + 1)
			if (old !== false) vnode.dom.removeAttribute(key === "className" ? "class" : key)
		}
	}
	function setLateSelectAttrs(vnode, attrs) {
		if ("value" in attrs) {
			if(attrs.value === null) {
				if (vnode.dom.selectedIndex !== -1) vnode.dom.value = null
			} else {
				var normalized = "" + attrs.value // eslint-disable-line no-implicit-coercion
				if (vnode.dom.value !== normalized || vnode.dom.selectedIndex === -1) {
					vnode.dom.value = normalized
				}
			}
		}
		if ("selectedIndex" in attrs) setAttr(vnode, "selectedIndex", null, attrs.selectedIndex, undefined)
	}
	function updateAttrs(vnode, old, attrs, ns) {
		if (attrs != null) {
			for (var key in attrs) {
				setAttr(vnode, key, old && old[key], attrs[key], ns)
			}
		}
		var val
		if (old != null) {
			for (var key in old) {
				if (((val = old[key]) != null) && (attrs == null || attrs[key] == null)) {
					removeAttr(vnode, key, val, ns)
				}
			}
		}
	}
	function isFormAttribute(vnode, attr) {
		return attr === "value" || attr === "checked" || attr === "selectedIndex" || attr === "selected" && vnode.dom === activeElement() || vnode.tag === "option" && vnode.dom.parentNode === $doc.activeElement
	}
	function isLifecycleMethod(attr) {
		return attr === "oninit" || attr === "oncreate" || attr === "onupdate" || attr === "onremove" || attr === "onbeforeremove" || attr === "onbeforeupdate"
	}
	function hasPropertyKey(vnode, key, ns) {
		// Filter out namespaced keys
		return ns === undefined && (
			// If it's a custom element, just keep it.
			vnode.tag.indexOf("-") > -1 || vnode.attrs != null && vnode.attrs.is ||
			// If it's a normal element, let's try to avoid a few browser bugs.
			key !== "href" && key !== "list" && key !== "form" && key !== "width" && key !== "height"// && key !== "type"
			// Defer the property check until *after* we check everything.
		) && key in vnode.dom
	}

	//style
	var uppercaseRegex = /[A-Z]/g
	function toLowerCase(capital) { return "-" + capital.toLowerCase() }
	function normalizeKey(key) {
		return key[0] === "-" && key[1] === "-" ? key :
			key === "cssFloat" ? "float" :
				key.replace(uppercaseRegex, toLowerCase)
	}
	function updateStyle(element, old, style) {
		if (old === style) {
			// Styles are equivalent, do nothing.
		} else if (style == null) {
			// New style is missing, just clear it.
			element.style.cssText = ""
		} else if (typeof style !== "object") {
			// New style is a string, let engine deal with patching.
			element.style.cssText = style
		} else if (old == null || typeof old !== "object") {
			// `old` is missing or a string, `style` is an object.
			element.style.cssText = ""
			// Add new style properties
			for (var key in style) {
				var value = style[key]
				if (value != null) element.style.setProperty(normalizeKey(key), String(value))
			}
		} else {
			// Both old & new are (different) objects.
			// Update style properties that have changed
			for (var key in style) {
				var value = style[key]
				if (value != null && (value = String(value)) !== String(old[key])) {
					element.style.setProperty(normalizeKey(key), value)
				}
			}
			// Remove style properties that no longer exist
			for (var key in old) {
				if (old[key] != null && style[key] == null) {
					element.style.removeProperty(normalizeKey(key))
				}
			}
		}
	}

	// Here's an explanation of how this works:
	// 1. The event names are always (by design) prefixed by `on`.
	// 2. The EventListener interface accepts either a function or an object
	//    with a `handleEvent` method.
	// 3. The object does not inherit from `Object.prototype`, to avoid
	//    any potential interference with that (e.g. setters).
	// 4. The event name is remapped to the handler before calling it.
	// 5. In function-based event handlers, `ev.target === this`. We replicate
	//    that below.
	// 6. In function-based event handlers, `return false` prevents the default
	//    action and stops event propagation. We replicate that below.
	function EventDict() {
		// Save this, so the current redraw is correctly tracked.
		this._ = currentRedraw
	}
	EventDict.prototype = Object.create(null)
	EventDict.prototype.handleEvent = function (ev) {
		var handler = this["on" + ev.type]
		var result
		if (typeof handler === "function") result = handler.call(ev.currentTarget, ev)
		else if (typeof handler.handleEvent === "function") handler.handleEvent(ev)
		if (this._ && ev.redraw !== false) (0, this._)()
		if (result === false) {
			ev.preventDefault()
			ev.stopPropagation()
		}
	}

	//event
	function updateEvent(vnode, key, value) {
		if (vnode.events != null) {
			if (vnode.events[key] === value) return
			if (value != null && (typeof value === "function" || typeof value === "object")) {
				if (vnode.events[key] == null) vnode.dom.addEventListener(key.slice(2), vnode.events, false)
				vnode.events[key] = value
			} else {
				if (vnode.events[key] != null) vnode.dom.removeEventListener(key.slice(2), vnode.events, false)
				vnode.events[key] = undefined
			}
		} else if (value != null && (typeof value === "function" || typeof value === "object")) {
			vnode.events = new EventDict()
			vnode.dom.addEventListener(key.slice(2), vnode.events, false)
			vnode.events[key] = value
		}
	}

	//lifecycle
	function initLifecycle(source, vnode, hooks) {
		if (typeof source.oninit === "function") callHook.call(source.oninit, vnode)
		if (typeof source.oncreate === "function") hooks.push(callHook.bind(source.oncreate, vnode))
	}
	function updateLifecycle(source, vnode, hooks) {
		if (typeof source.onupdate === "function") hooks.push(callHook.bind(source.onupdate, vnode))
	}
	function shouldNotUpdate(vnode, old) {
		do {
			if (vnode.attrs != null && typeof vnode.attrs.onbeforeupdate === "function") {
				var force = callHook.call(vnode.attrs.onbeforeupdate, vnode, old)
				if (force !== undefined && !force) break
			}
			if (typeof vnode.tag !== "string" && typeof vnode.state.onbeforeupdate === "function") {
				var force = callHook.call(vnode.state.onbeforeupdate, vnode, old)
				if (force !== undefined && !force) break
			}
			return false
		} while (false); // eslint-disable-line no-constant-condition
		vnode.dom = old.dom
		vnode.domSize = old.domSize
		vnode.instance = old.instance
		// One would think having the actual latest attributes would be ideal,
		// but it doesn't let us properly diff based on our current internal
		// representation. We have to save not only the old DOM info, but also
		// the attributes used to create it, as we diff *that*, not against the
		// DOM directly (with a few exceptions in `setAttr`). And, of course, we
		// need to save the children and text as they are conceptually not
		// unlike special "attributes" internally.
		vnode.attrs = old.attrs
		vnode.children = old.children
		vnode.text = old.text
		return true
	}

	return function(dom, vnodes, redraw) {
		if (!dom) throw new TypeError("Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.")
		var hooks = []
		var active = activeElement()
		var namespace = dom.namespaceURI

		// First time rendering into a node clears it out
		if (dom.vnodes == null) dom.textContent = ""

		vnodes = Vnode.normalizeChildren(Array.isArray(vnodes) ? vnodes : [vnodes])
		var prevRedraw = currentRedraw
		try {
			currentRedraw = typeof redraw === "function" ? redraw : undefined
			updateNodes(dom, dom.vnodes, vnodes, hooks, null, namespace === "http://www.w3.org/1999/xhtml" ? undefined : namespace)
		} finally {
			currentRedraw = prevRedraw
		}
		dom.vnodes = vnodes
		// `document.activeElement` can return null: https://html.spec.whatwg.org/multipage/interaction.html#dom-document-activeelement
		if (active != null && activeElement() !== active && typeof active.focus === "function") active.focus()
		for (var i = 0; i < hooks.length; i++) hooks[i]()
	}
}


/***/ }),

/***/ "./node_modules/mithril/render/trust.js":
/*!**********************************************!*\
  !*** ./node_modules/mithril/render/trust.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Vnode = __webpack_require__(/*! ../render/vnode */ "./node_modules/mithril/render/vnode.js")

module.exports = function(html) {
	if (html == null) html = ""
	return Vnode("<", undefined, undefined, html, undefined, undefined)
}


/***/ }),

/***/ "./node_modules/mithril/render/vnode.js":
/*!**********************************************!*\
  !*** ./node_modules/mithril/render/vnode.js ***!
  \**********************************************/
/***/ ((module) => {

"use strict";


function Vnode(tag, key, attrs, children, text, dom) {
	return {tag: tag, key: key, attrs: attrs, children: children, text: text, dom: dom, domSize: undefined, state: undefined, events: undefined, instance: undefined}
}
Vnode.normalize = function(node) {
	if (Array.isArray(node)) return Vnode("[", undefined, undefined, Vnode.normalizeChildren(node), undefined, undefined)
	if (node == null || typeof node === "boolean") return null
	if (typeof node === "object") return node
	return Vnode("#", undefined, undefined, String(node), undefined, undefined)
}
Vnode.normalizeChildren = function(input) {
	var children = []
	if (input.length) {
		var isKeyed = input[0] != null && input[0].key != null
		// Note: this is a *very* perf-sensitive check.
		// Fun fact: merging the loop like this is somehow faster than splitting
		// it, noticeably so.
		for (var i = 1; i < input.length; i++) {
			if ((input[i] != null && input[i].key != null) !== isKeyed) {
				throw new TypeError("Vnodes must either always have keys or never have keys!")
			}
		}
		for (var i = 0; i < input.length; i++) {
			children[i] = Vnode.normalize(input[i])
		}
	}
	return children
}

module.exports = Vnode


/***/ }),

/***/ "./node_modules/mithril/request.js":
/*!*****************************************!*\
  !*** ./node_modules/mithril/request.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var PromisePolyfill = __webpack_require__(/*! ./promise/promise */ "./node_modules/mithril/promise/promise.js")
var mountRedraw = __webpack_require__(/*! ./mount-redraw */ "./node_modules/mithril/mount-redraw.js")

module.exports = __webpack_require__(/*! ./request/request */ "./node_modules/mithril/request/request.js")(window, PromisePolyfill, mountRedraw.redraw)


/***/ }),

/***/ "./node_modules/mithril/request/request.js":
/*!*************************************************!*\
  !*** ./node_modules/mithril/request/request.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var buildPathname = __webpack_require__(/*! ../pathname/build */ "./node_modules/mithril/pathname/build.js")

module.exports = function($window, Promise, oncompletion) {
	var callbackCount = 0

	function PromiseProxy(executor) {
		return new Promise(executor)
	}

	// In case the global Promise is some userland library's where they rely on
	// `foo instanceof this.constructor`, `this.constructor.resolve(value)`, or
	// similar. Let's *not* break them.
	PromiseProxy.prototype = Promise.prototype
	PromiseProxy.__proto__ = Promise // eslint-disable-line no-proto

	function makeRequest(factory) {
		return function(url, args) {
			if (typeof url !== "string") { args = url; url = url.url }
			else if (args == null) args = {}
			var promise = new Promise(function(resolve, reject) {
				factory(buildPathname(url, args.params), args, function (data) {
					if (typeof args.type === "function") {
						if (Array.isArray(data)) {
							for (var i = 0; i < data.length; i++) {
								data[i] = new args.type(data[i])
							}
						}
						else data = new args.type(data)
					}
					resolve(data)
				}, reject)
			})
			if (args.background === true) return promise
			var count = 0
			function complete() {
				if (--count === 0 && typeof oncompletion === "function") oncompletion()
			}

			return wrap(promise)

			function wrap(promise) {
				var then = promise.then
				// Set the constructor, so engines know to not await or resolve
				// this as a native promise. At the time of writing, this is
				// only necessary for V8, but their behavior is the correct
				// behavior per spec. See this spec issue for more details:
				// https://github.com/tc39/ecma262/issues/1577. Also, see the
				// corresponding comment in `request/tests/test-request.js` for
				// a bit more background on the issue at hand.
				promise.constructor = PromiseProxy
				promise.then = function() {
					count++
					var next = then.apply(promise, arguments)
					next.then(complete, function(e) {
						complete()
						if (count === 0) throw e
					})
					return wrap(next)
				}
				return promise
			}
		}
	}

	function hasHeader(args, name) {
		for (var key in args.headers) {
			if ({}.hasOwnProperty.call(args.headers, key) && name.test(key)) return true
		}
		return false
	}

	return {
		request: makeRequest(function(url, args, resolve, reject) {
			var method = args.method != null ? args.method.toUpperCase() : "GET"
			var body = args.body
			var assumeJSON = (args.serialize == null || args.serialize === JSON.serialize) && !(body instanceof $window.FormData)
			var responseType = args.responseType || (typeof args.extract === "function" ? "" : "json")

			var xhr = new $window.XMLHttpRequest(), aborted = false
			var original = xhr, replacedAbort
			var abort = xhr.abort

			xhr.abort = function() {
				aborted = true
				abort.call(this)
			}

			xhr.open(method, url, args.async !== false, typeof args.user === "string" ? args.user : undefined, typeof args.password === "string" ? args.password : undefined)

			if (assumeJSON && body != null && !hasHeader(args, /^content-type$/i)) {
				xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8")
			}
			if (typeof args.deserialize !== "function" && !hasHeader(args, /^accept$/i)) {
				xhr.setRequestHeader("Accept", "application/json, text/*")
			}
			if (args.withCredentials) xhr.withCredentials = args.withCredentials
			if (args.timeout) xhr.timeout = args.timeout
			xhr.responseType = responseType

			for (var key in args.headers) {
				if ({}.hasOwnProperty.call(args.headers, key)) {
					xhr.setRequestHeader(key, args.headers[key])
				}
			}

			xhr.onreadystatechange = function(ev) {
				// Don't throw errors on xhr.abort().
				if (aborted) return

				if (ev.target.readyState === 4) {
					try {
						var success = (ev.target.status >= 200 && ev.target.status < 300) || ev.target.status === 304 || (/^file:\/\//i).test(url)
						// When the response type isn't "" or "text",
						// `xhr.responseText` is the wrong thing to use.
						// Browsers do the right thing and throw here, and we
						// should honor that and do the right thing by
						// preferring `xhr.response` where possible/practical.
						var response = ev.target.response, message

						if (responseType === "json") {
							// For IE and Edge, which don't implement
							// `responseType: "json"`.
							if (!ev.target.responseType && typeof args.extract !== "function") response = JSON.parse(ev.target.responseText)
						} else if (!responseType || responseType === "text") {
							// Only use this default if it's text. If a parsed
							// document is needed on old IE and friends (all
							// unsupported), the user should use a custom
							// `config` instead. They're already using this at
							// their own risk.
							if (response == null) response = ev.target.responseText
						}

						if (typeof args.extract === "function") {
							response = args.extract(ev.target, args)
							success = true
						} else if (typeof args.deserialize === "function") {
							response = args.deserialize(response)
						}
						if (success) resolve(response)
						else {
							try { message = ev.target.responseText }
							catch (e) { message = response }
							var error = new Error(message)
							error.code = ev.target.status
							error.response = response
							reject(error)
						}
					}
					catch (e) {
						reject(e)
					}
				}
			}

			if (typeof args.config === "function") {
				xhr = args.config(xhr, args, url) || xhr

				// Propagate the `abort` to any replacement XHR as well.
				if (xhr !== original) {
					replacedAbort = xhr.abort
					xhr.abort = function() {
						aborted = true
						replacedAbort.call(this)
					}
				}
			}

			if (body == null) xhr.send()
			else if (typeof args.serialize === "function") xhr.send(args.serialize(body))
			else if (body instanceof $window.FormData) xhr.send(body)
			else xhr.send(JSON.stringify(body))
		}),
		jsonp: makeRequest(function(url, args, resolve, reject) {
			var callbackName = args.callbackName || "_mithril_" + Math.round(Math.random() * 1e16) + "_" + callbackCount++
			var script = $window.document.createElement("script")
			$window[callbackName] = function(data) {
				delete $window[callbackName]
				script.parentNode.removeChild(script)
				resolve(data)
			}
			script.onerror = function() {
				delete $window[callbackName]
				script.parentNode.removeChild(script)
				reject(new Error("JSONP request failed"))
			}
			script.src = url + (url.indexOf("?") < 0 ? "?" : "&") +
				encodeURIComponent(args.callbackKey || "callback") + "=" +
				encodeURIComponent(callbackName)
			$window.document.documentElement.appendChild(script)
		}),
	}
}


/***/ }),

/***/ "./node_modules/mithril/route.js":
/*!***************************************!*\
  !*** ./node_modules/mithril/route.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var mountRedraw = __webpack_require__(/*! ./mount-redraw */ "./node_modules/mithril/mount-redraw.js")

module.exports = __webpack_require__(/*! ./api/router */ "./node_modules/mithril/api/router.js")(window, mountRedraw)


/***/ }),

/***/ "./src/AffineTrans.ts":
/*!****************************!*\
  !*** ./src/AffineTrans.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AffineTrans = void 0;
var AffineTrans = /** @class */ (function () {
    function AffineTrans(zoom, translate) {
        this.zoom = zoom;
        this.translate = translate;
    }
    AffineTrans.prototype.svgExport = function () {
        return "matrix(" + this.zoom + " 0 0 " + this.zoom + " " + this.translate[0] + " " + this.translate[1] + ")";
    };
    AffineTrans.prototype.apply = function (v) {
        return [v[0] * this.zoom + this.translate[0], v[1] * this.zoom + this.translate[1]];
    };
    AffineTrans.prototype.apply_inv = function (w) {
        return [(w[0] - this.translate[0]) / this.zoom, (w[1] - this.translate[1]) / this.zoom];
    };
    AffineTrans.prototype.zoomby = function (factor) {
        this.zoom *= factor;
    };
    AffineTrans.prototype.zoomFrom = function (q, factor) {
        var newzoom = this.zoom * factor;
        this.translate[0] = (this.zoom - newzoom) * q[0] + this.translate[0];
        this.translate[1] = (this.zoom - newzoom) * q[1] + this.translate[1];
        this.zoom = newzoom;
    };
    return AffineTrans;
}());
exports.AffineTrans = AffineTrans;


/***/ }),

/***/ "./src/ArrowUtils.ts":
/*!***************************!*\
  !*** ./src/ArrowUtils.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.midpoint = exports.curvePoints = exports.svgPath = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
var vectors_1 = __webpack_require__(/*! @thi.ng/vectors */ "./node_modules/@thi.ng/vectors/index.js");
var WIREOFFSETCONSTANT = 60;
/**
 * This stringifies our representation of SVG paths.
 * This should probably be factored out of this file, into `SVGUtils.ts` file
 * or something.
 */
function svgPath(segs) {
    return segs.map(function (seg) {
        var pts = seg[1].map(function (p) { return tslib_1.__spreadArray([], tslib_1.__read(p)).join(","); }).join(" ");
        return seg[0] + " " + pts;
    }).join(" ");
}
exports.svgPath = svgPath;
/**
 * This computes the SVG spec for the points of the spline, so that
 * when we have multiple wires going between two attachments, they can curve away from each other.
 */
function curvePoints(p1, p2, offset) {
    offset = WIREOFFSETCONSTANT * offset;
    var c = vectors_1.mulN2([], vectors_1.add2([], p1, p2), 1 / 2);
    var c1 = vectors_1.mulN2([], vectors_1.add2([], p1, c), 1 / 2);
    var c2 = vectors_1.mulN2([], vectors_1.add2([], c, p2), 1 / 2);
    var dp = vectors_1.sub2([], p2, p1);
    var dphat = vectors_1.mulN2([], dp, 1 / vectors_1.dist2(dp, vectors_1.ZERO2));
    var dqhat = vectors_1.rotate([], dphat, Math.PI / 2);
    var c1up = vectors_1.add2([], c1, vectors_1.mulN2([], dqhat, offset));
    var c2up = vectors_1.add2([], c2, vectors_1.mulN2([], dqhat, offset));
    var cup = vectors_1.add2([], c, vectors_1.mulN2([], dqhat, offset));
    return [
        ["M", [p1]],
        ["C", [c1up, c1up, cup]],
        ["C", [c2up, c2up, p2]]
    ];
}
exports.curvePoints = curvePoints;
function midpoint(p1, p2, offset) {
    offset = WIREOFFSETCONSTANT * offset;
    var c = vectors_1.mulN2([], vectors_1.add2([], p1, p2), 1 / 2);
    var dp = vectors_1.sub2([], p2, p1);
    var dphat = vectors_1.mulN2([], dp, 1 / vectors_1.dist2(dp, vectors_1.ZERO2));
    var dqhat = vectors_1.rotate([], dphat, Math.PI / 2);
    var cup = vectors_1.add2([], c, vectors_1.mulN2([], dqhat, offset));
    return cup;
}
exports.midpoint = midpoint;


/***/ }),

/***/ "./src/AttributeEditor.ts":
/*!********************************!*\
  !*** ./src/AttributeEditor.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AttributeEditor = exports.AttributeWidget = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
var mithril_1 = tslib_1.__importDefault(__webpack_require__(/*! mithril */ "./node_modules/mithril/index.js"));
var transducers_1 = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/index.js");
exports.AttributeWidget = {
    view: function (_a) {
        var _b = _a.attrs, state = _b.state, entity = _b.entity, attribute_type = _b.attribute_type, attribute = _b.attribute;
        var obj = state.ls.sg.getEntity(entity);
        var curval = obj.weights[attribute];
        var oninput = function (s) {
            obj.weights[attribute] = s.target.value;
            state.save();
        };
        var input_elt = mithril_1.default("input", {
            "type": "text",
            value: curval,
            oninput: oninput
        });
        return mithril_1.default("label", attribute + ": ", input_elt);
    }
};
exports.AttributeEditor = {
    view: function (_a) {
        var state = _a.attrs.state;
        if (state.dialogue.selected != null) {
            return mithril_1.default.apply(void 0, tslib_1.__spreadArray(["div"], tslib_1.__read(transducers_1.map(function (_a) {
                var _b = tslib_1.__read(_a, 2), attrtype = _b[0], a = _b[1];
                return mithril_1.default(exports.AttributeWidget, {
                    state: state,
                    entity: state.dialogue.selected,
                    attribute_type: attrtype,
                    attribute: a,
                });
            }, state.ls.sg.weightTypes(state.dialogue.selected)))));
        }
        else {
            return mithril_1.default("div");
        }
    }
};


/***/ }),

/***/ "./src/BoxNode.ts":
/*!************************!*\
  !*** ./src/BoxNode.ts ***!
  \************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BoxNode = exports.BoxHandle = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
var EditorState_1 = __webpack_require__(/*! ./EditorState */ "./src/EditorState.ts");
var equiv_1 = __webpack_require__(/*! @thi.ng/equiv */ "./node_modules/@thi.ng/equiv/index.js");
var LocatedSemagram_1 = __webpack_require__(/*! ./LocatedSemagram */ "./src/LocatedSemagram.ts");
var Semagram_1 = __webpack_require__(/*! ./Semagram */ "./src/Semagram.ts");
var CS = tslib_1.__importStar(__webpack_require__(/*! ./ColorScheme */ "./src/ColorScheme.ts"));
var mithril_1 = tslib_1.__importDefault(__webpack_require__(/*! mithril */ "./node_modules/mithril/index.js"));
var katex_1 = tslib_1.__importDefault(__webpack_require__(/*! katex */ "./node_modules/katex/dist/katex.js"));
/**
 * Component giving control over a box.
 */
exports.BoxHandle = {
    view: function (_a) {
        var _b = _a.attrs, state = _b.state, box_idx = _b.box_idx;
        var a = Semagram_1.box_entity(box_idx);
        var loc = state.ls.getLoc(a);
        return mithril_1.default("circle", {
            transform: "translate(" + loc[0] + " " + loc[1] + ")",
            r: LocatedSemagram_1.BOXRADIUS,
            "fill-opacity": "0",
            "stroke-opacity": "0",
            "data-a": JSON.stringify(a),
            onmouseover: state.cursor.handlemouseenterattachment,
            onmouseout: state.cursor.handlemouseoutattachment,
            onmousedown: state.cursor.handlemousedownbox,
            onmouseup: state.cursor.handlemouseupbox,
        });
    }
};
var KaTeXNode = {
    view: function (_a) {
        var s = _a.attrs.s;
        return mithril_1.default("foreignObject", {
            x: "-40px",
            y: "-40px",
            width: "80px",
            height: "80px",
        }, mithril_1.default("div", {
            xmlns: "http://www.w3.org/1999/xhtml",
            style: "display:flex;\n                    justify-content: center;\n                    align-items: center;\n                    height:100%;\n                    width:100%"
        }, mithril_1.default.trust(katex_1.default.renderToString(s, {
            output: "mathml",
            throwOnError: false
        }))));
    }
};
/**
 * Component displaying a box.
 * Note: Our philosophy is that rather than passing in just the
 * information relevant to the box, we pass in the entire EditorState
 * and the index of the box that we want to draw.
 * This seems like it could be overkill/violation of "separation of concerns".
 *
 * Maybe at some point we will decide that this is a bad philosophy, and we should
 * factor out all of the stuff actually relevant to drawing a single box, and then
 * have only that be the attributes passed into the BoxNode.
 *
 * TODO: get KaTeX working. This is blocked on first having a way of editting box attributes.
 *
 * Note: this is the parent of all of its ports.
 */
exports.BoxNode = {
    view: function (_a) {
        var _b = _a.attrs, state = _b.state, box_idx = _b.box_idx, isExport = _b.isExport;
        var box = state.ls.sg.boxes.get(box_idx);
        var boxty = state.ls.sg.schema.box_types[box.ty];
        var a = Semagram_1.box_entity(box_idx);
        var loc = state.ls.getLoc(a);
        var attrs = tslib_1.__assign({ fill: EditorState_1.colorAttachment(state, a), stroke: CS.accent, transform: "translate(" + loc[0] + " " + loc[1] + ")" }, state.ls.sg.style_fns[box.ty](box.weights));
        var highlight = (!isExport) ? mithril_1.default("g", {
            transform: "scale(1.1)",
            fill: equiv_1.equiv(state.dialogue.selected, Semagram_1.box_entity(box_idx)) ? "yellow" : "none",
            stroke: "none",
        }, mithril_1.default.trust(boxty.shape)) : mithril_1.default("g");
        var label = boxty.label != undefined && typeof (box.weights[boxty.label]) == "string" ?
            mithril_1.default(KaTeXNode, { s: box.weights[boxty.label] }) :
            mithril_1.default("g");
        return mithril_1.default("g", attrs, highlight, mithril_1.default.trust(boxty.shape), label);
    }
};


/***/ }),

/***/ "./src/ColorScheme.ts":
/*!****************************!*\
  !*** ./src/ColorScheme.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/** TODO: This should be runtime-configurable */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.accent = exports.base = exports.over = exports.target = exports.source = void 0;
exports.source = 'lightblue';
exports.target = 'pink';
exports.over = 'lightgrey';
exports.base = 'white';
exports.accent = 'black';


/***/ }),

/***/ "./src/Commands.ts":
/*!*************************!*\
  !*** ./src/Commands.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.COMMAND_DOCS = exports.DEFAULT_KEYBINDINGS = exports.Command = void 0;
var Command;
(function (Command) {
    Command[Command["SetSrc"] = 0] = "SetSrc";
    Command[Command["SetTgt"] = 1] = "SetTgt";
    Command[Command["AddBox"] = 2] = "AddBox";
    Command[Command["AddPort"] = 3] = "AddPort";
    Command[Command["AddWire"] = 4] = "AddWire";
    Command[Command["RemHovered"] = 5] = "RemHovered";
    Command[Command["SetHom"] = 6] = "SetHom";
    Command[Command["Export"] = 7] = "Export";
    Command[Command["Debug"] = 8] = "Debug";
    Command[Command["Deselect"] = 9] = "Deselect";
    Command[Command["Help"] = 10] = "Help";
    Command[Command["Roundtrip"] = 11] = "Roundtrip";
    Command[Command["ZoomIn"] = 12] = "ZoomIn";
    Command[Command["ZoomOut"] = 13] = "ZoomOut";
})(Command = exports.Command || (exports.Command = {}));
exports.DEFAULT_KEYBINDINGS = new Map([
    ["s", Command.SetSrc],
    ["t", Command.SetTgt],
    ["b", Command.AddBox],
    ["a", Command.AddBox],
    ["p", Command.AddPort],
    ["w", Command.AddWire],
    ["d", Command.RemHovered],
    ["h", Command.SetHom],
    ["e", Command.Export],
    ["D", Command.Debug],
    ["Escape", Command.Deselect],
    ["?", Command.Help],
    ["R", Command.Roundtrip],
    ["+", Command.ZoomIn],
    ["-", Command.ZoomOut]
]);
exports.COMMAND_DOCS = new Map([
    [Command.SetSrc, {
            short: "set src",
            long: "sets the current source to whatever the cursor is hovering over"
        }],
    [Command.SetTgt, {
            short: "set tgt",
            long: "sets the current target to whatever the cursor is hovering over"
        }],
    [Command.AddBox, {
            short: "add box",
            long: "adds a box at the location of the cursor"
        }],
    [Command.AddPort, {
            short: "add port",
            long: "adds a port to the box that is hovered over"
        }],
    [Command.AddWire, {
            short: "add wire",
            long: "adds a wire between the current selected source and the current selected target"
        }],
    [Command.RemHovered, {
            short: "delete",
            long: "removes whatever the cursor is hovering over"
        }],
    [Command.SetHom, {
            short: "set hom",
            long: "connects the source and target with a hom relation"
        }],
    [Command.Export, {
            short: "export",
            long: "exports the current picture as an svg"
        }],
    [Command.Debug, {
            short: "debug",
            long: "prints internal state to the console"
        }],
    [Command.Deselect, {
            short: "deselect",
            long: "removes the selection of current source/target"
        }],
    [Command.Help, {
            short: "help",
            long: "toggles the help bar"
        }],
    [Command.Roundtrip, {
            short: "roundtrip",
            long: "exports and imports the current data (testing loading and saving)"
        }],
    [Command.ZoomIn, {
            short: "zoom in",
            long: "zooms in"
        }],
    [Command.ZoomOut, {
            short: "zoom out",
            long: "zooms out"
        }]
]);


/***/ }),

/***/ "./src/Constants.ts":
/*!**************************!*\
  !*** ./src/Constants.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SVG_HEIGHT = void 0;
exports.SVG_HEIGHT = 600;


/***/ }),

/***/ "./src/Editor.ts":
/*!***********************!*\
  !*** ./src/Editor.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Editor = exports.EditorSVG = exports.globalStyle = exports.SvgDefs = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
var Constants_1 = __webpack_require__(/*! ./Constants */ "./src/Constants.ts");
var mithril_1 = tslib_1.__importDefault(__webpack_require__(/*! mithril */ "./node_modules/mithril/index.js"));
var EditorPane_1 = __webpack_require__(/*! ./EditorPane */ "./src/EditorPane.ts");
var EditorUI_1 = __webpack_require__(/*! ./EditorUI */ "./src/EditorUI.ts");
var AttributeEditor_1 = __webpack_require__(/*! ./AttributeEditor */ "./src/AttributeEditor.ts");
/**
 * Markers for the middle of wires.
 * TODO: Markers are kind of restrictive... Maybe just put the shape in the middle of the wire manually?
 */
function makeMarker(id, color) {
    return mithril_1.default("marker", {
        id: id,
        viewBox: "0 0 10 10",
        refX: "5",
        refY: "5",
        markerWidth: "6",
        markerHeight: "6",
        orient: "auto",
    }, mithril_1.default("path", {
        d: "M 0,0 L 10,5 L 0, 10 Z",
        style: "stroke-width:0.5px",
        fill: color,
        stroke: "black",
    }));
}
var resistorMarker = mithril_1.default("marker", {
    id: "resistor",
    viewBox: "0 0 82.5 30",
    refX: "45",
    refY: "15",
    markerWidth: "30",
    markerHeight: "10",
    orient: "auto",
}, mithril_1.default.trust("<g transform=\"translate(0 15)\"><rect width=\"90\" height=\"30\" x=\"0\" y=\"-15\" style=\"fill:black;stroke:none\"/><polyline points=\"0.0,0.0 15.0,0.0 22.5,-15.0 30.0,15.0 37.5,-15.0 45.0,15.0 52.5,-15.0 60.0,15.0 67.5,0.0 82.5,0.0\" style=\"stroke-width:2px;stroke:white;fill:none\"></polyline></g>"));
var capacitorLineStyle = "stroke-width:3px;stroke:white;fill:none";
var capacitorMarker = mithril_1.default("marker", {
    id: "capacitor",
    viewBox: "0 0 60 60",
    refX: "30",
    refY: "30",
    markerWidth: "20",
    markerHeight: "20",
    orient: "auto"
}, mithril_1.default("g", { "transform": "translate(30 30)" }, mithril_1.default("rect", { width: "60", height: "60", x: "-30", y: "-30", style: "stroke:none;fill:black" }), mithril_1.default("polyline", { points: "-30,0 -10,0", style: capacitorLineStyle }), mithril_1.default("polyline", { points: "30,0 10,0", style: capacitorLineStyle }), mithril_1.default("polyline", { points: "-10,30 -10,-30", style: capacitorLineStyle }), mithril_1.default("polyline", { points: "10,30 10,-30", style: capacitorLineStyle })));
var grid = function (T, gridid) {
    var k = T.zoom * 60;
    return mithril_1.default("pattern", {
        id: gridid,
        width: k,
        height: k,
        x: T.translate[0],
        y: T.translate[1],
        patternUnits: "userSpaceOnUse",
    }, mithril_1.default("path", {
        d: "M " + k + ",0 L 0,0 L 0," + k,
        fill: "none",
        stroke: "gray",
        "stroke-width": "1"
    }));
};
exports.SvgDefs = {
    view: function (_a) {
        var state = _a.attrs.state;
        return mithril_1.default("defs", grid(state.cursor.affineTrans, state.gridid), resistorMarker, capacitorMarker, makeMarker("arrow-hovered", "lightgrey"), makeMarker("arrow", "white"), makeMarker("arrow-selected", "yellow"), makeMarker("arrow-solid", "black"));
    }
};
exports.globalStyle = "\n.katex { font-size: 1.5em; }\n";
/**
 * This is the root component for all the UI.
 * It has children of
 * - All boxes/wires/ports
 * - the modal
 */
exports.EditorSVG = {
    oncreate: function (_a) {
        var dom = _a.dom, state = _a.attrs.state;
        state.cursor.svgelt = dom;
    },
    view: function (_a) {
        var state = _a.attrs.state;
        return mithril_1.default("svg", {
            width: "95%",
            height: Constants_1.SVG_HEIGHT + "px",
            onmousemove: state.cursor.handlemousemove,
            onkeydown: state.handlekeydown,
            tabindex: "0",
            style: { "border-style": "solid", "stroke-width": "2px" },
        }, mithril_1.default("style", mithril_1.default.trust(exports.globalStyle)), mithril_1.default(exports.SvgDefs, { state: state }), mithril_1.default("rect", { width: "100%", height: "100%", fill: "url(#" + state.gridid + ")" }), mithril_1.default("g", {
            transform: state.cursor.affineTrans.svgExport()
        }, mithril_1.default(EditorPane_1.EditorPane, { state: state, isExport: false })), mithril_1.default(EditorUI_1.PanHandle, { state: state }), mithril_1.default("g", {
            transform: state.cursor.affineTrans.svgExport()
        }, mithril_1.default(EditorUI_1.EditorHandles, { state: state })), mithril_1.default(EditorUI_1.EditorUI, { state: state }));
    }
};
var ExportedIndicator = {
    view: function (_a) {
        var state = _a.attrs.state;
        return mithril_1.default("p", {}, state.exported ? "exported: ✓" : "exported: ❌");
    }
};
exports.Editor = {
    view: function (_a) {
        var state = _a.attrs.state;
        return mithril_1.default("div", mithril_1.default(exports.EditorSVG, { state: state }), mithril_1.default(AttributeEditor_1.AttributeEditor, { state: state }));
    }
};


/***/ }),

/***/ "./src/EditorPane.ts":
/*!***************************!*\
  !*** ./src/EditorPane.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EditorPane = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
var transducers_1 = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/index.js");
var WireNode_1 = __webpack_require__(/*! ./WireNode */ "./src/WireNode.ts");
var BoxNode_1 = __webpack_require__(/*! ./BoxNode */ "./src/BoxNode.ts");
var PortNode_1 = __webpack_require__(/*! ./PortNode */ "./src/PortNode.ts");
var mithril_1 = tslib_1.__importDefault(__webpack_require__(/*! mithril */ "./node_modules/mithril/index.js"));
var Homs_1 = __webpack_require__(/*! ./Homs */ "./src/Homs.ts");
exports.EditorPane = {
    view: function (_a) {
        var _b = _a.attrs, state = _b.state, isExport = _b.isExport;
        /*
         * Two components (in order)
         * - Wires
         * - Boxes (boxes includes ports)
         */
        var boxnodes = transducers_1.map(function (box_idx) {
            return mithril_1.default(BoxNode_1.BoxNode, { state: state, box_idx: box_idx, isExport: isExport });
        }, state.boxes());
        var portnodes = transducers_1.map(function (_a) {
            var box_idx = _a.box_idx, port_idx = _a.port_idx;
            return mithril_1.default(PortNode_1.PortNode, { state: state, box_idx: box_idx, port_idx: port_idx, isExport: isExport });
        }, state.ports());
        var wirenodes = transducers_1.map(function (wire_idx) {
            return mithril_1.default(WireNode_1.WireNode, { state: state, wire_idx: wire_idx, isExport: isExport });
        }, state.wires());
        var homnodes = transducers_1.map(function (_a) {
            var _b = tslib_1.__read(_a, 2), src = _b[0], tgt = _b[1];
            return mithril_1.default(Homs_1.HomNode, { state: state, src: src, tgt: tgt, isExport: isExport });
        }, state.homs());
        return mithril_1.default.apply(void 0, tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray(["g"], tslib_1.__read(homnodes)), tslib_1.__read(wirenodes)), tslib_1.__read(boxnodes)), tslib_1.__read(portnodes)));
    }
};


/***/ }),

/***/ "./src/EditorState.ts":
/*!****************************!*\
  !*** ./src/EditorState.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.colorAttachment = exports.EditorState = exports.DialogueState = exports.CursorState = exports.ModalState = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
var equiv_1 = __webpack_require__(/*! @thi.ng/equiv */ "./node_modules/@thi.ng/equiv/index.js");
var vectors_1 = __webpack_require__(/*! @thi.ng/vectors */ "./node_modules/@thi.ng/vectors/index.js");
var LocatedSemagram_1 = __webpack_require__(/*! ./LocatedSemagram */ "./src/LocatedSemagram.ts");
var Semagram_1 = __webpack_require__(/*! ./Semagram */ "./src/Semagram.ts");
var Schema_1 = __webpack_require__(/*! ./Schema */ "./src/Schema.ts");
var transducers_1 = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/index.js");
var Commands_1 = __webpack_require__(/*! ./Commands */ "./src/Commands.ts");
var CS = tslib_1.__importStar(__webpack_require__(/*! ./ColorScheme */ "./src/ColorScheme.ts"));
var mithril_1 = tslib_1.__importDefault(__webpack_require__(/*! mithril */ "./node_modules/mithril/index.js"));
var AffineTrans_1 = __webpack_require__(/*! ./AffineTrans */ "./src/AffineTrans.ts");
var EditorPane_1 = __webpack_require__(/*! ./EditorPane */ "./src/EditorPane.ts");
var Editor_1 = __webpack_require__(/*! ./Editor */ "./src/Editor.ts");
var Constants_1 = __webpack_require__(/*! ./Constants */ "./src/Constants.ts");
/**
 * TODO: make these runtime-configurable.
 */
var GRIDSIZE = 60;
var SNAPSIZE = 15;
function snapToGrid(p) {
    var nearest = vectors_1.round2([], p, [GRIDSIZE, GRIDSIZE]);
    if (vectors_1.dist2(p, nearest) < SNAPSIZE) {
        return nearest;
    }
    else {
        return p;
    }
}
/** What types of port can go on this box? */
function compatiblePortTypes(schema, boxty) {
    return Object.entries(schema.port_types)
        .filter(function (_b) {
        var _c = tslib_1.__read(_b, 2), _ = _c[0], portprops = _c[1];
        return portprops.box == boxty;
    })
        .map(function (_b) {
        var _c = tslib_1.__read(_b, 2), portty = _c[0], _ = _c[1];
        return portty;
    });
}
/** What types of wire can go between these two attachments? */
function compatibleWireTypes(schema, srcty, tgtty) {
    return Object.entries(schema.wire_types)
        .filter(function (_b) {
        var _c = tslib_1.__read(_b, 2), _ = _c[0], wireprops = _c[1];
        return equiv_1.equiv(wireprops.src, srcty) && equiv_1.equiv(wireprops.tgt, tgtty);
    })
        .map(function (_b) {
        var _c = tslib_1.__read(_b, 2), wirety = _c[0], _ = _c[1];
        return wirety;
    });
}
function compatibleHomTypes(schema, srcty, tgtty) {
    switch (srcty[0]) {
        case Schema_1.EntityType.Box: {
            return schema.box_types[srcty[1]].homs
                .filter(function (hom) { return hom.codom == tgtty[1]; })
                .map(function (hom) { return hom.name; });
        }
        case Schema_1.EntityType.Port: {
            return schema.port_types[srcty[1]].homs
                .filter(function (hom) { return hom.codom == tgtty[1]; })
                .map(function (hom) { return hom.name; });
        }
    }
}
/**
 * This configures which default color is used when adding new ports/wires.
 * Note, I believe that this is currently unused, and leftover from an earlier version.
 * TODO: get colors working again, using colorAttribute.
 * TODO: get sliders working again
 */
var InputConfig = /** @class */ (function () {
    function InputConfig() {
        this.color = undefined;
        this.minval = 0;
        this.maxval = 100;
    }
    return InputConfig;
}());
/**
 * Sigh... I really wish there were a better way of doing sum types in Typescript.
 * Currently, this represents the state of the modal that selects which type of
 * box/port/wire to add.
 * TODO: Modal should be refactored to just be a generic way of selecting from
 * a list of options.
 */
var ModalState;
(function (ModalState) {
    ModalState[ModalState["Normal"] = 0] = "Normal";
    ModalState[ModalState["Select"] = 1] = "Select";
})(ModalState = exports.ModalState || (exports.ModalState = {}));
var DragStates;
(function (DragStates) {
    DragStates[DragStates["Box"] = 0] = "Box";
    DragStates[DragStates["Background"] = 1] = "Background";
    DragStates[DragStates["Empty"] = 2] = "Empty";
})(DragStates || (DragStates = {}));
/**
 * The state of the cursor, and how it relates to the Semagram.
 * Things we want to keep track of
 * - The current position of the cursor (`cursor`)
 * - Whether the cursor is dragging something currently, and if so what it is dragging (`dragState`)
 * - What the cursor is hovering over (`hoveredAttachment`)
 * - The SVG element that the semagrams UI is rendered in. This is used to convert
 * between the coordinates that we get from events, and coordinates that we need to
 * put into things in the SVG. All stored coordinates are relative to the SVG, computed using eventCoordsSVG which uses that SVG element. (`svgelt`)
 *
 * CursorState has several methods which are placed as callbacks on various UI nodes to allow us
 * to keep track of all of this information.
 *
 * CursorState also gets passed in several callbacks, which it calls when appropriate
 * to interact with the rest of the system (`setBoxLoc`, `getBoxLoc`, `mousedown`, `mouseup`)
 *
 * Note: if anyone has ideas for refactoring this to be less stateful, I'd love to hear them.
 */
var CursorState = /** @class */ (function () {
    function CursorState(setBoxLoc, getBoxLoc, mousedown, mouseup) {
        var _this = this;
        this.setBoxLoc = setBoxLoc;
        this.getBoxLoc = getBoxLoc;
        this.mousedown = mousedown;
        this.mouseup = mouseup;
        this.handlemousemove = function (e) {
            var p = _this.eventCoordsSVG(e);
            _this.cursor = p;
            switch (_this.dragState.ty) {
                case (DragStates.Box): {
                    var _b = _this.dragState, box_idx = _b.box_idx, offset = _b.offset;
                    _this.setBoxLoc(box_idx, snapToGrid(vectors_1.add2([], p, offset)));
                    break;
                }
                case (DragStates.Background): {
                    var offset = _this.dragState.offset;
                    _this.affineTrans.translate = _this.affineTrans.apply(vectors_1.sub2([], p, offset));
                    break;
                }
                case (DragStates.Empty): {
                    e.redraw = false;
                    break;
                }
            }
        };
        this.handlemouseenterattachment = function (e) {
            _this.hoveredEntity = eventDataProperty(e, "data-a");
        };
        this.handlemouseoutattachment = function () {
            _this.hoveredEntity = null;
        };
        this.handlemouseenterwire = function (e) {
            _this.hoveredEntity = Semagram_1.wire_entity(eventDataProperty(e, "data-w"));
        };
        this.handlemouseoutwire = function () {
            _this.hoveredEntity = null;
        };
        this.handlemousedownbox = function (e) {
            var a = eventDataProperty(e, "data-a");
            var box_idx = a.box_idx;
            var loc = _this.getBoxLoc(box_idx);
            var offset = vectors_1.sub2([], loc, _this.eventCoordsSVG(e));
            _this.dragState = { ty: DragStates.Box, box_idx: box_idx, offset: offset };
            _this.mousedown(a);
        };
        this.handlemouseupbox = function (e) {
            var a = eventDataProperty(e, "data-a");
            _this.dragState = { ty: DragStates.Empty };
            _this.mouseup(a);
        };
        this.handlemousedownport = function (e) {
            _this.mousedown(eventDataProperty(e, "data-a"));
        };
        this.handlemouseupport = function (e) {
            _this.mouseup(eventDataProperty(e, "data-a"));
        };
        this.handlemousedownwire = function (e) {
            _this.mousedown(Semagram_1.wire_entity(eventDataProperty(e, "data-w")));
        };
        this.handlemouseupwire = function (e) {
            _this.mouseup(Semagram_1.wire_entity(eventDataProperty(e, "data-w")));
        };
        this.handlemousedownpan = function (e) {
            _this.dragState = { ty: DragStates.Background, offset: _this.eventCoordsSVG(e) };
        };
        this.handlemouseuppan = function (_) {
            _this.dragState = { ty: DragStates.Empty };
        };
        this.cursor = [0, 0];
        this.dragState = { ty: DragStates.Empty };
        this.hoveredEntity = null;
        this.svgelt = null;
        this.affineTrans = new AffineTrans_1.AffineTrans(1.5, [0, 0]);
    }
    CursorState.prototype.eventCoordsSVG = function (e) {
        if (this.svgelt != null) {
            var pt = this.svgelt.createSVGPoint();
            pt.x = e.clientX;
            pt.y = e.clientY;
            var svgP = pt.matrixTransform(this.svgelt.getScreenCTM().inverse());
            return this.affineTrans.apply_inv([svgP.x, svgP.y]);
        }
        else {
            return [0, 0];
        }
    };
    return CursorState;
}());
exports.CursorState = CursorState;
/**
 * This contains all of the "logical" state of the editor.
 */
var DialogueState = /** @class */ (function () {
    function DialogueState() {
        this.src = null;
        this.tgt = null;
        this.modal = { ty: ModalState.Normal };
        this.selected = null;
        this.inputconfig = new InputConfig();
        this.helpwindow = false;
    }
    return DialogueState;
}());
exports.DialogueState = DialogueState;
/**
 * This contains all of the state of the editor.
 * It also has the main entrypoint to interacting with the editor,
 * which is through keypresses, which are handled in "handlekeydown".
 * These keypresses do different things depending on the current values of
 * `cursor` and `dialogue`. For instance, if you press 's', then the
 * current `hoveredAttachment` in `cursor` becomes the `src` in `dialogue`.
 *
 * When you press 'w', the current `src` and `tgt` in `dialogue` are used
 * as the source and target of the newly created wire, which is added to `ls`,
 * the LocatedSemagram that is currently being edited.
 *
 * TODO: Maybe `DialogueState` should be renamed to `LogicalState`?
 *
 * Finally, the editor has a function `sendToJl`, which it calls when
 * you save the diagram. This function should send the diagram down a
 * websocket to Julia, and the function should be passed in when creating
 * an EditorState.
 */
var EditorState = /** @class */ (function () {
    function EditorState(sema, sendToJl, exportToJl) {
        var _this = this;
        /**
         * This is the keypress handler.
         */
        this.handlekeydown = function (e) {
            _this.exported = false;
            if (_this.dialogue.modal.ty == ModalState.Normal) {
                var cmd = Commands_1.DEFAULT_KEYBINDINGS.get(e.key);
                if (cmd != undefined) {
                    switch (cmd) {
                        case Commands_1.Command.SetSrc: {
                            _this.setSrc();
                            break;
                        }
                        case Commands_1.Command.SetTgt: {
                            _this.setTgt();
                            break;
                        }
                        case Commands_1.Command.AddBox: {
                            _this.addBox();
                            break;
                        }
                        case Commands_1.Command.AddPort: {
                            _this.addPort();
                            break;
                        }
                        case Commands_1.Command.AddWire: {
                            _this.addWire();
                            break;
                        }
                        case Commands_1.Command.RemHovered: {
                            _this.remHovered();
                            break;
                        }
                        case Commands_1.Command.SetHom: {
                            _this.setHom();
                            break;
                        }
                        case Commands_1.Command.Export: {
                            _this.runExport();
                            break;
                        }
                        case Commands_1.Command.Debug: {
                            _this.debug();
                            break;
                        }
                        case Commands_1.Command.Deselect: {
                            _this.dialogue.src = null;
                            _this.dialogue.tgt = null;
                            _this.dialogue.selected = null;
                            break;
                        }
                        case Commands_1.Command.Help: {
                            _this.dialogue.helpwindow = !_this.dialogue.helpwindow;
                            break;
                        }
                        case Commands_1.Command.Roundtrip: {
                            _this.roundtrip();
                            break;
                        }
                        case Commands_1.Command.ZoomIn: {
                            _this.cursor.affineTrans.zoomFrom(_this.cursor.cursor, 1.1);
                            break;
                        }
                        case Commands_1.Command.ZoomOut: {
                            _this.cursor.affineTrans.zoomFrom(_this.cursor.cursor, 1 / 1.1);
                            break;
                        }
                    }
                }
            }
            else {
                _this.modalInput(e.key);
            }
            _this.save();
        };
        this.ls = sema;
        this.sendToJl = sendToJl;
        this.exportToJl = exportToJl;
        this.exported = false;
        this.gridid = Math.random().toString(16).substr(2, 8);
        this.reset();
    }
    EditorState.prototype.exportSVG = function () {
        var svg = document.createElement("div");
        var pane = mithril_1.default("svg", { width: "95%", height: Constants_1.SVG_HEIGHT + "px" }, mithril_1.default("style", mithril_1.default.trust(Editor_1.globalStyle)), mithril_1.default(Editor_1.SvgDefs, { state: this }), mithril_1.default("g", {
            transform: this.cursor.affineTrans.svgExport()
        }, mithril_1.default(EditorPane_1.EditorPane, { state: this, isExport: true })));
        mithril_1.default.render(svg, pane);
        var serializer = new XMLSerializer();
        var source = serializer.serializeToString(svg.children[0]);
        return source;
    };
    EditorState.prototype.runExport = function () {
        this.exportToJl(this.exportSVG());
        this.exported = true;
    };
    EditorState.prototype.reset = function () {
        var _this = this;
        var svgelt = null;
        if (this.cursor != undefined) {
            svgelt = this.cursor.svgelt;
        }
        this.dialogue = new DialogueState();
        this.cursor = new CursorState(function (box_idx, loc) {
            _this.exported = false;
            return _this.ls.setBoxLoc(box_idx, loc);
        }, function (box_idx) {
            _this.exported = false;
            return _this.ls.getBoxLoc(box_idx);
        }, function (a) { _this.dialogue.selected = a; }, /* This should set selected... */ function (_a) { });
        this.cursor.svgelt = svgelt;
    };
    EditorState.prototype.setZoom = function (z) {
        this.cursor.affineTrans.zoom = z;
        mithril_1.default.redraw();
    };
    EditorState.prototype.resetWith = function (e) {
        this.ls = LocatedSemagram_1.LocatedSemagram.fromExported(e);
        this.reset();
        this.save();
        mithril_1.default.redraw();
    };
    /** Convenience function: an array of the indexes of all the boxes that currently exist. */
    EditorState.prototype.boxes = function () {
        return this.ls.sg.boxes.keys();
    };
    /** Convenience function: an array of the indexes of all the wires that currently exist. */
    EditorState.prototype.wires = function () {
        return this.ls.sg.wires.keys();
    };
    EditorState.prototype.homs = function () {
        var e_1, _b, e_2, _c, e_3, _d, e_4, _e;
        var homs = [];
        try {
            for (var _f = tslib_1.__values(this.ls.sg.boxes.entries()), _g = _f.next(); !_g.done; _g = _f.next()) {
                var _h = tslib_1.__read(_g.value, 2), box_idx = _h[0], box = _h[1];
                var src = Semagram_1.box_entity(box_idx);
                try {
                    for (var _j = (e_2 = void 0, tslib_1.__values(Object.values(box.homs))), _k = _j.next(); !_k.done; _k = _j.next()) {
                        var tgt = _k.value;
                        homs.push([src, tgt]);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                try {
                    for (var _l = (e_3 = void 0, tslib_1.__values(box.ports.entries())), _m = _l.next(); !_m.done; _m = _l.next()) {
                        var _o = tslib_1.__read(_m.value, 2), port_idx = _o[0], port = _o[1];
                        var src_1 = Semagram_1.port_entity(box_idx, port_idx);
                        try {
                            for (var _p = (e_4 = void 0, tslib_1.__values(Object.values(port.homs))), _q = _p.next(); !_q.done; _q = _p.next()) {
                                var tgt = _q.value;
                                homs.push([src_1, tgt]);
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (_q && !_q.done && (_e = _p.return)) _e.call(_p);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return homs;
    };
    /** Convenience function: an array of the indices of all the ports for a box */
    EditorState.prototype.ports_by_box = function (box_idx) {
        var box = this.ls.sg.boxes.get(box_idx);
        return box.ports.keys();
    };
    EditorState.prototype.ports = function () {
        var _this = this;
        return transducers_1.concat.apply(void 0, tslib_1.__spreadArray([], tslib_1.__read(transducers_1.map(function (box_idx) {
            return transducers_1.map(function (port_idx) { return { box_idx: box_idx, port_idx: port_idx }; }, _this.ports_by_box(box_idx));
        }, this.boxes()))));
    };
    /**
     * The next functions are all of the "actions" that one can do,
     * and are bound to key presses.
     */
    /** Set `dialogue.src` to `cursor.hoveredAttachment` */
    EditorState.prototype.setSrc = function () {
        if (this.cursor.hoveredEntity) {
            if (this.cursor.hoveredEntity.ty == Schema_1.EntityType.Box
                || this.cursor.hoveredEntity.ty == Schema_1.EntityType.Port) {
                this.dialogue.src = this.cursor.hoveredEntity;
            }
        }
    };
    /** Set `dialogue.tgt` to `cursor.hoveredAttachment` */
    EditorState.prototype.setTgt = function () {
        if (this.cursor.hoveredEntity) {
            if (this.cursor.hoveredEntity.ty == Schema_1.EntityType.Box
                || this.cursor.hoveredEntity.ty == Schema_1.EntityType.Port) {
                this.dialogue.tgt = this.cursor.hoveredEntity;
            }
        }
    };
    /**
     * Add a new box at the `cursor.cursor` location.
     * If there's more than one type of box that could be added,
     * go into a modal state.
     */
    EditorState.prototype.addBox = function () {
        var _this = this;
        var box_types = tslib_1.__spreadArray([], tslib_1.__read(Object.keys(this.ls.sg.schema.box_types)));
        if (box_types.length == 1) {
            this.ls.addBox(box_types[0], this.cursor.cursor);
        }
        else if (box_types.length == 0) {
            // do nothing
        }
        else {
            this.dialogue.modal = {
                ty: ModalState.Select,
                choices: box_types,
                continuation: function (choice) {
                    _this.ls.addBox(choice, _this.cursor.cursor);
                }
            };
        }
    };
    /** Add a new port to the `cursor.hoveredAttachment` box, assuming it's a box */
    EditorState.prototype.addPort = function () {
        var _this = this;
        var a = this.cursor.hoveredEntity;
        if (a != null && a.ty == Schema_1.EntityType.Box) {
            var box_idx_1 = a.box_idx;
            var box = this.ls.sg.boxes.get(box_idx_1);
            var port_types = compatiblePortTypes(this.ls.sg.schema, box.ty);
            if (port_types.length == 1) {
                this.ls.addPort(port_types[0], a.box_idx);
            }
            else if (port_types.length == 0) {
                // do nothing
            }
            else {
                this.dialogue.modal = {
                    ty: ModalState.Select,
                    choices: port_types,
                    continuation: function (choice) {
                        _this.ls.addPort(choice, box_idx_1);
                    }
                };
            }
        }
    };
    /** Remove `cursor.hoveredAttachment` or `cursor.hoveredWire` */
    EditorState.prototype.remHovered = function () {
        if (this.cursor.hoveredEntity != null) {
            this.ls.remEntity(this.cursor.hoveredEntity);
        }
    };
    /** Add a new wire between `dialogue.src` and `dialogue.tgt` */
    EditorState.prototype.addWire = function () {
        var _this = this;
        var s = this.dialogue.src;
        var t = this.dialogue.tgt;
        if ((s != undefined) && (t != undefined)) {
            var wiretypeoptions = compatibleWireTypes(this.ls.sg.schema, this.ls.sg.attachmentType(s), this.ls.sg.attachmentType(t));
            if (wiretypeoptions.length == 1) {
                this.ls.addWire(wiretypeoptions[0], s, t);
                this.dialogue.src = null;
                this.dialogue.tgt = null;
            }
            else if (wiretypeoptions.length == 0) {
                this.dialogue.src = null;
                this.dialogue.tgt = null;
            }
            else {
                this.dialogue.modal = {
                    ty: ModalState.Select,
                    choices: wiretypeoptions,
                    continuation: function (choice) {
                        _this.ls.addWire(choice, s, t);
                        _this.dialogue.src = null;
                        _this.dialogue.tgt = null;
                    }
                };
            }
        }
    };
    /** Set the homomorphism on src to point to tgt */
    EditorState.prototype.setHom = function () {
        var _this = this;
        var s = this.dialogue.src;
        var t = this.dialogue.tgt;
        if ((s != undefined) && (t != undefined)) {
            var homtypeoptions = compatibleHomTypes(this.ls.sg.schema, this.ls.sg.attachmentType(s), this.ls.sg.attachmentType(t));
            if (homtypeoptions.length == 1) {
                this.ls.setHom(homtypeoptions[0], s, t);
                this.dialogue.src = null;
                this.dialogue.tgt = null;
            }
            else if (homtypeoptions.length == 0) {
                this.dialogue.src = null;
                this.dialogue.tgt = null;
            }
            else {
                this.dialogue.modal = {
                    ty: ModalState.Select,
                    choices: homtypeoptions,
                    continuation: function (choice) {
                        _this.ls.setHom(choice, s, t);
                        _this.dialogue.src = null;
                        _this.dialogue.tgt = null;
                    }
                };
            }
        }
    };
    EditorState.prototype.debug = function () {
        console.log(this.ls);
    };
    /** Export the current `ls`, and send it down the wire! */
    EditorState.prototype.save = function () {
        console.log(JSON.stringify(this.ls.export()));
        this.sendToJl(this.ls.export());
    };
    EditorState.prototype.roundtrip = function () {
        this.ls = LocatedSemagram_1.LocatedSemagram.fromExported(JSON.parse(JSON.stringify(this.ls.export())));
        this.reset();
    };
    /**
     * Handle a keypress when we are in a modal state, possibly completing the modal action.
     */
    EditorState.prototype.modalInput = function (c) {
        var choice = parseInt(c);
        if (this.dialogue.modal.ty == ModalState.Normal) {
            return;
        }
        if (!isNaN(choice) && 1 <= choice && choice <= this.dialogue.modal.choices.length) {
            this.dialogue.modal.continuation(this.dialogue.modal.choices[choice - 1]);
        }
        else if (c == "Escape") {
            // Do nothing, just exit
        }
        else {
            return; // skip the reset
        }
        this.dialogue.modal = { ty: ModalState.Normal };
    };
    return EditorState;
}());
exports.EditorState = EditorState;
/**
 * We put data on DOM nodes, so that it can be accessed from events.
 * For instance, we put the current Attachment on the dom nodes for ports/boxes,
 * so that when a mouse event is triggered on them, we can know which port/box it
 * was triggered on.
 */
function eventDataProperty(e, prop) {
    return JSON.parse(e.target.getAttribute(prop));
}
/**
 * What color should we color this attachment, to designate its current state.
 */
function colorAttachment(state, a) {
    if (equiv_1.equiv(state.dialogue.src, a)) {
        return CS.source;
    }
    else if (equiv_1.equiv(state.dialogue.tgt, a)) {
        return CS.target;
    }
    else if (equiv_1.equiv(state.cursor.hoveredEntity, a)) {
        return CS.over;
    }
    else {
        return CS.base;
    }
}
exports.colorAttachment = colorAttachment;


/***/ }),

/***/ "./src/EditorUI.ts":
/*!*************************!*\
  !*** ./src/EditorUI.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EditorUI = exports.EditorHandles = exports.PanHandle = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
var EditorState_1 = __webpack_require__(/*! ./EditorState */ "./src/EditorState.ts");
var Commands_1 = __webpack_require__(/*! ./Commands */ "./src/Commands.ts");
var Constants_1 = __webpack_require__(/*! ./Constants */ "./src/Constants.ts");
var BoxNode_1 = __webpack_require__(/*! ./BoxNode */ "./src/BoxNode.ts");
var PortNode_1 = __webpack_require__(/*! ./PortNode */ "./src/PortNode.ts");
var transducers_1 = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/index.js");
var mithril_1 = tslib_1.__importDefault(__webpack_require__(/*! mithril */ "./node_modules/mithril/index.js"));
var vectors_1 = __webpack_require__(/*! @thi.ng/vectors */ "./node_modules/@thi.ng/vectors/index.js");
var WireNode_1 = __webpack_require__(/*! ./WireNode */ "./src/WireNode.ts");
/**
 * TODO: These should be runtime-configurable.
 */
var MODAL_TL = [20, 20];
var MODAL_WIDTH = 150;
var MODAL_HEIGHT_PER_LINE = 20;
var MODAL_XPADDING = 10;
var MODAL_YPADDING = 10;
var DocWindow = {
    view: function (_a) {
        var state = _a.attrs.state;
        if (state.dialogue.helpwindow) {
            var height = MODAL_HEIGHT_PER_LINE * Commands_1.DEFAULT_KEYBINDINGS.size + MODAL_YPADDING;
            var tl_1 = [MODAL_TL[0], Constants_1.SVG_HEIGHT - height - MODAL_TL[1]];
            var bg = mithril_1.default("rect", {
                x: tl_1[0],
                y: tl_1[1],
                width: MODAL_WIDTH,
                height: MODAL_HEIGHT_PER_LINE * Commands_1.DEFAULT_KEYBINDINGS.size + MODAL_YPADDING,
                stroke: "black",
                fill: "white"
            });
            return mithril_1.default.apply(void 0, tslib_1.__spreadArray(["g", {},
                bg], tslib_1.__read(transducers_1.mapIndexed(function (i, _a) {
                var _b = tslib_1.__read(_a, 2), key = _b[0], cmd = _b[1];
                var desc = Commands_1.COMMAND_DOCS.get(cmd);
                if (desc != undefined) {
                    var pos = vectors_1.add2([], tl_1, [MODAL_XPADDING, (i + 1) * MODAL_HEIGHT_PER_LINE]);
                    return mithril_1.default("text", { x: pos[0], y: pos[1] }, key + ": " + desc.short);
                }
                return mithril_1.default("text");
            }, Commands_1.DEFAULT_KEYBINDINGS.entries()))));
        }
        else {
            return mithril_1.default("text", { x: MODAL_TL[0], y: Constants_1.SVG_HEIGHT - MODAL_TL[1] }, "? for help");
        }
    }
};
/**
 * Component for the Modal. Shows up as a rectangle with the choices in it.
 */
var ChoiceModal = {
    view: function (_a) {
        var state = _a.attrs.state;
        var modal = state.dialogue.modal;
        if (modal.ty != EditorState_1.ModalState.Normal) {
            var bg = mithril_1.default("rect", {
                x: MODAL_TL[0],
                y: MODAL_TL[1],
                width: MODAL_WIDTH,
                height: MODAL_HEIGHT_PER_LINE * modal.choices.length + MODAL_YPADDING,
                stroke: "black",
                fill: "white"
            });
            return mithril_1.default.apply(void 0, tslib_1.__spreadArray(["g", {},
                bg], tslib_1.__read(modal.choices.map(function (choice, i) {
                var pos = vectors_1.add2([], MODAL_TL, [MODAL_XPADDING, (i + 1) * MODAL_HEIGHT_PER_LINE]);
                return mithril_1.default("text", { x: pos[0], y: pos[1] }, i + 1 + ": " + choice);
            }))));
        }
        else {
            return mithril_1.default("g");
        }
    }
};
exports.PanHandle = {
    view: function (_a) {
        var state = _a.attrs.state;
        return mithril_1.default("rect", {
            height: "100%",
            width: "100%",
            x: 0,
            y: 0,
            "fill-opacity": "0",
            "stroke-opacity": "0",
            onmousedown: state.cursor.handlemousedownpan,
            onmouseup: state.cursor.handlemouseuppan,
        });
    }
};
exports.EditorHandles = {
    view: function (_a) {
        var state = _a.attrs.state;
        var boxhandles = transducers_1.map(function (box_idx) { return mithril_1.default(BoxNode_1.BoxHandle, { state: state, box_idx: box_idx, isExport: false }); }, state.boxes());
        var porthandles = transducers_1.map(function (_a) {
            var box_idx = _a.box_idx, port_idx = _a.port_idx;
            return mithril_1.default(PortNode_1.PortHandle, { state: state, box_idx: box_idx, port_idx: port_idx, isExport: false });
        }, state.ports());
        var wirehandles = transducers_1.map(function (wire_idx) { return mithril_1.default(WireNode_1.WireHandle, { state: state, wire_idx: wire_idx, isExport: false }); }, state.wires());
        return mithril_1.default.apply(void 0, tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray(["g"], tslib_1.__read(wirehandles)), tslib_1.__read(boxhandles)), tslib_1.__read(porthandles)));
    }
};
exports.EditorUI = {
    view: function (_a) {
        var state = _a.attrs.state;
        return mithril_1.default("g", mithril_1.default(ChoiceModal, { state: state }), mithril_1.default(DocWindow, { state: state }));
    }
};


/***/ }),

/***/ "./src/Homs.ts":
/*!*********************!*\
  !*** ./src/Homs.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HomNode = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
var mithril_1 = tslib_1.__importDefault(__webpack_require__(/*! mithril */ "./node_modules/mithril/index.js"));
var ArrowUtils_1 = __webpack_require__(/*! ./ArrowUtils */ "./src/ArrowUtils.ts");
exports.HomNode = {
    view: function (_a) {
        var _b = _a.attrs, state = _b.state, src = _b.src, tgt = _b.tgt;
        var sloc = state.ls.getLoc(src);
        var tloc = state.ls.getLoc(tgt);
        return mithril_1.default("path", {
            d: ArrowUtils_1.svgPath(ArrowUtils_1.curvePoints(sloc, tloc, 0)),
            stroke: "black",
            "stroke-dasharray": "5,5",
            "marker-mid": "url(#arrow-solid)",
            fill: "none"
        });
    }
};


/***/ }),

/***/ "./src/LocatedSemagram.ts":
/*!********************************!*\
  !*** ./src/LocatedSemagram.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LocatedSemagram = exports.BOXRADIUS = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
var Semagram_1 = __webpack_require__(/*! ./Semagram */ "./src/Semagram.ts");
var Schema_1 = __webpack_require__(/*! ./Schema */ "./src/Schema.ts");
var vectors_1 = __webpack_require__(/*! @thi.ng/vectors */ "./node_modules/@thi.ng/vectors/index.js");
var Util_1 = __webpack_require__(/*! ./Util */ "./src/Util.ts");
/** TODO: This should be a runtime parameter */
exports.BOXRADIUS = 40;
/**
 * This stores a semagram along with the locations of all of its boxes and ports
 * Note: the fact that this stores the port locations
 * should be considered an implemenation detail, at least for now. The port locations
 * are a pure function of the box locations and the number/ordering of the ports.
 * They are recalculated whenever a box location changes.
 *
 * The wireoffsets are a pure function of the wire ordering, and are also recalculated
 * when wires are added/removed.
 */
var LocatedSemagram = /** @class */ (function () {
    function LocatedSemagram(schema) {
        this.sg = new Semagram_1.Semagram(schema);
        this.boxlocs = new Map();
        this.portlocs = new Map();
        this.wireoffsets = new Map();
    }
    LocatedSemagram.fromJSON = function (dat) {
        return;
    };
    /* Updates box location, and updates its corresponding ports too. */
    LocatedSemagram.prototype.setBoxLoc = function (box_idx, loc) {
        this.boxlocs.set(box_idx, loc);
        this.updatePortLocs(box_idx);
    };
    /**
     * Updates port locations for a specific box.
     * TODO: This should be more generic; we shouldn't special case for the
     * small number of port layout algorithms we have now, because in the
     * future there might be more port layout algorithms we want.
     */
    LocatedSemagram.prototype.updatePortLocs = function (box_idx) {
        var e_1, _a;
        var box = this.sg.boxes.get(box_idx);
        var boxportlocs = Util_1.getDefault(this.portlocs, box_idx, new Map());
        var circular = [];
        var input = [];
        var output = [];
        try {
            for (var _b = tslib_1.__values(box.ports.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var port_idx = _c.value;
                var p = box.ports.get(port_idx);
                var port_schema = this.sg.schema.port_types[p.ty];
                switch (port_schema.style) {
                    case Schema_1.PortStyle.Circular: {
                        circular.push(port_idx);
                        break;
                    }
                    case Schema_1.PortStyle.Input: {
                        input.push(port_idx);
                        break;
                    }
                    case Schema_1.PortStyle.Output: {
                        output.push(port_idx);
                        break;
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        circular.forEach(function (port_idx, i) {
            var t = (i / circular.length) * 2 * Math.PI;
            var v = [
                (Math.sin(t) * exports.BOXRADIUS),
                -(Math.cos(t) * exports.BOXRADIUS)
            ];
            boxportlocs.set(port_idx, v);
        });
        input.forEach(function (port_idx, i) {
            var x = -exports.BOXRADIUS;
            var y = exports.BOXRADIUS * 1.5 * Util_1.centerIndex(i, input.length);
            boxportlocs.set(port_idx, [x, y]);
        });
        output.forEach(function (port_idx, i) {
            var x = exports.BOXRADIUS;
            var y = exports.BOXRADIUS * 1.5 * Util_1.centerIndex(i, output.length);
            boxportlocs.set(port_idx, [x, y]);
        });
    };
    LocatedSemagram.prototype.updateAllPortLocs = function () {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(this.sg.boxes.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var box_idx = _c.value;
                this.updatePortLocs(box_idx);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    LocatedSemagram.prototype.updateWireOffsets = function (src, tgt) {
        var _a;
        if (Semagram_1.hashEntity(src) < Semagram_1.hashEntity(tgt)) {
            _a = tslib_1.__read([tgt, src], 2), src = _a[0], tgt = _a[1];
        }
        var srctgt = this.sg.wiresBetween(src, tgt);
        var tgtsrc = this.sg.wiresBetween(tgt, src);
        var n = srctgt.length + tgtsrc.length;
        for (var i = 0; i < srctgt.length; i++) {
            this.wireoffsets.set(srctgt[i], Util_1.centerIndex(i, n));
        }
        for (var i = 0; i < tgtsrc.length; i++) {
            this.wireoffsets.set(tgtsrc[i], -Util_1.centerIndex(srctgt.length + i, n));
        }
    };
    LocatedSemagram.prototype.updateAllWireOffsets = function () {
        var e_3, _a;
        try {
            for (var _b = tslib_1.__values(this.sg.wires.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var w = _c.value;
                this.updateWireOffsets(w.src, w.tgt);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    /**
     * Gets the location of an attachment (i.e. box or port)
     * Useful for figuring out where a wire starts/ends.
     */
    LocatedSemagram.prototype.getLoc = function (a) {
        var boxloc = this.boxlocs.get(a.box_idx);
        switch (a.ty) {
            case Schema_1.EntityType.Box: {
                return boxloc;
            }
            case Schema_1.EntityType.Port: {
                var portloc = this.portlocs.get(a.box_idx).get(a.port_idx);
                return vectors_1.add2([], boxloc, portloc);
            }
        }
    };
    LocatedSemagram.prototype.getBoxLoc = function (box_idx) {
        return this.boxlocs.get(box_idx);
    };
    LocatedSemagram.prototype.getOffset = function (w) {
        return this.wireoffsets.get(w);
    };
    /**
     * Wrappers around the functions on the underlying semagram that also deal with location
     * These should be preferred over accessing the semagram directly.
     * I don't know exactly how things will fail if you access the semagram directly,
     * but probably something will go wrong as things come out of sync.
     */
    LocatedSemagram.prototype.addBox = function (ty, loc) {
        var a = this.sg.addBox(ty);
        this.portlocs.set(a.box_idx, new Map());
        this.setBoxLoc(a.box_idx, loc);
        return a;
    };
    LocatedSemagram.prototype.addPort = function (ty, box_idx) {
        var a = this.sg.addPort(ty, box_idx);
        this.updatePortLocs(box_idx);
        return a;
    };
    LocatedSemagram.prototype.addWire = function (ty, src, tgt) {
        var i = this.sg.addWire(ty, src, tgt);
        this.updateWireOffsets(src, tgt);
        return i;
    };
    LocatedSemagram.prototype.remWire = function (i) {
        var wire = this.sg.getWire(i);
        if (wire) {
            this.sg.remWire(i);
            this.updateWireOffsets(wire.src, wire.tgt);
        }
    };
    LocatedSemagram.prototype.remPort = function (box_idx, port_idx) {
        this.sg.remPort(box_idx, port_idx);
        this.portlocs.get(box_idx).delete(port_idx);
        this.updatePortLocs(box_idx);
    };
    LocatedSemagram.prototype.remBox = function (box_idx) {
        this.boxlocs.delete(box_idx);
        this.portlocs.delete(box_idx);
        this.sg.remBox(box_idx);
    };
    LocatedSemagram.prototype.remEntity = function (a) {
        switch (a.ty) {
            case (Schema_1.EntityType.Box): {
                this.remBox(a.box_idx);
                break;
            }
            case (Schema_1.EntityType.Port): {
                this.remPort(a.box_idx, a.port_idx);
                break;
            }
            case (Schema_1.EntityType.Wire): {
                this.remWire(a.wire_idx);
                break;
            }
        }
    };
    LocatedSemagram.prototype.setHom = function (ty, src, tgt) {
        this.sg.getEntity(src).homs[ty] = tgt;
    };
    LocatedSemagram.prototype.export = function () {
        return {
            sg: this.sg.export(),
            boxlocs: Array.from(this.boxlocs.entries())
        };
    };
    LocatedSemagram.fromExported = function (e) {
        var ls = new LocatedSemagram(e.sg.schema);
        ls.sg = Semagram_1.Semagram.fromExported(e.sg);
        ls.boxlocs = new Map(e.boxlocs);
        ls.updateAllPortLocs();
        ls.updateAllWireOffsets();
        return ls;
    };
    return LocatedSemagram;
}());
exports.LocatedSemagram = LocatedSemagram;


/***/ }),

/***/ "./src/PortNode.ts":
/*!*************************!*\
  !*** ./src/PortNode.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PortNode = exports.PortHandle = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
var mithril_1 = tslib_1.__importDefault(__webpack_require__(/*! mithril */ "./node_modules/mithril/index.js"));
var EditorState_1 = __webpack_require__(/*! ./EditorState */ "./src/EditorState.ts");
var Semagram_1 = __webpack_require__(/*! ./Semagram */ "./src/Semagram.ts");
var CS = tslib_1.__importStar(__webpack_require__(/*! ./ColorScheme */ "./src/ColorScheme.ts"));
var equiv_1 = __webpack_require__(/*! @thi.ng/equiv */ "./node_modules/@thi.ng/equiv/index.js");
var PORTRADIUS = 7;
exports.PortHandle = {
    view: function (_a) {
        var _b = _a.attrs, state = _b.state, box_idx = _b.box_idx, port_idx = _b.port_idx;
        var a = Semagram_1.port_entity(box_idx, port_idx);
        var loc = state.ls.getLoc(a);
        var attrs = {
            "fill-opacity": "0",
            "stroke-opacity": "0",
            "data-a": JSON.stringify(a),
            onmouseenter: state.cursor.handlemouseenterattachment,
            onmouseout: state.cursor.handlemouseoutattachment,
            onmousedown: state.cursor.handlemousedownport,
            onmouseup: state.cursor.handlemouseupport,
        };
        return mithril_1.default("circle", tslib_1.__assign({ r: PORTRADIUS, cx: loc[0], cy: loc[1] }, attrs));
    }
};
/**
 * See the comment for BoxNode.
 */
exports.PortNode = {
    view: function (_a) {
        var _b = _a.attrs, state = _b.state, box_idx = _b.box_idx, port_idx = _b.port_idx, isExport = _b.isExport;
        var a = Semagram_1.port_entity(box_idx, port_idx);
        var loc = state.ls.getLoc(a);
        var port = state.ls.sg.getPort(box_idx, port_idx);
        var attrs = tslib_1.__assign({ fill: EditorState_1.colorAttachment(state, a), stroke: CS.accent }, state.ls.sg.style_fns[port.ty](port.weights));
        var portnode = mithril_1.default("circle", tslib_1.__assign({ r: PORTRADIUS, cx: loc[0], cy: loc[1] }, attrs));
        var highlight = !isExport ? mithril_1.default("circle", {
            fill: equiv_1.equiv(state.dialogue.selected, a) ? "yellow" : "none",
            stroke: "none",
            r: PORTRADIUS * 1.5,
            cx: loc[0],
            cy: loc[1],
        }) : mithril_1.default("g");
        return mithril_1.default("g", highlight, portnode);
    }
};


/***/ }),

/***/ "./src/Schema.ts":
/*!***********************!*\
  !*** ./src/Schema.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EntityType = exports.AttributeType = exports.WireStyle = exports.PortStyle = void 0;
/**
 * TODO: Style should be replaced by custom SVGs
 */
var PortStyle;
(function (PortStyle) {
    PortStyle["Input"] = "Input";
    PortStyle["Output"] = "Output";
    PortStyle["Circular"] = "Circular";
})(PortStyle = exports.PortStyle || (exports.PortStyle = {}));
var WireStyle;
(function (WireStyle) {
    WireStyle["Default"] = "DefaultWire";
})(WireStyle = exports.WireStyle || (exports.WireStyle = {}));
var AttributeType;
(function (AttributeType) {
    AttributeType["Numeric"] = "Numeric";
    AttributeType["Stringlike"] = "Stringlike";
})(AttributeType = exports.AttributeType || (exports.AttributeType = {}));
var EntityType;
(function (EntityType) {
    EntityType["Box"] = "Box";
    EntityType["Port"] = "Port";
    EntityType["Wire"] = "Wire";
})(EntityType = exports.EntityType || (exports.EntityType = {}));


/***/ }),

/***/ "./src/Semagram.ts":
/*!*************************!*\
  !*** ./src/Semagram.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Semagram = exports.Wire = exports.Box = exports.Port = exports.wire_entity = exports.port_entity = exports.box_entity = exports.hashEntity = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
var equiv_1 = __webpack_require__(/*! @thi.ng/equiv */ "./node_modules/@thi.ng/equiv/index.js");
var vectors_1 = __webpack_require__(/*! @thi.ng/vectors */ "./node_modules/@thi.ng/vectors/index.js");
var transducers_1 = __webpack_require__(/*! @thi.ng/transducers */ "./node_modules/@thi.ng/transducers/index.js");
var Schema_1 = __webpack_require__(/*! ./Schema */ "./src/Schema.ts");
var Util_1 = __webpack_require__(/*! ./Util */ "./src/Util.ts");
/**
 * We use this to store attachments in hash tables
 */
function hashEntity(a) {
    switch (a.ty) {
        case Schema_1.EntityType.Box: {
            return vectors_1.hash([0, a.box_idx]);
        }
        case Schema_1.EntityType.Port: {
            return vectors_1.hash([1, a.box_idx, a.port_idx]);
        }
        case Schema_1.EntityType.Wire: {
            return vectors_1.hash([2, a.wire_idx]);
        }
    }
}
exports.hashEntity = hashEntity;
function box_entity(i) {
    return { ty: Schema_1.EntityType.Box, box_idx: i };
}
exports.box_entity = box_entity;
function port_entity(i, j) {
    return { ty: Schema_1.EntityType.Port, box_idx: i, port_idx: j };
}
exports.port_entity = port_entity;
function wire_entity(i) {
    return { ty: Schema_1.EntityType.Wire, wire_idx: i };
}
exports.wire_entity = wire_entity;
/**
 * The data associated with a port.
 * Note that ports are stored in an array for each box, so we don't need to store
 * the index of the box.
 */
var Port = /** @class */ (function () {
    function Port(
    /** The ty refers to a PortProperties in the schema */
    ty, weights, homs) {
        this.ty = ty;
        this.weights = weights;
        this.homs = homs;
    }
    Port.prototype.export = function () {
        return {
            ty: this.ty,
            weights: this.weights,
            homs: this.homs
        };
    };
    Port.fromExported = function (e) {
        return new Port(e.ty, e.weights, e.homs);
    };
    return Port;
}());
exports.Port = Port;
/**
 * The data associated with a box, including the ports.
 * Note that the ports are not necessarily numbered sequentially:
 * this is to make the logic for deleting easier. Port ids NEVER change
 * after creation.
 */
var Box = /** @class */ (function () {
    function Box(
    /* The ty refers to a BoxProperties in the schema */
    ty, weights, homs, ports) {
        this.ty = ty;
        this.weights = weights;
        this.homs = homs;
        this.ports = ports;
    }
    Box.prototype.export = function () {
        return {
            ty: this.ty,
            weights: this.weights,
            homs: this.homs,
            ports: Array.from(transducers_1.map(function (_a) {
                var _b = tslib_1.__read(_a, 2), port_idx = _b[0], p = _b[1];
                return [port_idx, p.export()];
            }, this.ports.entries())),
        };
    };
    Box.fromExported = function (e) {
        return new Box(e.ty, e.weights, e.homs, new Map(transducers_1.iterator(transducers_1.map(function (_a) {
            var _b = tslib_1.__read(_a, 2), port_idx = _b[0], ep = _b[1];
            return [port_idx, Port.fromExported(ep)];
        }), e.ports)));
    };
    return Box;
}());
exports.Box = Box;
/**
 * The data associated with a wire. Note that src and tgt are Attachments.
 */
var Wire = /** @class */ (function () {
    function Wire(
    /* The ty refers to a WireProperties in the schema */
    ty, weights, homs, src, tgt) {
        this.ty = ty;
        this.weights = weights;
        this.homs = homs;
        this.src = src;
        this.tgt = tgt;
    }
    Wire.prototype.export = function () {
        return {
            ty: this.ty,
            weights: this.weights,
            homs: this.homs,
            src: this.src,
            tgt: this.tgt
        };
    };
    Wire.fromExported = function (e) {
        return new Wire(e.ty, e.weights, e.homs, e.src, e.tgt);
    };
    return Wire;
}());
exports.Wire = Wire;
/**
 * Generates new ids for new objects in the Semagram.
 * Right now, assigns them sequentially, but that is an implementation detail.
 */
var IDGen = /** @class */ (function () {
    function IDGen() {
        this.i = 0;
    }
    IDGen.prototype.next = function () {
        return this.i++;
    };
    IDGen.prototype.export = function () {
        return { i: this.i };
    };
    IDGen.fromExported = function (e) {
        return Object.assign(new IDGen(), e);
    };
    return IDGen;
}());
function initStyleFns(schema) {
    var e_1, _a, e_2, _b, e_3, _c;
    var style_fns = {};
    try {
        for (var _d = tslib_1.__values(Object.entries(schema.box_types)), _e = _d.next(); !_e.done; _e = _d.next()) {
            var _f = tslib_1.__read(_e.value, 2), name_1 = _f[0], box_props = _f[1];
            style_fns[name_1] = eval(box_props.style_fn);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
        }
        finally { if (e_1) throw e_1.error; }
    }
    try {
        for (var _g = tslib_1.__values(Object.entries(schema.port_types)), _h = _g.next(); !_h.done; _h = _g.next()) {
            var _j = tslib_1.__read(_h.value, 2), name_2 = _j[0], port_props = _j[1];
            style_fns[name_2] = eval(port_props.style_fn);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
        }
        finally { if (e_2) throw e_2.error; }
    }
    try {
        for (var _k = tslib_1.__values(Object.entries(schema.wire_types)), _l = _k.next(); !_l.done; _l = _k.next()) {
            var _m = tslib_1.__read(_l.value, 2), name_3 = _m[0], wire_props = _m[1];
            style_fns[name_3] = eval(wire_props.style_fn);
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return style_fns;
}
/**
 * This stores the actual data of a Semagram.
 * All it is is two maps of boxes and wires (ports are stored within boxes),
 * along with a schema and an ID generator.
 * These are maps instead of arrays to simplify deleting logic, and to make sure
 * that we never have to change ids.
 */
var Semagram = /** @class */ (function () {
    function Semagram(schema) {
        this.schema = schema;
        this.boxes = new Map();
        this.wires = new Map();
        this.gen = new IDGen();
        this.src_tgt_index = new Util_1.SetMap(function (_a) {
            var _b = tslib_1.__read(_a, 2), a1 = _b[0], a2 = _b[1];
            return vectors_1.hash([hashEntity(a1), hashEntity(a2)]);
        }, function (e1, e2) { return Math.sign(e1 - e2); });
        this.style_fns = initStyleFns(schema);
    }
    /** The getters are self-explanatory */
    Semagram.prototype.getBox = function (box_idx) {
        return this.boxes.get(box_idx);
    };
    Semagram.prototype.getPort = function (box_idx, port_idx) {
        var box = this.boxes.get(box_idx);
        return box && box.ports.get(port_idx);
    };
    Semagram.prototype.getWire = function (wire_idx) {
        return this.wires.get(wire_idx);
    };
    Semagram.prototype.getEntity = function (a) {
        switch (a.ty) {
            case Schema_1.EntityType.Box: {
                return this.getBox(a.box_idx);
            }
            case Schema_1.EntityType.Port: {
                return this.getPort(a.box_idx, a.port_idx);
            }
            case Schema_1.EntityType.Wire: {
                return this.getWire(a.wire_idx);
            }
        }
    };
    /** The "type" here refers to the ty parameter of the box/port.
     * TODO: This shouldn't return the ty parameter of the Attachment?
     * Seems a bit redundant
     */
    Semagram.prototype.attachmentType = function (a) {
        var node = this.getEntity(a);
        return [a.ty, node.ty];
    };
    /** The addX methods are self-explanatory */
    Semagram.prototype.addWire = function (ty, src, tgt) {
        var i = this.gen.next();
        var wireschema = this.schema.wire_types[ty];
        var src_ob = this.getEntity(src);
        var tgt_ob = this.getEntity(tgt);
        if (!(equiv_1.equiv([src.ty, src_ob.ty], wireschema.src))) {
            throw new Error("The src of a wire of type " + ty + " cannot be " + [src.ty, src_ob.ty]);
        }
        if (!(equiv_1.equiv([tgt.ty, tgt_ob.ty], wireschema.tgt))) {
            throw new Error("The tgt of a wire of type " + ty + " cannot be " + [tgt.ty, tgt_ob.ty]);
        }
        this.wires.set(i, new Wire(ty, {}, {}, src, tgt));
        this.src_tgt_index.add([src, tgt], i);
        return i;
    };
    Semagram.prototype.addPort = function (ty, box_idx) {
        var box = this.boxes.get(box_idx);
        var portschema = this.schema.port_types[ty];
        if (portschema.box != box.ty) {
            throw new Error("Cannot attach a port of type " + ty + " to a box of type " + box.ty);
        }
        var i = this.gen.next();
        box.ports.set(i, new Port(ty, {}, {}));
        return port_entity(box_idx, i);
    };
    Semagram.prototype.addBox = function (ty) {
        var i = this.gen.next();
        this.boxes.set(i, new Box(ty, {}, {}, new Map()));
        return box_entity(i);
    };
    /** The remX methods are self-explanatory */
    Semagram.prototype.remWire = function (i) {
        var wire = this.getWire(i);
        if (wire) {
            this.src_tgt_index.delete([wire.src, wire.tgt], i);
            this.wires.delete(i);
        }
    };
    Semagram.prototype.remPort = function (box_idx, port_idx) {
        var e_4, _a;
        var box = this.boxes.get(box_idx);
        var a = port_entity(box_idx, port_idx);
        try {
            for (var _b = tslib_1.__values(this.wires.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var i = _c.value;
                var e = this.wires.get(i);
                if (equiv_1.equiv(e.src, a) || equiv_1.equiv(e.tgt, a)) {
                    this.remWire(i);
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        box.ports.delete(port_idx);
    };
    Semagram.prototype.remBox = function (box_idx) {
        var e_5, _a, e_6, _b;
        var box = this.boxes.get(box_idx);
        try {
            for (var _c = tslib_1.__values(box.ports.keys()), _d = _c.next(); !_d.done; _d = _c.next()) {
                var port_idx = _d.value;
                this.remPort(box_idx, port_idx);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_5) throw e_5.error; }
        }
        var a = box_entity(box_idx);
        try {
            for (var _e = tslib_1.__values(this.wires.keys()), _f = _e.next(); !_f.done; _f = _e.next()) {
                var wire_idx = _f.value;
                var e = this.wires.get(wire_idx);
                if (equiv_1.equiv(e.src, a) || equiv_1.equiv(e.tgt, a)) {
                    this.remWire(wire_idx);
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_6) throw e_6.error; }
        }
        this.boxes.delete(box_idx);
    };
    Semagram.prototype.remEntity = function (a) {
        if (a.ty == Schema_1.EntityType.Box) {
            this.remBox(a.box_idx);
        }
        else if (a.ty == Schema_1.EntityType.Port && a.port_idx !== undefined) {
            this.remPort(a.box_idx, a.port_idx);
        }
        else if (a.ty == Schema_1.EntityType.Wire) {
            this.remWire(a.wire_idx);
        }
        else {
            throw new Error("invalid attachment type");
        }
    };
    Semagram.prototype.wiresBetween = function (src, tgt) {
        var wire_list = this.src_tgt_index.get([src, tgt]);
        if (wire_list) {
            return tslib_1.__spreadArray([], tslib_1.__read(wire_list.values()));
        }
        else {
            return [];
        }
    };
    Semagram.prototype.weightTypes = function (a) {
        var obj = this.getEntity(a);
        if (obj == undefined) {
            return undefined;
        }
        switch (a.ty) {
            case Schema_1.EntityType.Box: {
                return this.schema.box_types[obj.ty].weights;
            }
            case Schema_1.EntityType.Port: {
                return this.schema.port_types[obj.ty].weights;
            }
            case Schema_1.EntityType.Wire: {
                return this.schema.wire_types[obj.ty].weights;
            }
        }
    };
    Semagram.prototype.export = function () {
        return {
            boxes: Array.from(this.boxes.entries()).map(function (_a) {
                var _b = tslib_1.__read(_a, 2), i = _b[0], box = _b[1];
                return [i, box.export()];
            }),
            wires: Array.from(this.wires.entries()),
            gen: this.gen.export(),
            schema: this.schema
        };
    };
    Semagram.fromExported = function (e) {
        var e_7, _a;
        var src_tgt_index = new Util_1.SetMap(function (_a) {
            var _b = tslib_1.__read(_a, 2), a1 = _b[0], a2 = _b[1];
            return vectors_1.hash([hashEntity(a1), hashEntity(a2)]);
        }, function (e1, e2) { return Math.sign(e1 - e2); });
        try {
            for (var _b = tslib_1.__values(e.wires), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = tslib_1.__read(_c.value, 2), wire_idx = _d[0], w = _d[1];
                src_tgt_index.add([w.src, w.tgt], wire_idx);
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_7) throw e_7.error; }
        }
        return Object.assign(new Semagram(e.schema), {
            boxes: new Map(transducers_1.map(function (_a) {
                var _b = tslib_1.__read(_a, 2), box_idx = _b[0], b = _b[1];
                return [box_idx, Box.fromExported(b)];
            }, e.boxes)),
            wires: new Map(transducers_1.map(function (_a) {
                var _b = tslib_1.__read(_a, 2), wire_idx = _b[0], w = _b[1];
                return [wire_idx, Wire.fromExported(w)];
            }, e.wires)),
            gen: IDGen.fromExported(e.gen),
            src_tgt_index: src_tgt_index,
            schema: e.schema
        });
    };
    return Semagram;
}());
exports.Semagram = Semagram;


/***/ }),

/***/ "./src/Util.ts":
/*!*********************!*\
  !*** ./src/Util.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getDefault = exports.SetMap = exports.centerIndex = void 0;
var associative_1 = __webpack_require__(/*! @thi.ng/associative */ "./node_modules/@thi.ng/associative/index.js");
/** Linearly interpolates between [0...n-1] and [-1,1] */
function centerIndex(i, n) {
    return (i - ((n - 1) / 2)) / n;
}
exports.centerIndex = centerIndex;
var SetMap = /** @class */ (function () {
    function SetMap(hash, cmp) {
        this.kvs = new associative_1.HashMap([], { hash: hash });
        this.cmp = cmp;
    }
    SetMap.prototype.get = function (k) {
        return this.kvs.get(k);
    };
    SetMap.prototype.add = function (k, v) {
        if (!(this.kvs.has(k))) {
            this.kvs.set(k, new associative_1.SortedSet([], { compare: this.cmp }));
        }
        this.kvs.get(k).add(v);
    };
    SetMap.prototype.delete = function (k, v) {
        this.kvs.get(k).delete(v);
    };
    SetMap.prototype.has = function (k, v) {
        if (this.kvs.has(k)) {
            return this.kvs.get(k).has(v);
        }
        else {
            return false;
        }
    };
    return SetMap;
}());
exports.SetMap = SetMap;
function getDefault(m, key, def) {
    var val = m.get(key);
    if (val) {
        return val;
    }
    m.set(key, def);
    return def;
}
exports.getDefault = getDefault;


/***/ }),

/***/ "./src/WireNode.ts":
/*!*************************!*\
  !*** ./src/WireNode.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WireNode = exports.WireHandle = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
var CS = tslib_1.__importStar(__webpack_require__(/*! ./ColorScheme */ "./src/ColorScheme.ts"));
var mithril_1 = tslib_1.__importDefault(__webpack_require__(/*! mithril */ "./node_modules/mithril/index.js"));
var equiv_1 = __webpack_require__(/*! @thi.ng/equiv */ "./node_modules/@thi.ng/equiv/index.js");
var Semagram_1 = __webpack_require__(/*! ./Semagram */ "./src/Semagram.ts");
var ArrowUtils_1 = __webpack_require__(/*! ./ArrowUtils */ "./src/ArrowUtils.ts");
var WIRE_HANDLE_RADIUS = 7;
exports.WireHandle = {
    view: function (_a) {
        var _b = _a.attrs, state = _b.state, wire_idx = _b.wire_idx;
        var offset = state.ls.getOffset(wire_idx);
        var e = state.ls.sg.wires.get(wire_idx);
        var sloc = state.ls.getLoc(e.src);
        var tloc = state.ls.getLoc(e.tgt);
        var mp = ArrowUtils_1.midpoint(sloc, tloc, offset);
        return mithril_1.default("circle", {
            r: WIRE_HANDLE_RADIUS,
            cx: mp[0],
            cy: mp[1],
            "fill-opacity": "0",
            "stroke-opacity": "0",
            "data-w": wire_idx,
            onmouseenter: state.cursor.handlemouseenterwire,
            onmouseout: state.cursor.handlemouseoutwire,
            onmousedown: state.cursor.handlemousedownwire,
            onmouseup: state.cursor.handlemouseupwire,
        });
    }
};
/**
 * Offset is used to compute the curve which allows us to distinguish between
 * multiple wires going between the same pair of attachments.
 */
exports.WireNode = {
    view: function (_a) {
        var _b = _a.attrs, state = _b.state, wire_idx = _b.wire_idx, isExport = _b.isExport;
        var offset = state.ls.getOffset(wire_idx);
        var e = state.ls.sg.wires.get(wire_idx);
        var sloc = state.ls.getLoc(e.src);
        var tloc = state.ls.getLoc(e.tgt);
        var marker = equiv_1.equiv(state.dialogue.selected, Semagram_1.wire_entity(wire_idx))
            ? "url(#arrow-selected)" :
            (equiv_1.equiv(state.cursor.hoveredEntity, Semagram_1.wire_entity(wire_idx))
                ? "url(#arrow-hovered)" : "url(#arrow)");
        var realmarker = isExport ? "url(#arrow)" : marker;
        return mithril_1.default("path", tslib_1.__assign({ d: ArrowUtils_1.svgPath(ArrowUtils_1.curvePoints(sloc, tloc, offset)), stroke: CS.accent, "marker-mid": realmarker, fill: "none" }, state.ls.sg.style_fns[e.ty](e.weights)));
    }
};


/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__extends": () => (/* binding */ __extends),
/* harmony export */   "__assign": () => (/* binding */ __assign),
/* harmony export */   "__rest": () => (/* binding */ __rest),
/* harmony export */   "__decorate": () => (/* binding */ __decorate),
/* harmony export */   "__param": () => (/* binding */ __param),
/* harmony export */   "__metadata": () => (/* binding */ __metadata),
/* harmony export */   "__awaiter": () => (/* binding */ __awaiter),
/* harmony export */   "__generator": () => (/* binding */ __generator),
/* harmony export */   "__createBinding": () => (/* binding */ __createBinding),
/* harmony export */   "__exportStar": () => (/* binding */ __exportStar),
/* harmony export */   "__values": () => (/* binding */ __values),
/* harmony export */   "__read": () => (/* binding */ __read),
/* harmony export */   "__spread": () => (/* binding */ __spread),
/* harmony export */   "__spreadArrays": () => (/* binding */ __spreadArrays),
/* harmony export */   "__spreadArray": () => (/* binding */ __spreadArray),
/* harmony export */   "__await": () => (/* binding */ __await),
/* harmony export */   "__asyncGenerator": () => (/* binding */ __asyncGenerator),
/* harmony export */   "__asyncDelegator": () => (/* binding */ __asyncDelegator),
/* harmony export */   "__asyncValues": () => (/* binding */ __asyncValues),
/* harmony export */   "__makeTemplateObject": () => (/* binding */ __makeTemplateObject),
/* harmony export */   "__importStar": () => (/* binding */ __importStar),
/* harmony export */   "__importDefault": () => (/* binding */ __importDefault),
/* harmony export */   "__classPrivateFieldGet": () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   "__classPrivateFieldSet": () => (/* binding */ __classPrivateFieldSet)
/* harmony export */ });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}


/***/ }),

/***/ "?606e":
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/***/ (() => {

/* (ignored) */

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var exports = __webpack_exports__;
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.main = void 0;
var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/**
 * @module
 */
var Editor_1 = __webpack_require__(/*! ./Editor */ "./src/Editor.ts");
var EditorState_1 = __webpack_require__(/*! ./EditorState */ "./src/EditorState.ts");
var LocatedSemagram_1 = __webpack_require__(/*! ./LocatedSemagram */ "./src/LocatedSemagram.ts");
var mithril_1 = tslib_1.__importDefault(__webpack_require__(/*! mithril */ "./node_modules/mithril/index.js"));
/**
 * The main entrypoint into Semagrams. This makes a new Semagram based on
 * `schema`, a new Editor based on that Semagram that will send its state on save
 * using `sendToJl`, then mounts it to the div with id `divid`
 */
function main(init, context, sendToJl, exportToJl) {
    var state = new EditorState_1.EditorState(LocatedSemagram_1.LocatedSemagram.fromExported(init), sendToJl, exportToJl);
    context.state = state;
    var App = {
        view: function () {
            return mithril_1.default(Editor_1.Editor, { state: state });
        }
    };
    mithril_1.default.mount(context.element, App);
}
exports.main = main;

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,